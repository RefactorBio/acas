/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var $;

	$ = __webpack_require__(3);

	$(function() {
	  var AppRouter;
	  __webpack_require__(4);
	  $ = __webpack_require__(3);
	  AppRouter = __webpack_require__(6).AppRouter;
	  window.appRouter = new AppRouter;
	  return Backbone.history.start();
	});


/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-04-05T19:26Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.3",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {
			var key;

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the 1.x branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(5)();
	// imports


	// module
	exports.push([module.id, ".editorNav {\n  padding-right: 0;\n  padding-bottom: 0;\n  width: 65px;\n}\n\n.editorNavWell {\n  width: 50px;\n  height: 690px;\n  padding: 0;\n  background-color: #E9E9E9;\n}\n\n.editorNavCollapse {\n  margin-left: 5px;\n}\n\n.editorCollapseButton {\n  /*margin-top: 191px;*/\n  margin-top: 335px;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  width: 40px;\n  background-color: #E9E9E9;\n}\n\n.editorCollapseButton:hover, .editorCollapseButton:focus {\n  background-color: #DFDFDF;\n}\n\n.editorTab {\n  /*height: 100px;*/\n}\n\n.editorTab:hover, .editorTab:focus {\n  background-color: #DFDFDF;\n}\n\n.editorTab:active, .editorTab.active {\n  background-color: #DFDFDF;\n}\n\n.editorNavWell a {\n  text-decoration: none;\n}\n\n.rotate {\n  -webkit-transform: rotate(-90deg) !important;\n  -moz-transform: rotate(-90deg) !important;\n  -ms-transform: rotate(-90deg) !important;\n  filter: progid: DXImageTransform.Microsoft.BasicImage(rotation=1) !important;\n}\n\n.editorTabInfo {\n  height: 64px;\n  padding-top: 10px;\n}\n\n.editorTabAddContent {\n  height: 122px;\n  /*padding-top: 50px;*/\n  padding-top: 30px;\n}\n\n.editorTabTemplate {\n  height: 96px;\n  padding-top: 42px;\n}\n\n.editorTabSerialDilution {\n  height: 124px;\n  /*padding-top: 48px;*/\n  padding-top: 32px;\n}\n\n.editorTabInfoLink {\n  /*width: 50px;\n  padding-bottom: 50px;*/\n}\n\n.editorTabAddContentLink {\n  width: 85px;\n  padding-bottom: 35px;\n  /*\n  z-index: -1;\n  */\n}\n\n.editorTabTemplateLink {\n  /*width: 100px;\n  padding-bottom: 100px;*/\n  /*\n  z-index: -1;\n  */\n}\n\n.editorTabSerialDilutionLink {\n  width: 90px;\n  padding-bottom: 35px;\n  /*\n  z-index: -1;\n  */\n}\n\n.editorPanel {\n  padding: 0;\n  width: 250px;\n}\n\n.editorPanelWell {\n  height: 690px;\n}\n\n.editorPanel h5 {\n  margin-top: 0;\n  margin-bottom: 15px;\n}\n\n.editorTabHelpIcon {\n  color: #CFCFCF;\n  font-size: 16px !important;\n}\n\n.quadPinButton {\n  width: 220px;\n}\n\n.quadPinIcon {\n  margin-left: 2px;\n}\n\n.downloadCSVButton {\n  margin-right: 5px;\n  width: 149px;\n}\n\n.editorTabTextarea {\n  resize: none;\n}\n\n.editorTabRadio {\n  margin-top: 3px !important;\n}\n\n.editorTabLabelSpecial {\n  margin-bottom: 10px;\n}\n\n.editorTabLabelDirection {\n  margin-bottom: 0;\n}\n\n.addContentTotal {\n  font-weight: bold;\n}\n\n.cellsSelected {\n  font-weight: bold;\n}\n\n.templateHeader {\n  width: 100px;\n}\n\n.editorTabSeq {\n  width: 222px;\n  height: 34px;\n  margin-bottom: 10px;\n}\n\n.editorTabSeqIDs {\n  width: 94px;\n}\n\n.editorTabSeqIDsTo {\n  margin-top: 7px;\n  margin-right: 10px;\n  margin-left: 10px;\n}\n\n.editorTabFillSuboption {\n  margin-left: 15px;\n}\n\n.editorTabNumOfDoses {\n  width: 59px;\n  margin-right: 10px;\n}\n\n.editorTabVolRadio {\n  margin-top: 57px;\n}\n\n.editorTabTransferVol {\n  width: 195px;\n  margin-left: 5px;\n}\n\n.editorTabDestinationWellVol {\n  width: 195px;\n  margin-left: 5px;\n}\n\n.editorTabOr {\n  margin-bottom: 10px;\n}\n\n.editorTabDilutionFactor {\n  width: 195px;\n  margin-left: 5px;\n}\n\n.editorMain {\n  padding-left: 0;\n  margin-left: 320px;\n}\n\n.toolbarWell {\n  background-color: #E9E9E9;\n  width: 950px;\n  padding: 10px;\n}\n\n.toolbarButtons {\n  /*margin-right: 10px;*/\n}\n\n.toolbarViewButton {\n  width: 175px;\n}\n\n.toolbarViewButtonSmall {\n  width: 62px;\n}\n\n.toolbarSmallText {\n  font-size: 10px;\n  padding-top: 9px;\n  padding-bottom: 9px;\n}\n\n.editorHandsontable {\n  margin-left: 0px;\n  padding: 0;\n  background-color: #ffffff;\n  overflow: hidden;\n  /*width: 800px;*/\n  /*height: 600px;*/\n}\n\n\n.tabSelected {\n  background-color: #fafafa !important;\n}\n\n.aliasedIdentifierCell {\n  background-color: #fcf8e3 !important;\n  border: solid 1px yellow;\n}\n\n.invalidIdentifierCell {\n  background-color: #a94442 !important;\n  border: solid 1px red;\n}", ""]);

	// exports


/***/ },
/* 5 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var AppController, AppRouter, Backbone, appController,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	AppController = __webpack_require__(9).AppController;

	appController = new AppController();

	$("#app-container").html(appController.render().el);

	appController.completeInitialization();

	AppRouter = (function(superClass) {
	  extend(AppRouter, superClass);

	  function AppRouter() {
	    return AppRouter.__super__.constructor.apply(this, arguments);
	  }

	  AppRouter.prototype.routes = {
	    "": "createPlateRoute",
	    "createPlate": "createPlateRoute",
	    "plateDesign/:plateCodeName": "plateDesignRoute",
	    "plateSearch": "plateSearchRoute"
	  };

	  AppRouter.prototype.plateDesignRoute = function(plateBarcode) {
	    return appController.displayPlateDesignForm(plateBarcode);
	  };

	  AppRouter.prototype.createPlateRoute = function() {
	    return appController.displayCreatePlateForm();
	  };

	  AppRouter.prototype.plateSearchRoute = function() {
	    return appController.displayPlateSearch();
	  };

	  return AppRouter;

	})(Backbone.Router);

	module.exports = {
	  AppRouter: AppRouter
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {//     Backbone.js 1.3.3

	//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Backbone may be freely distributed under the MIT license.
	//     For all details and documentation:
	//     http://backbonejs.org

	(function(factory) {

	  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
	  // We use `self` instead of `window` for `WebWorker` support.
	  var root = (typeof self == 'object' && self.self === self && self) ||
	            (typeof global == 'object' && global.global === global && global);

	  // Set up Backbone appropriately for the environment. Start with AMD.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(3), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, $, exports) {
	      // Export global even in AMD case in case this script is loaded with
	      // others that may still expect a global Backbone.
	      root.Backbone = factory(root, exports, _, $);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
	  } else if (typeof exports !== 'undefined') {
	    var _ = require('underscore'), $;
	    try { $ = require('jquery'); } catch (e) {}
	    factory(root, exports, _, $);

	  // Finally, as a browser global.
	  } else {
	    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
	  }

	})(function(root, Backbone, _, $) {

	  // Initial Setup
	  // -------------

	  // Save the previous value of the `Backbone` variable, so that it can be
	  // restored later on, if `noConflict` is used.
	  var previousBackbone = root.Backbone;

	  // Create a local reference to a common array method we'll want to use later.
	  var slice = Array.prototype.slice;

	  // Current version of the library. Keep in sync with `package.json`.
	  Backbone.VERSION = '1.3.3';

	  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
	  // the `$` variable.
	  Backbone.$ = $;

	  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
	  // to its previous owner. Returns a reference to this Backbone object.
	  Backbone.noConflict = function() {
	    root.Backbone = previousBackbone;
	    return this;
	  };

	  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
	  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
	  // set a `X-Http-Method-Override` header.
	  Backbone.emulateHTTP = false;

	  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
	  // `application/json` requests ... this will encode the body as
	  // `application/x-www-form-urlencoded` instead and will send the model in a
	  // form param named `model`.
	  Backbone.emulateJSON = false;

	  // Proxy Backbone class methods to Underscore functions, wrapping the model's
	  // `attributes` object or collection's `models` array behind the scenes.
	  //
	  // collection.filter(function(model) { return model.get('age') > 10 });
	  // collection.each(this.addView);
	  //
	  // `Function#apply` can be slow so we use the method's arg count, if we know it.
	  var addMethod = function(length, method, attribute) {
	    switch (length) {
	      case 1: return function() {
	        return _[method](this[attribute]);
	      };
	      case 2: return function(value) {
	        return _[method](this[attribute], value);
	      };
	      case 3: return function(iteratee, context) {
	        return _[method](this[attribute], cb(iteratee, this), context);
	      };
	      case 4: return function(iteratee, defaultVal, context) {
	        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);
	      };
	      default: return function() {
	        var args = slice.call(arguments);
	        args.unshift(this[attribute]);
	        return _[method].apply(_, args);
	      };
	    }
	  };
	  var addUnderscoreMethods = function(Class, methods, attribute) {
	    _.each(methods, function(length, method) {
	      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
	    });
	  };

	  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.
	  var cb = function(iteratee, instance) {
	    if (_.isFunction(iteratee)) return iteratee;
	    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
	    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };
	    return iteratee;
	  };
	  var modelMatcher = function(attrs) {
	    var matcher = _.matches(attrs);
	    return function(model) {
	      return matcher(model.attributes);
	    };
	  };

	  // Backbone.Events
	  // ---------------

	  // A module that can be mixed in to *any object* in order to provide it with
	  // a custom event channel. You may bind a callback to an event with `on` or
	  // remove with `off`; `trigger`-ing an event fires all callbacks in
	  // succession.
	  //
	  //     var object = {};
	  //     _.extend(object, Backbone.Events);
	  //     object.on('expand', function(){ alert('expanded'); });
	  //     object.trigger('expand');
	  //
	  var Events = Backbone.Events = {};

	  // Regular expression used to split event strings.
	  var eventSplitter = /\s+/;

	  // Iterates over the standard `event, callback` (as well as the fancy multiple
	  // space-separated events `"change blur", callback` and jQuery-style event
	  // maps `{event: callback}`).
	  var eventsApi = function(iteratee, events, name, callback, opts) {
	    var i = 0, names;
	    if (name && typeof name === 'object') {
	      // Handle event maps.
	      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
	      for (names = _.keys(name); i < names.length ; i++) {
	        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
	      }
	    } else if (name && eventSplitter.test(name)) {
	      // Handle space-separated event names by delegating them individually.
	      for (names = name.split(eventSplitter); i < names.length; i++) {
	        events = iteratee(events, names[i], callback, opts);
	      }
	    } else {
	      // Finally, standard events.
	      events = iteratee(events, name, callback, opts);
	    }
	    return events;
	  };

	  // Bind an event to a `callback` function. Passing `"all"` will bind
	  // the callback to all events fired.
	  Events.on = function(name, callback, context) {
	    return internalOn(this, name, callback, context);
	  };

	  // Guard the `listening` argument from the public API.
	  var internalOn = function(obj, name, callback, context, listening) {
	    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
	      context: context,
	      ctx: obj,
	      listening: listening
	    });

	    if (listening) {
	      var listeners = obj._listeners || (obj._listeners = {});
	      listeners[listening.id] = listening;
	    }

	    return obj;
	  };

	  // Inversion-of-control versions of `on`. Tell *this* object to listen to
	  // an event in another object... keeping track of what it's listening to
	  // for easier unbinding later.
	  Events.listenTo = function(obj, name, callback) {
	    if (!obj) return this;
	    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
	    var listeningTo = this._listeningTo || (this._listeningTo = {});
	    var listening = listeningTo[id];

	    // This object is not listening to any other events on `obj` yet.
	    // Setup the necessary references to track the listening callbacks.
	    if (!listening) {
	      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
	      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
	    }

	    // Bind callbacks on obj, and keep track of them on listening.
	    internalOn(obj, name, callback, this, listening);
	    return this;
	  };

	  // The reducing API that adds a callback to the `events` object.
	  var onApi = function(events, name, callback, options) {
	    if (callback) {
	      var handlers = events[name] || (events[name] = []);
	      var context = options.context, ctx = options.ctx, listening = options.listening;
	      if (listening) listening.count++;

	      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});
	    }
	    return events;
	  };

	  // Remove one or many callbacks. If `context` is null, removes all
	  // callbacks with that function. If `callback` is null, removes all
	  // callbacks for the event. If `name` is null, removes all bound
	  // callbacks for all events.
	  Events.off = function(name, callback, context) {
	    if (!this._events) return this;
	    this._events = eventsApi(offApi, this._events, name, callback, {
	      context: context,
	      listeners: this._listeners
	    });
	    return this;
	  };

	  // Tell this object to stop listening to either specific events ... or
	  // to every object it's currently listening to.
	  Events.stopListening = function(obj, name, callback) {
	    var listeningTo = this._listeningTo;
	    if (!listeningTo) return this;

	    var ids = obj ? [obj._listenId] : _.keys(listeningTo);

	    for (var i = 0; i < ids.length; i++) {
	      var listening = listeningTo[ids[i]];

	      // If listening doesn't exist, this object is not currently
	      // listening to obj. Break out early.
	      if (!listening) break;

	      listening.obj.off(name, callback, this);
	    }

	    return this;
	  };

	  // The reducing API that removes a callback from the `events` object.
	  var offApi = function(events, name, callback, options) {
	    if (!events) return;

	    var i = 0, listening;
	    var context = options.context, listeners = options.listeners;

	    // Delete all events listeners and "drop" events.
	    if (!name && !callback && !context) {
	      var ids = _.keys(listeners);
	      for (; i < ids.length; i++) {
	        listening = listeners[ids[i]];
	        delete listeners[listening.id];
	        delete listening.listeningTo[listening.objId];
	      }
	      return;
	    }

	    var names = name ? [name] : _.keys(events);
	    for (; i < names.length; i++) {
	      name = names[i];
	      var handlers = events[name];

	      // Bail out if there are no events stored.
	      if (!handlers) break;

	      // Replace events if there are any remaining.  Otherwise, clean up.
	      var remaining = [];
	      for (var j = 0; j < handlers.length; j++) {
	        var handler = handlers[j];
	        if (
	          callback && callback !== handler.callback &&
	            callback !== handler.callback._callback ||
	              context && context !== handler.context
	        ) {
	          remaining.push(handler);
	        } else {
	          listening = handler.listening;
	          if (listening && --listening.count === 0) {
	            delete listeners[listening.id];
	            delete listening.listeningTo[listening.objId];
	          }
	        }
	      }

	      // Update tail event if the list has any events.  Otherwise, clean up.
	      if (remaining.length) {
	        events[name] = remaining;
	      } else {
	        delete events[name];
	      }
	    }
	    return events;
	  };

	  // Bind an event to only be triggered a single time. After the first time
	  // the callback is invoked, its listener will be removed. If multiple events
	  // are passed in using the space-separated syntax, the handler will fire
	  // once for each event, not once for a combination of all events.
	  Events.once = function(name, callback, context) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
	    if (typeof name === 'string' && context == null) callback = void 0;
	    return this.on(events, callback, context);
	  };

	  // Inversion-of-control versions of `once`.
	  Events.listenToOnce = function(obj, name, callback) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
	    return this.listenTo(obj, events);
	  };

	  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
	  // `offer` unbinds the `onceWrapper` after it has been called.
	  var onceMap = function(map, name, callback, offer) {
	    if (callback) {
	      var once = map[name] = _.once(function() {
	        offer(name, once);
	        callback.apply(this, arguments);
	      });
	      once._callback = callback;
	    }
	    return map;
	  };

	  // Trigger one or many events, firing all bound callbacks. Callbacks are
	  // passed the same arguments as `trigger` is, apart from the event name
	  // (unless you're listening on `"all"`, which will cause your callback to
	  // receive the true name of the event as the first argument).
	  Events.trigger = function(name) {
	    if (!this._events) return this;

	    var length = Math.max(0, arguments.length - 1);
	    var args = Array(length);
	    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];

	    eventsApi(triggerApi, this._events, name, void 0, args);
	    return this;
	  };

	  // Handles triggering the appropriate event callbacks.
	  var triggerApi = function(objEvents, name, callback, args) {
	    if (objEvents) {
	      var events = objEvents[name];
	      var allEvents = objEvents.all;
	      if (events && allEvents) allEvents = allEvents.slice();
	      if (events) triggerEvents(events, args);
	      if (allEvents) triggerEvents(allEvents, [name].concat(args));
	    }
	    return objEvents;
	  };

	  // A difficult-to-believe, but optimized internal dispatch function for
	  // triggering events. Tries to keep the usual cases speedy (most internal
	  // Backbone events have 3 arguments).
	  var triggerEvents = function(events, args) {
	    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
	    switch (args.length) {
	      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
	      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
	      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
	      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
	      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
	    }
	  };

	  // Aliases for backwards compatibility.
	  Events.bind   = Events.on;
	  Events.unbind = Events.off;

	  // Allow the `Backbone` object to serve as a global event bus, for folks who
	  // want global "pubsub" in a convenient place.
	  _.extend(Backbone, Events);

	  // Backbone.Model
	  // --------------

	  // Backbone **Models** are the basic data object in the framework --
	  // frequently representing a row in a table in a database on your server.
	  // A discrete chunk of data and a bunch of useful, related methods for
	  // performing computations and transformations on that data.

	  // Create a new model with the specified attributes. A client id (`cid`)
	  // is automatically generated and assigned for you.
	  var Model = Backbone.Model = function(attributes, options) {
	    var attrs = attributes || {};
	    options || (options = {});
	    this.cid = _.uniqueId(this.cidPrefix);
	    this.attributes = {};
	    if (options.collection) this.collection = options.collection;
	    if (options.parse) attrs = this.parse(attrs, options) || {};
	    var defaults = _.result(this, 'defaults');
	    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);
	    this.set(attrs, options);
	    this.changed = {};
	    this.initialize.apply(this, arguments);
	  };

	  // Attach all inheritable methods to the Model prototype.
	  _.extend(Model.prototype, Events, {

	    // A hash of attributes whose current and previous value differ.
	    changed: null,

	    // The value returned during the last failed validation.
	    validationError: null,

	    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
	    // CouchDB users may want to set this to `"_id"`.
	    idAttribute: 'id',

	    // The prefix is used to create the client id which is used to identify models locally.
	    // You may want to override this if you're experiencing name clashes with model ids.
	    cidPrefix: 'c',

	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},

	    // Return a copy of the model's `attributes` object.
	    toJSON: function(options) {
	      return _.clone(this.attributes);
	    },

	    // Proxy `Backbone.sync` by default -- but override this if you need
	    // custom syncing semantics for *this* particular model.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },

	    // Get the value of an attribute.
	    get: function(attr) {
	      return this.attributes[attr];
	    },

	    // Get the HTML-escaped value of an attribute.
	    escape: function(attr) {
	      return _.escape(this.get(attr));
	    },

	    // Returns `true` if the attribute contains a value that is not null
	    // or undefined.
	    has: function(attr) {
	      return this.get(attr) != null;
	    },

	    // Special-cased proxy to underscore's `_.matches` method.
	    matches: function(attrs) {
	      return !!_.iteratee(attrs, this)(this.attributes);
	    },

	    // Set a hash of model attributes on the object, firing `"change"`. This is
	    // the core primitive operation of a model, updating the data and notifying
	    // anyone who needs to know about the change in state. The heart of the beast.
	    set: function(key, val, options) {
	      if (key == null) return this;

	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }

	      options || (options = {});

	      // Run validation.
	      if (!this._validate(attrs, options)) return false;

	      // Extract attributes and options.
	      var unset      = options.unset;
	      var silent     = options.silent;
	      var changes    = [];
	      var changing   = this._changing;
	      this._changing = true;

	      if (!changing) {
	        this._previousAttributes = _.clone(this.attributes);
	        this.changed = {};
	      }

	      var current = this.attributes;
	      var changed = this.changed;
	      var prev    = this._previousAttributes;

	      // For each `set` attribute, update or delete the current value.
	      for (var attr in attrs) {
	        val = attrs[attr];
	        if (!_.isEqual(current[attr], val)) changes.push(attr);
	        if (!_.isEqual(prev[attr], val)) {
	          changed[attr] = val;
	        } else {
	          delete changed[attr];
	        }
	        unset ? delete current[attr] : current[attr] = val;
	      }

	      // Update the `id`.
	      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);

	      // Trigger all relevant attribute changes.
	      if (!silent) {
	        if (changes.length) this._pending = options;
	        for (var i = 0; i < changes.length; i++) {
	          this.trigger('change:' + changes[i], this, current[changes[i]], options);
	        }
	      }

	      // You might be wondering why there's a `while` loop here. Changes can
	      // be recursively nested within `"change"` events.
	      if (changing) return this;
	      if (!silent) {
	        while (this._pending) {
	          options = this._pending;
	          this._pending = false;
	          this.trigger('change', this, options);
	        }
	      }
	      this._pending = false;
	      this._changing = false;
	      return this;
	    },

	    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
	    // if the attribute doesn't exist.
	    unset: function(attr, options) {
	      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
	    },

	    // Clear all attributes on the model, firing `"change"`.
	    clear: function(options) {
	      var attrs = {};
	      for (var key in this.attributes) attrs[key] = void 0;
	      return this.set(attrs, _.extend({}, options, {unset: true}));
	    },

	    // Determine if the model has changed since the last `"change"` event.
	    // If you specify an attribute name, determine if that attribute has changed.
	    hasChanged: function(attr) {
	      if (attr == null) return !_.isEmpty(this.changed);
	      return _.has(this.changed, attr);
	    },

	    // Return an object containing all the attributes that have changed, or
	    // false if there are no changed attributes. Useful for determining what
	    // parts of a view need to be updated and/or what attributes need to be
	    // persisted to the server. Unset attributes will be set to undefined.
	    // You can also pass an attributes object to diff against the model,
	    // determining if there *would be* a change.
	    changedAttributes: function(diff) {
	      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
	      var old = this._changing ? this._previousAttributes : this.attributes;
	      var changed = {};
	      for (var attr in diff) {
	        var val = diff[attr];
	        if (_.isEqual(old[attr], val)) continue;
	        changed[attr] = val;
	      }
	      return _.size(changed) ? changed : false;
	    },

	    // Get the previous value of an attribute, recorded at the time the last
	    // `"change"` event was fired.
	    previous: function(attr) {
	      if (attr == null || !this._previousAttributes) return null;
	      return this._previousAttributes[attr];
	    },

	    // Get all of the attributes of the model at the time of the previous
	    // `"change"` event.
	    previousAttributes: function() {
	      return _.clone(this._previousAttributes);
	    },

	    // Fetch the model from the server, merging the response with the model's
	    // local attributes. Any changed attributes will trigger a "change" event.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var model = this;
	      var success = options.success;
	      options.success = function(resp) {
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (!model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },

	    // Set a hash of model attributes, and sync the model to the server.
	    // If the server returns an attributes hash that differs, the model's
	    // state will be `set` again.
	    save: function(key, val, options) {
	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (key == null || typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }

	      options = _.extend({validate: true, parse: true}, options);
	      var wait = options.wait;

	      // If we're not waiting and attributes exist, save acts as
	      // `set(attr).save(null, opts)` with validation. Otherwise, check if
	      // the model will be valid when the attributes, if any, are set.
	      if (attrs && !wait) {
	        if (!this.set(attrs, options)) return false;
	      } else if (!this._validate(attrs, options)) {
	        return false;
	      }

	      // After a successful server-side save, the client is (optionally)
	      // updated with the server-side state.
	      var model = this;
	      var success = options.success;
	      var attributes = this.attributes;
	      options.success = function(resp) {
	        // Ensure attributes are restored during synchronous saves.
	        model.attributes = attributes;
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
	        if (serverAttrs && !model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);

	      // Set temporary attributes if `{wait: true}` to properly find new ids.
	      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);

	      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
	      if (method === 'patch' && !options.attrs) options.attrs = attrs;
	      var xhr = this.sync(method, this, options);

	      // Restore attributes.
	      this.attributes = attributes;

	      return xhr;
	    },

	    // Destroy this model on the server if it was already persisted.
	    // Optimistically removes the model from its collection, if it has one.
	    // If `wait: true` is passed, waits for the server to respond before removal.
	    destroy: function(options) {
	      options = options ? _.clone(options) : {};
	      var model = this;
	      var success = options.success;
	      var wait = options.wait;

	      var destroy = function() {
	        model.stopListening();
	        model.trigger('destroy', model, model.collection, options);
	      };

	      options.success = function(resp) {
	        if (wait) destroy();
	        if (success) success.call(options.context, model, resp, options);
	        if (!model.isNew()) model.trigger('sync', model, resp, options);
	      };

	      var xhr = false;
	      if (this.isNew()) {
	        _.defer(options.success);
	      } else {
	        wrapError(this, options);
	        xhr = this.sync('delete', this, options);
	      }
	      if (!wait) destroy();
	      return xhr;
	    },

	    // Default URL for the model's representation on the server -- if you're
	    // using Backbone's restful methods, override this to change the endpoint
	    // that will be called.
	    url: function() {
	      var base =
	        _.result(this, 'urlRoot') ||
	        _.result(this.collection, 'url') ||
	        urlError();
	      if (this.isNew()) return base;
	      var id = this.get(this.idAttribute);
	      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
	    },

	    // **parse** converts a response into the hash of attributes to be `set` on
	    // the model. The default implementation is just to pass the response along.
	    parse: function(resp, options) {
	      return resp;
	    },

	    // Create a new model with identical attributes to this one.
	    clone: function() {
	      return new this.constructor(this.attributes);
	    },

	    // A model is new if it has never been saved to the server, and lacks an id.
	    isNew: function() {
	      return !this.has(this.idAttribute);
	    },

	    // Check if the model is currently in a valid state.
	    isValid: function(options) {
	      return this._validate({}, _.extend({}, options, {validate: true}));
	    },

	    // Run validation against the next complete set of model attributes,
	    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
	    _validate: function(attrs, options) {
	      if (!options.validate || !this.validate) return true;
	      attrs = _.extend({}, this.attributes, attrs);
	      var error = this.validationError = this.validate(attrs, options) || null;
	      if (!error) return true;
	      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
	      return false;
	    }

	  });

	  // Underscore methods that we want to implement on the Model, mapped to the
	  // number of arguments they take.
	  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
	      omit: 0, chain: 1, isEmpty: 1};

	  // Mix in each Underscore method as a proxy to `Model#attributes`.
	  addUnderscoreMethods(Model, modelMethods, 'attributes');

	  // Backbone.Collection
	  // -------------------

	  // If models tend to represent a single row of data, a Backbone Collection is
	  // more analogous to a table full of data ... or a small slice or page of that
	  // table, or a collection of rows that belong together for a particular reason
	  // -- all of the messages in this particular folder, all of the documents
	  // belonging to this particular author, and so on. Collections maintain
	  // indexes of their models, both in order, and for lookup by `id`.

	  // Create a new **Collection**, perhaps to contain a specific type of `model`.
	  // If a `comparator` is specified, the Collection will maintain
	  // its models in sort order, as they're added and removed.
	  var Collection = Backbone.Collection = function(models, options) {
	    options || (options = {});
	    if (options.model) this.model = options.model;
	    if (options.comparator !== void 0) this.comparator = options.comparator;
	    this._reset();
	    this.initialize.apply(this, arguments);
	    if (models) this.reset(models, _.extend({silent: true}, options));
	  };

	  // Default options for `Collection#set`.
	  var setOptions = {add: true, remove: true, merge: true};
	  var addOptions = {add: true, remove: false};

	  // Splices `insert` into `array` at index `at`.
	  var splice = function(array, insert, at) {
	    at = Math.min(Math.max(at, 0), array.length);
	    var tail = Array(array.length - at);
	    var length = insert.length;
	    var i;
	    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];
	    for (i = 0; i < length; i++) array[i + at] = insert[i];
	    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
	  };

	  // Define the Collection's inheritable methods.
	  _.extend(Collection.prototype, Events, {

	    // The default model for a collection is just a **Backbone.Model**.
	    // This should be overridden in most cases.
	    model: Model,

	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},

	    // The JSON representation of a Collection is an array of the
	    // models' attributes.
	    toJSON: function(options) {
	      return this.map(function(model) { return model.toJSON(options); });
	    },

	    // Proxy `Backbone.sync` by default.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },

	    // Add a model, or list of models to the set. `models` may be Backbone
	    // Models or raw JavaScript objects to be converted to Models, or any
	    // combination of the two.
	    add: function(models, options) {
	      return this.set(models, _.extend({merge: false}, options, addOptions));
	    },

	    // Remove a model, or a list of models from the set.
	    remove: function(models, options) {
	      options = _.extend({}, options);
	      var singular = !_.isArray(models);
	      models = singular ? [models] : models.slice();
	      var removed = this._removeModels(models, options);
	      if (!options.silent && removed.length) {
	        options.changes = {added: [], merged: [], removed: removed};
	        this.trigger('update', this, options);
	      }
	      return singular ? removed[0] : removed;
	    },

	    // Update a collection by `set`-ing a new list of models, adding new ones,
	    // removing models that are no longer present, and merging models that
	    // already exist in the collection, as necessary. Similar to **Model#set**,
	    // the core operation for updating the data contained by the collection.
	    set: function(models, options) {
	      if (models == null) return;

	      options = _.extend({}, setOptions, options);
	      if (options.parse && !this._isModel(models)) {
	        models = this.parse(models, options) || [];
	      }

	      var singular = !_.isArray(models);
	      models = singular ? [models] : models.slice();

	      var at = options.at;
	      if (at != null) at = +at;
	      if (at > this.length) at = this.length;
	      if (at < 0) at += this.length + 1;

	      var set = [];
	      var toAdd = [];
	      var toMerge = [];
	      var toRemove = [];
	      var modelMap = {};

	      var add = options.add;
	      var merge = options.merge;
	      var remove = options.remove;

	      var sort = false;
	      var sortable = this.comparator && at == null && options.sort !== false;
	      var sortAttr = _.isString(this.comparator) ? this.comparator : null;

	      // Turn bare objects into model references, and prevent invalid models
	      // from being added.
	      var model, i;
	      for (i = 0; i < models.length; i++) {
	        model = models[i];

	        // If a duplicate is found, prevent it from being added and
	        // optionally merge it into the existing model.
	        var existing = this.get(model);
	        if (existing) {
	          if (merge && model !== existing) {
	            var attrs = this._isModel(model) ? model.attributes : model;
	            if (options.parse) attrs = existing.parse(attrs, options);
	            existing.set(attrs, options);
	            toMerge.push(existing);
	            if (sortable && !sort) sort = existing.hasChanged(sortAttr);
	          }
	          if (!modelMap[existing.cid]) {
	            modelMap[existing.cid] = true;
	            set.push(existing);
	          }
	          models[i] = existing;

	        // If this is a new, valid model, push it to the `toAdd` list.
	        } else if (add) {
	          model = models[i] = this._prepareModel(model, options);
	          if (model) {
	            toAdd.push(model);
	            this._addReference(model, options);
	            modelMap[model.cid] = true;
	            set.push(model);
	          }
	        }
	      }

	      // Remove stale models.
	      if (remove) {
	        for (i = 0; i < this.length; i++) {
	          model = this.models[i];
	          if (!modelMap[model.cid]) toRemove.push(model);
	        }
	        if (toRemove.length) this._removeModels(toRemove, options);
	      }

	      // See if sorting is needed, update `length` and splice in new models.
	      var orderChanged = false;
	      var replace = !sortable && add && remove;
	      if (set.length && replace) {
	        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {
	          return m !== set[index];
	        });
	        this.models.length = 0;
	        splice(this.models, set, 0);
	        this.length = this.models.length;
	      } else if (toAdd.length) {
	        if (sortable) sort = true;
	        splice(this.models, toAdd, at == null ? this.length : at);
	        this.length = this.models.length;
	      }

	      // Silently sort the collection if appropriate.
	      if (sort) this.sort({silent: true});

	      // Unless silenced, it's time to fire all appropriate add/sort/update events.
	      if (!options.silent) {
	        for (i = 0; i < toAdd.length; i++) {
	          if (at != null) options.index = at + i;
	          model = toAdd[i];
	          model.trigger('add', model, this, options);
	        }
	        if (sort || orderChanged) this.trigger('sort', this, options);
	        if (toAdd.length || toRemove.length || toMerge.length) {
	          options.changes = {
	            added: toAdd,
	            removed: toRemove,
	            merged: toMerge
	          };
	          this.trigger('update', this, options);
	        }
	      }

	      // Return the added (or merged) model (or models).
	      return singular ? models[0] : models;
	    },

	    // When you have more items than you want to add or remove individually,
	    // you can reset the entire set with a new list of models, without firing
	    // any granular `add` or `remove` events. Fires `reset` when finished.
	    // Useful for bulk operations and optimizations.
	    reset: function(models, options) {
	      options = options ? _.clone(options) : {};
	      for (var i = 0; i < this.models.length; i++) {
	        this._removeReference(this.models[i], options);
	      }
	      options.previousModels = this.models;
	      this._reset();
	      models = this.add(models, _.extend({silent: true}, options));
	      if (!options.silent) this.trigger('reset', this, options);
	      return models;
	    },

	    // Add a model to the end of the collection.
	    push: function(model, options) {
	      return this.add(model, _.extend({at: this.length}, options));
	    },

	    // Remove a model from the end of the collection.
	    pop: function(options) {
	      var model = this.at(this.length - 1);
	      return this.remove(model, options);
	    },

	    // Add a model to the beginning of the collection.
	    unshift: function(model, options) {
	      return this.add(model, _.extend({at: 0}, options));
	    },

	    // Remove a model from the beginning of the collection.
	    shift: function(options) {
	      var model = this.at(0);
	      return this.remove(model, options);
	    },

	    // Slice out a sub-array of models from the collection.
	    slice: function() {
	      return slice.apply(this.models, arguments);
	    },

	    // Get a model from the set by id, cid, model object with id or cid
	    // properties, or an attributes object that is transformed through modelId.
	    get: function(obj) {
	      if (obj == null) return void 0;
	      return this._byId[obj] ||
	        this._byId[this.modelId(obj.attributes || obj)] ||
	        obj.cid && this._byId[obj.cid];
	    },

	    // Returns `true` if the model is in the collection.
	    has: function(obj) {
	      return this.get(obj) != null;
	    },

	    // Get the model at the given index.
	    at: function(index) {
	      if (index < 0) index += this.length;
	      return this.models[index];
	    },

	    // Return models with matching attributes. Useful for simple cases of
	    // `filter`.
	    where: function(attrs, first) {
	      return this[first ? 'find' : 'filter'](attrs);
	    },

	    // Return the first model with matching attributes. Useful for simple cases
	    // of `find`.
	    findWhere: function(attrs) {
	      return this.where(attrs, true);
	    },

	    // Force the collection to re-sort itself. You don't need to call this under
	    // normal circumstances, as the set will maintain sort order as each item
	    // is added.
	    sort: function(options) {
	      var comparator = this.comparator;
	      if (!comparator) throw new Error('Cannot sort a set without a comparator');
	      options || (options = {});

	      var length = comparator.length;
	      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);

	      // Run sort based on type of `comparator`.
	      if (length === 1 || _.isString(comparator)) {
	        this.models = this.sortBy(comparator);
	      } else {
	        this.models.sort(comparator);
	      }
	      if (!options.silent) this.trigger('sort', this, options);
	      return this;
	    },

	    // Pluck an attribute from each model in the collection.
	    pluck: function(attr) {
	      return this.map(attr + '');
	    },

	    // Fetch the default set of models for this collection, resetting the
	    // collection when they arrive. If `reset: true` is passed, the response
	    // data will be passed through the `reset` method instead of `set`.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var success = options.success;
	      var collection = this;
	      options.success = function(resp) {
	        var method = options.reset ? 'reset' : 'set';
	        collection[method](resp, options);
	        if (success) success.call(options.context, collection, resp, options);
	        collection.trigger('sync', collection, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },

	    // Create a new instance of a model in this collection. Add the model to the
	    // collection immediately, unless `wait: true` is passed, in which case we
	    // wait for the server to agree.
	    create: function(model, options) {
	      options = options ? _.clone(options) : {};
	      var wait = options.wait;
	      model = this._prepareModel(model, options);
	      if (!model) return false;
	      if (!wait) this.add(model, options);
	      var collection = this;
	      var success = options.success;
	      options.success = function(m, resp, callbackOpts) {
	        if (wait) collection.add(m, callbackOpts);
	        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);
	      };
	      model.save(null, options);
	      return model;
	    },

	    // **parse** converts a response into a list of models to be added to the
	    // collection. The default implementation is just to pass it through.
	    parse: function(resp, options) {
	      return resp;
	    },

	    // Create a new collection with an identical list of models as this one.
	    clone: function() {
	      return new this.constructor(this.models, {
	        model: this.model,
	        comparator: this.comparator
	      });
	    },

	    // Define how to uniquely identify models in the collection.
	    modelId: function(attrs) {
	      return attrs[this.model.prototype.idAttribute || 'id'];
	    },

	    // Private method to reset all internal state. Called when the collection
	    // is first initialized or reset.
	    _reset: function() {
	      this.length = 0;
	      this.models = [];
	      this._byId  = {};
	    },

	    // Prepare a hash of attributes (or other model) to be added to this
	    // collection.
	    _prepareModel: function(attrs, options) {
	      if (this._isModel(attrs)) {
	        if (!attrs.collection) attrs.collection = this;
	        return attrs;
	      }
	      options = options ? _.clone(options) : {};
	      options.collection = this;
	      var model = new this.model(attrs, options);
	      if (!model.validationError) return model;
	      this.trigger('invalid', this, model.validationError, options);
	      return false;
	    },

	    // Internal method called by both remove and set.
	    _removeModels: function(models, options) {
	      var removed = [];
	      for (var i = 0; i < models.length; i++) {
	        var model = this.get(models[i]);
	        if (!model) continue;

	        var index = this.indexOf(model);
	        this.models.splice(index, 1);
	        this.length--;

	        // Remove references before triggering 'remove' event to prevent an
	        // infinite loop. #3693
	        delete this._byId[model.cid];
	        var id = this.modelId(model.attributes);
	        if (id != null) delete this._byId[id];

	        if (!options.silent) {
	          options.index = index;
	          model.trigger('remove', model, this, options);
	        }

	        removed.push(model);
	        this._removeReference(model, options);
	      }
	      return removed;
	    },

	    // Method for checking whether an object should be considered a model for
	    // the purposes of adding to the collection.
	    _isModel: function(model) {
	      return model instanceof Model;
	    },

	    // Internal method to create a model's ties to a collection.
	    _addReference: function(model, options) {
	      this._byId[model.cid] = model;
	      var id = this.modelId(model.attributes);
	      if (id != null) this._byId[id] = model;
	      model.on('all', this._onModelEvent, this);
	    },

	    // Internal method to sever a model's ties to a collection.
	    _removeReference: function(model, options) {
	      delete this._byId[model.cid];
	      var id = this.modelId(model.attributes);
	      if (id != null) delete this._byId[id];
	      if (this === model.collection) delete model.collection;
	      model.off('all', this._onModelEvent, this);
	    },

	    // Internal method called every time a model in the set fires an event.
	    // Sets need to update their indexes when models change ids. All other
	    // events simply proxy through. "add" and "remove" events that originate
	    // in other collections are ignored.
	    _onModelEvent: function(event, model, collection, options) {
	      if (model) {
	        if ((event === 'add' || event === 'remove') && collection !== this) return;
	        if (event === 'destroy') this.remove(model, options);
	        if (event === 'change') {
	          var prevId = this.modelId(model.previousAttributes());
	          var id = this.modelId(model.attributes);
	          if (prevId !== id) {
	            if (prevId != null) delete this._byId[prevId];
	            if (id != null) this._byId[id] = model;
	          }
	        }
	      }
	      this.trigger.apply(this, arguments);
	    }

	  });

	  // Underscore methods that we want to implement on the Collection.
	  // 90% of the core usefulness of Backbone Collections is actually implemented
	  // right here:
	  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,
	      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,
	      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,
	      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
	      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
	      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
	      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,
	      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};

	  // Mix in each Underscore method as a proxy to `Collection#models`.
	  addUnderscoreMethods(Collection, collectionMethods, 'models');

	  // Backbone.View
	  // -------------

	  // Backbone Views are almost more convention than they are actual code. A View
	  // is simply a JavaScript object that represents a logical chunk of UI in the
	  // DOM. This might be a single item, an entire list, a sidebar or panel, or
	  // even the surrounding frame which wraps your whole app. Defining a chunk of
	  // UI as a **View** allows you to define your DOM events declaratively, without
	  // having to worry about render order ... and makes it easy for the view to
	  // react to specific changes in the state of your models.

	  // Creating a Backbone.View creates its initial element outside of the DOM,
	  // if an existing element is not provided...
	  var View = Backbone.View = function(options) {
	    this.cid = _.uniqueId('view');
	    _.extend(this, _.pick(options, viewOptions));
	    this._ensureElement();
	    this.initialize.apply(this, arguments);
	  };

	  // Cached regex to split keys for `delegate`.
	  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

	  // List of view options to be set as properties.
	  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

	  // Set up all inheritable **Backbone.View** properties and methods.
	  _.extend(View.prototype, Events, {

	    // The default `tagName` of a View's element is `"div"`.
	    tagName: 'div',

	    // jQuery delegate for element lookup, scoped to DOM elements within the
	    // current view. This should be preferred to global lookups where possible.
	    $: function(selector) {
	      return this.$el.find(selector);
	    },

	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},

	    // **render** is the core function that your view should override, in order
	    // to populate its element (`this.el`), with the appropriate HTML. The
	    // convention is for **render** to always return `this`.
	    render: function() {
	      return this;
	    },

	    // Remove this view by taking the element out of the DOM, and removing any
	    // applicable Backbone.Events listeners.
	    remove: function() {
	      this._removeElement();
	      this.stopListening();
	      return this;
	    },

	    // Remove this view's element from the document and all event listeners
	    // attached to it. Exposed for subclasses using an alternative DOM
	    // manipulation API.
	    _removeElement: function() {
	      this.$el.remove();
	    },

	    // Change the view's element (`this.el` property) and re-delegate the
	    // view's events on the new element.
	    setElement: function(element) {
	      this.undelegateEvents();
	      this._setElement(element);
	      this.delegateEvents();
	      return this;
	    },

	    // Creates the `this.el` and `this.$el` references for this view using the
	    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
	    // context or an element. Subclasses can override this to utilize an
	    // alternative DOM manipulation API and are only required to set the
	    // `this.el` property.
	    _setElement: function(el) {
	      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
	      this.el = this.$el[0];
	    },

	    // Set callbacks, where `this.events` is a hash of
	    //
	    // *{"event selector": "callback"}*
	    //
	    //     {
	    //       'mousedown .title':  'edit',
	    //       'click .button':     'save',
	    //       'click .open':       function(e) { ... }
	    //     }
	    //
	    // pairs. Callbacks will be bound to the view, with `this` set properly.
	    // Uses event delegation for efficiency.
	    // Omitting the selector binds the event to `this.el`.
	    delegateEvents: function(events) {
	      events || (events = _.result(this, 'events'));
	      if (!events) return this;
	      this.undelegateEvents();
	      for (var key in events) {
	        var method = events[key];
	        if (!_.isFunction(method)) method = this[method];
	        if (!method) continue;
	        var match = key.match(delegateEventSplitter);
	        this.delegate(match[1], match[2], _.bind(method, this));
	      }
	      return this;
	    },

	    // Add a single event listener to the view's element (or a child element
	    // using `selector`). This only works for delegate-able events: not `focus`,
	    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
	    delegate: function(eventName, selector, listener) {
	      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },

	    // Clears all callbacks previously bound to the view by `delegateEvents`.
	    // You usually don't need to use this, but may wish to if you have multiple
	    // Backbone views attached to the same DOM element.
	    undelegateEvents: function() {
	      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
	      return this;
	    },

	    // A finer-grained `undelegateEvents` for removing a single delegated event.
	    // `selector` and `listener` are both optional.
	    undelegate: function(eventName, selector, listener) {
	      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },

	    // Produces a DOM element to be assigned to your view. Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _createElement: function(tagName) {
	      return document.createElement(tagName);
	    },

	    // Ensure that the View has a DOM element to render into.
	    // If `this.el` is a string, pass it through `$()`, take the first
	    // matching element, and re-assign it to `el`. Otherwise, create
	    // an element from the `id`, `className` and `tagName` properties.
	    _ensureElement: function() {
	      if (!this.el) {
	        var attrs = _.extend({}, _.result(this, 'attributes'));
	        if (this.id) attrs.id = _.result(this, 'id');
	        if (this.className) attrs['class'] = _.result(this, 'className');
	        this.setElement(this._createElement(_.result(this, 'tagName')));
	        this._setAttributes(attrs);
	      } else {
	        this.setElement(_.result(this, 'el'));
	      }
	    },

	    // Set attributes from a hash on this view's element.  Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _setAttributes: function(attributes) {
	      this.$el.attr(attributes);
	    }

	  });

	  // Backbone.sync
	  // -------------

	  // Override this function to change the manner in which Backbone persists
	  // models to the server. You will be passed the type of request, and the
	  // model in question. By default, makes a RESTful Ajax request
	  // to the model's `url()`. Some possible customizations could be:
	  //
	  // * Use `setTimeout` to batch rapid-fire updates into a single request.
	  // * Send up the models as XML instead of JSON.
	  // * Persist models via WebSockets instead of Ajax.
	  //
	  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
	  // as `POST`, with a `_method` parameter containing the true HTTP method,
	  // as well as all requests with the body as `application/x-www-form-urlencoded`
	  // instead of `application/json` with the model in a param named `model`.
	  // Useful when interfacing with server-side languages like **PHP** that make
	  // it difficult to read the body of `PUT` requests.
	  Backbone.sync = function(method, model, options) {
	    var type = methodMap[method];

	    // Default options, unless specified.
	    _.defaults(options || (options = {}), {
	      emulateHTTP: Backbone.emulateHTTP,
	      emulateJSON: Backbone.emulateJSON
	    });

	    // Default JSON-request options.
	    var params = {type: type, dataType: 'json'};

	    // Ensure that we have a URL.
	    if (!options.url) {
	      params.url = _.result(model, 'url') || urlError();
	    }

	    // Ensure that we have the appropriate request data.
	    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
	      params.contentType = 'application/json';
	      params.data = JSON.stringify(options.attrs || model.toJSON(options));
	    }

	    // For older servers, emulate JSON by encoding the request into an HTML-form.
	    if (options.emulateJSON) {
	      params.contentType = 'application/x-www-form-urlencoded';
	      params.data = params.data ? {model: params.data} : {};
	    }

	    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
	    // And an `X-HTTP-Method-Override` header.
	    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
	      params.type = 'POST';
	      if (options.emulateJSON) params.data._method = type;
	      var beforeSend = options.beforeSend;
	      options.beforeSend = function(xhr) {
	        xhr.setRequestHeader('X-HTTP-Method-Override', type);
	        if (beforeSend) return beforeSend.apply(this, arguments);
	      };
	    }

	    // Don't process data on a non-GET request.
	    if (params.type !== 'GET' && !options.emulateJSON) {
	      params.processData = false;
	    }

	    // Pass along `textStatus` and `errorThrown` from jQuery.
	    var error = options.error;
	    options.error = function(xhr, textStatus, errorThrown) {
	      options.textStatus = textStatus;
	      options.errorThrown = errorThrown;
	      if (error) error.call(options.context, xhr, textStatus, errorThrown);
	    };

	    // Make the request, allowing the user to override any Ajax options.
	    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
	    model.trigger('request', model, xhr, options);
	    return xhr;
	  };

	  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
	  var methodMap = {
	    'create': 'POST',
	    'update': 'PUT',
	    'patch': 'PATCH',
	    'delete': 'DELETE',
	    'read': 'GET'
	  };

	  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
	  // Override this if you'd like to use a different library.
	  Backbone.ajax = function() {
	    return Backbone.$.ajax.apply(Backbone.$, arguments);
	  };

	  // Backbone.Router
	  // ---------------

	  // Routers map faux-URLs to actions, and fire events when routes are
	  // matched. Creating a new one sets its `routes` hash, if not set statically.
	  var Router = Backbone.Router = function(options) {
	    options || (options = {});
	    if (options.routes) this.routes = options.routes;
	    this._bindRoutes();
	    this.initialize.apply(this, arguments);
	  };

	  // Cached regular expressions for matching named param parts and splatted
	  // parts of route strings.
	  var optionalParam = /\((.*?)\)/g;
	  var namedParam    = /(\(\?)?:\w+/g;
	  var splatParam    = /\*\w+/g;
	  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

	  // Set up all inheritable **Backbone.Router** properties and methods.
	  _.extend(Router.prototype, Events, {

	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},

	    // Manually bind a single named route to a callback. For example:
	    //
	    //     this.route('search/:query/p:num', 'search', function(query, num) {
	    //       ...
	    //     });
	    //
	    route: function(route, name, callback) {
	      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
	      if (_.isFunction(name)) {
	        callback = name;
	        name = '';
	      }
	      if (!callback) callback = this[name];
	      var router = this;
	      Backbone.history.route(route, function(fragment) {
	        var args = router._extractParameters(route, fragment);
	        if (router.execute(callback, args, name) !== false) {
	          router.trigger.apply(router, ['route:' + name].concat(args));
	          router.trigger('route', name, args);
	          Backbone.history.trigger('route', router, name, args);
	        }
	      });
	      return this;
	    },

	    // Execute a route handler with the provided parameters.  This is an
	    // excellent place to do pre-route setup or post-route cleanup.
	    execute: function(callback, args, name) {
	      if (callback) callback.apply(this, args);
	    },

	    // Simple proxy to `Backbone.history` to save a fragment into the history.
	    navigate: function(fragment, options) {
	      Backbone.history.navigate(fragment, options);
	      return this;
	    },

	    // Bind all defined routes to `Backbone.history`. We have to reverse the
	    // order of the routes here to support behavior where the most general
	    // routes can be defined at the bottom of the route map.
	    _bindRoutes: function() {
	      if (!this.routes) return;
	      this.routes = _.result(this, 'routes');
	      var route, routes = _.keys(this.routes);
	      while ((route = routes.pop()) != null) {
	        this.route(route, this.routes[route]);
	      }
	    },

	    // Convert a route string into a regular expression, suitable for matching
	    // against the current location hash.
	    _routeToRegExp: function(route) {
	      route = route.replace(escapeRegExp, '\\$&')
	                   .replace(optionalParam, '(?:$1)?')
	                   .replace(namedParam, function(match, optional) {
	                     return optional ? match : '([^/?]+)';
	                   })
	                   .replace(splatParam, '([^?]*?)');
	      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
	    },

	    // Given a route, and a URL fragment that it matches, return the array of
	    // extracted decoded parameters. Empty or unmatched parameters will be
	    // treated as `null` to normalize cross-browser behavior.
	    _extractParameters: function(route, fragment) {
	      var params = route.exec(fragment).slice(1);
	      return _.map(params, function(param, i) {
	        // Don't decode the search params.
	        if (i === params.length - 1) return param || null;
	        return param ? decodeURIComponent(param) : null;
	      });
	    }

	  });

	  // Backbone.History
	  // ----------------

	  // Handles cross-browser history management, based on either
	  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
	  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
	  // and URL fragments. If the browser supports neither (old IE, natch),
	  // falls back to polling.
	  var History = Backbone.History = function() {
	    this.handlers = [];
	    this.checkUrl = _.bind(this.checkUrl, this);

	    // Ensure that `History` can be used outside of the browser.
	    if (typeof window !== 'undefined') {
	      this.location = window.location;
	      this.history = window.history;
	    }
	  };

	  // Cached regex for stripping a leading hash/slash and trailing space.
	  var routeStripper = /^[#\/]|\s+$/g;

	  // Cached regex for stripping leading and trailing slashes.
	  var rootStripper = /^\/+|\/+$/g;

	  // Cached regex for stripping urls of hash.
	  var pathStripper = /#.*$/;

	  // Has the history handling already been started?
	  History.started = false;

	  // Set up all inheritable **Backbone.History** properties and methods.
	  _.extend(History.prototype, Events, {

	    // The default interval to poll for hash changes, if necessary, is
	    // twenty times a second.
	    interval: 50,

	    // Are we at the app root?
	    atRoot: function() {
	      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
	      return path === this.root && !this.getSearch();
	    },

	    // Does the pathname match the root?
	    matchRoot: function() {
	      var path = this.decodeFragment(this.location.pathname);
	      var rootPath = path.slice(0, this.root.length - 1) + '/';
	      return rootPath === this.root;
	    },

	    // Unicode characters in `location.pathname` are percent encoded so they're
	    // decoded for comparison. `%25` should not be decoded since it may be part
	    // of an encoded parameter.
	    decodeFragment: function(fragment) {
	      return decodeURI(fragment.replace(/%25/g, '%2525'));
	    },

	    // In IE6, the hash fragment and search params are incorrect if the
	    // fragment contains `?`.
	    getSearch: function() {
	      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
	      return match ? match[0] : '';
	    },

	    // Gets the true hash value. Cannot use location.hash directly due to bug
	    // in Firefox where location.hash will always be decoded.
	    getHash: function(window) {
	      var match = (window || this).location.href.match(/#(.*)$/);
	      return match ? match[1] : '';
	    },

	    // Get the pathname and search params, without the root.
	    getPath: function() {
	      var path = this.decodeFragment(
	        this.location.pathname + this.getSearch()
	      ).slice(this.root.length - 1);
	      return path.charAt(0) === '/' ? path.slice(1) : path;
	    },

	    // Get the cross-browser normalized URL fragment from the path or hash.
	    getFragment: function(fragment) {
	      if (fragment == null) {
	        if (this._usePushState || !this._wantsHashChange) {
	          fragment = this.getPath();
	        } else {
	          fragment = this.getHash();
	        }
	      }
	      return fragment.replace(routeStripper, '');
	    },

	    // Start the hash change handling, returning `true` if the current URL matches
	    // an existing route, and `false` otherwise.
	    start: function(options) {
	      if (History.started) throw new Error('Backbone.history has already been started');
	      History.started = true;

	      // Figure out the initial configuration. Do we need an iframe?
	      // Is pushState desired ... is it available?
	      this.options          = _.extend({root: '/'}, this.options, options);
	      this.root             = this.options.root;
	      this._wantsHashChange = this.options.hashChange !== false;
	      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);
	      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
	      this._wantsPushState  = !!this.options.pushState;
	      this._hasPushState    = !!(this.history && this.history.pushState);
	      this._usePushState    = this._wantsPushState && this._hasPushState;
	      this.fragment         = this.getFragment();

	      // Normalize root to always include a leading and trailing slash.
	      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

	      // Transition from hashChange to pushState or vice versa if both are
	      // requested.
	      if (this._wantsHashChange && this._wantsPushState) {

	        // If we've started off with a route from a `pushState`-enabled
	        // browser, but we're currently in a browser that doesn't support it...
	        if (!this._hasPushState && !this.atRoot()) {
	          var rootPath = this.root.slice(0, -1) || '/';
	          this.location.replace(rootPath + '#' + this.getPath());
	          // Return immediately as browser will do redirect to new url
	          return true;

	        // Or if we've started out with a hash-based route, but we're currently
	        // in a browser where it could be `pushState`-based instead...
	        } else if (this._hasPushState && this.atRoot()) {
	          this.navigate(this.getHash(), {replace: true});
	        }

	      }

	      // Proxy an iframe to handle location events if the browser doesn't
	      // support the `hashchange` event, HTML5 history, or the user wants
	      // `hashChange` but not `pushState`.
	      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
	        this.iframe = document.createElement('iframe');
	        this.iframe.src = 'javascript:0';
	        this.iframe.style.display = 'none';
	        this.iframe.tabIndex = -1;
	        var body = document.body;
	        // Using `appendChild` will throw on IE < 9 if the document is not ready.
	        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
	        iWindow.document.open();
	        iWindow.document.close();
	        iWindow.location.hash = '#' + this.fragment;
	      }

	      // Add a cross-platform `addEventListener` shim for older browsers.
	      var addEventListener = window.addEventListener || function(eventName, listener) {
	        return attachEvent('on' + eventName, listener);
	      };

	      // Depending on whether we're using pushState or hashes, and whether
	      // 'onhashchange' is supported, determine how we check the URL state.
	      if (this._usePushState) {
	        addEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        addEventListener('hashchange', this.checkUrl, false);
	      } else if (this._wantsHashChange) {
	        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
	      }

	      if (!this.options.silent) return this.loadUrl();
	    },

	    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
	    // but possibly useful for unit testing Routers.
	    stop: function() {
	      // Add a cross-platform `removeEventListener` shim for older browsers.
	      var removeEventListener = window.removeEventListener || function(eventName, listener) {
	        return detachEvent('on' + eventName, listener);
	      };

	      // Remove window listeners.
	      if (this._usePushState) {
	        removeEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        removeEventListener('hashchange', this.checkUrl, false);
	      }

	      // Clean up the iframe if necessary.
	      if (this.iframe) {
	        document.body.removeChild(this.iframe);
	        this.iframe = null;
	      }

	      // Some environments will throw when clearing an undefined interval.
	      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
	      History.started = false;
	    },

	    // Add a route to be tested when the fragment changes. Routes added later
	    // may override previous routes.
	    route: function(route, callback) {
	      this.handlers.unshift({route: route, callback: callback});
	    },

	    // Checks the current URL to see if it has changed, and if it has,
	    // calls `loadUrl`, normalizing across the hidden iframe.
	    checkUrl: function(e) {
	      var current = this.getFragment();

	      // If the user pressed the back button, the iframe's hash will have
	      // changed and we should use that for comparison.
	      if (current === this.fragment && this.iframe) {
	        current = this.getHash(this.iframe.contentWindow);
	      }

	      if (current === this.fragment) return false;
	      if (this.iframe) this.navigate(current);
	      this.loadUrl();
	    },

	    // Attempt to load the current URL fragment. If a route succeeds with a
	    // match, returns `true`. If no defined routes matches the fragment,
	    // returns `false`.
	    loadUrl: function(fragment) {
	      // If the root doesn't match, no routes can match either.
	      if (!this.matchRoot()) return false;
	      fragment = this.fragment = this.getFragment(fragment);
	      return _.some(this.handlers, function(handler) {
	        if (handler.route.test(fragment)) {
	          handler.callback(fragment);
	          return true;
	        }
	      });
	    },

	    // Save a fragment into the hash history, or replace the URL state if the
	    // 'replace' option is passed. You are responsible for properly URL-encoding
	    // the fragment in advance.
	    //
	    // The options object can contain `trigger: true` if you wish to have the
	    // route callback be fired (not usually desirable), or `replace: true`, if
	    // you wish to modify the current URL without adding an entry to the history.
	    navigate: function(fragment, options) {
	      if (!History.started) return false;
	      if (!options || options === true) options = {trigger: !!options};

	      // Normalize the fragment.
	      fragment = this.getFragment(fragment || '');

	      // Don't include a trailing slash on the root.
	      var rootPath = this.root;
	      if (fragment === '' || fragment.charAt(0) === '?') {
	        rootPath = rootPath.slice(0, -1) || '/';
	      }
	      var url = rootPath + fragment;

	      // Strip the hash and decode for matching.
	      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));

	      if (this.fragment === fragment) return;
	      this.fragment = fragment;

	      // If pushState is available, we use it to set the fragment as a real URL.
	      if (this._usePushState) {
	        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

	      // If hash changes haven't been explicitly disabled, update the hash
	      // fragment to store history.
	      } else if (this._wantsHashChange) {
	        this._updateHash(this.location, fragment, options.replace);
	        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {
	          var iWindow = this.iframe.contentWindow;

	          // Opening and closing the iframe tricks IE7 and earlier to push a
	          // history entry on hash-tag change.  When replace is true, we don't
	          // want this.
	          if (!options.replace) {
	            iWindow.document.open();
	            iWindow.document.close();
	          }

	          this._updateHash(iWindow.location, fragment, options.replace);
	        }

	      // If you've told us that you explicitly don't want fallback hashchange-
	      // based history, then `navigate` becomes a page refresh.
	      } else {
	        return this.location.assign(url);
	      }
	      if (options.trigger) return this.loadUrl(fragment);
	    },

	    // Update the hash location, either replacing the current entry, or adding
	    // a new one to the browser history.
	    _updateHash: function(location, fragment, replace) {
	      if (replace) {
	        var href = location.href.replace(/(javascript:|#).*$/, '');
	        location.replace(href + '#' + fragment);
	      } else {
	        // Some browsers require that `hash` contains a leading #.
	        location.hash = '#' + fragment;
	      }
	    }

	  });

	  // Create the default Backbone.history.
	  Backbone.history = new History;

	  // Helpers
	  // -------

	  // Helper function to correctly set up the prototype chain for subclasses.
	  // Similar to `goog.inherits`, but uses a hash of prototype properties and
	  // class properties to be extended.
	  var extend = function(protoProps, staticProps) {
	    var parent = this;
	    var child;

	    // The constructor function for the new subclass is either defined by you
	    // (the "constructor" property in your `extend` definition), or defaulted
	    // by us to simply call the parent constructor.
	    if (protoProps && _.has(protoProps, 'constructor')) {
	      child = protoProps.constructor;
	    } else {
	      child = function(){ return parent.apply(this, arguments); };
	    }

	    // Add static properties to the constructor function, if supplied.
	    _.extend(child, parent, staticProps);

	    // Set the prototype chain to inherit from `parent`, without calling
	    // `parent`'s constructor function and add the prototype properties.
	    child.prototype = _.create(parent.prototype, protoProps);
	    child.prototype.constructor = child;

	    // Set a convenience property in case the parent's prototype is needed
	    // later.
	    child.__super__ = parent.prototype;

	    return child;
	  };

	  // Set up inheritance for the model, collection, router, view and history.
	  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

	  // Throw an error when a URL is needed, and none is supplied.
	  var urlError = function() {
	    throw new Error('A "url" property or function must be specified');
	  };

	  // Wrap an optional error callback with a fallback error event.
	  var wrapError = function(model, options) {
	    var error = options.error;
	    options.error = function(resp) {
	      if (error) error.call(options.context, model, resp, options);
	      model.trigger('error', model, resp, options);
	    };
	  };

	  return Backbone;
	});

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var APP_CONTROLLER_EVENTS, AddContentIdentifierValidationController, AppController, Backbone, BackboneValidation, CREATE_PLATE_CONTROLLER_EVENTS, CreatePlateController, CreatePlateSaveController, DataServiceController, LoadPlateController, NEW_PLATE_DESIGN_CONTROLLER_EVENTS, NewPlateDesignController, PlateDefinitionCollection, PlateModel, PlateSearchController, PlateStatusCollection, PlateTableIdentifierValidationController, PlateTypeCollection, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_ = __webpack_require__(11);

	__webpack_require__(13);

	__webpack_require__(15);

	NewPlateDesignController = __webpack_require__(25).NewPlateDesignController;

	NEW_PLATE_DESIGN_CONTROLLER_EVENTS = __webpack_require__(25).NEW_PLATE_DESIGN_CONTROLLER_EVENTS;

	CreatePlateController = __webpack_require__(52).CreatePlateController;

	CREATE_PLATE_CONTROLLER_EVENTS = __webpack_require__(52).CREATE_PLATE_CONTROLLER_EVENTS;

	CreatePlateSaveController = __webpack_require__(54).CreatePlateSaveController;

	PlateTypeCollection = __webpack_require__(34).PlateTypeCollection;

	PlateStatusCollection = __webpack_require__(35).PlateStatusCollection;

	PlateDefinitionCollection = __webpack_require__(56).PlateDefinitionCollection;

	PlateModel = __webpack_require__(57).PlateModel;

	DataServiceController = __webpack_require__(58).DataServiceController;

	AddContentIdentifierValidationController = __webpack_require__(60).AddContentIdentifierValidationController;

	PlateTableIdentifierValidationController = __webpack_require__(60).PlateTableIdentifierValidationController;

	LoadPlateController = __webpack_require__(62).LoadPlateController;

	PlateSearchController = __webpack_require__(64).PlateSearchController;

	APP_CONTROLLER_EVENTS = {};

	AppController = (function(superClass) {
	  extend(AppController, superClass);

	  function AppController() {
	    this.render = bind(this.render, this);
	    this.handleAllDataLoadedForPlateDesignForm = bind(this.handleAllDataLoadedForPlateDesignForm, this);
	    this.displayPlateDesignForm = bind(this.displayPlateDesignForm, this);
	    this.displayPlateSearch = bind(this.displayPlateSearch, this);
	    this.displayCreatePlateForm = bind(this.displayCreatePlateForm, this);
	    this.handleAddContentSuccess = bind(this.handleAddContentSuccess, this);
	    this.handleAddIdentifierContentFromTable = bind(this.handleAddIdentifierContentFromTable, this);
	    this.handleAddContent = bind(this.handleAddContent, this);
	    this.handleCreatePlate = bind(this.handleCreatePlate, this);
	    this.completeInitialization = bind(this.completeInitialization, this);
	    return AppController.__super__.constructor.apply(this, arguments);
	  }

	  AppController.prototype.template = _.template(__webpack_require__(67));

	  AppController.prototype.initialize = function() {
	    this.newPlateDesignController = new NewPlateDesignController({
	      plateStatuses: new PlateStatusCollection(),
	      plateTypes: new PlateTypeCollection()
	    });
	    this.listenTo(this.newPlateDesignController, NEW_PLATE_DESIGN_CONTROLLER_EVENTS.ADD_CONTENT, this.handleAddContent);
	    this.listenTo(this.newPlateDesignController, NEW_PLATE_DESIGN_CONTROLLER_EVENTS.ADD_IDENTIFIER_CONTENT_FROM_TABLE, this.handleAddIdentifierContentFromTable);
	    this.createPlateController = new CreatePlateController({
	      model: new PlateModel(),
	      plateDefinitions: new PlateDefinitionCollection()
	    });
	    this.listenTo(this.createPlateController, CREATE_PLATE_CONTROLLER_EVENTS.CREATE_PLATE, this.handleCreatePlate);
	    this.dataServiceController = new DataServiceController();
	    return this.plateSearchController = new PlateSearchController({
	      plateDefinitions: new PlateDefinitionCollection(),
	      plateStatuses: new PlateStatusCollection(),
	      plateTypes: new PlateTypeCollection()
	    });
	  };

	  AppController.prototype.completeInitialization = function() {};

	  AppController.prototype.handleCreatePlate = function(plateModel) {
	    this.dataServiceController.setupService(new CreatePlateSaveController({
	      plateModel: plateModel,
	      successCallback: this.createPlateController.handleSuccessfulSave
	    }));
	    return this.dataServiceController.doServiceCall();
	  };

	  AppController.prototype.handleAddContent = function(addContentModel) {
	    this.dataServiceController.setupService(new AddContentIdentifierValidationController({
	      addContentModel: addContentModel,
	      successCallback: this.newPlateDesignController.handleAddContentSuccessCallback
	    }));
	    return this.dataServiceController.doServiceCall(this.handleAddContentSuccess);
	  };

	  AppController.prototype.handleAddIdentifierContentFromTable = function(addContentModel) {
	    this.dataServiceController.setupService(new PlateTableIdentifierValidationController({
	      addContentModel: addContentModel,
	      successCallback: this.newPlateDesignController.handleAddContentFromTableSuccessCallback,
	      mode: "plateTable"
	    }));
	    return this.dataServiceController.doServiceCall();
	  };

	  AppController.prototype.handleAddContentSuccess = function() {
	    this.newPlateDesignController.handleAddContentSuccessCallback();
	    return this.newPlateDesignController.completeInitialization();
	  };

	  AppController.prototype.displayCreatePlateForm = function() {
	    var plateTypeFetchPromise;
	    plateTypeFetchPromise = this.createPlateController.plateDefinitions.fetch();
	    return plateTypeFetchPromise.complete((function(_this) {
	      return function() {
	        _this.$("div[name='formContainer']").html(_this.createPlateController.render().el);
	        return _this.createPlateController.completeInitialization();
	      };
	    })(this));
	  };

	  AppController.prototype.displayPlateSearch = function() {
	    var promises;
	    promises = [];
	    promises.push(this.plateSearchController.plateStatuses.fetch());
	    promises.push(this.plateSearchController.plateTypes.fetch());
	    promises.push(this.plateSearchController.plateDefinitions.fetch());
	    return $.when(promises).done((function(_this) {
	      return function() {
	        _this.$("div[name='formContainer']").html(_this.plateSearchController.render().el);
	        return _this.plateSearchController.completeInitialize();
	      };
	    })(this));
	  };

	  AppController.prototype.displayPlateDesignForm = function(plateBarcode) {
	    this.dataServiceController.setupService(new LoadPlateController({
	      plateBarcode: plateBarcode,
	      successCallback: this.handleAllDataLoadedForPlateDesignForm
	    }));
	    return this.dataServiceController.doServiceCalls();
	  };

	  AppController.prototype.handleAllDataLoadedForPlateDesignForm = function(plateAndWellData) {
	    var promises;
	    promises = [];
	    promises.push(this.newPlateDesignController.plateStatuses.fetch());
	    promises.push(this.newPlateDesignController.plateTypes.fetch());
	    return $.when(promises).done((function(_this) {
	      return function() {
	        _this.$("div[name='formContainer']").html(_this.newPlateDesignController.render().el);
	        return _this.newPlateDesignController.completeInitialization(plateAndWellData);
	      };
	    })(this));
	  };

	  AppController.prototype.render = function() {
	    $(this.el).html(this.template());
	    this.$("div[name='dataServiceControllerContainer']").html(this.dataServiceController.render().el);
	    return this;
	  };

	  return AppController;

	})(Backbone.View);

	module.exports = {
	  AppController: AppController
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// Backbone.Validation v0.11.5
	//
	// Copyright (c) 2011-2015 Thomas Pedersen
	// Distributed under MIT License
	//
	// Documentation and full license available at:
	// http://thedersen.com/projects/backbone-validation
	(function (factory) {
	  if (true) {
	    module.exports = factory(__webpack_require__(7), __webpack_require__(8));
	  } else if (typeof define === 'function' && define.amd) {
	    define(['backbone', 'underscore'], factory);
	  }
	}(function (Backbone, _) {
	  Backbone.Validation = (function(_){
	    'use strict';
	  
	    // Default options
	    // ---------------
	  
	    var defaultOptions = {
	      forceUpdate: false,
	      selector: 'name',
	      labelFormatter: 'sentenceCase',
	      valid: Function.prototype,
	      invalid: Function.prototype
	    };
	  
	  
	    // Helper functions
	    // ----------------
	  
	    // Formatting functions used for formatting error messages
	    var formatFunctions = {
	      // Uses the configured label formatter to format the attribute name
	      // to make it more readable for the user
	      formatLabel: function(attrName, model) {
	        return defaultLabelFormatters[defaultOptions.labelFormatter](attrName, model);
	      },
	  
	      // Replaces nummeric placeholders like {0} in a string with arguments
	      // passed to the function
	      format: function() {
	        var args = Array.prototype.slice.call(arguments),
	            text = args.shift();
	        return text.replace(/\{(\d+)\}/g, function(match, number) {
	          return typeof args[number] !== 'undefined' ? args[number] : match;
	        });
	      }
	    };
	  
	    // Flattens an object
	    // eg:
	    //
	    //     var o = {
	    //       owner: {
	    //         name: 'Backbone',
	    //         address: {
	    //           street: 'Street',
	    //           zip: 1234
	    //         }
	    //       }
	    //     };
	    //
	    // becomes:
	    //
	    //     var o = {
	    //       'owner': {
	    //         name: 'Backbone',
	    //         address: {
	    //           street: 'Street',
	    //           zip: 1234
	    //         }
	    //       },
	    //       'owner.name': 'Backbone',
	    //       'owner.address': {
	    //         street: 'Street',
	    //         zip: 1234
	    //       },
	    //       'owner.address.street': 'Street',
	    //       'owner.address.zip': 1234
	    //     };
	    // This may seem redundant, but it allows for maximum flexibility
	    // in validation rules.
	    var flatten = function (obj, into, prefix) {
	      into = into || {};
	      prefix = prefix || '';
	  
	      _.each(obj, function(val, key) {
	        if(obj.hasOwnProperty(key)) {
	          if (!!val && _.isArray(val)) {
	            _.forEach(val, function(v, k) {
	              flatten(v, into, prefix + key + '.' + k + '.');
	              into[prefix + key + '.' + k] = v;
	            });
	          } else if (!!val && typeof val === 'object' && val.constructor === Object) {
	            flatten(val, into, prefix + key + '.');
	          }
	  
	          // Register the current level object as well
	          into[prefix + key] = val;
	        }
	      });
	  
	      return into;
	    };
	  
	    // Validation
	    // ----------
	  
	    var Validation = (function(){
	  
	      // Returns an object with undefined properties for all
	      // attributes on the model that has defined one or more
	      // validation rules.
	      var getValidatedAttrs = function(model, attrs) {
	        attrs = attrs || _.keys(_.result(model, 'validation') || {});
	        return _.reduce(attrs, function(memo, key) {
	          memo[key] = void 0;
	          return memo;
	        }, {});
	      };
	  
	      // Returns an array with attributes passed through options
	      var getOptionsAttrs = function(options, view) {
	        var attrs = options.attributes;
	        if (_.isFunction(attrs)) {
	          attrs = attrs(view);
	        } else if (_.isString(attrs) && (_.isFunction(defaultAttributeLoaders[attrs]))) {
	          attrs = defaultAttributeLoaders[attrs](view);
	        }
	        if (_.isArray(attrs)) {
	          return attrs;
	        }
	      };
	  
	  
	      // Looks on the model for validations for a specified
	      // attribute. Returns an array of any validators defined,
	      // or an empty array if none is defined.
	      var getValidators = function(model, attr) {
	        var attrValidationSet = model.validation ? _.result(model, 'validation')[attr] || {} : {};
	  
	        // If the validator is a function or a string, wrap it in a function validator
	        if (_.isFunction(attrValidationSet) || _.isString(attrValidationSet)) {
	          attrValidationSet = {
	            fn: attrValidationSet
	          };
	        }
	  
	        // Stick the validator object into an array
	        if(!_.isArray(attrValidationSet)) {
	          attrValidationSet = [attrValidationSet];
	        }
	  
	        // Reduces the array of validators into a new array with objects
	        // with a validation method to call, the value to validate against
	        // and the specified error message, if any
	        return _.reduce(attrValidationSet, function(memo, attrValidation) {
	          _.each(_.without(_.keys(attrValidation), 'msg'), function(validator) {
	            memo.push({
	              fn: defaultValidators[validator],
	              val: attrValidation[validator],
	              msg: attrValidation.msg
	            });
	          });
	          return memo;
	        }, []);
	      };
	  
	      // Validates an attribute against all validators defined
	      // for that attribute. If one or more errors are found,
	      // the first error message is returned.
	      // If the attribute is valid, an empty string is returned.
	      var validateAttr = function(model, attr, value, computed) {
	        // Reduces the array of validators to an error message by
	        // applying all the validators and returning the first error
	        // message, if any.
	        return _.reduce(getValidators(model, attr), function(memo, validator){
	          // Pass the format functions plus the default
	          // validators as the context to the validator
	          var ctx = _.extend({}, formatFunctions, defaultValidators),
	              result = validator.fn.call(ctx, value, attr, validator.val, model, computed);
	  
	          if(result === false || memo === false) {
	            return false;
	          }
	          if (result && !memo) {
	            return _.result(validator, 'msg') || result;
	          }
	          return memo;
	        }, '');
	      };
	  
	      // Loops through the model's attributes and validates the specified attrs.
	      // Returns and object containing names of invalid attributes
	      // as well as error messages.
	      var validateModel = function(model, attrs, validatedAttrs) {
	        var error,
	            invalidAttrs = {},
	            isValid = true,
	            computed = _.clone(attrs);
	  
	        _.each(validatedAttrs, function(val, attr) {
	          error = validateAttr(model, attr, val, computed);
	          if (error) {
	            invalidAttrs[attr] = error;
	            isValid = false;
	          }
	        });
	  
	        return {
	          invalidAttrs: invalidAttrs,
	          isValid: isValid
	        };
	      };
	  
	      // Contains the methods that are mixed in on the model when binding
	      var mixin = function(view, options) {
	        return {
	  
	          // Check whether or not a value, or a hash of values
	          // passes validation without updating the model
	          preValidate: function(attr, value) {
	            var self = this,
	                result = {},
	                error;
	  
	            if(_.isObject(attr)){
	              _.each(attr, function(value, key) {
	                error = self.preValidate(key, value);
	                if(error){
	                  result[key] = error;
	                }
	              });
	  
	              return _.isEmpty(result) ? undefined : result;
	            }
	            else {
	              return validateAttr(this, attr, value, _.extend({}, this.attributes));
	            }
	          },
	  
	          // Check to see if an attribute, an array of attributes or the
	          // entire model is valid. Passing true will force a validation
	          // of the model.
	          isValid: function(option) {
	            var flattened, attrs, error, invalidAttrs;
	  
	            option = option || getOptionsAttrs(options, view);
	  
	            if(_.isString(option)){
	              attrs = [option];
	            } else if(_.isArray(option)) {
	              attrs = option;
	            }
	            if (attrs) {
	              flattened = flatten(this.attributes);
	              //Loop through all associated views
	              _.each(this.associatedViews, function(view) {
	                _.each(attrs, function (attr) {
	                  error = validateAttr(this, attr, flattened[attr], _.extend({}, this.attributes));
	                  if (error) {
	                    options.invalid(view, attr, error, options.selector);
	                    invalidAttrs = invalidAttrs || {};
	                    invalidAttrs[attr] = error;
	                  } else {
	                    options.valid(view, attr, options.selector);
	                  }
	                }, this);
	              }, this);
	            }
	  
	            if(option === true) {
	              invalidAttrs = this.validate();
	            }
	            if (invalidAttrs) {
	              this.trigger('invalid', this, invalidAttrs, {validationError: invalidAttrs});
	            }
	            return attrs ? !invalidAttrs : this.validation ? this._isValid : true;
	          },
	  
	          // This is called by Backbone when it needs to perform validation.
	          // You can call it manually without any parameters to validate the
	          // entire model.
	          validate: function(attrs, setOptions){
	            var model = this,
	                validateAll = !attrs,
	                opt = _.extend({}, options, setOptions),
	                validatedAttrs = getValidatedAttrs(model, getOptionsAttrs(options, view)),
	                allAttrs = _.extend({}, validatedAttrs, model.attributes, attrs),
	                flattened = flatten(allAttrs),
	                changedAttrs = attrs ? flatten(attrs) : flattened,
	                result = validateModel(model, allAttrs, _.pick(flattened, _.keys(validatedAttrs)));
	  
	            model._isValid = result.isValid;
	  
	            //After validation is performed, loop through all associated views
	            _.each(model.associatedViews, function(view){
	  
	              // After validation is performed, loop through all validated and changed attributes
	              // and call the valid and invalid callbacks so the view is updated.
	              _.each(validatedAttrs, function(val, attr){
	                  var invalid = result.invalidAttrs.hasOwnProperty(attr),
	                    changed = changedAttrs.hasOwnProperty(attr);
	  
	                  if(!invalid){
	                    opt.valid(view, attr, opt.selector);
	                  }
	                  if(invalid && (changed || validateAll)){
	                    opt.invalid(view, attr, result.invalidAttrs[attr], opt.selector);
	                  }
	              });
	            });
	  
	            // Trigger validated events.
	            // Need to defer this so the model is actually updated before
	            // the event is triggered.
	            _.defer(function() {
	              model.trigger('validated', model._isValid, model, result.invalidAttrs);
	              model.trigger('validated:' + (model._isValid ? 'valid' : 'invalid'), model, result.invalidAttrs);
	            });
	  
	            // Return any error messages to Backbone, unless the forceUpdate flag is set.
	            // Then we do not return anything and fools Backbone to believe the validation was
	            // a success. That way Backbone will update the model regardless.
	            if (!opt.forceUpdate && _.intersection(_.keys(result.invalidAttrs), _.keys(changedAttrs)).length > 0) {
	              return result.invalidAttrs;
	            }
	          }
	        };
	      };
	  
	      // Helper to mix in validation on a model. Stores the view in the associated views array.
	      var bindModel = function(view, model, options) {
	        if (model.associatedViews) {
	          model.associatedViews.push(view);
	        } else {
	          model.associatedViews = [view];
	        }
	        _.extend(model, mixin(view, options));
	      };
	  
	      // Removes view from associated views of the model or the methods
	      // added to a model if no view or single view provided
	      var unbindModel = function(model, view) {
	        if (view && model.associatedViews && model.associatedViews.length > 1){
	          model.associatedViews = _.without(model.associatedViews, view);
	        } else {
	          delete model.validate;
	          delete model.preValidate;
	          delete model.isValid;
	          delete model.associatedViews;
	        }
	      };
	  
	      // Mix in validation on a model whenever a model is
	      // added to a collection
	      var collectionAdd = function(model) {
	        bindModel(this.view, model, this.options);
	      };
	  
	      // Remove validation from a model whenever a model is
	      // removed from a collection
	      var collectionRemove = function(model) {
	        unbindModel(model);
	      };
	  
	      // Returns the public methods on Backbone.Validation
	      return {
	  
	        // Current version of the library
	        version: '0.11.3',
	  
	        // Called to configure the default options
	        configure: function(options) {
	          _.extend(defaultOptions, options);
	        },
	  
	        // Hooks up validation on a view with a model
	        // or collection
	        bind: function(view, options) {
	          options = _.extend({}, defaultOptions, defaultCallbacks, options);
	  
	          var model = options.model || view.model,
	              collection = options.collection || view.collection;
	  
	          if(typeof model === 'undefined' && typeof collection === 'undefined'){
	            throw 'Before you execute the binding your view must have a model or a collection.\n' +
	                  'See http://thedersen.com/projects/backbone-validation/#using-form-model-validation for more information.';
	          }
	  
	          if(model) {
	            bindModel(view, model, options);
	          }
	          else if(collection) {
	            collection.each(function(model){
	              bindModel(view, model, options);
	            });
	            collection.bind('add', collectionAdd, {view: view, options: options});
	            collection.bind('remove', collectionRemove);
	          }
	        },
	  
	        // Removes validation from a view with a model
	        // or collection
	        unbind: function(view, options) {
	          options = _.extend({}, options);
	          var model = options.model || view.model,
	              collection = options.collection || view.collection;
	  
	          if(model) {
	            unbindModel(model, view);
	          }
	          else if(collection) {
	            collection.each(function(model){
	              unbindModel(model, view);
	            });
	            collection.unbind('add', collectionAdd);
	            collection.unbind('remove', collectionRemove);
	          }
	        },
	  
	        // Used to extend the Backbone.Model.prototype
	        // with validation
	        mixin: mixin(null, defaultOptions)
	      };
	    }());
	  
	  
	    // Callbacks
	    // ---------
	  
	    var defaultCallbacks = Validation.callbacks = {
	  
	      // Gets called when a previously invalid field in the
	      // view becomes valid. Removes any error message.
	      // Should be overridden with custom functionality.
	      valid: function(view, attr, selector) {
	        view.$('[' + selector + '~="' + attr + '"]')
	            .removeClass('invalid')
	            .removeAttr('data-error');
	      },
	  
	      // Gets called when a field in the view becomes invalid.
	      // Adds a error message.
	      // Should be overridden with custom functionality.
	      invalid: function(view, attr, error, selector) {
	        view.$('[' + selector + '~="' + attr + '"]')
	            .addClass('invalid')
	            .attr('data-error', error);
	      }
	    };
	  
	  
	    // Patterns
	    // --------
	  
	    var defaultPatterns = Validation.patterns = {
	      // Matches any digit(s) (i.e. 0-9)
	      digits: /^\d+$/,
	  
	      // Matches any number (e.g. 100.000)
	      number: /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/,
	  
	      // Matches a valid email address (e.g. mail@example.com)
	      email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
	  
	      // Mathes any valid url (e.g. http://www.xample.com)
	      url: /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
	    };
	  
	  
	    // Error messages
	    // --------------
	  
	    // Error message for the build in validators.
	    // {x} gets swapped out with arguments form the validator.
	    var defaultMessages = Validation.messages = {
	      required: '{0} is required',
	      acceptance: '{0} must be accepted',
	      min: '{0} must be greater than or equal to {1}',
	      max: '{0} must be less than or equal to {1}',
	      range: '{0} must be between {1} and {2}',
	      length: '{0} must be {1} characters',
	      minLength: '{0} must be at least {1} characters',
	      maxLength: '{0} must be at most {1} characters',
	      rangeLength: '{0} must be between {1} and {2} characters',
	      oneOf: '{0} must be one of: {1}',
	      equalTo: '{0} must be the same as {1}',
	      digits: '{0} must only contain digits',
	      number: '{0} must be a number',
	      email: '{0} must be a valid email',
	      url: '{0} must be a valid url',
	      inlinePattern: '{0} is invalid'
	    };
	  
	    // Label formatters
	    // ----------------
	  
	    // Label formatters are used to convert the attribute name
	    // to a more human friendly label when using the built in
	    // error messages.
	    // Configure which one to use with a call to
	    //
	    //     Backbone.Validation.configure({
	    //       labelFormatter: 'label'
	    //     });
	    var defaultLabelFormatters = Validation.labelFormatters = {
	  
	      // Returns the attribute name with applying any formatting
	      none: function(attrName) {
	        return attrName;
	      },
	  
	      // Converts attributeName or attribute_name to Attribute name
	      sentenceCase: function(attrName) {
	        return attrName.replace(/(?:^\w|[A-Z]|\b\w)/g, function(match, index) {
	          return index === 0 ? match.toUpperCase() : ' ' + match.toLowerCase();
	        }).replace(/_/g, ' ');
	      },
	  
	      // Looks for a label configured on the model and returns it
	      //
	      //      var Model = Backbone.Model.extend({
	      //        validation: {
	      //          someAttribute: {
	      //            required: true
	      //          }
	      //        },
	      //
	      //        labels: {
	      //          someAttribute: 'Custom label'
	      //        }
	      //      });
	      label: function(attrName, model) {
	        return (model.labels && model.labels[attrName]) || defaultLabelFormatters.sentenceCase(attrName, model);
	      }
	    };
	  
	    // AttributeLoaders
	  
	    var defaultAttributeLoaders = Validation.attributeLoaders = {
	      inputNames: function (view) {
	        var attrs = [];
	        if (view) {
	          view.$('form [name]').each(function () {
	            if (/^(?:input|select|textarea)$/i.test(this.nodeName) && this.name &&
	              this.type !== 'submit' && attrs.indexOf(this.name) === -1) {
	              attrs.push(this.name);
	            }
	          });
	        }
	        return attrs;
	      }
	    };
	  
	  
	    // Built in validators
	    // -------------------
	  
	    var defaultValidators = Validation.validators = (function(){
	      // Use native trim when defined
	      var trim = String.prototype.trim ?
	        function(text) {
	          return text === null ? '' : String.prototype.trim.call(text);
	        } :
	        function(text) {
	          var trimLeft = /^\s+/,
	              trimRight = /\s+$/;
	  
	          return text === null ? '' : text.toString().replace(trimLeft, '').replace(trimRight, '');
	        };
	  
	      // Determines whether or not a value is a number
	      var isNumber = function(value){
	        return _.isNumber(value) || (_.isString(value) && value.match(defaultPatterns.number));
	      };
	  
	      // Determines whether or not a value is empty
	      var hasValue = function(value) {
	        return !(_.isNull(value) || _.isUndefined(value) || (_.isString(value) && trim(value) === '') || (_.isArray(value) && _.isEmpty(value)));
	      };
	  
	      return {
	        // Function validator
	        // Lets you implement a custom function used for validation
	        fn: function(value, attr, fn, model, computed) {
	          if(_.isString(fn)){
	            fn = model[fn];
	          }
	          return fn.call(model, value, attr, computed);
	        },
	  
	        // Required validator
	        // Validates if the attribute is required or not
	        // This can be specified as either a boolean value or a function that returns a boolean value
	        required: function(value, attr, required, model, computed) {
	          var isRequired = _.isFunction(required) ? required.call(model, value, attr, computed) : required;
	          if(!isRequired && !hasValue(value)) {
	            return false; // overrides all other validators
	          }
	          if (isRequired && !hasValue(value)) {
	            return this.format(defaultMessages.required, this.formatLabel(attr, model));
	          }
	        },
	  
	        // Acceptance validator
	        // Validates that something has to be accepted, e.g. terms of use
	        // `true` or 'true' are valid
	        acceptance: function(value, attr, accept, model) {
	          if(value !== 'true' && (!_.isBoolean(value) || value === false)) {
	            return this.format(defaultMessages.acceptance, this.formatLabel(attr, model));
	          }
	        },
	  
	        // Min validator
	        // Validates that the value has to be a number and equal to or greater than
	        // the min value specified
	        min: function(value, attr, minValue, model) {
	          if (!isNumber(value) || value < minValue) {
	            return this.format(defaultMessages.min, this.formatLabel(attr, model), minValue);
	          }
	        },
	  
	        // Max validator
	        // Validates that the value has to be a number and equal to or less than
	        // the max value specified
	        max: function(value, attr, maxValue, model) {
	          if (!isNumber(value) || value > maxValue) {
	            return this.format(defaultMessages.max, this.formatLabel(attr, model), maxValue);
	          }
	        },
	  
	        // Range validator
	        // Validates that the value has to be a number and equal to or between
	        // the two numbers specified
	        range: function(value, attr, range, model) {
	          if(!isNumber(value) || value < range[0] || value > range[1]) {
	            return this.format(defaultMessages.range, this.formatLabel(attr, model), range[0], range[1]);
	          }
	        },
	  
	        // Length validator
	        // Validates that the value has to be a string with length equal to
	        // the length value specified
	        length: function(value, attr, length, model) {
	          if (!_.isString(value) || value.length !== length) {
	            return this.format(defaultMessages.length, this.formatLabel(attr, model), length);
	          }
	        },
	  
	        // Min length validator
	        // Validates that the value has to be a string with length equal to or greater than
	        // the min length value specified
	        minLength: function(value, attr, minLength, model) {
	          if (!_.isString(value) || value.length < minLength) {
	            return this.format(defaultMessages.minLength, this.formatLabel(attr, model), minLength);
	          }
	        },
	  
	        // Max length validator
	        // Validates that the value has to be a string with length equal to or less than
	        // the max length value specified
	        maxLength: function(value, attr, maxLength, model) {
	          if (!_.isString(value) || value.length > maxLength) {
	            return this.format(defaultMessages.maxLength, this.formatLabel(attr, model), maxLength);
	          }
	        },
	  
	        // Range length validator
	        // Validates that the value has to be a string and equal to or between
	        // the two numbers specified
	        rangeLength: function(value, attr, range, model) {
	          if (!_.isString(value) || value.length < range[0] || value.length > range[1]) {
	            return this.format(defaultMessages.rangeLength, this.formatLabel(attr, model), range[0], range[1]);
	          }
	        },
	  
	        // One of validator
	        // Validates that the value has to be equal to one of the elements in
	        // the specified array. Case sensitive matching
	        oneOf: function(value, attr, values, model) {
	          if(!_.include(values, value)){
	            return this.format(defaultMessages.oneOf, this.formatLabel(attr, model), values.join(', '));
	          }
	        },
	  
	        // Equal to validator
	        // Validates that the value has to be equal to the value of the attribute
	        // with the name specified
	        equalTo: function(value, attr, equalTo, model, computed) {
	          if(value !== computed[equalTo]) {
	            return this.format(defaultMessages.equalTo, this.formatLabel(attr, model), this.formatLabel(equalTo, model));
	          }
	        },
	  
	        // Pattern validator
	        // Validates that the value has to match the pattern specified.
	        // Can be a regular expression or the name of one of the built in patterns
	        pattern: function(value, attr, pattern, model) {
	          if (!hasValue(value) || !value.toString().match(defaultPatterns[pattern] || pattern)) {
	            return this.format(defaultMessages[pattern] || defaultMessages.inlinePattern, this.formatLabel(attr, model), pattern);
	          }
	        }
	      };
	    }());
	  
	    // Set the correct context for all validators
	    // when used from within a method validator
	    _.each(defaultValidators, function(validator, key){
	      defaultValidators[key] = _.bind(defaultValidators[key], _.extend({}, formatFunctions, defaultValidators));
	    });
	  
	    return Validation;
	  }(_));
	  return Backbone.Validation;
	}));

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 4.11.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash -d -o ./foo/lodash.js`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.11.1';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256,
	      FLIP_FLAG = 512;

	  /** Used to compose bitmasks for comparison styles. */
	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match non-compound words composed of alphanumeric characters. */
	  var reBasicWord = /[a-zA-Z0-9]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0x/i;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reComplexWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	    rsUpper + '+' + rsOptUpperContr,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
	    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `exports`. */
	  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	    ? exports
	    : undefined;

	  /** Detect free variable `module`. */
	  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	    ? module
	    : undefined;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = (freeModule && freeModule.exports === freeExports)
	    ? freeExports
	    : undefined;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	  /** Detect free variable `self`. */
	  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	  /** Detect free variable `window`. */
	  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	  /** Detect `this` as the global object. */
	  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal ||
	    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	      freeSelf || thisGlobal || Function('return this')();

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }

	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    set.add(value);
	    return set;
	  }

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    var length = args.length;
	    switch (length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * Creates a new array concatenating `array` with `other`.
	   *
	   * @private
	   * @param {Array} array The first array to concatenate.
	   * @param {Array} other The second array to concatenate.
	   * @returns {Array} Returns the new concatenated array.
	   */
	  function arrayConcat(array, other) {
	    var index = -1,
	        length = array.length,
	        othIndex = -1,
	        othLength = other.length,
	        result = Array(length + othLength);

	    while (++index < length) {
	      result[index] = array[index];
	    }
	    while (++othIndex < othLength) {
	      result[index++] = other[othIndex];
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    return !!array.length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * The base implementation of methods like `_.max` and `_.min` which accepts a
	   * `comparator` to determine the extremum value.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The iteratee invoked per iteration.
	   * @param {Function} comparator The comparator used to compare values.
	   * @returns {*} Returns the extremum value.
	   */
	  function baseExtremum(array, iteratee, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index],
	          current = iteratee(value);

	      if (current != null && (computed === undefined
	            ? current === current
	            : comparator(current, computed)
	          )) {
	        var computed = current,
	            result = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of methods like `_.find` and `_.findKey`, without
	   * support for iteratee shorthands, which iterates over `collection` using
	   * `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @param {boolean} [retKey] Specify returning the key of the found element
	   *  instead of the element itself.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFind(collection, predicate, eachFunc, retKey) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = retKey ? key : value;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array ? array.length : 0;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the new array of key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing wrapper metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Checks if `value` is a global object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	   */
	  function checkGlobal(value) {
	    return (value && value.Object === Object) ? value : null;
	  }

	  /**
	   * Compares values to sort them in ascending order.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function compareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * Used by `_.orderBy` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	   * specify an order of "desc" for descending or "asc" for ascending sort order
	   * of corresponding values.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]|string[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = compareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * (order == 'desc' ? -1 : 1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        result++;
	      }
	    }
	    return result;
	  }

	  /**
	   * Creates a function that performs a mathematical operation on two values.
	   *
	   * @private
	   * @param {Function} operator The function to perform the operation.
	   * @returns {Function} Returns the new mathematical operation function.
	   */
	  function createMathOperation(operator) {
	    return function(value, other) {
	      var result;
	      if (value === undefined && other === undefined) {
	        return 0;
	      }
	      if (value !== undefined) {
	        result = value;
	      }
	      if (other !== undefined) {
	        result = result === undefined ? other : operator(result, other);
	      }
	      return result;
	    };
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
	  function isHostObject(value) {
	    // Many host objects are `Object` objects that can coerce to strings
	    // despite having improperly defined `toString` methods.
	    var result = false;
	    if (value != null && typeof value.toString != 'function') {
	      try {
	        result = !!(value + '');
	      } catch (e) {}
	    }
	    return result;
	  }

	  /**
	   * Checks if `value` is a valid array-like index.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	   */
	  function isIndex(value, length) {
	    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	    length = length == null ? MAX_SAFE_INTEGER : length;
	    return value > -1 && value % 1 == 0 && value < length;
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to an array.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    if (!(string && reHasComplexSymbol.test(string))) {
	      return string.length;
	    }
	    var result = reComplexSymbol.lastIndex = 0;
	    while (reComplexSymbol.test(string)) {
	      result++;
	    }
	    return result;
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return string.match(reComplexSymbol);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Use `context` to mock `Date#getTime` use in `_.now`.
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

	    /** Built-in constructor references. */
	    var Date = context.Date,
	        Error = context.Error,
	        Math = context.Math,
	        RegExp = context.RegExp,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = context.Array.prototype,
	        objectProto = context.Object.prototype,
	        stringProto = context.String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = context.Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objectToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Reflect = context.Reflect,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        clearTimeout = context.clearTimeout,
	        enumerate = Reflect ? Reflect.enumerate : undefined,
	        getOwnPropertySymbols = Object.getOwnPropertySymbols,
	        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetPrototype = Object.getPrototypeOf,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = Object.keys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReplace = stringProto.replace,
	        nativeReverse = arrayProto.reverse,
	        nativeSplit = stringProto.split;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least `200` elements
	     * and any iteratees accept only one argument. The heuristic for whether a
	     * section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,
	     * `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,
	     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,
	     * `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
	     * `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,
	     * `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,
	     * `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`,
	     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`,
	     * `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`,
	     * `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,
	     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,
	     * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,
	     * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,
	     * `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`, `min`, `minBy`, `multiply`,
	     * `noConflict`, `noop`, `now`, `nth`, `pad`, `padEnd`, `padStart`, `parseInt`,
	     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
	     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
	     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
	     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toInteger`,
	     * `toJSON`, `toLength`, `toLower`, `toNumber`, `toSafeInteger`, `toString`,
	     * `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`,
	     * `uniqueId`, `upperCase`, `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @returns {Object} Returns the new hash object.
	     */
	    function Hash() {}

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(hash, key) {
	      return hashHas(hash, key) && delete hash[key];
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(hash, key) {
	      if (nativeCreate) {
	        var result = hash[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(hash, key) {
	      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function hashSet(hash, key, value) {
	      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	    }

	    // Avoid inheriting from `Object.prototype` when possible.
	    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function MapCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapClear() {
	      this.__data__ = {
	        'hash': new Hash,
	        'map': Map ? new Map : [],
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapDelete(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapGet(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.get(key) : assocGet(data.map, key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.has(key) : assocHas(data.map, key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapSet(key, value) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
	      } else if (Map) {
	        data.map.set(key, value);
	      } else {
	        assocSet(data.map, key, value);
	      }
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapClear;
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a set cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.push(values[index]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache`.
	     *
	     * @private
	     * @param {Object} cache The set cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function cacheHas(cache, value) {
	      var map = cache.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        return hash[value] === HASH_UNDEFINED;
	      }
	      return map.has(value);
	    }

	    /**
	     * Adds `value` to the set cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var map = this.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        hash[value] = HASH_UNDEFINED;
	      }
	      else {
	        map.set(value, HASH_UNDEFINED);
	      }
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.push = cachePush;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function Stack(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = { 'array': [], 'map': null };
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocDelete(array, key) : data.map['delete'](key);
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocGet(array, key) : data.map.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocHas(array, key) : data.map.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__,
	          array = data.array;

	      if (array) {
	        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
	          assocSet(array, key, value);
	        } else {
	          data.array = null;
	          data.map = new MapCache(array);
	        }
	      }
	      var map = data.map;
	      if (map) {
	        map.set(key, value);
	      }
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Removes `key` and its value from the associative array.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function assocDelete(array, key) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = array.length - 1;
	      if (index == lastIndex) {
	        array.pop();
	      } else {
	        splice.call(array, index, 1);
	      }
	      return true;
	    }

	    /**
	     * Gets the associative array value for `key`.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function assocGet(array, key) {
	      var index = assocIndexOf(array, key);
	      return index < 0 ? undefined : array[index][1];
	    }

	    /**
	     * Checks if an associative array value for `key` exists.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function assocHas(array, key) {
	      return assocIndexOf(array, key) > -1;
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to search.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Sets the associative array `key` to `value`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function assocSet(array, key, value) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        array.push([key, value]);
	      } else {
	        array[index][1] = value;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (typeof key == 'number' && value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          isNil = object == null,
	          length = paths.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = isNil ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          if (isHostObject(value)) {
	            return object ? value : {};
	          }
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (!isArr) {
	        var props = isFull ? getAllKeys(value) : keys(value);
	      }
	      // Recursively populate clone (susceptible to call stack limits).
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     */
	    function baseConforms(source) {
	      var props = keys(source),
	          length = props.length;

	      return function(object) {
	        if (object == null) {
	          return !length;
	        }
	        var index = length;
	        while (index--) {
	          var key = props[index],
	              predicate = source[key],
	              value = object[key];

	          if ((value === undefined &&
	              !(key in Object(object))) || !predicate(value)) {
	            return false;
	          }
	        }
	        return true;
	      };
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    function baseCreate(proto) {
	      return isObject(proto) ? objectCreate(proto) : {};
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an array
	     * of `func` arguments.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments to provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object)
	        ? result
	        : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	      // that are composed entirely of index properties, return `false` for
	      // `hasOwnProperty` checks of them.
	      return hasOwnProperty.call(object, key) ||
	        (typeof object == 'object' && key in object && getPrototype(object) === null);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = castPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, bitmask, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag && !isHostObject(object),
	          othIsObj = othTag == objectTag && !isHostObject(other),
	          isSameTag = objTag == othTag;

	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	      }
	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      return nativeKeys(Object(object));
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      object = object == null ? object : Object(object);

	      var result = [];
	      for (var key in object) {
	        result.push(key);
	      }
	      return result;
	    }

	    // Fallback for IE < 9 with es6-shim.
	    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
	      baseKeysIn = function(object) {
	        return iteratorToArray(enumerate(object));
	      };
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(path, srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      if (!(isArray(source) || isTypedArray(source))) {
	        var props = keysIn(source);
	      }
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      });
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        newValue = srcValue;
	        if (isArray(srcValue) || isTypedArray(srcValue)) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	          else {
	            newValue = objValue;
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      stack.set(srcValue, newValue);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	      }
	      stack['delete'](srcValue);
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce `n` to an integer.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, props) {
	      object = Object(object);
	      return arrayReduce(props, function(result, key) {
	        if (key in object) {
	          result[key] = object[key];
	        }
	        return result;
	      }, {});
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, predicate) {
	      var index = -1,
	          props = getAllKeysIn(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (predicate(value, key)) {
	          result[key] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (lastIndex == length || index != previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = castPath(index),
	                object = parent(array, path);

	            if (object != null) {
	              delete object[last(path)];
	            }
	          }
	          else {
	            delete array[index];
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the new array of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          var newValue = value;
	          if (index != lastIndex) {
	            var objValue = nested[key];
	            newValue = customizer ? customizer(objValue, key, nested) : undefined;
	            if (newValue === undefined) {
	              newValue = objValue == null
	                ? (isIndex(path[index + 1]) ? [] : {})
	                : objValue;
	            }
	          }
	          assignValue(nested, key, newValue);
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq`.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array) {
	      return baseSortedUniqBy(array);
	    }

	    /**
	     * The base implementation of `_.sortedUniqBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniqBy(array, iteratee) {
	      var index = 0,
	          length = array.length,
	          value = array[0],
	          computed = iteratee ? iteratee(value) : value,
	          seen = computed,
	          resIndex = 1,
	          result = [value];

	      while (++index < length) {
	        value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	        if (!eq(computed, seen)) {
	          seen = computed;
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	      object = parent(object, path);
	      var key = last(path);
	      return (object != null && has(object, key)) ? delete object[key] : true;
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var index = -1,
	          length = arrays.length;

	      while (++index < length) {
	        var result = result
	          ? arrayPush(
	              baseDifference(result, arrays[index], iteratee, comparator),
	              baseDifference(arrays[index], result, iteratee, comparator)
	            )
	          : arrays[index];
	      }
	      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var result = new buffer.constructor(buffer.length);
	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : source[key];

	        assignValue(object, key, newValue);
	      }
	      return object;
	    }

	    /**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return rest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = typeof customizer == 'function'
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBaseWrapper(func, bitmask, thisArg) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = reHasComplexSymbol.test(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurryWrapper(func, bitmask, arity) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getPlaceholder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return rest(function(funcs) {
	        funcs = baseFlatten(funcs, 1);

	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	          isFlip = bitmask & FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getPlaceholder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new invoker function.
	     */
	    function createOver(arrayFunc) {
	      return rest(function(iteratees) {
	        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
	          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
	          : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));

	        return rest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : (chars + '');

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return reHasComplexSymbol.test(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toNumber(start);
	        start = start === start ? start : 0;
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toNumber(end) || 0;
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	      if (!(bitmask & CURRY_BOUND_FLAG)) {
	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return result;
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = toInteger(precision);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == BIND_FLAG) {
	        var result = createBaseWrapper(func, bitmask, thisArg);
	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	        result = createCurryWrapper(func, bitmask, arity);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	        result = createPartialWrapper(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	      var index = -1,
	          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(array, other);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isUnordered) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue ||
	                  equalFunc(arrValue, othValue, customizer, bitmask, stack);
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, customizer, bitmask, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and
	          // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
	          // not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object) ? other != +other : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= UNORDERED_COMPARE_FLAG;
	          stack.set(object, other);

	          // Recursively compare objects (susceptible to call stack limits).
	          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : baseHas(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      return result;
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a
	     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	     * Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = toPairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getPlaceholder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the `[[Prototype]]` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {null|Object} Returns the `[[Prototype]]`.
	     */
	    function getPrototype(value) {
	      return nativeGetPrototype(Object(value));
	    }

	    /**
	     * Creates an array of the own enumerable symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    function getSymbols(object) {
	      // Coerce `object` to an object to avoid non-object errors in V8.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
	      return getOwnPropertySymbols(Object(object));
	    }

	    // Fallback for IE < 11.
	    if (!getOwnPropertySymbols) {
	      getSymbols = function() {
	        return [];
	      };
	    }

	    /**
	     * Creates an array of the own and inherited enumerable symbol properties
	     * of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function getTag(value) {
	      return objectToString.call(value);
	    }

	    // Fallback for data views, maps, sets, and weak maps in IE 11,
	    // for data views in Edge, and promises in Node.js.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = objectToString.call(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : undefined;

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var result,
	          index = -1,
	          length = path.length;

	      while (++index < length) {
	        var key = path[index];
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result) {
	        return result;
	      }
	      var length = object ? object.length : 0;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isString(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Creates an array of index keys for `object` values of arrays,
	     * `arguments` objects, and strings, otherwise `null` is returned.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array|null} Returns index keys, else `null`.
	     */
	    function indexKeys(object) {
	      var length = object ? object.length : undefined;
	      if (isLength(length) &&
	          (isArray(object) || isString(object) || isArguments(object))) {
	        return baseTimes(length, String);
	      }
	      return null;
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArrayLikeObject(value) && (isArray(value) || isArguments(value));
	    }

	    /**
	     * Checks if `value` is a flattenable array and not a `_.matchesProperty`
	     * iteratee shorthand.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenableIteratee(value) {
	      return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol') {
	        return true;
	      }
	      return !isArray(value) &&
	        (isSymbol(value) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	          (object != null && value in Object(object)));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return type == 'number' || type == 'boolean' ||
	        (type == 'string' && value != '__proto__') || value == null;
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
	      }
	      return objValue;
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoize(function(string) {
	      var result = [];
	      toString(string).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(key) {
	      return (typeof key == 'string' || isSymbol(key)) ? key : (key + '');
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to process.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array ? array.length : 0;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length,
	          array = castArray(arguments[0]);

	      if (length < 2) {
	        return length ? copyArray(array) : [];
	      }
	      var args = Array(length - 1);
	      while (length--) {
	        args[length - 1] = arguments[length];
	      }
	      return arrayConcat(array, baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other given
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([3, 2, 1], [4, 2]);
	     * // => [3, 1]
	     */
	    var difference = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
	     * // => [3.1, 1.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = rest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. Result values
	     * are chosen from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = rest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3))
	        : -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3), true)
	        : -1;
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs ? pairs.length : 0,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      fromIndex = toInteger(fromIndex);
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return baseIndexOf(array, value, fromIndex);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [4, 2], [1, 2]);
	     * // => [2]
	     */
	    var intersection = rest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = rest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. Result values are chosen
	     * from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = rest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (comparator === last(mapped)) {
	        comparator = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array ? nativeJoin.call(array, separator) : '';
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = (
	          index < 0
	            ? nativeMax(length + index, 0)
	            : nativeMin(index, length - 1)
	        ) + 1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Gets the nth element of `array`. If `n` is negative, the nth element
	     * from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    var pull = rest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pullAll(array, [2, 3]);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = rest(function(array, indexes) {
	      indexes = arrayMap(baseFlatten(indexes, 1), String);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(compareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array ? nativeReverse.call(array) : array;
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 5], 4);
	     * // => 0
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
	     *
	     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([1, 1, 2, 2], 2);
	     * // => 2
	     */
	    function sortedIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5], 4);
	     * // => 1
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniqBy(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2, 1], [4, 2], [1, 2]);
	     * // => [2, 1, 4]
	     */
	    var union = rest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1, 1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each
	     * element is kept.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length)
	        ? baseUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseUniq(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      return (array && array.length)
	        ? baseUniq(array, undefined, comparator)
	        : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([2, 1], [4, 2]);
	     * // => [1, 4]
	     */
	    var xor = rest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = rest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = rest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     *
	     * _(['a', 'b', 'c']).at(0, 2).value();
	     * // => ['a', 'c']
	     */
	    var wrapperAt = rest(function(paths) {
	      paths = baseFlatten(paths, 1);
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    function find(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEach);
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    function findLast(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate, true);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEachRight);
	    }

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEach(collection, iteratee)
	        : baseEach(collection, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEachRight(collection, iteratee)
	        : baseEachRight(collection, getIteratee(iteratee));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function, it's
	     * invoked for and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = rest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getIteratee(predicate, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var array = isArrayLike(collection) ? collection : values(collection),
	          length = array.length;

	      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = baseClamp(toInteger(n), 0, length);
	      }
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sampleSize(collection, MAX_ARRAY_LENGTH);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        var result = collection.length;
	        return (result && isString(collection)) ? stringSize(collection) : result;
	      }
	      if (isObjectLike(collection)) {
	        var tag = getTag(collection);
	        if (tag == mapTag || tag == setTag) {
	          return collection.size;
	        }
	      }
	      return keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [iteratees=[_.identity]] The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, function(o) { return o.user; });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     *
	     * _.sortBy(users, 'user', function(o) {
	     *   return Math.floor(o.age / 10);
	     * });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    var sortBy = rest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
	        ? iteratees[0]
	        : baseFlatten(iteratees, 1, isFlattenableIteratee);

	      return baseOrderBy(collection, iteratees, []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @type {Function}
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred function to be invoked.
	     */
	    var now = Date.now;

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = rest(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bind));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = rest(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bindKey));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide an options object to indicate whether `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent calls
	     * to the debounced function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime = 0,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;

	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (!lastCallTime || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        clearTimeout(timerId);
	        timerId = undefined;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastCallTime = lastInvokeTime = 0;
	        lastArgs = lastThis = timerId = undefined;
	      }

	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one or more milliseconds.
	     */
	    var defer = rest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = rest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrapper(func, FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with arguments transformed by
	     * corresponding `transforms`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [transforms[_.identity]] The functions to transform.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = rest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return rest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partial));
	      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partialRight));
	      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = rest(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, array);
	          case 1: return func.call(this, args[0], array);
	          case 2: return func.call(this, args[0], args[1], array);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = array;
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return rest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide an options object to indicate whether
	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return partial(wrapper, value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, false, true);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      return baseClone(value, false, true, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, true, true);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      return baseClone(value, true, true, customizer);
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @type {Function}
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    function isArrayBuffer(value) {
	      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
	    }

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value)) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && objectToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = !Buffer ? constant(false) : function(value) {
	      return value instanceof Buffer;
	    };

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objectToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element,
	     *  else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (isArrayLike(value) &&
	          (isArray(value) || isString(value) || isFunction(value.splice) ||
	            isArguments(value) || isBuffer(value))) {
	        return !value.length;
	      }
	      if (isObjectLike(value)) {
	        var tag = getTag(value);
	        if (tag == mapTag || tag == setTag) {
	          return !value.size;
	        }
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return !(nonEnumShadows && keys(value).length);
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object,
	     *  else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      return (objectToString.call(value) == errorTag) ||
	        (typeof value.message == 'string' && typeof value.name == 'string');
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number,
	     *  else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MAX_VALUE);
	     * // => true
	     *
	     * _.isFinite(3.14);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 8 which returns 'object' for typed array and weak map constructors,
	      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	      var tag = isObject(value) ? objectToString.call(value) : '';
	      return tag == funcTag || tag == genTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length,
	     *  else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return !!value && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    function isMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values. This method is
	     * equivalent to a `_.matches` function when `source` is partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && objectToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object,
	     *  else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) ||
	          objectToString.call(value) != objectTag || isHostObject(value)) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return (typeof Ctor == 'function' &&
	        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objectToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer,
	     *  else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    function isSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && objectToString.call(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (iteratorSymbol && value[iteratorSymbol]) {
	        return iteratorToArray(value[iteratorSymbol]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3');
	     * // => 3
	     */
	    function toInteger(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      var remainder = value % 1;
	      return value === value ? (remainder ? value - remainder : value) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3);
	     * // => 3
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3');
	     * // => 3
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = isFunction(value.valueOf) ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (value == null) {
	        return '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.c = 3;
	     * }
	     *
	     * function Bar() {
	     *   this.e = 5;
	     * }
	     *
	     * Foo.prototype.d = 4;
	     * Bar.prototype.f = 6;
	     *
	     * _.assign({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3, 'e': 5 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * function Bar() {
	     *   this.d = 4;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     * Bar.prototype.e = 5;
	     *
	     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keysIn(source), object);
	        return;
	      }
	      for (var key in source) {
	        assignValue(object, key, source[key]);
	      }
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     *
	     * _.at(['a', 'b', 'c'], 0, 2);
	     * // => ['a', 'c']
	     */
	    var at = rest(function(object, paths) {
	      return baseAt(object, baseFlatten(paths, 1));
	    });

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = rest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = rest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = rest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      var isProto = isPrototype(object);
	      if (!(isProto || isArrayLike(object))) {
	        return baseKeys(object);
	      }
	      var indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      for (var key in object) {
	        if (baseHas(object, key) &&
	            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(isProto && key == 'constructor')) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      var index = -1,
	          isProto = isPrototype(object),
	          props = baseKeysIn(object),
	          propsLength = props.length,
	          indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      while (++index < propsLength) {
	        var key = props[index];
	        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[iteratee(value, key, object)] = value;
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively.Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with seven arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable string keyed properties of `object` that are
	     * not omitted.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = rest(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      props = arrayMap(baseFlatten(props, 1), toKey);
	      return basePick(object, baseDifference(getAllKeysIn(object), props));
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      predicate = getIteratee(predicate);
	      return basePickBy(object, function(value, key) {
	        return !predicate(value, key);
	      });
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = rest(function(object, props) {
	      return object == null ? {} : basePick(object, baseFlatten(props, 1));
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getIteratee(predicate));
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        object = undefined;
	        length = 1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[path[index]];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    function toPairs(object) {
	      return baseToPairs(object, keys(object));
	    }

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
	     */
	    function toPairsIn(object) {
	      return baseToPairs(object, keysIn(object));
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. The iteratee is invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getIteratee(iteratee, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object ? baseValues(object, keys(object)) : [];
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toNumber(start) || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toNumber(end) || 0;
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toNumber(lower) || 0;
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toNumber(upper) || 0;
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = typeof target == 'string' ? target : (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in IE < 9, they can break out of
	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the
	     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = toString(string).replace(reTrim, '');
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the new array of string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator += '';
	        if (separator == '' && reHasComplexSymbol.test(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return nativeSplit.call(string, separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);

	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrim, '');
	      }
	      if (!(chars += '')) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!(chars += '')) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!(chars += '')) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? toString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (reHasComplexSymbol.test(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = rest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, 'onClick');
	     * jQuery(element).on('click', view.onClick);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = rest(function(object, methodNames) {
	      arrayEach(baseFlatten(methodNames, 1), function(key) {
	        object[key] = bind(object[key], object);
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.constant(true),                _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs ? pairs.length : 0,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return rest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, true));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument given to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`. The created function is equivalent to
	     * `_.isMatch` with a `source` partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = rest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = rest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns its nth argument. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return rest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [iteratees=[_.identity]] The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over(Math.max, Math.min);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [predicates=[_.identity]] The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [predicates=[_.identity]] The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(true));
	     * // => [true, true, true, true]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     *
	     * var path = ['a', 'b', 'c'],
	     *     newPath = _.toPath(path);
	     *
	     * console.log(newPath);
	     * // => ['a', 'b', 'c']
	     *
	     * console.log(path === newPath);
	     * // => false
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    });

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    });

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, gt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), gt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, lt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), lt)
	        : undefined;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    });

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    });

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.deburr = deburr;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      predicate = getIteratee(predicate, 3);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    if (iteratorSymbol) {
	      lodash.prototype[iteratorSymbol] = wrapperToIterator;
	    }
	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Expose lodash on the free variable `window` or `self` when available. This
	  // prevents errors in cases where lodash is loaded by a script tag in the presence
	  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
	  (freeWindow || freeSelf || {})._ = _;

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)(module), (function() { return this; }())))

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(14);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(3);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(16);
	__webpack_require__(19);

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(17);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(18)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../build/node_modules/css-loader/index.js!./../../../../../build/node_modules/less-loader/index.js!./../../../../../build/node_modules/bootstrap-webpack/bootstrap-styles.loader.js!./bootstrap.config.js", function() {
				var newContent = require("!!./../../../../../build/node_modules/css-loader/index.js!./../../../../../build/node_modules/less-loader/index.js!./../../../../../build/node_modules/bootstrap-webpack/bootstrap-styles.loader.js!./bootstrap.config.js");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(5)();
	// imports


	// module
	exports.push([module.id, "", ""]);

	// exports


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(20);
	__webpack_require__(21);
	__webpack_require__(22);
	__webpack_require__(23);
	__webpack_require__(24);

/***/ },
/* 20 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: transition.js v3.3.6
	 * http://getbootstrap.com/javascript/#transitions
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
	  // ============================================================

	  function transitionEnd() {
	    var el = document.createElement('bootstrap')

	    var transEndEventNames = {
	      WebkitTransition : 'webkitTransitionEnd',
	      MozTransition    : 'transitionend',
	      OTransition      : 'oTransitionEnd otransitionend',
	      transition       : 'transitionend'
	    }

	    for (var name in transEndEventNames) {
	      if (el.style[name] !== undefined) {
	        return { end: transEndEventNames[name] }
	      }
	    }

	    return false // explicit for ie8 (  ._.)
	  }

	  // http://blog.alexmaccaw.com/css-transitions
	  $.fn.emulateTransitionEnd = function (duration) {
	    var called = false
	    var $el = this
	    $(this).one('bsTransitionEnd', function () { called = true })
	    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
	    setTimeout(callback, duration)
	    return this
	  }

	  $(function () {
	    $.support.transition = transitionEnd()

	    if (!$.support.transition) return

	    $.event.special.bsTransitionEnd = {
	      bindType: $.support.transition.end,
	      delegateType: $.support.transition.end,
	      handle: function (e) {
	        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
	      }
	    }
	  })

	}(jQuery);


/***/ },
/* 21 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: collapse.js v3.3.6
	 * http://getbootstrap.com/javascript/#collapse
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // COLLAPSE PUBLIC CLASS DEFINITION
	  // ================================

	  var Collapse = function (element, options) {
	    this.$element      = $(element)
	    this.options       = $.extend({}, Collapse.DEFAULTS, options)
	    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
	                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
	    this.transitioning = null

	    if (this.options.parent) {
	      this.$parent = this.getParent()
	    } else {
	      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
	    }

	    if (this.options.toggle) this.toggle()
	  }

	  Collapse.VERSION  = '3.3.6'

	  Collapse.TRANSITION_DURATION = 350

	  Collapse.DEFAULTS = {
	    toggle: true
	  }

	  Collapse.prototype.dimension = function () {
	    var hasWidth = this.$element.hasClass('width')
	    return hasWidth ? 'width' : 'height'
	  }

	  Collapse.prototype.show = function () {
	    if (this.transitioning || this.$element.hasClass('in')) return

	    var activesData
	    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

	    if (actives && actives.length) {
	      activesData = actives.data('bs.collapse')
	      if (activesData && activesData.transitioning) return
	    }

	    var startEvent = $.Event('show.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return

	    if (actives && actives.length) {
	      Plugin.call(actives, 'hide')
	      activesData || actives.data('bs.collapse', null)
	    }

	    var dimension = this.dimension()

	    this.$element
	      .removeClass('collapse')
	      .addClass('collapsing')[dimension](0)
	      .attr('aria-expanded', true)

	    this.$trigger
	      .removeClass('collapsed')
	      .attr('aria-expanded', true)

	    this.transitioning = 1

	    var complete = function () {
	      this.$element
	        .removeClass('collapsing')
	        .addClass('collapse in')[dimension]('')
	      this.transitioning = 0
	      this.$element
	        .trigger('shown.bs.collapse')
	    }

	    if (!$.support.transition) return complete.call(this)

	    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

	    this.$element
	      .one('bsTransitionEnd', $.proxy(complete, this))
	      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
	  }

	  Collapse.prototype.hide = function () {
	    if (this.transitioning || !this.$element.hasClass('in')) return

	    var startEvent = $.Event('hide.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return

	    var dimension = this.dimension()

	    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

	    this.$element
	      .addClass('collapsing')
	      .removeClass('collapse in')
	      .attr('aria-expanded', false)

	    this.$trigger
	      .addClass('collapsed')
	      .attr('aria-expanded', false)

	    this.transitioning = 1

	    var complete = function () {
	      this.transitioning = 0
	      this.$element
	        .removeClass('collapsing')
	        .addClass('collapse')
	        .trigger('hidden.bs.collapse')
	    }

	    if (!$.support.transition) return complete.call(this)

	    this.$element
	      [dimension](0)
	      .one('bsTransitionEnd', $.proxy(complete, this))
	      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
	  }

	  Collapse.prototype.toggle = function () {
	    this[this.$element.hasClass('in') ? 'hide' : 'show']()
	  }

	  Collapse.prototype.getParent = function () {
	    return $(this.options.parent)
	      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
	      .each($.proxy(function (i, element) {
	        var $element = $(element)
	        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
	      }, this))
	      .end()
	  }

	  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
	    var isOpen = $element.hasClass('in')

	    $element.attr('aria-expanded', isOpen)
	    $trigger
	      .toggleClass('collapsed', !isOpen)
	      .attr('aria-expanded', isOpen)
	  }

	  function getTargetFromTrigger($trigger) {
	    var href
	    var target = $trigger.attr('data-target')
	      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

	    return $(target)
	  }


	  // COLLAPSE PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.collapse')
	      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

	      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
	      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.collapse

	  $.fn.collapse             = Plugin
	  $.fn.collapse.Constructor = Collapse


	  // COLLAPSE NO CONFLICT
	  // ====================

	  $.fn.collapse.noConflict = function () {
	    $.fn.collapse = old
	    return this
	  }


	  // COLLAPSE DATA-API
	  // =================

	  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
	    var $this   = $(this)

	    if (!$this.attr('data-target')) e.preventDefault()

	    var $target = getTargetFromTrigger($this)
	    var data    = $target.data('bs.collapse')
	    var option  = data ? 'toggle' : $this.data()

	    Plugin.call($target, option)
	  })

	}(jQuery);


/***/ },
/* 22 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: dropdown.js v3.3.6
	 * http://getbootstrap.com/javascript/#dropdowns
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // DROPDOWN CLASS DEFINITION
	  // =========================

	  var backdrop = '.dropdown-backdrop'
	  var toggle   = '[data-toggle="dropdown"]'
	  var Dropdown = function (element) {
	    $(element).on('click.bs.dropdown', this.toggle)
	  }

	  Dropdown.VERSION = '3.3.6'

	  function getParent($this) {
	    var selector = $this.attr('data-target')

	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }

	    var $parent = selector && $(selector)

	    return $parent && $parent.length ? $parent : $this.parent()
	  }

	  function clearMenus(e) {
	    if (e && e.which === 3) return
	    $(backdrop).remove()
	    $(toggle).each(function () {
	      var $this         = $(this)
	      var $parent       = getParent($this)
	      var relatedTarget = { relatedTarget: this }

	      if (!$parent.hasClass('open')) return

	      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

	      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

	      if (e.isDefaultPrevented()) return

	      $this.attr('aria-expanded', 'false')
	      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
	    })
	  }

	  Dropdown.prototype.toggle = function (e) {
	    var $this = $(this)

	    if ($this.is('.disabled, :disabled')) return

	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')

	    clearMenus()

	    if (!isActive) {
	      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
	        // if mobile we use a backdrop because click events don't delegate
	        $(document.createElement('div'))
	          .addClass('dropdown-backdrop')
	          .insertAfter($(this))
	          .on('click', clearMenus)
	      }

	      var relatedTarget = { relatedTarget: this }
	      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

	      if (e.isDefaultPrevented()) return

	      $this
	        .trigger('focus')
	        .attr('aria-expanded', 'true')

	      $parent
	        .toggleClass('open')
	        .trigger($.Event('shown.bs.dropdown', relatedTarget))
	    }

	    return false
	  }

	  Dropdown.prototype.keydown = function (e) {
	    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

	    var $this = $(this)

	    e.preventDefault()
	    e.stopPropagation()

	    if ($this.is('.disabled, :disabled')) return

	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')

	    if (!isActive && e.which != 27 || isActive && e.which == 27) {
	      if (e.which == 27) $parent.find(toggle).trigger('focus')
	      return $this.trigger('click')
	    }

	    var desc = ' li:not(.disabled):visible a'
	    var $items = $parent.find('.dropdown-menu' + desc)

	    if (!$items.length) return

	    var index = $items.index(e.target)

	    if (e.which == 38 && index > 0)                 index--         // up
	    if (e.which == 40 && index < $items.length - 1) index++         // down
	    if (!~index)                                    index = 0

	    $items.eq(index).trigger('focus')
	  }


	  // DROPDOWN PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.dropdown')

	      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
	      if (typeof option == 'string') data[option].call($this)
	    })
	  }

	  var old = $.fn.dropdown

	  $.fn.dropdown             = Plugin
	  $.fn.dropdown.Constructor = Dropdown


	  // DROPDOWN NO CONFLICT
	  // ====================

	  $.fn.dropdown.noConflict = function () {
	    $.fn.dropdown = old
	    return this
	  }


	  // APPLY TO STANDARD DROPDOWN ELEMENTS
	  // ===================================

	  $(document)
	    .on('click.bs.dropdown.data-api', clearMenus)
	    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
	    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
	    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
	    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

	}(jQuery);


/***/ },
/* 23 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: modal.js v3.3.6
	 * http://getbootstrap.com/javascript/#modals
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // MODAL CLASS DEFINITION
	  // ======================

	  var Modal = function (element, options) {
	    this.options             = options
	    this.$body               = $(document.body)
	    this.$element            = $(element)
	    this.$dialog             = this.$element.find('.modal-dialog')
	    this.$backdrop           = null
	    this.isShown             = null
	    this.originalBodyPad     = null
	    this.scrollbarWidth      = 0
	    this.ignoreBackdropClick = false

	    if (this.options.remote) {
	      this.$element
	        .find('.modal-content')
	        .load(this.options.remote, $.proxy(function () {
	          this.$element.trigger('loaded.bs.modal')
	        }, this))
	    }
	  }

	  Modal.VERSION  = '3.3.6'

	  Modal.TRANSITION_DURATION = 300
	  Modal.BACKDROP_TRANSITION_DURATION = 150

	  Modal.DEFAULTS = {
	    backdrop: true,
	    keyboard: true,
	    show: true
	  }

	  Modal.prototype.toggle = function (_relatedTarget) {
	    return this.isShown ? this.hide() : this.show(_relatedTarget)
	  }

	  Modal.prototype.show = function (_relatedTarget) {
	    var that = this
	    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

	    this.$element.trigger(e)

	    if (this.isShown || e.isDefaultPrevented()) return

	    this.isShown = true

	    this.checkScrollbar()
	    this.setScrollbar()
	    this.$body.addClass('modal-open')

	    this.escape()
	    this.resize()

	    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

	    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
	      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
	        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
	      })
	    })

	    this.backdrop(function () {
	      var transition = $.support.transition && that.$element.hasClass('fade')

	      if (!that.$element.parent().length) {
	        that.$element.appendTo(that.$body) // don't move modals dom position
	      }

	      that.$element
	        .show()
	        .scrollTop(0)

	      that.adjustDialog()

	      if (transition) {
	        that.$element[0].offsetWidth // force reflow
	      }

	      that.$element.addClass('in')

	      that.enforceFocus()

	      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

	      transition ?
	        that.$dialog // wait for modal to slide in
	          .one('bsTransitionEnd', function () {
	            that.$element.trigger('focus').trigger(e)
	          })
	          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
	        that.$element.trigger('focus').trigger(e)
	    })
	  }

	  Modal.prototype.hide = function (e) {
	    if (e) e.preventDefault()

	    e = $.Event('hide.bs.modal')

	    this.$element.trigger(e)

	    if (!this.isShown || e.isDefaultPrevented()) return

	    this.isShown = false

	    this.escape()
	    this.resize()

	    $(document).off('focusin.bs.modal')

	    this.$element
	      .removeClass('in')
	      .off('click.dismiss.bs.modal')
	      .off('mouseup.dismiss.bs.modal')

	    this.$dialog.off('mousedown.dismiss.bs.modal')

	    $.support.transition && this.$element.hasClass('fade') ?
	      this.$element
	        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
	        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
	      this.hideModal()
	  }

	  Modal.prototype.enforceFocus = function () {
	    $(document)
	      .off('focusin.bs.modal') // guard against infinite focus loop
	      .on('focusin.bs.modal', $.proxy(function (e) {
	        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
	          this.$element.trigger('focus')
	        }
	      }, this))
	  }

	  Modal.prototype.escape = function () {
	    if (this.isShown && this.options.keyboard) {
	      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
	        e.which == 27 && this.hide()
	      }, this))
	    } else if (!this.isShown) {
	      this.$element.off('keydown.dismiss.bs.modal')
	    }
	  }

	  Modal.prototype.resize = function () {
	    if (this.isShown) {
	      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
	    } else {
	      $(window).off('resize.bs.modal')
	    }
	  }

	  Modal.prototype.hideModal = function () {
	    var that = this
	    this.$element.hide()
	    this.backdrop(function () {
	      that.$body.removeClass('modal-open')
	      that.resetAdjustments()
	      that.resetScrollbar()
	      that.$element.trigger('hidden.bs.modal')
	    })
	  }

	  Modal.prototype.removeBackdrop = function () {
	    this.$backdrop && this.$backdrop.remove()
	    this.$backdrop = null
	  }

	  Modal.prototype.backdrop = function (callback) {
	    var that = this
	    var animate = this.$element.hasClass('fade') ? 'fade' : ''

	    if (this.isShown && this.options.backdrop) {
	      var doAnimate = $.support.transition && animate

	      this.$backdrop = $(document.createElement('div'))
	        .addClass('modal-backdrop ' + animate)
	        .appendTo(this.$body)

	      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
	        if (this.ignoreBackdropClick) {
	          this.ignoreBackdropClick = false
	          return
	        }
	        if (e.target !== e.currentTarget) return
	        this.options.backdrop == 'static'
	          ? this.$element[0].focus()
	          : this.hide()
	      }, this))

	      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

	      this.$backdrop.addClass('in')

	      if (!callback) return

	      doAnimate ?
	        this.$backdrop
	          .one('bsTransitionEnd', callback)
	          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
	        callback()

	    } else if (!this.isShown && this.$backdrop) {
	      this.$backdrop.removeClass('in')

	      var callbackRemove = function () {
	        that.removeBackdrop()
	        callback && callback()
	      }
	      $.support.transition && this.$element.hasClass('fade') ?
	        this.$backdrop
	          .one('bsTransitionEnd', callbackRemove)
	          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
	        callbackRemove()

	    } else if (callback) {
	      callback()
	    }
	  }

	  // these following methods are used to handle overflowing modals

	  Modal.prototype.handleUpdate = function () {
	    this.adjustDialog()
	  }

	  Modal.prototype.adjustDialog = function () {
	    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

	    this.$element.css({
	      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
	      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
	    })
	  }

	  Modal.prototype.resetAdjustments = function () {
	    this.$element.css({
	      paddingLeft: '',
	      paddingRight: ''
	    })
	  }

	  Modal.prototype.checkScrollbar = function () {
	    var fullWindowWidth = window.innerWidth
	    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
	      var documentElementRect = document.documentElement.getBoundingClientRect()
	      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
	    }
	    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
	    this.scrollbarWidth = this.measureScrollbar()
	  }

	  Modal.prototype.setScrollbar = function () {
	    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
	    this.originalBodyPad = document.body.style.paddingRight || ''
	    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
	  }

	  Modal.prototype.resetScrollbar = function () {
	    this.$body.css('padding-right', this.originalBodyPad)
	  }

	  Modal.prototype.measureScrollbar = function () { // thx walsh
	    var scrollDiv = document.createElement('div')
	    scrollDiv.className = 'modal-scrollbar-measure'
	    this.$body.append(scrollDiv)
	    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
	    this.$body[0].removeChild(scrollDiv)
	    return scrollbarWidth
	  }


	  // MODAL PLUGIN DEFINITION
	  // =======================

	  function Plugin(option, _relatedTarget) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.modal')
	      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

	      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
	      if (typeof option == 'string') data[option](_relatedTarget)
	      else if (options.show) data.show(_relatedTarget)
	    })
	  }

	  var old = $.fn.modal

	  $.fn.modal             = Plugin
	  $.fn.modal.Constructor = Modal


	  // MODAL NO CONFLICT
	  // =================

	  $.fn.modal.noConflict = function () {
	    $.fn.modal = old
	    return this
	  }


	  // MODAL DATA-API
	  // ==============

	  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
	    var $this   = $(this)
	    var href    = $this.attr('href')
	    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
	    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

	    if ($this.is('a')) e.preventDefault()

	    $target.one('show.bs.modal', function (showEvent) {
	      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
	      $target.one('hidden.bs.modal', function () {
	        $this.is(':visible') && $this.trigger('focus')
	      })
	    })
	    Plugin.call($target, option, this)
	  })

	}(jQuery);


/***/ },
/* 24 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: tooltip.js v3.3.6
	 * http://getbootstrap.com/javascript/#tooltip
	 * Inspired by the original jQuery.tipsy by Jason Frame
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // TOOLTIP PUBLIC CLASS DEFINITION
	  // ===============================

	  var Tooltip = function (element, options) {
	    this.type       = null
	    this.options    = null
	    this.enabled    = null
	    this.timeout    = null
	    this.hoverState = null
	    this.$element   = null
	    this.inState    = null

	    this.init('tooltip', element, options)
	  }

	  Tooltip.VERSION  = '3.3.6'

	  Tooltip.TRANSITION_DURATION = 150

	  Tooltip.DEFAULTS = {
	    animation: true,
	    placement: 'top',
	    selector: false,
	    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	    trigger: 'hover focus',
	    title: '',
	    delay: 0,
	    html: false,
	    container: false,
	    viewport: {
	      selector: 'body',
	      padding: 0
	    }
	  }

	  Tooltip.prototype.init = function (type, element, options) {
	    this.enabled   = true
	    this.type      = type
	    this.$element  = $(element)
	    this.options   = this.getOptions(options)
	    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
	    this.inState   = { click: false, hover: false, focus: false }

	    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
	      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
	    }

	    var triggers = this.options.trigger.split(' ')

	    for (var i = triggers.length; i--;) {
	      var trigger = triggers[i]

	      if (trigger == 'click') {
	        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
	      } else if (trigger != 'manual') {
	        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
	        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

	        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
	        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
	      }
	    }

	    this.options.selector ?
	      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
	      this.fixTitle()
	  }

	  Tooltip.prototype.getDefaults = function () {
	    return Tooltip.DEFAULTS
	  }

	  Tooltip.prototype.getOptions = function (options) {
	    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

	    if (options.delay && typeof options.delay == 'number') {
	      options.delay = {
	        show: options.delay,
	        hide: options.delay
	      }
	    }

	    return options
	  }

	  Tooltip.prototype.getDelegateOptions = function () {
	    var options  = {}
	    var defaults = this.getDefaults()

	    this._options && $.each(this._options, function (key, value) {
	      if (defaults[key] != value) options[key] = value
	    })

	    return options
	  }

	  Tooltip.prototype.enter = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget).data('bs.' + this.type)

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
	      $(obj.currentTarget).data('bs.' + this.type, self)
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
	    }

	    if (self.tip().hasClass('in') || self.hoverState == 'in') {
	      self.hoverState = 'in'
	      return
	    }

	    clearTimeout(self.timeout)

	    self.hoverState = 'in'

	    if (!self.options.delay || !self.options.delay.show) return self.show()

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'in') self.show()
	    }, self.options.delay.show)
	  }

	  Tooltip.prototype.isInStateTrue = function () {
	    for (var key in this.inState) {
	      if (this.inState[key]) return true
	    }

	    return false
	  }

	  Tooltip.prototype.leave = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget).data('bs.' + this.type)

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
	      $(obj.currentTarget).data('bs.' + this.type, self)
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
	    }

	    if (self.isInStateTrue()) return

	    clearTimeout(self.timeout)

	    self.hoverState = 'out'

	    if (!self.options.delay || !self.options.delay.hide) return self.hide()

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'out') self.hide()
	    }, self.options.delay.hide)
	  }

	  Tooltip.prototype.show = function () {
	    var e = $.Event('show.bs.' + this.type)

	    if (this.hasContent() && this.enabled) {
	      this.$element.trigger(e)

	      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
	      if (e.isDefaultPrevented() || !inDom) return
	      var that = this

	      var $tip = this.tip()

	      var tipId = this.getUID(this.type)

	      this.setContent()
	      $tip.attr('id', tipId)
	      this.$element.attr('aria-describedby', tipId)

	      if (this.options.animation) $tip.addClass('fade')

	      var placement = typeof this.options.placement == 'function' ?
	        this.options.placement.call(this, $tip[0], this.$element[0]) :
	        this.options.placement

	      var autoToken = /\s?auto?\s?/i
	      var autoPlace = autoToken.test(placement)
	      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

	      $tip
	        .detach()
	        .css({ top: 0, left: 0, display: 'block' })
	        .addClass(placement)
	        .data('bs.' + this.type, this)

	      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
	      this.$element.trigger('inserted.bs.' + this.type)

	      var pos          = this.getPosition()
	      var actualWidth  = $tip[0].offsetWidth
	      var actualHeight = $tip[0].offsetHeight

	      if (autoPlace) {
	        var orgPlacement = placement
	        var viewportDim = this.getPosition(this.$viewport)

	        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
	                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
	                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
	                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
	                    placement

	        $tip
	          .removeClass(orgPlacement)
	          .addClass(placement)
	      }

	      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

	      this.applyPlacement(calculatedOffset, placement)

	      var complete = function () {
	        var prevHoverState = that.hoverState
	        that.$element.trigger('shown.bs.' + that.type)
	        that.hoverState = null

	        if (prevHoverState == 'out') that.leave(that)
	      }

	      $.support.transition && this.$tip.hasClass('fade') ?
	        $tip
	          .one('bsTransitionEnd', complete)
	          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
	        complete()
	    }
	  }

	  Tooltip.prototype.applyPlacement = function (offset, placement) {
	    var $tip   = this.tip()
	    var width  = $tip[0].offsetWidth
	    var height = $tip[0].offsetHeight

	    // manually read margins because getBoundingClientRect includes difference
	    var marginTop = parseInt($tip.css('margin-top'), 10)
	    var marginLeft = parseInt($tip.css('margin-left'), 10)

	    // we must check for NaN for ie 8/9
	    if (isNaN(marginTop))  marginTop  = 0
	    if (isNaN(marginLeft)) marginLeft = 0

	    offset.top  += marginTop
	    offset.left += marginLeft

	    // $.fn.offset doesn't round pixel values
	    // so we use setOffset directly with our own function B-0
	    $.offset.setOffset($tip[0], $.extend({
	      using: function (props) {
	        $tip.css({
	          top: Math.round(props.top),
	          left: Math.round(props.left)
	        })
	      }
	    }, offset), 0)

	    $tip.addClass('in')

	    // check to see if placing tip in new offset caused the tip to resize itself
	    var actualWidth  = $tip[0].offsetWidth
	    var actualHeight = $tip[0].offsetHeight

	    if (placement == 'top' && actualHeight != height) {
	      offset.top = offset.top + height - actualHeight
	    }

	    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

	    if (delta.left) offset.left += delta.left
	    else offset.top += delta.top

	    var isVertical          = /top|bottom/.test(placement)
	    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
	    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

	    $tip.offset(offset)
	    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
	  }

	  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
	    this.arrow()
	      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
	      .css(isVertical ? 'top' : 'left', '')
	  }

	  Tooltip.prototype.setContent = function () {
	    var $tip  = this.tip()
	    var title = this.getTitle()

	    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
	    $tip.removeClass('fade in top bottom left right')
	  }

	  Tooltip.prototype.hide = function (callback) {
	    var that = this
	    var $tip = $(this.$tip)
	    var e    = $.Event('hide.bs.' + this.type)

	    function complete() {
	      if (that.hoverState != 'in') $tip.detach()
	      that.$element
	        .removeAttr('aria-describedby')
	        .trigger('hidden.bs.' + that.type)
	      callback && callback()
	    }

	    this.$element.trigger(e)

	    if (e.isDefaultPrevented()) return

	    $tip.removeClass('in')

	    $.support.transition && $tip.hasClass('fade') ?
	      $tip
	        .one('bsTransitionEnd', complete)
	        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
	      complete()

	    this.hoverState = null

	    return this
	  }

	  Tooltip.prototype.fixTitle = function () {
	    var $e = this.$element
	    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
	      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
	    }
	  }

	  Tooltip.prototype.hasContent = function () {
	    return this.getTitle()
	  }

	  Tooltip.prototype.getPosition = function ($element) {
	    $element   = $element || this.$element

	    var el     = $element[0]
	    var isBody = el.tagName == 'BODY'

	    var elRect    = el.getBoundingClientRect()
	    if (elRect.width == null) {
	      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
	      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
	    }
	    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
	    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
	    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

	    return $.extend({}, elRect, scroll, outerDims, elOffset)
	  }

	  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
	    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
	           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
	           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
	        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

	  }

	  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
	    var delta = { top: 0, left: 0 }
	    if (!this.$viewport) return delta

	    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
	    var viewportDimensions = this.getPosition(this.$viewport)

	    if (/right|left/.test(placement)) {
	      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
	      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
	      if (topEdgeOffset < viewportDimensions.top) { // top overflow
	        delta.top = viewportDimensions.top - topEdgeOffset
	      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
	        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
	      }
	    } else {
	      var leftEdgeOffset  = pos.left - viewportPadding
	      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
	      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
	        delta.left = viewportDimensions.left - leftEdgeOffset
	      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
	        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
	      }
	    }

	    return delta
	  }

	  Tooltip.prototype.getTitle = function () {
	    var title
	    var $e = this.$element
	    var o  = this.options

	    title = $e.attr('data-original-title')
	      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

	    return title
	  }

	  Tooltip.prototype.getUID = function (prefix) {
	    do prefix += ~~(Math.random() * 1000000)
	    while (document.getElementById(prefix))
	    return prefix
	  }

	  Tooltip.prototype.tip = function () {
	    if (!this.$tip) {
	      this.$tip = $(this.options.template)
	      if (this.$tip.length != 1) {
	        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
	      }
	    }
	    return this.$tip
	  }

	  Tooltip.prototype.arrow = function () {
	    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
	  }

	  Tooltip.prototype.enable = function () {
	    this.enabled = true
	  }

	  Tooltip.prototype.disable = function () {
	    this.enabled = false
	  }

	  Tooltip.prototype.toggleEnabled = function () {
	    this.enabled = !this.enabled
	  }

	  Tooltip.prototype.toggle = function (e) {
	    var self = this
	    if (e) {
	      self = $(e.currentTarget).data('bs.' + this.type)
	      if (!self) {
	        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
	        $(e.currentTarget).data('bs.' + this.type, self)
	      }
	    }

	    if (e) {
	      self.inState.click = !self.inState.click
	      if (self.isInStateTrue()) self.enter(self)
	      else self.leave(self)
	    } else {
	      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
	    }
	  }

	  Tooltip.prototype.destroy = function () {
	    var that = this
	    clearTimeout(this.timeout)
	    this.hide(function () {
	      that.$element.off('.' + that.type).removeData('bs.' + that.type)
	      if (that.$tip) {
	        that.$tip.detach()
	      }
	      that.$tip = null
	      that.$arrow = null
	      that.$viewport = null
	    })
	  }


	  // TOOLTIP PLUGIN DEFINITION
	  // =========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.tooltip')
	      var options = typeof option == 'object' && option

	      if (!data && /destroy|hide/.test(option)) return
	      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.tooltip

	  $.fn.tooltip             = Plugin
	  $.fn.tooltip.Constructor = Tooltip


	  // TOOLTIP NO CONFLICT
	  // ===================

	  $.fn.tooltip.noConflict = function () {
	    $.fn.tooltip = old
	    return this
	  }

	}(jQuery);


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var $, ADD_CONTENT_CONTROLLER_EVENTS, ADD_CONTENT_MODEL_FIELDS, AddContentController, AddContentModel, EditorFormTabViewController, NEW_PLATE_DESIGN_CONTROLLER_EVENTS, NewPlateDesignController, PLATE_TABLE_CONTROLLER_EVENTS, PlateInfoController, PlateInfoModel, PlateStatusCollection, PlateTypeCollection, PlateViewController, SERIAL_DILUTION_CONTROLLER_EVENTS, SerialDilutionController, SerialDilutionModel, TemplateController,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	PlateInfoController = __webpack_require__(26).PlateInfoController;

	AddContentController = __webpack_require__(29).AddContentController;

	ADD_CONTENT_CONTROLLER_EVENTS = __webpack_require__(29).ADD_CONTENT_CONTROLLER_EVENTS;

	AddContentModel = __webpack_require__(32).AddContentModel;

	ADD_CONTENT_MODEL_FIELDS = __webpack_require__(32).ADD_CONTENT_MODEL_FIELDS;

	PlateTypeCollection = __webpack_require__(34).PlateTypeCollection;

	PlateStatusCollection = __webpack_require__(35).PlateStatusCollection;

	PlateViewController = __webpack_require__(36).PlateViewController;

	PLATE_TABLE_CONTROLLER_EVENTS = __webpack_require__(37).PLATE_TABLE_CONTROLLER_EVENTS;

	TemplateController = __webpack_require__(44).TemplateController;

	SerialDilutionController = __webpack_require__(46).SerialDilutionController;

	SERIAL_DILUTION_CONTROLLER_EVENTS = __webpack_require__(46).SERIAL_DILUTION_CONTROLLER_EVENTS;

	SerialDilutionModel = __webpack_require__(41).SerialDilutionModel;

	EditorFormTabViewController = __webpack_require__(48).EditorFormTabViewController;

	PlateInfoModel = __webpack_require__(50).PlateInfoModel;

	$ = __webpack_require__(3);

	NEW_PLATE_DESIGN_CONTROLLER_EVENTS = {
	  ADD_CONTENT: "AddContent",
	  ADD_CONTENT_FROM_TABLE: "AddContentFromTable",
	  ADD_IDENTIFIER_CONTENT_FROM_TABLE: "AddIdentifierContentFromTable"
	};

	NewPlateDesignController = (function(superClass) {
	  extend(NewPlateDesignController, superClass);

	  function NewPlateDesignController() {
	    this.handleApplyDilution = bind(this.handleApplyDilution, this);
	    this.handleAddContentFromTableSuccessCallback = bind(this.handleAddContentFromTableSuccessCallback, this);
	    this.handPlateContentUpdated = bind(this.handPlateContentUpdated, this);
	    this.handleAddContentSuccessCallback = bind(this.handleAddContentSuccessCallback, this);
	    this.handleAddContent = bind(this.handleAddContent, this);
	    this.handleContentUpdated = bind(this.handleContentUpdated, this);
	    this.handleRegionSelected = bind(this.handleRegionSelected, this);
	    this.render = bind(this.render, this);
	    this.completeInitialization = bind(this.completeInitialization, this);
	    return NewPlateDesignController.__super__.constructor.apply(this, arguments);
	  }

	  NewPlateDesignController.prototype.template = __webpack_require__(51);

	  NewPlateDesignController.prototype.initialize = function(options) {
	    var addContentControllerStartUpParams;
	    this.plateStatuses = options.plateStatuses;
	    this.plateTypes = options.plateTypes;
	    this.startUpParams = {
	      plateTypes: this.plateTypes,
	      plateStatuses: this.plateStatuses,
	      model: new PlateInfoModel()
	    };
	    this.plateInfoController = new PlateInfoController(this.startUpParams);
	    addContentControllerStartUpParams = {
	      model: new AddContentModel()
	    };
	    this.addContentController = new AddContentController(addContentControllerStartUpParams);
	    this.listenTo(this.addContentController, ADD_CONTENT_CONTROLLER_EVENTS.ADD_CONTENT, this.handleAddContent);
	    this.plateViewController = new PlateViewController();
	    this.listenTo(this.plateViewController, PLATE_TABLE_CONTROLLER_EVENTS.REGION_SELECTED, this.handleRegionSelected);
	    this.listenTo(this.plateViewController, PLATE_TABLE_CONTROLLER_EVENTS.ADD_IDENTIFIER_CONTENT_FROM_TABLE, this.handleContentUpdated);
	    this.listenTo(this.plateViewController, PLATE_TABLE_CONTROLLER_EVENTS.PLATE_CONTENT_UPADATED, this.handPlateContentUpdated);
	    this.templateController = new TemplateController();
	    this.serialDilutionController = new SerialDilutionController({
	      model: new SerialDilutionModel()
	    });
	    this.listenTo(this.serialDilutionController, SERIAL_DILUTION_CONTROLLER_EVENTS.APPLY_DILUTION, this.handleApplyDilution);
	    return this.editorFormsTabView = new EditorFormTabViewController({
	      plateInfoController: this.plateInfoController,
	      addContentController: this.addContentController,
	      templateController: this.templateController,
	      serialDilutionController: this.serialDilutionController
	    });
	  };

	  NewPlateDesignController.prototype.completeInitialization = function(plateAndWellData) {
	    this.plateInfoController.updatePlate(plateAndWellData.plateMetadata);
	    this.plateViewController.completeInitialization(plateAndWellData.wellContent, plateAndWellData.plateMetadata);
	    return this.serialDilutionController.completeInitialization(plateAndWellData.plateMetadata);
	  };

	  NewPlateDesignController.prototype.render = function() {
	    $(this.el).html(this.template);
	    this.$("div[name='plateViewContainer']").html(this.plateViewController.render().el);
	    this.$("div[name='editorFormTabViewContainer']").html(this.editorFormsTabView.render().el);
	    return this;
	  };

	  NewPlateDesignController.prototype.handleRegionSelected = function(regionSelectedBoundries) {
	    this.serialDilutionController.updateSelectedRegion(regionSelectedBoundries);
	    return this.addContentController.updateSelectedRegion(regionSelectedBoundries);
	  };

	  NewPlateDesignController.prototype.handleContentUpdated = function(addContentModel) {
	    return this.trigger(NEW_PLATE_DESIGN_CONTROLLER_EVENTS.ADD_IDENTIFIER_CONTENT_FROM_TABLE, addContentModel);
	  };

	  NewPlateDesignController.prototype.handleAddContent = function(addContentModel) {
	    return this.trigger(NEW_PLATE_DESIGN_CONTROLLER_EVENTS.ADD_CONTENT, addContentModel);
	  };

	  NewPlateDesignController.prototype.handleAddContentSuccessCallback = function(addContentModel) {
	    return this.plateViewController.addContent(addContentModel);
	  };

	  NewPlateDesignController.prototype.handPlateContentUpdated = function(identifiersToRemove) {
	    return this.addContentController.handleIdentifiersAdded(identifiersToRemove);
	  };

	  NewPlateDesignController.prototype.handleAddContentFromTableSuccessCallback = function(addContentModel) {
	    return this.plateViewController.plateTableController.identifiersValidated(addContentModel);
	  };

	  NewPlateDesignController.prototype.handleApplyDilution = function(dilutionModel) {
	    return this.plateViewController.applyDilution(dilutionModel);
	  };

	  return NewPlateDesignController;

	})(Backbone.View);

	module.exports = {
	  NewPlateDesignController: NewPlateDesignController,
	  NEW_PLATE_DESIGN_CONTROLLER_EVENTS: NEW_PLATE_DESIGN_CONTROLLER_EVENTS
	};


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var $, Backbone, BackboneValidation, PLATE_INFO_CONTROLLER_EVENTS, PickList, PickListSelectController, PlateInfoController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	PickListSelectController = __webpack_require__(27).PickListSelectController;

	PickList = __webpack_require__(27).PickList;

	PLATE_INFO_CONTROLLER_EVENTS = {
	  DELETE_PLATE: 'deletePlate',
	  CREATE_QUAD_PINNED_PLATE: 'createQuadPinnedPlate',
	  MODEL_UPDATE_VALID: 'model_update_valid',
	  MODEL_UPDATE_INVALID: 'model_update_INvalid'
	};

	_.extend(Backbone.Validation.callbacks, {
	  valid: function(view, attr, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.removeClass('has-error');
	    return $group.find('.help-block').html('').addClass('hidden');
	  },
	  invalid: function(view, attr, error, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.addClass('has-error');
	    return $group.find('.help-block').html(error).removeClass('hidden');
	  }
	});

	PlateInfoController = (function(superClass) {
	  extend(PlateInfoController, superClass);

	  function PlateInfoController() {
	    this.updatePlate = bind(this.updatePlate, this);
	    this.updateModel = bind(this.updateModel, this);
	    this.handleCreateQuadPinnedPlateClick = bind(this.handleCreateQuadPinnedPlateClick, this);
	    this.handleDeleteClick = bind(this.handleDeleteClick, this);
	    this.render = bind(this.render, this);
	    this.initializeSelectLists = bind(this.initializeSelectLists, this);
	    return PlateInfoController.__super__.constructor.apply(this, arguments);
	  }

	  PlateInfoController.prototype.template = _.template(__webpack_require__(28));

	  PlateInfoController.prototype.initialize = function(options) {
	    Backbone.Validation.bind(this);
	    this.model = options.model;
	    this.plateTypes = options.plateTypes;
	    this.plateStatuses = options.plateStatuses;
	    return this.selectLists = [
	      {
	        controller: this.plateTypesSelectList,
	        containerSelector: "select[name='type']"
	      }, {
	        controller: this.plateStatusSelectList,
	        containerSelector: "select[name='status']"
	      }
	    ];
	  };

	  PlateInfoController.prototype.events = {
	    "change input": "handleFormFieldUpdate",
	    "change select": "handleFormFieldUpdate",
	    "click button[name='delete']": "handleDeleteClick",
	    "click button[name='createQuadPinnedPlate']": "handleCreateQuadPinnedPlateClick"
	  };

	  PlateInfoController.prototype.initializeSelectLists = function() {
	    this.plateTypesSelectList = new PickListSelectController({
	      el: $(this.el).find("select[name='type']"),
	      collection: this.plateTypes,
	      insertFirstOption: new PickList({
	        code: "unassigned",
	        name: "Select Plate Type"
	      }),
	      selectedCode: "unassigned",
	      className: "form-control"
	    });
	    if (this.model.get("type") != null) {
	      this.plateTypesSelectList.setSelectedCode(this.model.get("type"));
	    }
	    this.plateStatusSelectList = new PickListSelectController({
	      el: $(this.el).find("select[name='status']"),
	      collection: this.plateStatuses,
	      insertFirstOption: new PickList({
	        code: "unassigned",
	        name: "Select Plate Status"
	      }),
	      selectedCode: "unassigned",
	      className: "form-control"
	    });
	    if (this.model.get("status") != null) {
	      return this.plateStatusSelectList.setSelectedCode(this.model.get("status"));
	    }
	  };

	  PlateInfoController.prototype.render = function() {
	    $(this.el).html(this.template(this.model.toJSON()));
	    this.initializeSelectLists();
	    return this;
	  };

	  PlateInfoController.prototype.handleFormFieldUpdate = function(evt) {
	    var data, target;
	    target = $(evt.currentTarget);
	    data = {};
	    data[target.attr('name')] = $.trim(target.val());
	    return this.updateModel(data);
	  };

	  PlateInfoController.prototype.handleDeleteClick = function() {
	    return this.trigger(PLATE_INFO_CONTROLLER_EVENTS.DELETE_PLATE);
	  };

	  PlateInfoController.prototype.handleCreateQuadPinnedPlateClick = function() {
	    return this.trigger(PLATE_INFO_CONTROLLER_EVENTS.CREATE_QUAD_PINNED_PLATE);
	  };

	  PlateInfoController.prototype.updateModel = function(data) {
	    var originalBarcode;
	    originalBarcode = this.model.get("barcode");
	    this.model.set(data);
	    this.model.set("recordedBy", "acas");
	    this.model.set("createdDate", null);
	    $.ajax({
	      data: this.model.toJSON(),
	      dataType: "json",
	      method: "PUT",
	      url: this.model.url
	    }).done((function(_this) {
	      return function(data, textStatus, jqXHR) {
	        console.log("data");
	        console.log(data);
	        if (originalBarcode !== _this.model.get("barcode")) {
	          return appRouter.navigate("/plateDesign/" + (_this.model.get('barcode')));
	        }
	      };
	    })(this)).fail((function(_this) {
	      return function(jqXHR, textStatus, errorThrown) {
	        console.error("something went wrong updating plate meta data");
	        console.log(errorThrown);
	        if (errorThrown === "Conflict") {
	          $("div[name='barcodeConflictErrorMessage']").modal('show');
	          _this.$("a[name='barcode']").prop("href", "#plateDesign/" + (_this.model.get('barcode')));
	          return _this.$("a[name='barcode']").html(_this.model.get("barcode"));
	        }
	      };
	    })(this));
	    if (this.model.isValid(true)) {
	      return this.trigger(PLATE_INFO_CONTROLLER_EVENTS.MODEL_UPDATE_VALID);
	    } else {
	      return this.trigger(PLATE_INFO_CONTROLLER_EVENTS.MODEL_UPDATE_INVALID);
	    }
	  };

	  PlateInfoController.prototype.updatePlate = function(plate) {
	    this.model.set(plate);
	    return this.render();
	  };

	  return PlateInfoController;

	})(Backbone.View);

	module.exports = {
	  PlateInfoController: PlateInfoController,
	  PLATE_INFO_CONTROLLER_EVENTS: PLATE_INFO_CONTROLLER_EVENTS
	};


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var $, Backbone, OptionController, PickList, PickListForLsThingsSelectController, PickListList, PickListOptionController, PickListOptionControllerForLsThing, PickListSelectController, SelectController, SelectListCollection, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	SelectListCollection = (function(superClass) {
	  extend(SelectListCollection, superClass);

	  function SelectListCollection() {
	    return SelectListCollection.__super__.constructor.apply(this, arguments);
	  }

	  SelectListCollection.prototype.getArrayOfOptions = function() {
	    var options;
	    options = [];
	    _.each(this.models, function(model) {
	      return options.push({
	        value: model.get('value'),
	        displayValue: model.get('lsLabels')[0].labelText
	      });
	    });
	    return options;
	  };

	  return SelectListCollection;

	})(Backbone.Collection);

	OptionController = (function(superClass) {
	  extend(OptionController, superClass);

	  function OptionController() {
	    this.render = bind(this.render, this);
	    return OptionController.__super__.constructor.apply(this, arguments);
	  }

	  OptionController.prototype.tagName = 'option';

	  OptionController.prototype.initialize = function(options) {
	    return this.selected = options.selected;
	  };

	  OptionController.prototype.render = function() {
	    $(this.el).attr('value', this.model.get('codeName'));
	    $(this.el).attr('selected', this.selected);
	    $(this.el).html(this.model.get('lsLabels')[0].labelText);
	    return this;
	  };

	  return OptionController;

	})(Backbone.View);

	SelectController = (function(superClass) {
	  extend(SelectController, superClass);

	  function SelectController() {
	    this.render = bind(this.render, this);
	    return SelectController.__super__.constructor.apply(this, arguments);
	  }

	  SelectController.prototype.initialize = function(options) {
	    this.selectedValue = "";
	    if (options.selectedValue != null) {
	      return this.selectedValue = options.selectedValue;
	    }
	  };

	  SelectController.prototype.render = function() {
	    this.collection.each((function(_this) {
	      return function(model) {
	        var option, selected;
	        selected = false;
	        if (model.get('value') === _this.selectedValue) {
	          selected = true;
	        }
	        option = new OptionController({
	          model: model,
	          selected: selected
	        });
	        return $(_this.el).append(option.render().el);
	      };
	    })(this));
	    return this;
	  };

	  return SelectController;

	})(Backbone.View);

	PickList = (function(superClass) {
	  extend(PickList, superClass);

	  function PickList() {
	    return PickList.__super__.constructor.apply(this, arguments);
	  }

	  return PickList;

	})(Backbone.Model);

	PickListList = (function(superClass) {
	  extend(PickListList, superClass);

	  function PickListList() {
	    return PickListList.__super__.constructor.apply(this, arguments);
	  }

	  PickListList.prototype.model = PickList;

	  PickListList.prototype.setType = function(type) {
	    return this.type = type;
	  };

	  PickListList.prototype.getModelWithId = function(id) {
	    return this.detect(function(enu) {
	      return enu.get("id") === id;
	    });
	  };

	  PickListList.prototype.getModelWithCode = function(code) {
	    return this.detect(function(enu) {
	      return enu.get("code") === code;
	    });
	  };

	  PickListList.prototype.getCurrent = function() {
	    return this.filter(function(pl) {
	      return !(pl.get('ignored'));
	    });
	  };

	  return PickListList;

	})(Backbone.Collection);

	PickListOptionController = (function(superClass) {
	  extend(PickListOptionController, superClass);

	  function PickListOptionController() {
	    this.render = bind(this.render, this);
	    return PickListOptionController.__super__.constructor.apply(this, arguments);
	  }

	  PickListOptionController.prototype.tagName = "option";

	  PickListOptionController.prototype.initialize = function() {};

	  PickListOptionController.prototype.render = function() {
	    $(this.el).attr("value", this.model.get("code")).text(this.model.get("name"));
	    return this;
	  };

	  return PickListOptionController;

	})(Backbone.View);

	PickListOptionControllerForLsThing = (function(superClass) {
	  extend(PickListOptionControllerForLsThing, superClass);

	  function PickListOptionControllerForLsThing() {
	    this.render = bind(this.render, this);
	    return PickListOptionControllerForLsThing.__super__.constructor.apply(this, arguments);
	  }

	  PickListOptionControllerForLsThing.prototype.tagName = "option";

	  PickListOptionControllerForLsThing.prototype.initialize = function(options) {
	    if (options.insertFirstOption != null) {
	      this.insertFirstOption = options.insertFirstOption;
	    } else {
	      this.insertFirstOption = null;
	    }
	    if (options.displayName != null) {
	      return this.displayName = options.displayName;
	    } else {
	      return this.displayName = null;
	    }
	  };

	  PickListOptionControllerForLsThing.prototype.render = function() {
	    var bestName, corpName, displayValue, notebookValue, preferredNames;
	    if (this.displayName !== null) {
	      if (this.displayName === 'corpName' || this.displayName === 'corpName_notebook') {
	        if (!(this.model.get('lsLabels') instanceof LabelList)) {
	          this.model.set('lsLabels', new LabelList(this.model.get('lsLabels')));
	        }
	        if (!(this.model.get('lsStates') instanceof StateList)) {
	          this.model.set('lsStates', new StateList(this.model.get('lsStates')));
	        }
	        corpName = this.model.get('lsLabels').getACASLsThingCorpName();
	        if (corpName != null) {
	          displayValue = corpName.get('labelText');
	          if (this.displayName === 'corpName_notebook') {
	            notebookValue = this.model.get('lsStates').getOrCreateValueByTypeAndKind('metadata', this.model.get('lsKind') + ' batch', 'stringValue', 'notebook');
	            displayValue = displayValue + " " + notebookValue.get('stringValue');
	          }
	        } else {
	          displayValue = this.insertFirstOption.get('name');
	        }
	      } else if (this.model.get(this.displayName) != null) {
	        displayValue = this.model.get(this.displayName);
	      } else {
	        displayValue = this.insertFirstOption.get('name');
	      }
	      $(this.el).attr("value", this.model.get("id")).text(displayValue);
	    } else {
	      preferredNames = _.filter(this.model.get('lsLabels'), function(lab) {
	        return lab.preferred && (lab.lsType === "name") && !lab.ignored;
	      });
	      bestName = _.max(preferredNames, function(lab) {
	        var rd;
	        rd = lab.recordedDate;
	        if (rd === "") {
	          return Infinity;
	        } else {
	          return rd;
	        }
	      });
	      if (bestName != null) {
	        displayValue = bestName.labelText;
	      } else if (this.model.get('codeName') != null) {
	        displayValue = this.model.get('codeName');
	      } else {
	        displayValue = this.insertFirstOption.get('name');
	      }
	      $(this.el).attr("value", this.model.get("id")).text(displayValue);
	    }
	    return this;
	  };

	  return PickListOptionControllerForLsThing;

	})(Backbone.View);

	PickListSelectController = (function(superClass) {
	  extend(PickListSelectController, superClass);

	  function PickListSelectController() {
	    this.checkOptionInCollection = bind(this.checkOptionInCollection, this);
	    this.addOne = bind(this.addOne, this);
	    this.render = bind(this.render, this);
	    this.handleListReset = bind(this.handleListReset, this);
	    return PickListSelectController.__super__.constructor.apply(this, arguments);
	  }

	  PickListSelectController.prototype.initialize = function(options) {
	    this.rendered = false;
	    this.collection.bind("add", this.addOne);
	    this.collection.bind("reset", this.handleListReset);
	    if (options.selectedCode !== "") {
	      this.selectedCode = options.selectedCode;
	    } else {
	      this.selectedCode = null;
	    }
	    if (options.showIgnored != null) {
	      this.showIgnored = options.showIgnored;
	    } else {
	      this.showIgnored = false;
	    }
	    if (options.insertFirstOption != null) {
	      this.insertFirstOption = options.insertFirstOption;
	    } else {
	      this.insertFirstOption = null;
	    }
	    if (options.autoFetch != null) {
	      this.autoFetch = options.autoFetch;
	    } else {
	      this.autoFetch = true;
	    }
	    if (this.autoFetch === true) {
	      return this.collection.fetch({
	        success: this.handleListReset
	      });
	    } else {
	      return this.handleListReset();
	    }
	  };

	  PickListSelectController.prototype.handleListReset = function() {
	    var newOption;
	    if (this.insertFirstOption) {
	      this.collection.add(this.insertFirstOption, {
	        at: 0,
	        silent: true
	      });
	      if (!(this.selectedCode === this.insertFirstOption.get('code'))) {
	        if ((this.collection.where({
	          code: this.selectedCode
	        })).length === 0) {
	          newOption = new PickList({
	            code: this.selectedCode,
	            name: this.selectedCode
	          });
	          this.collection.add(newOption);
	        }
	      }
	    }
	    return this.render();
	  };

	  PickListSelectController.prototype.render = function() {
	    var self;
	    $(this.el).empty();
	    self = this;
	    this.collection.each((function(_this) {
	      return function(enm) {
	        return _this.addOne(enm);
	      };
	    })(this));
	    if (this.selectedCode) {
	      $(this.el).val(this.selectedCode);
	    }
	    $(this.el).hide();
	    $(this.el).show();
	    return this.rendered = true;
	  };

	  PickListSelectController.prototype.addOne = function(enm) {
	    var shouldRender;
	    shouldRender = this.showIgnored;
	    if (enm.get('ignored')) {
	      if (this.selectedCode != null) {
	        if (this.selectedCode === enm.get('code')) {
	          shouldRender = true;
	        }
	      }
	    } else {
	      shouldRender = true;
	    }
	    if (shouldRender) {
	      return $(this.el).append(new PickListOptionController({
	        model: enm
	      }).render().el);
	    }
	  };

	  PickListSelectController.prototype.setSelectedCode = function(code) {
	    this.selectedCode = code;
	    if (this.rendered) {
	      return $(this.el).val(this.selectedCode);
	    } else {
	      return "not done";
	    }
	  };

	  PickListSelectController.prototype.getSelectedCode = function() {
	    return $(this.el).val();
	  };

	  PickListSelectController.prototype.getSelectedModel = function() {
	    return this.collection.getModelWithCode(this.getSelectedCode());
	  };

	  PickListSelectController.prototype.checkOptionInCollection = function(code) {
	    return this.collection.findWhere({
	      code: code
	    });
	  };

	  return PickListSelectController;

	})(Backbone.View);

	PickListForLsThingsSelectController = (function(superClass) {
	  extend(PickListForLsThingsSelectController, superClass);

	  function PickListForLsThingsSelectController() {
	    this.addOne = bind(this.addOne, this);
	    this.handleListReset = bind(this.handleListReset, this);
	    return PickListForLsThingsSelectController.__super__.constructor.apply(this, arguments);
	  }

	  PickListForLsThingsSelectController.prototype.initialize = function(options) {
	    PickListForLsThingsSelectController.__super__.initialize.call(this);
	    if (options.displayName != null) {
	      return this.displayName = options.displayName;
	    } else {
	      return this.displayName = null;
	    }
	  };

	  PickListForLsThingsSelectController.prototype.handleListReset = function() {
	    var newOption;
	    if (this.insertFirstOption) {
	      this.collection.add(this.insertFirstOption, {
	        at: 0,
	        silent: true
	      });
	      if (!(this.selectedCode === this.insertFirstOption.get('code'))) {
	        if ((this.collection.where({
	          id: this.selectedCode
	        })).length === 0) {
	          newOption = new PickList({
	            id: this.selectedCode,
	            name: this.selectedCode
	          });
	          this.collection.add(newOption);
	        }
	      }
	    }
	    return this.render();
	  };

	  PickListForLsThingsSelectController.prototype.addOne = function(enm) {
	    var shouldRender;
	    shouldRender = this.showIgnored;
	    if (enm.get('ignored')) {
	      if (this.selectedCode != null) {
	        if (this.selectedCode === enm.get('code')) {
	          shouldRender = true;
	        }
	      }
	    } else {
	      shouldRender = true;
	    }
	    if (shouldRender) {
	      return $(this.el).append(new PickListOptionControllerForLsThing({
	        model: enm,
	        insertFirstOption: this.insertFirstOption,
	        displayName: this.displayName
	      }).render().el);
	    }
	  };

	  PickListForLsThingsSelectController.prototype.getSelectedModel = function() {
	    return this.collection.getModelWithId(parseInt(this.getSelectedCode()));
	  };

	  return PickListForLsThingsSelectController;

	})(PickListSelectController);

	module.exports = {
	  SelectListCollection: SelectListCollection,
	  SelectController: SelectController,
	  PickListForLsThingsSelectController: PickListForLsThingsSelectController,
	  PickListSelectController: PickListSelectController,
	  PickListOptionControllerForLsThing: PickListOptionControllerForLsThing,
	  PickListOptionController: PickListOptionController,
	  PickListList: PickListList,
	  PickList: PickList
	};


/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = "<h5>Info</h5>\n\n<div class=\"form\">\n    <div class=\"form-group\">\n        <label class=\"control-label\">Plate Barcode</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" name=\"barcode\" value=\"<%= barcode %>\" />\n            <span class=\"help-block hidden\"></span>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Description</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" name=\"description\" value=\"<%= description %>\" />\n            <span class=\"help-block hidden\"></span>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Plate Size</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Automatic\" disabled name=\"plateSize\" value=\"<%= plateSize %>\"/>\n            <span class=\"help-block hidden\"></span>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Type</label>\n        <div class=\"\">\n            <select class=\"form-control\" name=\"type\"></select>\n            <span class=\"help-block hidden\"></span>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Status</label>\n        <div class=\"\">\n            <select class=\"form-control\" name=\"status\"></select>\n            <span class=\"help-block hidden\"></span>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Created Date</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" name=\"createdDate\" value=\"<%= createdDate %>\" />\n            <span class=\"help-block hidden\"></span>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Supplier</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" name=\"supplier\" value=\"<%= supplier %>\" />\n            <span class=\"help-block hidden\"></span>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <button class=\"btn btn-default quadPinButton\" name=\"createQuadPinnedPlate\">Create Quad-Pinned Plate <span class=\"glyphicon glyphicon-th-large\"></span></button>\n    </div>\n    <div class=\"form-group\">\n        <button class=\"btn btn-danger pull-right\" name=\"delete\">Delete</button>\n    </div>\n</div>\n<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" name=\"barcodeConflictErrorMessage\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                <h4><p class=\"bg-error\">Error:</p></h4>\n            </div>\n            <div class=\"modal-body\">\n                <p>The barcode <a name=\"barcode\" style=\"font-weight: bold;\" target=\"_blank\"></a> has already been used.  Please go back and enter a different barcode.</p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Go Back</button>\n            </div>\n        </div><!-- /.modal-content -->\n    </div><!-- /.modal-dialog -->\n</div><!-- /.modal -->";

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var $, ADD_CONTENT_CONTROLLER_EVENTS, ADD_CONTENT_MODEL_FIELDS, AddContentController, Backbone, BackboneValidation, LIST_OF_IDENTIFIER_DELIMITERS, PlateFillerFactory, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	PlateFillerFactory = __webpack_require__(30).PlateFillerFactory;

	ADD_CONTENT_MODEL_FIELDS = __webpack_require__(32).ADD_CONTENT_MODEL_FIELDS;

	ADD_CONTENT_CONTROLLER_EVENTS = {
	  ADD_CONTENT: "AddContent"
	};

	LIST_OF_IDENTIFIER_DELIMITERS = [';', '\t', '\n'];

	_.extend(Backbone.Validation.callbacks, {
	  valid: function(view, attr, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.removeClass('has-error');
	    return $group.find('.help-block').html('').addClass('hidden');
	  },
	  invalid: function(view, attr, error, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.addClass('has-error');
	    return $group.find('.help-block').html(error).removeClass('hidden');
	  }
	});

	AddContentController = (function(superClass) {
	  extend(AddContentController, superClass);

	  function AddContentController() {
	    this.calculateNumberOfSelectedCells = bind(this.calculateNumberOfSelectedCells, this);
	    this.updateSelectedRegion = bind(this.updateSelectedRegion, this);
	    this.formatListOfIdentifiersForDisplay = bind(this.formatListOfIdentifiersForDisplay, this);
	    this.handleFillDirectionChanged = bind(this.handleFillDirectionChanged, this);
	    this.handleFillStrategyChanged = bind(this.handleFillStrategyChanged, this);
	    this.handleIdentifiersChanged = bind(this.handleIdentifiersChanged, this);
	    this.handleIdentifiersPaste = bind(this.handleIdentifiersPaste, this);
	    this.removeInsertedIdentifiers = bind(this.removeInsertedIdentifiers, this);
	    this.handleIdentifiersAdded = bind(this.handleIdentifiersAdded, this);
	    this.handleAddClick = bind(this.handleAddClick, this);
	    this.disableAddButton = bind(this.disableAddButton, this);
	    this.enableAddButton = bind(this.enableAddButton, this);
	    this.render = bind(this.render, this);
	    return AddContentController.__super__.constructor.apply(this, arguments);
	  }

	  AddContentController.prototype.template = _.template(__webpack_require__(33));

	  AddContentController.prototype.initialize = function(options) {
	    this.model = options.model;
	    this.selectedRegionBoundries = {};
	    return this.plateFillerFactory = new PlateFillerFactory();
	  };

	  AddContentController.prototype.events = {
	    "change textarea[name='identifiers']": "handleIdentifiersChanged",
	    "paste textarea[name='identifiers']": "handleIdentifiersPaste",
	    "change input[name='fillStrategy']": "handleFillStrategyChanged",
	    "change input[name='fillDirection']": "handleFillDirectionChanged",
	    "change input[type='text']": "handleFormFieldUpdate",
	    "click button[name='add']": "handleAddClick"
	  };

	  AddContentController.prototype.render = function() {
	    var fillDirection, fillStrategy;
	    $(this.el).html(this.template(this.model.toJSON()));
	    if (this.model.get(ADD_CONTENT_MODEL_FIELDS.FILL_STRATEGY) === "") {
	      $("input[name='fillStrategy']").prop('checked', false);
	    } else {
	      fillStrategy = _.find(this.$("input[name='fillStrategy']"), (function(_this) {
	        return function(opt) {
	          return opt.value === _this.model.get(ADD_CONTENT_MODEL_FIELDS.FILL_STRATEGY);
	        };
	      })(this));
	      $(fillStrategy).prop("checked", true);
	    }
	    if (this.model.get(ADD_CONTENT_MODEL_FIELDS.FILL_DIRECTION) === "") {
	      $("input[name='fillDirection']").prop('checked', false);
	    } else {
	      fillDirection = _.find(this.$("input[name='fillDirection']"), (function(_this) {
	        return function(opt) {
	          return opt.value === _this.model.get(ADD_CONTENT_MODEL_FIELDS.FILL_DIRECTION);
	        };
	      })(this));
	      $(fillDirection).prop("checked", true);
	    }
	    if (this.model.isValid(true)) {
	      this.enableAddButton();
	    } else {
	      this.disableAddButton();
	    }
	    return this;
	  };

	  AddContentController.prototype.enableAddButton = function() {
	    this.$("button[name='add']").prop('disabled', false);
	    return this.$("button[name='add']").removeClass('disabled');
	  };

	  AddContentController.prototype.disableAddButton = function() {
	    this.$("button[name='add']").prop('disabled', true);
	    return this.$("button[name='add']").addClass('disabled');
	  };

	  AddContentController.prototype.handleAddClick = function() {
	    return this.trigger(ADD_CONTENT_CONTROLLER_EVENTS.ADD_CONTENT, this.model);
	  };

	  AddContentController.prototype.handleIdentifiersAdded = function(validatedIdentifiers) {
	    this.model.reset();
	    this.model.set(ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_CELLS_SELECTED, 0);
	    this.removeInsertedIdentifiers(validatedIdentifiers);
	    return this.render();
	  };

	  AddContentController.prototype.removeInsertedIdentifiers = function(insertedIdentifiers) {
	    var remainingIdentifiers, updatedValues;
	    remainingIdentifiers = _.difference(this.model.get(ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS), insertedIdentifiers);
	    updatedValues = {};
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS] = remainingIdentifiers;
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS_DISPLAY_STRING] = this.formatListOfIdentifiersForDisplay(remainingIdentifiers);
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_IDENTIFIERS] = _.size(remainingIdentifiers);
	    return this.model.set(updatedValues);
	  };

	  AddContentController.prototype.handleFormFieldUpdate = function(evt) {
	    var data, target;
	    target = $(evt.currentTarget);
	    data = {};
	    data[target.attr('name')] = $.trim(target.val());
	    this.model.set(data);
	    return this.render();
	  };

	  AddContentController.prototype.handleIdentifiersPaste = function() {
	    return console.log("handleIdentifiersPaste");
	  };

	  AddContentController.prototype.handleIdentifiersChanged = function() {
	    var listOfIdentifiers, updatedValues;
	    listOfIdentifiers = this.parseIdentifiers($.trim(this.$("textarea[name='identifiers']").val()));
	    updatedValues = {};
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS] = listOfIdentifiers;
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS_DISPLAY_STRING] = this.formatListOfIdentifiersForDisplay(listOfIdentifiers);
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_IDENTIFIERS] = _.size(listOfIdentifiers);
	    this.model.set(updatedValues);
	    return this.render();
	  };

	  AddContentController.prototype.handleFillStrategyChanged = function(e) {
	    this.model.set(ADD_CONTENT_MODEL_FIELDS.FILL_STRATEGY, e.currentTarget.value);
	    return this.render();
	  };

	  AddContentController.prototype.handleFillDirectionChanged = function(e) {
	    this.model.set(ADD_CONTENT_MODEL_FIELDS.FILL_DIRECTION, e.currentTarget.value);
	    return this.render();
	  };

	  AddContentController.prototype.formatListOfIdentifiersForDisplay = function(identifiers) {
	    var identifiersDisplayString;
	    identifiersDisplayString = _.reduce(identifiers, function(memo, identifier) {
	      return memo += identifier + "\n";
	    }, "");
	    return identifiersDisplayString;
	  };

	  AddContentController.prototype.updateSelectedRegion = function(selectedRegionBoundries) {
	    var numberOfSelectedCells;
	    this.selectedRegionBoundries = selectedRegionBoundries;
	    numberOfSelectedCells = this.calculateNumberOfSelectedCells(this.selectedRegionBoundries);
	    this.model.set(ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_CELLS_SELECTED, numberOfSelectedCells);
	    return this.render();
	  };

	  AddContentController.prototype.calculateNumberOfSelectedCells = function(selectedRegionBoundries) {
	    var height, numberOfCells, width;
	    width = Math.abs(selectedRegionBoundries.rowStop - selectedRegionBoundries.rowStart) + 1;
	    height = Math.abs(selectedRegionBoundries.colStop - selectedRegionBoundries.colStart) + 1;
	    numberOfCells = width * height;
	    return numberOfCells;
	  };

	  AddContentController.prototype.parseIdentifiers = function(identifiers) {
	    var listOfIdentifiers;
	    listOfIdentifiers = [];
	    _.each(LIST_OF_IDENTIFIER_DELIMITERS, function(delimiter) {
	      var ids;
	      ids = _.map(identifiers.split(delimiter), function(identifier) {
	        return $.trim(identifier);
	      });
	      if (_.size(ids) !== 1) {
	        return listOfIdentifiers = listOfIdentifiers.concat(ids);
	      }
	    });
	    if (_.size(listOfIdentifiers) === 0 && identifiers !== "") {
	      listOfIdentifiers = [identifiers];
	    }
	    return listOfIdentifiers;
	  };

	  return AddContentController;

	})(Backbone.View);

	module.exports = {
	  AddContentController: AddContentController,
	  ADD_CONTENT_CONTROLLER_EVENTS: ADD_CONTENT_CONTROLLER_EVENTS
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var InOrderPlateFillerStrategy, PLATE_FILLER_STRATEGY_TYPES, PlateFillerFactory, PlateFillerStrategy, RandomPlateFillerStrategy, SameIdentifierPlateFillerStrategy, WellsModel,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	WellsModel = __webpack_require__(31).WellsModel;

	PLATE_FILLER_STRATEGY_TYPES = {
	  RANDOM: 'random',
	  IN_ORDER: 'inOrder',
	  SAME_IDENTIFIER: 'sameIdentifier'
	};

	PlateFillerFactory = (function() {
	  function PlateFillerFactory() {}

	  PlateFillerFactory.prototype.getPlateFiller = function(strategy, fillDirection, identifiers, selectedRegion) {
	    var plateFiller;
	    plateFiller = null;
	    switch (strategy) {
	      case PLATE_FILLER_STRATEGY_TYPES.IN_ORDER:
	        plateFiller = new InOrderPlateFillerStrategy(identifiers, selectedRegion, fillDirection);
	        break;
	      case PLATE_FILLER_STRATEGY_TYPES.RANDOM:
	        plateFiller = new RandomPlateFillerStrategy(identifiers, selectedRegion);
	        break;
	      case PLATE_FILLER_STRATEGY_TYPES.SAME_IDENTIFIER:
	        plateFiller = new SameIdentifierPlateFillerStrategy(identifiers, selectedRegion);
	    }
	    return plateFiller;
	  };

	  return PlateFillerFactory;

	})();

	PlateFillerStrategy = (function() {
	  function PlateFillerStrategy(identifiers, selectedRegionBoundries) {
	    this.identifiers = identifiers;
	    this.selectedRegionBoundries = selectedRegionBoundries;
	  }

	  PlateFillerStrategy.prototype.getWells = function() {
	    throw "Method 'getWells' not implemented";
	  };

	  PlateFillerStrategy.prototype.populateWell = function(wellsToUpdate, rowIdx, colIdx, batchConcentration, amount, batchCode) {
	    var existingWell, well, wellContentBeingOverwrittern;
	    existingWell = wellsToUpdate.getWellAtRowIdxColIdx(rowIdx, colIdx);
	    wellContentBeingOverwrittern = [];
	    if (amount) {
	      if (amount === "") {
	        amount = existingWell.amount;
	      } else if (existingWell.amount) {
	        if (existingWell.amount !== "") {
	          wellContentBeingOverwrittern.push({
	            rowIdx: rowIdx,
	            colIdx: colIdx,
	            existingValue: existingWell.amount,
	            newValue: amount,
	            fieldName: "amount"
	          });
	        }
	      }
	    } else {
	      amount = existingWell.amount;
	    }
	    if (batchConcentration) {
	      if (batchConcentration === "") {
	        batchConcentration = existingWell.batchConcentration;
	      } else if (existingWell.batchConcentration) {
	        if (existingWell.batchConcentration !== "") {
	          wellContentBeingOverwrittern.push({
	            rowIdx: rowIdx,
	            colIdx: colIdx,
	            existingValue: existingWell.batchConcentration,
	            newValue: batchConcentration,
	            fieldName: "batchConcentration"
	          });
	        }
	      }
	    } else {
	      batchConcentration = existingWell.batchConcentration;
	    }
	    if (batchCode) {
	      if (batchCode === "") {
	        batchCode = existingWell.batchCode;
	      } else if (existingWell.batchCode) {
	        if (existingWell.batchCode !== "") {
	          wellContentBeingOverwrittern.push({
	            rowIdx: rowIdx,
	            colIdx: colIdx,
	            existingValue: existingWell.batchCode,
	            newValue: batchCode,
	            fieldName: "batchCode"
	          });
	        }
	      }
	    } else {
	      batchCode = existingWell.batchCode;
	    }
	    well = {
	      amount: amount,
	      batchCode: batchCode,
	      batchConcentration: batchConcentration
	    };
	    if (_.size(wellContentBeingOverwrittern) === 0) {
	      return [null, well];
	    } else {
	      return [wellContentBeingOverwrittern, well];
	    }
	  };

	  return PlateFillerStrategy;

	})();

	RandomPlateFillerStrategy = (function(superClass) {
	  extend(RandomPlateFillerStrategy, superClass);

	  function RandomPlateFillerStrategy() {
	    return RandomPlateFillerStrategy.__super__.constructor.apply(this, arguments);
	  }

	  RandomPlateFillerStrategy.prototype.getWells = function(wells, batchConcentration, amount) {
	    var columnIndexes, i, identifiersToRemove, j, plateWells, ref, ref1, ref2, ref3, results, results1, rowIndexes, valueIdx, wellContentOverwritten, wellsToUpdate;
	    wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    rowIndexes = (function() {
	      results = [];
	      for (var i = ref = this.selectedRegionBoundries.rowStart, ref1 = this.selectedRegionBoundries.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    columnIndexes = (function() {
	      results1 = [];
	      for (var j = ref2 = this.selectedRegionBoundries.colStart, ref3 = this.selectedRegionBoundries.colStop; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	    plateWells = [];
	    wellContentOverwritten = [];
	    valueIdx = 0;
	    identifiersToRemove = [];
	    _.each(rowIndexes, (function(_this) {
	      return function(rowIdx) {
	        return _.each(columnIndexes, function(colIdx) {
	          var batchCode, identifier, identifierIdx, ref4, well;
	          identifierIdx = parseInt(Math.random() * _.size(_this.identifiers));
	          identifier = _this.identifiers.splice(identifierIdx, identifierIdx + 1);
	          batchCode = identifier[0];
	          ref4 = _this.populateWell(wellsToUpdate, rowIdx, colIdx, batchConcentration, amount, batchCode), wellContentOverwritten = ref4[0], well = ref4[1];
	          plateWells.push([rowIdx, colIdx, well]);
	          identifiersToRemove.push(batchCode);
	          return wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	        });
	      };
	    })(this));
	    return [plateWells, identifiersToRemove, wellsToUpdate, wellContentOverwritten];
	  };

	  return RandomPlateFillerStrategy;

	})(PlateFillerStrategy);

	SameIdentifierPlateFillerStrategy = (function(superClass) {
	  extend(SameIdentifierPlateFillerStrategy, superClass);

	  function SameIdentifierPlateFillerStrategy() {
	    return SameIdentifierPlateFillerStrategy.__super__.constructor.apply(this, arguments);
	  }

	  SameIdentifierPlateFillerStrategy.prototype.getWells = function(wells, batchConcentration, amount) {
	    var columnIndexes, i, identifiersToRemove, j, plateWells, ref, ref1, ref2, ref3, results, results1, rowIndexes, valueIdx, wellContentOverwritten, wellsToUpdate;
	    wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    rowIndexes = (function() {
	      results = [];
	      for (var i = ref = this.selectedRegionBoundries.rowStart, ref1 = this.selectedRegionBoundries.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    columnIndexes = (function() {
	      results1 = [];
	      for (var j = ref2 = this.selectedRegionBoundries.colStart, ref3 = this.selectedRegionBoundries.colStop; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	    plateWells = [];
	    wellContentOverwritten = [];
	    valueIdx = 0;
	    identifiersToRemove = [];
	    _.each(rowIndexes, (function(_this) {
	      return function(rowIdx) {
	        return _.each(columnIndexes, function(colIdx) {
	          var batchCode, existingWell, ref4, well;
	          existingWell = wellsToUpdate.getWellAtRowIdxColIdx(rowIdx, colIdx);
	          batchCode = _this.identifiers[0];
	          ref4 = _this.populateWell(wellsToUpdate, rowIdx, colIdx, batchConcentration, amount, batchCode), wellContentOverwritten = ref4[0], well = ref4[1];
	          plateWells.push([rowIdx, colIdx, well]);
	          identifiersToRemove.push(_this.identifiers[0]);
	          wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	          return valueIdx++;
	        });
	      };
	    })(this));
	    return [plateWells, identifiersToRemove, wellsToUpdate, wellContentOverwritten];
	  };

	  return SameIdentifierPlateFillerStrategy;

	})(PlateFillerStrategy);

	InOrderPlateFillerStrategy = (function(superClass) {
	  extend(InOrderPlateFillerStrategy, superClass);

	  function InOrderPlateFillerStrategy(identifiers, selectedRegion, fillDirection) {
	    InOrderPlateFillerStrategy.__super__.constructor.call(this, identifiers, selectedRegion);
	    this.fillDirection = fillDirection;
	  }

	  InOrderPlateFillerStrategy.prototype.getWells = function(wells, batchConcentration, amount) {
	    if (this.fillDirection === "columnMajor") {
	      return this.getWellsColumnMajor(wells, batchConcentration, amount);
	    } else if (this.fillDirection === "rowMajor") {
	      return this.getWellsRowMajor(wells, batchConcentration, amount);
	    }
	  };

	  InOrderPlateFillerStrategy.prototype.getWellsColumnMajor = function(wells, batchConcentration, amount) {
	    var columnIndexes, i, identifiersToRemove, j, plateWells, ref, ref1, ref2, ref3, results, results1, rowIndexes, valueIdx, wellContentOverwritten, wellsToUpdate;
	    wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    rowIndexes = (function() {
	      results = [];
	      for (var i = ref = this.selectedRegionBoundries.rowStart, ref1 = this.selectedRegionBoundries.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    columnIndexes = (function() {
	      results1 = [];
	      for (var j = ref2 = this.selectedRegionBoundries.colStart, ref3 = this.selectedRegionBoundries.colStop; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	    plateWells = [];
	    wellContentOverwritten = [];
	    valueIdx = 0;
	    identifiersToRemove = [];
	    _.each(rowIndexes, (function(_this) {
	      return function(rowIdx) {
	        return _.each(columnIndexes, function(colIdx) {
	          var batchCode, ref4, well;
	          batchCode = _this.identifiers[valueIdx];
	          ref4 = _this.populateWell(wellsToUpdate, rowIdx, colIdx, batchConcentration, amount, batchCode), wellContentOverwritten = ref4[0], well = ref4[1];
	          wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	          plateWells.push([rowIdx, colIdx, well]);
	          identifiersToRemove.push(_this.identifiers[valueIdx]);
	          return valueIdx++;
	        });
	      };
	    })(this));
	    return [plateWells, identifiersToRemove, wellsToUpdate, wellContentOverwritten];
	  };

	  InOrderPlateFillerStrategy.prototype.getWellsRowMajor = function(wells, batchConcentration, amount) {
	    var columnIndexes, i, identifiersToRemove, j, plateWells, ref, ref1, ref2, ref3, results, results1, rowIndexes, valueIdx, wellContentOverwritten, wellsToUpdate;
	    wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    rowIndexes = (function() {
	      results = [];
	      for (var i = ref = this.selectedRegionBoundries.rowStart, ref1 = this.selectedRegionBoundries.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    columnIndexes = (function() {
	      results1 = [];
	      for (var j = ref2 = this.selectedRegionBoundries.colStart, ref3 = this.selectedRegionBoundries.colStop; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	    plateWells = [];
	    wellContentOverwritten = [];
	    valueIdx = 0;
	    identifiersToRemove = [];
	    _.each(columnIndexes, (function(_this) {
	      return function(colIdx) {
	        return _.each(rowIndexes, function(rowIdx) {
	          var batchCode, ref4, well;
	          batchCode = _this.identifiers[valueIdx];
	          ref4 = _this.populateWell(wellsToUpdate, rowIdx, colIdx, batchConcentration, amount, batchCode), wellContentOverwritten = ref4[0], well = ref4[1];
	          wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	          plateWells.push([rowIdx, colIdx, well]);
	          identifiersToRemove.push(_this.identifiers[valueIdx]);
	          return valueIdx++;
	        });
	      };
	    })(this));
	    return [plateWells, identifiersToRemove, wellsToUpdate, wellContentOverwritten];
	  };

	  return InOrderPlateFillerStrategy;

	})(PlateFillerStrategy);

	module.exports = {
	  PlateFillerFactory: PlateFillerFactory
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, BackboneValidation, WELL_MODEL_FIELDS, WellModel, WellsModel, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	_ = __webpack_require__(11);

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_.extend(Backbone.Model.prototype, BackboneValidation.mixin);

	WELL_MODEL_FIELDS = {
	  AMOUNT: 'amount',
	  AMOUNT_UNITS: 'amountUnits',
	  BATCH_CODE: 'batchCode',
	  BATCH_CONC_UNITS: 'batchConcUnits',
	  BATCH_CONCENTRATION: 'batchConcentration',
	  COLUMN_INDEX: 'columnIndex',
	  CONTAINER_CODE_NAME: 'containerCodeName',
	  LEVEL: 'level',
	  MESSAGE: 'message',
	  PHYSICAL_STATE: 'physicalState',
	  RECORDED_BY: 'recordedBy',
	  RECORDED_DATE: 'recordedDate',
	  ROW_INDEX: 'rowIndex',
	  SOLVENT_CODE: 'solventCode',
	  WELL_NAME: 'wellName'
	};

	WellModel = (function(superClass) {
	  extend(WellModel, superClass);

	  function WellModel() {
	    return WellModel.__super__.constructor.apply(this, arguments);
	  }

	  WellModel.prototype.defaults = {
	    "amount": "",
	    "amountUnits": "",
	    "batchCode": "",
	    "batchConcUnits": "",
	    "batchConcentration": "",
	    "columnIndex": "",
	    "containerCodeName": "",
	    "level": "",
	    "message": "",
	    "physicalState": "",
	    "containerCodeName": "",
	    "recordedBy": "",
	    "recordedDate": "",
	    "rowIndex": "",
	    "solventCode": "",
	    "wellName": ""
	  };

	  WellModel.prototype.validation = {
	    barcode: {
	      required: true,
	      msg: "Please the Plate ID"
	    },
	    definition: {
	      required: true,
	      msg: "Please select the plate size"
	    }
	  };

	  return WellModel;

	})(Backbone.Model);

	WellsModel = (function(superClass) {
	  extend(WellsModel, superClass);

	  function WellsModel() {
	    this.resetWells = bind(this.resetWells, this);
	    return WellsModel.__super__.constructor.apply(this, arguments);
	  }

	  WellsModel.prototype.url = '/api/updateWellContentWithObject';

	  WellsModel.prototype.initialize = function(options) {
	    return this.allWells = options.allWells;
	  };

	  WellsModel.prototype.defaults = {
	    'wells': []
	  };

	  WellsModel.prototype.getWellAtRowIdxColIdx = function(rowIdx, colIdx) {
	    var well;
	    rowIdx++;
	    colIdx++;
	    well = _.find(this.allWells, function(w) {
	      if (w.columnIndex === colIdx && w.rowIndex === rowIdx) {
	        return true;
	      } else {
	        return false;
	      }
	    });
	    return well;
	  };

	  WellsModel.prototype.fillWell = function(rowIndex, columnIndex, amount, batchCode, batchConcentration) {
	    var recordedDate, well;
	    well = this.getWellAtRowIdxColIdx(rowIndex, columnIndex);
	    well.amount = amount;
	    well.amountUnits = "uL";
	    well.batchCode = batchCode;
	    well.batchConcentration = batchConcentration;
	    recordedDate = new Date();
	    well.recordedDate = recordedDate.getTime();
	    return this.get("wells").push(well);
	  };

	  WellsModel.prototype.fillWellWithWellObject = function(rowIndex, columnIndex, wellObject) {
	    var recordedDate, well;
	    well = this.getWellAtRowIdxColIdx(rowIndex, columnIndex);
	    well.amount = wellObject.amount;
	    well.amountUnits = "uL";
	    well.batchCode = wellObject.batchCode;
	    well.batchConcentration = wellObject.batchConcentration;
	    recordedDate = new Date();
	    well.recordedDate = recordedDate.getTime();
	    return this.get("wells").push(well);
	  };

	  WellsModel.prototype.resetWells = function() {
	    return this.set("wells", []);
	  };

	  return WellsModel;

	})(Backbone.Model);

	module.exports = {
	  WellModel: WellModel,
	  WellsModel: WellsModel,
	  WELL_MODEL_FIELDS: WELL_MODEL_FIELDS
	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var ADD_CONTENT_MODEL_FIELDS, AddContentModel, Backbone, BackboneValidation, IDENTIFIER_LIST_DELIMETER, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	_ = __webpack_require__(11);

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_.extend(Backbone.Model.prototype, BackboneValidation.mixin);

	IDENTIFIER_LIST_DELIMETER = ";";

	ADD_CONTENT_MODEL_FIELDS = {
	  IDENTIFIER_TYPE: 'identifierType',
	  IDENTIFIERS: 'identifiers',
	  IDENTIFIERS_DISPLAY_STRING: 'identifiersDisplayString',
	  AMOUNT: 'amount',
	  BATCH_CONCENTRATION: 'batchConcentration',
	  FILL_STRATEGY: 'fillStrategy',
	  FILL_DIRECTION: 'fillDirection',
	  WELLS: 'wells',
	  NUMBER_OF_IDENTIFIERS: 'numberOfIdentifiers',
	  NUMBER_OF_CELLS_SELECTED: 'numberOfCellsSelected',
	  VALIDATED_IDENTIFIERS: 'validatedIdentifiers',
	  VALID_IDENTIFIERS: 'validIdentifiers',
	  ALIASED_IDENTIFIERS: 'aliasedIdentifiers',
	  INVALID_IDENTIFIERS: 'invalidIdentifiers',
	  WELLS_TO_UPDATE: 'wellsToUpdate'
	};

	AddContentModel = (function(superClass) {
	  extend(AddContentModel, superClass);

	  function AddContentModel() {
	    this.removeInsertedIdentifiers = bind(this.removeInsertedIdentifiers, this);
	    return AddContentModel.__super__.constructor.apply(this, arguments);
	  }

	  AddContentModel.prototype.defaults = {
	    identifierType: "compoundBatchId",
	    identifiers: "",
	    identifiersDisplayString: "",
	    amount: "",
	    batchConcentration: "",
	    fillStrategy: "inOrder",
	    fillDirection: "rowMajor",
	    wells: "",
	    numberOfIdentifiers: 0,
	    numberOfCellsSelected: 0
	  };

	  AddContentModel.prototype.validation = {
	    identifierType: {
	      required: true,
	      msg: "Please select an identifier type"
	    },
	    amount: {
	      required: false,
	      pattern: "number",
	      msg: "Please enter numeric value for amount"
	    },
	    batchConcentration: {
	      required: false,
	      pattern: "number",
	      msg: "Please enter numeric value for concentration"
	    },
	    fillStrategy: {
	      required: true,
	      msg: "Please select a fill strategy"
	    },
	    numberOfCellsSelected: {
	      min: 1
	    },
	    fillDirection: {
	      required: true,
	      msg: "Please select a fill direction"
	    },
	    wellValues: 'validateWellValues',
	    identifiers: 'validateIdentifiers'
	  };

	  AddContentModel.prototype.validateWellValues = function(value, attr, computedState) {
	    if (computedState[ADD_CONTENT_MODEL_FIELDS.BATCH_CONCENTRATION] === "" && computedState[ADD_CONTENT_MODEL_FIELDS.AMOUNT] === "" && computedState[ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS].length === 0) {
	      return "An identifier, concentration value, or amount must be specified";
	    }
	  };

	  AddContentModel.prototype.validateIdentifiers = function(value, attr, computedState) {
	    if (computedState[ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_IDENTIFIERS] > 0) {
	      if (computedState[ADD_CONTENT_MODEL_FIELDS.FILL_STRATEGY] !== "sameIdentifier") {
	        if (computedState[ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_CELLS_SELECTED] > computedState[ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_IDENTIFIERS]) {
	          return "The number of selected wells must be the same or less than the number of identifiers entered";
	        }
	      }
	    }
	  };

	  AddContentModel.prototype.formatIdentifiersForValidationService = function() {
	    var identifiers;
	    identifiers = _.reduce(this.get(ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS), function(memo, identifier) {
	      return memo + identifier + IDENTIFIER_LIST_DELIMETER;
	    }, "");
	    return identifiers;
	  };

	  AddContentModel.prototype.removeInsertedIdentifiers = function(insertedIdentifiers) {
	    var remainingIdentifiers, updatedValues;
	    remainingIdentifiers = _.difference(this.model.get(ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS), insertedIdentifiers);
	    updatedValues = {};
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS] = remainingIdentifiers;
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS_DISPLAY_STRING] = this.formatListOfIdentifiersForDisplay(remainingIdentifiers);
	    updatedValues[ADD_CONTENT_MODEL_FIELDS.NUMBER_OF_IDENTIFIERS] = _.size(remainingIdentifiers);
	    return this.model.set(updatedValues);
	  };

	  AddContentModel.prototype.reset = function() {
	    this.set("amount", "");
	    this.set("fillStrategy", "inOrder");
	    this.set("fillDirection", "rowMajor");
	    return this.set("batchConcentration", "");
	  };

	  return AddContentModel;

	})(Backbone.Model);

	module.exports = {
	  AddContentModel: AddContentModel,
	  ADD_CONTENT_MODEL_FIELDS: ADD_CONTENT_MODEL_FIELDS
	};


/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = "<h5 >Add Content</h5>\n<div class=\"pull-right\">\n    <i class=\"fa fa-question-circle editorTabHelpIcon\"></i>\n</div>\n\n<div class=\"form\">\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" name=\"identifierType\" value=\"compoundBatchId\" checked=\"true\"/> Compound Batch IDs\n        </label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" name=\"identifierType\" value=\"barcode\" /> Barcodes\n        </label>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"\">\n            <textarea class=\"form-control editorTabTextarea\" rows=\"5\" name=\"identifiers\"><%= identifiersDisplayString %></textarea>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Volume (uL)</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" name=\"amount\" value=\"<%= amount %>\"/>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Conc. (mM)</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" name=\"batchConcentration\" value=\"<%= batchConcentration %>\" />\n        </div>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" class=\"editorTabRadio\" name=\"fillStrategy\" value=\"inOrder\" checked=\"true\" /> Fill Region in Order\n        </label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" class=\"editorTabRadio\" name=\"fillStrategy\" value=\"sameIdentifier\" /> Fill Region with Same Batch ID\n        </label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" class=\"editorTabRadio\" name=\"fillStrategy\" value=\"random\" /> Fill Region in Random Order\n        </label>\n    </div>\n    <div class=\"form-group editorTabLabelSpecial\">\n        <label class=\"control-label editorTabLabelDirection\">Direction</label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" class=\"editorTabRadio\" name=\"fillDirection\" value=\"rowMajor\" checked=\"true\"/> Row Major\n        </label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" class=\"editorTabRadio\" name=\"fillDirection\" value=\"columnMajor\"  /> Column Major\n        </label>\n    </div>\n    <div class=\"form-group\">\n        <div>You have <span class=\"addContentTotal\"><%= numberOfIdentifiers %></span> compounds; you have <span class=\"cellsSelected\"><%= numberOfCellsSelected %></span> cells selected.</div>\n    </div>\n    <div class=\"form-group\">\n        <button class=\"btn btn-default pull-right\" name=\"add\">Add</button>\n    </div>\n</div>";

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, PLATE_TYPE_COLLECTION_CONST, PickListList, PlateTypeCollection, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	_ = __webpack_require__(11);

	Backbone = __webpack_require__(7);

	PickListList = __webpack_require__(27).PickListList;

	PLATE_TYPE_COLLECTION_CONST = {
	  URL: "api/codetables/type/container%20plate"
	};

	PlateTypeCollection = (function(superClass) {
	  extend(PlateTypeCollection, superClass);

	  function PlateTypeCollection() {
	    return PlateTypeCollection.__super__.constructor.apply(this, arguments);
	  }

	  PlateTypeCollection.prototype.url = function() {
	    return PLATE_TYPE_COLLECTION_CONST.URL;
	  };

	  return PlateTypeCollection;

	})(PickListList);

	module.exports = {
	  PlateTypeCollection: PlateTypeCollection,
	  PLATE_TYPE_COLLECTION_CONST: PLATE_TYPE_COLLECTION_CONST
	};


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, PLATE_STATUS_COLLECTION_CONST, PickListList, PlateStatusCollection, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	PickListList = __webpack_require__(27).PickListList;

	PLATE_STATUS_COLLECTION_CONST = {
	  URL: "api/codetables/status/container"
	};

	PlateStatusCollection = (function(superClass) {
	  extend(PlateStatusCollection, superClass);

	  function PlateStatusCollection() {
	    return PlateStatusCollection.__super__.constructor.apply(this, arguments);
	  }

	  PlateStatusCollection.prototype.url = function() {
	    return PLATE_STATUS_COLLECTION_CONST.URL;
	  };

	  return PlateStatusCollection;

	})(Backbone.Collection);

	module.exports = {
	  PlateStatusCollection: PlateStatusCollection
	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, PLATE_TABLE_CONTROLLER_EVENTS, PLATE_VIEW_CONTROLLER_EVENTS, PlateTableController, PlateViewController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	PlateTableController = __webpack_require__(37).PlateTableController;

	PLATE_TABLE_CONTROLLER_EVENTS = __webpack_require__(37).PLATE_TABLE_CONTROLLER_EVENTS;

	_ = __webpack_require__(11);

	__webpack_require__(13);

	__webpack_require__(15);

	PLATE_VIEW_CONTROLLER_EVENTS = {
	  COMPOUND_VIEW_SELECTED: "CompundViewSelected",
	  VOLUME_VIEW_SELECTED: "VolumeViewSelected",
	  CONCENTRATION_VIEW_SELECTED: "ConcentrationViewSelected",
	  MASTER_VIEW_SELECTED: "MasterViewSelected"
	};

	PlateViewController = (function(superClass) {
	  extend(PlateViewController, superClass);

	  function PlateViewController() {
	    this.applyDilution = bind(this.applyDilution, this);
	    this.addContent = bind(this.addContent, this);
	    this.handlePlateContentUpdated = bind(this.handlePlateContentUpdated, this);
	    this.handleContentUpdated = bind(this.handleContentUpdated, this);
	    this.handleRegionSelected = bind(this.handleRegionSelected, this);
	    this.render = bind(this.render, this);
	    this.completeInitialization = bind(this.completeInitialization, this);
	    this.handleDisplayToolTipsToggled = bind(this.handleDisplayToolTipsToggled, this);
	    this.updateSelectedColorBy = bind(this.updateSelectedColorBy, this);
	    this.updateSelectedView = bind(this.updateSelectedView, this);
	    this.updateSelectedTableFitMode = bind(this.updateSelectedTableFitMode, this);
	    this.fitToScreen = bind(this.fitToScreen, this);
	    this.handleFitToContents = bind(this.handleFitToContents, this);
	    this.handleShowAll = bind(this.handleShowAll, this);
	    this.handleDecreaseFontSizeClick = bind(this.handleDecreaseFontSizeClick, this);
	    this.handleIncreaseFontSizeClick = bind(this.handleIncreaseFontSizeClick, this);
	    this.handleColorByNoneClick = bind(this.handleColorByNoneClick, this);
	    this.handleColorByConcentrationClick = bind(this.handleColorByConcentrationClick, this);
	    this.handleColorByVolumeClick = bind(this.handleColorByVolumeClick, this);
	    this.handleColorByCompoundClick = bind(this.handleColorByCompoundClick, this);
	    this.handleMasterViewClick = bind(this.handleMasterViewClick, this);
	    this.handleConcentrationViewClick = bind(this.handleConcentrationViewClick, this);
	    this.handleVolumeViewClick = bind(this.handleVolumeViewClick, this);
	    this.handleCompoundViewClick = bind(this.handleCompoundViewClick, this);
	    return PlateViewController.__super__.constructor.apply(this, arguments);
	  }

	  PlateViewController.prototype.template = _.template(__webpack_require__(43));

	  PlateViewController.prototype.events = {
	    "click a[name='compoundView']": "handleCompoundViewClick",
	    "click a[name='volumeView']": "handleVolumeViewClick",
	    "click a[name='concentrationView']": "handleConcentrationViewClick",
	    "click a[name='masterView']": "handleMasterViewClick",
	    "click a[name='colorByCompound']": "handleColorByCompoundClick",
	    "click a[name='colorByVolume']": "handleColorByVolumeClick",
	    "click a[name='colorByConcentration']": "handleColorByConcentrationClick",
	    "click a[name='colorByNone']": "handleColorByNoneClick",
	    "click a[name='showAll']": "handleShowAll",
	    "click a[name='fitToContents']": "handleFitToContents",
	    "click a[name='fitToScreen']": "fitToScreen",
	    "click button[name='increaseFontSize']": "handleIncreaseFontSizeClick",
	    "click button[name='decreaseFontSize']": "handleDecreaseFontSizeClick",
	    "click button[name='displayToolTips']": "handleDisplayToolTipsToggled"
	  };

	  PlateViewController.prototype.handleCompoundViewClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedView("Compound View");
	    this.plateTableController.updateDataDisplayed("batchCode");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.COMPOUND_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleVolumeViewClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedView("Volume View");
	    this.plateTableController.updateDataDisplayed("amount");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.VOLUME_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleConcentrationViewClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedView("Concentration View");
	    this.plateTableController.updateDataDisplayed("batchConcentration");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.CONCENTRATION_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleMasterViewClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedView("Master View");
	    this.$("button[name='displayToolTips']").addClass("active");
	    this.plateTableController.updateDataDisplayed("masterView");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.MASTER_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleColorByCompoundClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedColorBy("Color By Compound");
	    this.plateTableController.updateColorBy("batchCode");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.COMPOUND_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleColorByVolumeClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedColorBy("Color By Volume");
	    this.plateTableController.updateColorBy("amount");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.COMPOUND_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleColorByConcentrationClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedColorBy("Color By Concentration");
	    this.plateTableController.updateColorBy("batchConcentration");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.COMPOUND_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleColorByNoneClick = function(e) {
	    e.preventDefault();
	    this.updateSelectedColorBy("No Color");
	    this.plateTableController.updateColorBy("noColor");
	    return this.trigger(PLATE_VIEW_CONTROLLER_EVENTS.COMPOUND_VIEW_SELECTED);
	  };

	  PlateViewController.prototype.handleIncreaseFontSizeClick = function() {
	    return this.plateTableController.increaseFontSize();
	  };

	  PlateViewController.prototype.handleDecreaseFontSizeClick = function() {
	    return this.plateTableController.decreaseFontSize();
	  };

	  PlateViewController.prototype.handleShowAll = function(e) {
	    e.preventDefault();
	    this.updateSelectedTableFitMode("Show All");
	    return this.plateTableController.showAll();
	  };

	  PlateViewController.prototype.handleFitToContents = function(e) {
	    e.preventDefault();
	    this.updateSelectedTableFitMode("Fit to Contents");
	    return this.plateTableController.fitToContents();
	  };

	  PlateViewController.prototype.fitToScreen = function(e) {
	    e.preventDefault();
	    this.updateSelectedTableFitMode("Fit to Screen");
	    return this.plateTableController.fitToScreen();
	  };

	  PlateViewController.prototype.updateSelectedTableFitMode = function(displayMode) {
	    return this.$("button[name='cellZoom']").html(displayMode);
	  };

	  PlateViewController.prototype.updateSelectedView = function(selectedView) {
	    return this.$("button[name='selectedView']").html(selectedView);
	  };

	  PlateViewController.prototype.updateSelectedColorBy = function(colorBy) {
	    return this.$("button[name='selectedColorBy']").html(colorBy);
	  };

	  PlateViewController.prototype.handleDisplayToolTipsToggled = function() {
	    $("button[name='displayToolTips']").toggleClass("active");
	    this.plateTableController.displayToolTips = !this.plateTableController.displayToolTips;
	    return this.plateTableController.renderHandsOnTable();
	  };

	  PlateViewController.prototype.initialize = function() {
	    this.plateTableController = new PlateTableController();
	    this.plateTableController.on(PLATE_TABLE_CONTROLLER_EVENTS.REGION_SELECTED, this.handleRegionSelected);
	    this.plateTableController.on(PLATE_TABLE_CONTROLLER_EVENTS.ADD_IDENTIFIER_CONTENT_FROM_TABLE, this.handleContentUpdated);
	    return this.plateTableController.on(PLATE_TABLE_CONTROLLER_EVENTS.PLATE_CONTENT_UPADATED, this.handlePlateContentUpdated);
	  };

	  PlateViewController.prototype.completeInitialization = function(plateWells, plateMetaData) {
	    this.wells = plateWells;
	    this.plateMetaData = plateMetaData;
	    return this.plateTableController.completeInitialization(this.wells, this.plateMetaData);
	  };

	  PlateViewController.prototype.render = function() {
	    $(this.el).html(this.template());
	    this.$("div[name='plateTableContainer']").html(this.plateTableController.render().el);
	    return this;
	  };

	  PlateViewController.prototype.handleRegionSelected = function(selectedRegionBoundries) {
	    return this.trigger(PLATE_TABLE_CONTROLLER_EVENTS.REGION_SELECTED, selectedRegionBoundries);
	  };

	  PlateViewController.prototype.handleContentUpdated = function(addContentModel) {
	    return this.trigger(PLATE_TABLE_CONTROLLER_EVENTS.ADD_IDENTIFIER_CONTENT_FROM_TABLE, addContentModel);
	  };

	  PlateViewController.prototype.handlePlateContentUpdated = function(identifiersToRemove) {
	    return this.trigger(PLATE_TABLE_CONTROLLER_EVENTS.PLATE_CONTENT_UPADATED, identifiersToRemove);
	  };

	  PlateViewController.prototype.addContent = function(data) {
	    return this.plateTableController.handleContentAdded(data);
	  };

	  PlateViewController.prototype.applyDilution = function(dilutionModel) {
	    return this.plateTableController.applyDilution(dilutionModel);
	  };

	  return PlateViewController;

	})(Backbone.View);

	module.exports = {
	  PlateViewController: PlateViewController
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var $, ADD_CONTENT_MODEL_FIELDS, AddContentModel, Backbone, HANDS_ON_TABLE_EVENTS, Handsontable, PLATE_TABLE_CONTROLLER_EVENTS, PlateFillerFactory, PlateTableController, SerialDilutionFactory, WellsModel, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	Handsontable = __webpack_require__(38);

	__webpack_require__(15);

	PlateFillerFactory = __webpack_require__(30).PlateFillerFactory;

	SerialDilutionFactory = __webpack_require__(40).SerialDilutionFactory;

	WellsModel = __webpack_require__(31).WellsModel;

	ADD_CONTENT_MODEL_FIELDS = __webpack_require__(32).ADD_CONTENT_MODEL_FIELDS;

	AddContentModel = __webpack_require__(32).AddContentModel;

	HANDS_ON_TABLE_EVENTS = {
	  PASTE: "paste",
	  EDIT: "edit",
	  AUTOFILL: "autofill"
	};

	PLATE_TABLE_CONTROLLER_EVENTS = {
	  REGION_SELECTED: "RegionSelected",
	  PLATE_CONTENT_UPADATED: "PlateContentUpdated",
	  ADD_IDENTIFIER_CONTENT_FROM_TABLE: "AddIdentifierContentFromTable"
	};

	PlateTableController = (function(superClass) {
	  extend(PlateTableController, superClass);

	  function PlateTableController() {
	    this.calculateLayout = bind(this.calculateLayout, this);
	    this.fitToScreen = bind(this.fitToScreen, this);
	    this.fitToContents = bind(this.fitToContents, this);
	    this.showAll = bind(this.showAll, this);
	    this.calculateBackgroundColorForVolume = bind(this.calculateBackgroundColorForVolume, this);
	    this.calculateBackgroundColorForConcentration = bind(this.calculateBackgroundColorForConcentration, this);
	    this.applyBackgroundColorToCell = bind(this.applyBackgroundColorToCell, this);
	    this.defaultCellRenderer = bind(this.defaultCellRenderer, this);
	    this.toolTipCellRenderer = bind(this.toolTipCellRenderer, this);
	    this.lookupWellByRowCol = bind(this.lookupWellByRowCol, this);
	    this.getWellDataAtRowCol = bind(this.getWellDataAtRowCol, this);
	    this.identifiersValidated = bind(this.identifiersValidated, this);
	    this.handleAcceptTruncatedPaste = bind(this.handleAcceptTruncatedPaste, this);
	    this.handleContentUpdated = bind(this.handleContentUpdated, this);
	    this.handleTableChangeRangeValidation = bind(this.handleTableChangeRangeValidation, this);
	    this.validatePasteContentColumnRange = bind(this.validatePasteContentColumnRange, this);
	    this.validatePasteContentRowRange = bind(this.validatePasteContentRowRange, this);
	    this.handleRegionSelected = bind(this.handleRegionSelected, this);
	    this.addContent1 = bind(this.addContent1, this);
	    this.addContent = bind(this.addContent, this);
	    this.applyDilution = bind(this.applyDilution, this);
	    this.saveUpdatedWellContent = bind(this.saveUpdatedWellContent, this);
	    this.handleInsertOverwrittenWellsAnyway = bind(this.handleInsertOverwrittenWellsAnyway, this);
	    this.handleContentAdded = bind(this.handleContentAdded, this);
	    this.convertWellsDataToHandsonTableData = bind(this.convertWellsDataToHandsonTableData, this);
	    this.updateColorBy = bind(this.updateColorBy, this);
	    this.updateDataDisplayed = bind(this.updateDataDisplayed, this);
	    this.decreaseFontSize = bind(this.decreaseFontSize, this);
	    this.increaseFontSize = bind(this.increaseFontSize, this);
	    this.renderHandsOnTable = bind(this.renderHandsOnTable, this);
	    this.completeInitialization = bind(this.completeInitialization, this);
	    this.render = bind(this.render, this);
	    return PlateTableController.__super__.constructor.apply(this, arguments);
	  }

	  PlateTableController.prototype.template = _.template(__webpack_require__(42));

	  PlateTableController.prototype.events = {
	    "click button[name='pasteTruncatedIdentifiersAnyway']": "handleAcceptTruncatedPaste",
	    "click button[name='insertOverwrittenWellsAnyway']": "handleInsertOverwrittenWellsAnyway"
	  };

	  PlateTableController.prototype.initialize = function() {
	    this.plateFillerFactory = new PlateFillerFactory();
	    this.serialDilutionFactory = new SerialDilutionFactory();
	    this.displayToolTips = false;
	    this.dataFieldToDisplay = "batchCode";
	    this.dataFieldToColorBy = "noColor";
	    this.listOfBatchCodes = {};
	    this.fontSize = 14;
	    window.FOOTABLECONTROLLER = this;
	    $(window).resize(_.debounce(this.calculateLayout, 100));
	    return this.shouldFitToScreen = false;
	  };

	  PlateTableController.prototype.render = function() {
	    $(this.el).html(this.template());
	    return this;
	  };

	  PlateTableController.prototype.completeInitialization = function(wells, plateMetaData) {
	    this.wells = wells;
	    this.plateMetaData = plateMetaData;
	    this.wellsToUpdate = new WellsModel({
	      allWells: this.wells
	    });
	    return this.renderHandsOnTable();
	  };

	  PlateTableController.prototype.renderHandsOnTable = function() {
	    var columnHeaders, container, hotData, i, ref, results, rowHeaders;
	    container = document.getElementsByName("handsontablecontainer")[0];
	    columnHeaders = (function() {
	      results = [];
	      for (var i = 1, ref = this.plateMetaData.numberOfColumns; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    rowHeaders = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'W', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF'];
	    if (this.displayToolTips) {
	      this.handsOnTable = new Handsontable(container, {
	        rowHeaders: rowHeaders,
	        colHeaders: columnHeaders,
	        outsideClickDeselects: false,
	        startCols: this.plateMetaData.numberOfColumns,
	        startRows: this.plateMetaData.numberOfRows,
	        renderer: this.toolTipCellRenderer,
	        beforeChange: this.handleTableChangeRangeValidation,
	        afterChange: this.handleContentUpdated,
	        afterSelection: this.handleRegionSelected
	      });
	    } else {
	      this.handsOnTable = new Handsontable(container, {
	        rowHeaders: rowHeaders.slice(0, this.plateMetaData.numberOfRows),
	        colHeaders: columnHeaders,
	        outsideClickDeselects: false,
	        startCols: this.plateMetaData.numberOfColumns,
	        startRows: this.plateMetaData.numberOfRows,
	        renderer: this.defaultCellRenderer,
	        afterChange: this.handleContentUpdated,
	        beforeChange: this.handleTableChangeRangeValidation,
	        afterSelection: this.handleRegionSelected
	      });
	    }
	    window.FOOHOT = this.handsOnTable;
	    hotData = this.convertWellsDataToHandsonTableData(this.dataFieldToDisplay);
	    this.addContent(hotData);
	    return this.fitToScreen();
	  };

	  PlateTableController.prototype.increaseFontSize = function() {
	    this.fontSize = this.fontSize + 2;
	    return this.handsOnTable.init();
	  };

	  PlateTableController.prototype.decreaseFontSize = function() {
	    if (this.fontSize > 2) {
	      this.fontSize = this.fontSize - 2;
	    }
	    return this.handsOnTable.render();
	  };

	  PlateTableController.prototype.updateDataDisplayed = function(dataFieldToDisplay) {
	    var hotData;
	    this.dataFieldToDisplay = dataFieldToDisplay;
	    if (this.dataFieldToDisplay === "masterView") {
	      this.displayToolTips = true;
	      this.fitToScreen();
	      this.renderHandsOnTable();
	    }
	    hotData = this.convertWellsDataToHandsonTableData(dataFieldToDisplay);
	    return this.addContent(hotData);
	  };

	  PlateTableController.prototype.updateColorBy = function(dataFieldToColorBy) {
	    var bComponent, gComponent, maxValue, minValue, rComponent;
	    this.dataFieldToColorBy = dataFieldToColorBy;
	    if (this.dataFieldToColorBy !== "noColor") {
	      if (this.dataFieldToColorBy === "batchCode") {
	        this.listOfBatchCodes = {};
	        rComponent = 0;
	        gComponent = 0;
	        bComponent = 50;
	        _.each(this.wells, (function(_this) {
	          return function(well) {
	            var color, fontColor;
	            if (well["batchCode"] != null) {
	              if (_this.listOfBatchCodes[well["batchCode"]] == null) {
	                color = "rgb(" + rComponent + "," + gComponent + "," + bComponent + ")";
	                fontColor = "black";
	                if ((rComponent + gComponent + bComponent) < 256) {
	                  fontColor = "white";
	                }
	                _this.listOfBatchCodes[well["batchCode"]] = {
	                  backgroundColor: color,
	                  fontColor: fontColor
	                };
	                bComponent += 85;
	                if (bComponent > 255) {
	                  bComponent = bComponent - 255;
	                  gComponent += 85;
	                  if (gComponent > 255) {
	                    gComponent = gComponent - 255;
	                    return rComponent += 85;
	                  }
	                }
	              }
	            }
	          };
	        })(this));
	      } else {
	        minValue = Infinity;
	        maxValue = -Infinity;
	        _.each(this.wells, (function(_this) {
	          return function(well) {
	            if (!isNaN(parseFloat(well[_this.dataFieldToColorBy]))) {
	              if (well[_this.dataFieldToColorBy] < minValue) {
	                if (well[_this.dataFieldToColorBy] === 0) {
	                  minValue = 0.000001;
	                } else {
	                  minValue = well[_this.dataFieldToColorBy];
	                }
	              }
	              if (well[_this.dataFieldToColorBy] > maxValue) {
	                return maxValue = well[_this.dataFieldToColorBy];
	              }
	            }
	          };
	        })(this));
	        if (minValue === 0) {
	          this.minValue = minValue;
	        } else {
	          if (this.dataFieldToColorBy === "batchConcentration") {
	            this.minValue = Math.log(minValue);
	          } else {
	            this.minValue = minValue;
	          }
	        }
	        if (maxValue < 0) {
	          maxValue = 0;
	        }
	        if (maxValue === 0) {
	          this.maxValue = maxValue;
	        } else {
	          if (this.dataFieldToColorBy === "batchConcentration") {
	            this.maxValue = Math.log(maxValue);
	          } else {
	            this.maxValue = maxValue;
	          }
	        }
	      }
	    }
	    return this.renderHandsOnTable();
	  };

	  PlateTableController.prototype.convertWellsDataToHandsonTableData = function(dataField) {
	    var hotData;
	    hotData = [];
	    _.each(this.wells, function(well) {
	      var wellData;
	      wellData = "";
	      if (dataField !== "masterView") {
	        wellData = well[dataField];
	      }
	      return hotData.push([well.rowIndex - 1, well.columnIndex - 1, wellData]);
	    });
	    return hotData;
	  };

	  PlateTableController.prototype.handleContentAdded = function(addContentModel) {
	    var plateFiller, ref, validatedIdentifiers, wellContentOverwritten;
	    validatedIdentifiers = addContentModel.get(ADD_CONTENT_MODEL_FIELDS.VALIDATED_IDENTIFIERS);
	    plateFiller = this.plateFillerFactory.getPlateFiller(addContentModel.get(ADD_CONTENT_MODEL_FIELDS.FILL_STRATEGY), addContentModel.get(ADD_CONTENT_MODEL_FIELDS.FILL_DIRECTION), validatedIdentifiers, this.selectedRegionBoundries);
	    wellContentOverwritten = [];
	    this.identifiersToRemove = [];
	    ref = plateFiller.getWells(this.wells, addContentModel.get("batchConcentration"), addContentModel.get("amount")), this.plateWells = ref[0], this.identifiersToRemove = ref[1], this.wellsToUpdate = ref[2], wellContentOverwritten = ref[3];
	    if (wellContentOverwritten) {
	      return $("div[name='overwrittingWellContentsWarning']").modal('show');
	    } else {
	      return this.saveUpdatedWellContent();
	    }
	  };

	  PlateTableController.prototype.handleInsertOverwrittenWellsAnyway = function() {
	    return this.saveUpdatedWellContent();
	  };

	  PlateTableController.prototype.saveUpdatedWellContent = function() {
	    console.log("@wellsToUpdate.get('wells')");
	    console.log(this.wellsToUpdate.get('wells'));
	    this.wellsToUpdate.save();
	    this.trigger(PLATE_TABLE_CONTROLLER_EVENTS.PLATE_CONTENT_UPADATED, this.identifiersToRemove);
	    return this.addContent1(this.plateWells);
	  };

	  PlateTableController.prototype.applyDilution = function(dilutionModel) {
	    var dilutionStrategy;
	    dilutionStrategy = this.serialDilutionFactory.getSerialDilutionStrategy(dilutionModel, this.selectedRegionBoundries);
	    this.plateWells = dilutionStrategy.getWells(this.wells);
	    return this.addContent1(this.plateWells);
	  };

	  PlateTableController.prototype.addContent = function(data) {
	    this.handsOnTable.setDataAtCell(data, 'programaticEdit');
	    return this.handsOnTable.init();
	  };

	  PlateTableController.prototype.addContent1 = function(data) {
	    var hotData;
	    hotData = [];
	    _.each(data, (function(_this) {
	      return function(d) {
	        return hotData.push([d[0], d[1], d[2][_this.dataFieldToDisplay]]);
	      };
	    })(this));
	    this.handsOnTable.setDataAtCell(hotData);
	    return this.handsOnTable.init();
	  };

	  PlateTableController.prototype.handleRegionSelected = function(rowStart, colStart, rowStop, colStop) {
	    this.selectedRegionBoundries = {
	      rowStart: rowStart,
	      colStart: colStart,
	      rowStop: rowStop,
	      colStop: colStop
	    };
	    return this.trigger(PLATE_TABLE_CONTROLLER_EVENTS.REGION_SELECTED, this.selectedRegionBoundries);
	  };

	  PlateTableController.prototype.validatePasteContentRowRange = function(changes, numberOfRows) {
	    var rowsExceedingRowRange;
	    rowsExceedingRowRange = _.filter(changes, function(change) {
	      return change[0] >= numberOfRows;
	    });
	    return rowsExceedingRowRange;
	  };

	  PlateTableController.prototype.validatePasteContentColumnRange = function(changes, numberOfCols) {
	    var colsExceedingRowRange;
	    colsExceedingRowRange = _.filter(changes, function(change) {
	      return change[1] >= numberOfCols;
	    });
	    return colsExceedingRowRange;
	  };

	  PlateTableController.prototype.handleTableChangeRangeValidation = function(changes, source) {
	    var invalidCols, invalidEntries, invalidRows, validEntries;
	    if (source === HANDS_ON_TABLE_EVENTS.PASTE) {
	      this.pendingChanges = [];
	      invalidRows = this.validatePasteContentRowRange(changes, this.plateMetaData.numberOfRows);
	      invalidCols = this.validatePasteContentColumnRange(changes, this.plateMetaData.numberOfColumns);
	      invalidEntries = _.union(invalidRows, invalidCols);
	      validEntries = _.difference(changes, invalidEntries);
	      if (_.size(invalidEntries) > 0) {
	        this.pendingChanges = validEntries;
	        $("div[name='handsontablePasteError']").modal('show');
	        return false;
	      }
	    }
	  };

	  PlateTableController.prototype.handleContentUpdated = function(changes, source) {
	    var addContentModel, listOfIdentifiers, updatedValues, wellsToUpdate;
	    if (source === "edit" || source === "autofill" || source === "paste") {
	      listOfIdentifiers = [];
	      wellsToUpdate = this.reformatUpdatedValues(changes);
	      _.each(changes, function(change) {
	        return listOfIdentifiers.push(change[3]);
	      });
	      addContentModel = new AddContentModel();
	      addContentModel.set(ADD_CONTENT_MODEL_FIELDS.IDENTIFIERS, listOfIdentifiers);
	      addContentModel.set(ADD_CONTENT_MODEL_FIELDS.WELLS_TO_UPDATE, wellsToUpdate);
	      if (this.dataFieldToDisplay !== "batchCode") {
	        updatedValues = this.reformatUpdatedValues(changes);
	        this.wellsToUpdate.resetWells();
	        _.each(updatedValues, (function(_this) {
	          return function(updatedValue) {
	            var well;
	            well = _this.wellsToUpdate.getWellAtRowIdxColIdx(updatedValue.rowIdx, updatedValue.colIdx);
	            well[_this.dataFieldToDisplay] = updatedValue.value;
	            return _this.wellsToUpdate.fillWellWithWellObject(updatedValue.rowIdx, updatedValue.colIdx, well);
	          };
	        })(this));
	        this.wellsToUpdate.save();
	        return this.trigger(PLATE_TABLE_CONTROLLER_EVENTS.PLATE_CONTENT_UPADATED, addContentModel);
	      } else {
	        return this.trigger(PLATE_TABLE_CONTROLLER_EVENTS.ADD_IDENTIFIER_CONTENT_FROM_TABLE, addContentModel);
	      }
	    }
	  };

	  PlateTableController.prototype.handleAcceptTruncatedPaste = function() {
	    _.each(this.pendingChanges, function(pc) {
	      return pc[2] = pc[3];
	    });
	    this.addContent(this.pendingChanges);
	    return this.handleContentUpdated(this.pendingChanges, "paste");
	  };

	  PlateTableController.prototype.identifiersValidated = function(addContentModel) {
	    var aliasedIdentifiers, aliasedWells, invalidIdentifiers, invalidWells, validIdentifiers, validWells, wellsToSaveTmp;
	    aliasedIdentifiers = _.map(addContentModel.get(ADD_CONTENT_MODEL_FIELDS.ALIASED_IDENTIFIERS), 'requestName');
	    invalidIdentifiers = _.map(addContentModel.get(ADD_CONTENT_MODEL_FIELDS.INVALID_IDENTIFIERS), 'requestName');
	    validIdentifiers = addContentModel.get(ADD_CONTENT_MODEL_FIELDS.VALIDATED_IDENTIFIERS);
	    aliasedWells = _.filter(addContentModel.get(ADD_CONTENT_MODEL_FIELDS.WELLS_TO_UPDATE), function(well) {
	      var ref;
	      return ref = well.value, indexOf.call(aliasedIdentifiers, ref) >= 0;
	    });
	    invalidWells = _.filter(addContentModel.get(ADD_CONTENT_MODEL_FIELDS.WELLS_TO_UPDATE), function(well) {
	      var ref;
	      return ref = well.value, indexOf.call(invalidIdentifiers, ref) >= 0;
	    });
	    if (validIdentifiers != null) {
	      validWells = _.filter(addContentModel.get(ADD_CONTENT_MODEL_FIELDS.WELLS_TO_UPDATE), function(well) {
	        var ref;
	        return ref = well.value, indexOf.call(validIdentifiers, ref) >= 0;
	      });
	    } else {
	      validWells = [];
	    }
	    this.wellsToUpdate.resetWells();
	    _.each(aliasedWells, (function(_this) {
	      return function(aw) {
	        var aliasedValue, cell, well;
	        aliasedValue = _.each(addContentModel.get(ADD_CONTENT_MODEL_FIELDS.ALIASED_IDENTIFIERS), function(ai) {
	          if (ai.requestName === aw.value) {
	            return true;
	          } else {
	            return false;
	          }
	        });
	        cell = _this.handsOnTable.getCell(aw.rowIdx, aw.colIdx);
	        well = _this.wellsToUpdate.getWellAtRowIdxColIdx(aw.rowIdx, aw.colIdx);
	        well.status = "aliased";
	        well[_this.dataFieldToDisplay] = aliasedValue[0].preferredName;
	        _this.wellsToUpdate.fillWellWithWellObject(aw.rowIdx, aw.colIdx, well);
	        $(cell).addClass("aliasedIdentifierCell");
	        return $(cell).html(aliasedValue[0].preferredName);
	      };
	    })(this));
	    _.each(invalidWells, (function(_this) {
	      return function(aw) {
	        var cell, well;
	        cell = _this.handsOnTable.getCell(aw.rowIdx, aw.colIdx);
	        well = _this.wellsToUpdate.getWellAtRowIdxColIdx(aw.rowIdx, aw.colIdx);
	        well.status = "invalid";
	        return $(cell).addClass("invalidIdentifierCell");
	      };
	    })(this));
	    _.each(validWells, (function(_this) {
	      return function(aw) {
	        var cell, well;
	        cell = _this.handsOnTable.getCell(aw.rowIdx, aw.colIdx);
	        well = _this.wellsToUpdate.getWellAtRowIdxColIdx(aw.rowIdx, aw.colIdx);
	        if (well != null) {
	          well.status = "valid";
	          well[_this.dataFieldToDisplay] = aw.value;
	          _this.wellsToUpdate.fillWellWithWellObject(aw.rowIdx, aw.colIdx, well);
	          $(cell).removeClass("invalidIdentifierCell");
	          return $(cell).removeClass("aliasedIdentifierCell");
	        }
	      };
	    })(this));
	    $("div[name='updatingWellContents']").modal("show");
	    wellsToSaveTmp = new WellsModel({
	      allWells: []
	    });
	    wellsToSaveTmp.set("wells", this.wellsToUpdate.get('wells'));
	    return wellsToSaveTmp.save(null, {
	      success: (function(_this) {
	        return function(result) {
	          return $("div[name='updatingWellContents']").modal('hide');
	        };
	      })(this),
	      error: (function(_this) {
	        return function(result) {
	          return console.log("save error...");
	        };
	      })(this)
	    });
	  };

	  PlateTableController.prototype.reformatUpdatedValues = function(changes) {
	    var updateValue;
	    updateValue = [];
	    _.each(changes, function(change) {
	      return updateValue.push({
	        rowIdx: change[0],
	        colIdx: change[1],
	        value: change[3]
	      });
	    });
	    return updateValue;
	  };

	  PlateTableController.prototype.getWellDataAtRowCol = function(row, col) {
	    var wellData;
	    wellData = "";
	    _.each(this.plateWells, function(well) {
	      if (well[0] === row && well[1] === col) {
	        return wellData = well[2];
	      }
	    });
	    return wellData;
	  };

	  PlateTableController.prototype.lookupWellByRowCol = function(row, col) {
	    return _.each(this.wells, function(well) {});
	  };

	  PlateTableController.prototype.toolTipCellRenderer = function(instance, td, row, col, prop, value, cellProperties) {
	    var t, well, wellData;
	    Handsontable.renderers.TextRenderer.apply(this, arguments);
	    wellData = this.getWellDataAtRowCol(row, col);
	    well = _.find(this.wells, function(w) {
	      if (w.columnIndex === col && w.rowIndex === row) {
	        return true;
	      } else {
	        return false;
	      }
	    });
	    if (well.batchCode == null) {
	      well.batchCode = "";
	    }
	    if (well.amount == null) {
	      well.amount = "";
	    }
	    if (well.batchConcentration == null) {
	      well.batchConcentration = "";
	    }
	    t = '<div class="popover left"> <div class="arrow"></div> <h3 class="popover-title">Well Details: ' + well.wellName + '</h3> <div class="popover-content"><p>Batch Code: ' + well.batchCode + '</p><p>Volume: ' + well.amount + '</p><p>Concentration: ' + well.batchConcentration + '</p></div> </div>';
	    $(td).tooltip({
	      trigger: 'hover active',
	      title: 'Tooltip -- boom!',
	      placement: 'right',
	      container: 'body',
	      template: t
	    });
	    if (well != null) {
	      if (well.status != null) {
	        if (well.status === "valid") {
	          $(td).removeClass("invalidIdentifierCell");
	          $(td).removeClass("aliasedIdentifierCell");
	        } else if (well.status === "invalid") {
	          $(td).addClass("invalidIdentifierCell");
	        } else if (well.status === "aliased") {
	          $(td).addClass("aliasedIdentifierCell");
	        }
	      }
	      if (this.dataFieldToColorBy !== "noColor") {
	        td = this.applyBackgroundColorToCell(td, well);
	      }
	    }
	    td.style.fontSize = this.fontSize + "px";
	    return td;
	  };

	  PlateTableController.prototype.defaultCellRenderer = function(instance, td, row, col, prop, value, cellProperties) {
	    var well, wellData;
	    Handsontable.renderers.TextRenderer.apply(this, arguments);
	    wellData = this.getWellDataAtRowCol(row, col);
	    well = _.find(this.wells, function(w) {
	      if (w.columnIndex === col && w.rowIndex === row) {
	        return true;
	      } else {
	        return false;
	      }
	    });
	    if (well != null) {
	      if (well.status != null) {
	        if (well.status === "valid") {
	          $(td).removeClass("invalidIdentifierCell");
	          $(td).removeClass("aliasedIdentifierCell");
	        } else if (well.status === "invalid") {
	          $(td).addClass("invalidIdentifierCell");
	        } else if (well.status === "aliased") {
	          $(td).addClass("aliasedIdentifierCell");
	        }
	      }
	      if (this.dataFieldToColorBy !== "noColor") {
	        td = this.applyBackgroundColorToCell(td, well);
	      }
	    }
	    td.style.fontSize = this.fontSize + "px";
	    return td;
	  };

	  PlateTableController.prototype.applyBackgroundColorToCell = function(td, well) {
	    var backgroundColor;
	    if (this.dataFieldToColorBy === "batchCode") {
	      if (well.batchCode !== "") {
	        if (this.listOfBatchCodes[well.batchCode] != null) {
	          td.style.background = this.listOfBatchCodes[well.batchCode].backgroundColor;
	          td.style.color = this.listOfBatchCodes[well.batchCode].fontColor;
	        }
	      }
	    } else if (this.dataFieldToColorBy === "batchConcentration") {
	      backgroundColor = this.calculateBackgroundColorForConcentration(well);
	      td.style.background = backgroundColor;
	    } else {
	      backgroundColor = this.calculateBackgroundColorForVolume(well);
	      td.style.background = backgroundColor;
	    }
	    return td;
	  };

	  PlateTableController.prototype.calculateBackgroundColorForConcentration = function(well) {
	    var backgroundColor, conc, logVal, maxRange, midValue, minRange, normVal;
	    minRange = 1;
	    maxRange = 255;
	    backgroundColor = "";
	    if (!isNaN(parseFloat(well[this.dataFieldToColorBy]))) {
	      conc = parseFloat(well[this.dataFieldToColorBy]);
	      normVal = 255;
	      if (Math.log(well[this.dataFieldToColorBy]) === -Infinity) {
	        backgroundColor = "rgb(0,255,0)";
	      } else {
	        if (this.dataFieldToColorBy === "batchConcentration") {
	          logVal = Math.log(well[this.dataFieldToColorBy]);
	        } else {
	          logVal = well[this.dataFieldToColorBy];
	        }
	        midValue = (this.minValue + this.maxValue) / 2;
	        if (logVal > midValue) {
	          normVal = maxRange - parseInt(minRange + (logVal - midValue) * (maxRange - minRange) / (this.maxValue - midValue));
	          backgroundColor = "rgb(255," + normVal + ",0)";
	        } else {
	          normVal = 255 - (parseInt(minRange + (midValue - logVal) * (maxRange - minRange) / (midValue - this.minValue)));
	          backgroundColor = "rgb(" + normVal + ",255,0)";
	        }
	      }
	    }
	    return backgroundColor;
	  };

	  PlateTableController.prototype.calculateBackgroundColorForVolume = function(well) {
	    var backgroundColor, conc, logVal, maxRange, midValue, minRange, normVal;
	    minRange = 1;
	    maxRange = 255;
	    backgroundColor = "";
	    if (!isNaN(parseFloat(well[this.dataFieldToColorBy]))) {
	      conc = parseFloat(well[this.dataFieldToColorBy]);
	      normVal = 255;
	      if (Math.log(well[this.dataFieldToColorBy]) === -Infinity) {
	        backgroundColor = "rgb(255,0,0)";
	      } else {
	        if (this.dataFieldToColorBy === "batchConcentration") {
	          logVal = Math.log(well[this.dataFieldToColorBy]);
	        } else {
	          logVal = well[this.dataFieldToColorBy];
	        }
	        midValue = (this.minValue + this.maxValue) / 2;
	        if (logVal < midValue) {
	          normVal = parseInt(minRange + (logVal - midValue) * (maxRange - minRange) / (this.maxValue - midValue));
	          backgroundColor = "rgb(255," + normVal + ",0)";
	        } else {
	          normVal = 255 - (maxRange - parseInt(minRange + (midValue - logVal) * (maxRange - minRange) / (midValue - this.minValue)));
	          backgroundColor = "rgb(" + normVal + ",255,0)";
	        }
	      }
	    }
	    return backgroundColor;
	  };

	  PlateTableController.prototype.showAll = function() {
	    this.handsOnTable.updateSettings({
	      colWidths: null,
	      rowHeights: null
	    });
	    return this.handsOnTable.render();
	  };

	  PlateTableController.prototype.fitToContents = function() {
	    this.shouldFitToScreen = false;
	    this.handsOnTable.updateSettings({
	      colWidths: null,
	      rowHeights: null
	    });
	    return this.handsOnTable.init();
	  };

	  PlateTableController.prototype.fitToScreen = function() {
	    this.shouldFitToScreen = true;
	    return this.calculateLayout();
	  };

	  PlateTableController.prototype.calculateLayout = function() {
	    var columnWidth, height, rowHeight, width;
	    if (this.shouldFitToScreen) {
	      width = $(".editorHandsontable").width();
	      height = $(".editorHandsontable").height();
	      columnWidth = (width - 60) / this.plateMetaData.numberOfColumns;
	      rowHeight = (height - 50) / this.plateMetaData.numberOfRows;
	      this.handsOnTable.updateSettings({
	        colWidths: columnWidth,
	        rowHeights: rowHeight
	      });
	    } else {
	      this.handsOnTable.updateSettings({
	        colWidths: null,
	        rowHeights: null
	      });
	    }
	    return this.handsOnTable.render();
	  };

	  return PlateTableController;

	})(Backbone.View);

	module.exports = {
	  PlateTableController: PlateTableController,
	  PLATE_TABLE_CONTROLLER_EVENTS: PLATE_TABLE_CONTROLLER_EVENTS
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(process, global) {/*** IMPORTS FROM imports-loader ***/
	(function() {

	/*!
	(The MIT License)

	Copyright (c) 2012-2014 Marcin Warpechowski
	Copyright (c) 2015 Handsoncode sp. z o.o. <hello@handsoncode.net>

	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files (the
	'Software'), to deal in the Software without restriction, including
	without limitation the rights to use, copy, modify, merge, publish,
	distribute, sublicense, and/or sell copies of the Software, and to
	permit persons to whom the Software is furnished to do so, subject to
	the following conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	*/
	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Handsontable = f()}})(function(){var define,module,exports;return (function init(modules, cache, entry) {
	  (function outer (modules, cache, entry) {
	    // Save the require from previous bundle to this closure if any
	    var previousRequire = typeof require == "function" && require;
	    var globalNS = JSON.parse('{"zeroclipboard":"ZeroClipboard","moment":"moment","pikaday":"Pikaday"}') || {};

	    function newRequire(name, jumped){
	      if(!cache[name]) {

	        if(!modules[name]) {
	          // if we cannot find the the module within our internal map or
	          // cache jump to the current global require ie. the last bundle
	          // that was added to the page.
	          var currentRequire = typeof require == "function" && require;
	          if (!jumped && currentRequire) return require(name, true);

	          // If there are other bundles on this page the require from the
	          // previous one is saved to 'previousRequire'. Repeat this as
	          // many times as there are bundles until the module is found or
	          // we exhaust the require chain.
	          if (previousRequire) return require(name, true);

	          // Try find module from global scope
	          if (globalNS[name] && typeof window[globalNS[name]] !== 'undefined') {
	            return window[globalNS[name]];
	          }

	          var err = new Error('Cannot find module \'' + name + '\'');
	          err.code = 'MODULE_NOT_FOUND';
	          throw err;
	        }
	        var m = cache[name] = {exports:{}};
	        modules[name][0].call(m.exports, function(x){
	          var id = modules[name][1][x];
	          return newRequire(id ? id : x);
	        },m,m.exports,outer,modules,cache,entry);
	      }

	      return cache[name].exports;
	    }
	    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

	    // Override the current require with this new one
	    return newRequire;
	  })(modules, cache, entry);

	  return function() {
	    return Handsontable;
	  };
	})
	({1:[function(require,module,exports){
	"use strict";
	if (window.jQuery) {
	  (function(window, $, Handsontable) {
	    $.fn.handsontable = function(action) {
	      var i,
	          ilen,
	          args,
	          output,
	          userSettings,
	          $this = this.first(),
	          instance = $this.data('handsontable');
	      if (typeof action !== 'string') {
	        userSettings = action || {};
	        if (instance) {
	          instance.updateSettings(userSettings);
	        } else {
	          instance = new Handsontable.Core($this[0], userSettings);
	          $this.data('handsontable', instance);
	          instance.init();
	        }
	        return $this;
	      } else {
	        args = [];
	        if (arguments.length > 1) {
	          for (i = 1, ilen = arguments.length; i < ilen; i++) {
	            args.push(arguments[i]);
	          }
	        }
	        if (instance) {
	          if (typeof instance[action] !== 'undefined') {
	            output = instance[action].apply(instance, args);
	            if (action === 'destroy') {
	              $this.removeData();
	            }
	          } else {
	            throw new Error('Handsontable do not provide action: ' + action);
	          }
	        }
	        return output;
	      }
	    };
	  })(window, jQuery, Handsontable);
	}

	//# 
	},{}],2:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableBorder: {get: function() {
	      return WalkontableBorder;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__,
	    $__cell_47_coords__,
	    $__overlay_47__95_base_46_js__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getComputedStyle = $__0.getComputedStyle,
	    getTrimmingContainer = $__0.getTrimmingContainer,
	    innerWidth = $__0.innerWidth,
	    innerHeight = $__0.innerHeight,
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var stopImmediatePropagation = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	var EventManager = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableCellCoords = ($__cell_47_coords__ = require("cell/coords"), $__cell_47_coords__ && $__cell_47_coords__.__esModule && $__cell_47_coords__ || {default: $__cell_47_coords__}).WalkontableCellCoords;
	var WalkontableOverlay = ($__overlay_47__95_base_46_js__ = require("overlay/_base.js"), $__overlay_47__95_base_46_js__ && $__overlay_47__95_base_46_js__.__esModule && $__overlay_47__95_base_46_js__ || {default: $__overlay_47__95_base_46_js__}).WalkontableOverlay;
	var WalkontableBorder = function WalkontableBorder(wotInstance, settings) {
	  if (!settings) {
	    return;
	  }
	  this.eventManager = new EventManager(wotInstance);
	  this.instance = wotInstance;
	  this.wot = wotInstance;
	  this.settings = settings;
	  this.mouseDown = false;
	  this.main = null;
	  this.top = null;
	  this.left = null;
	  this.bottom = null;
	  this.right = null;
	  this.topStyle = null;
	  this.leftStyle = null;
	  this.bottomStyle = null;
	  this.rightStyle = null;
	  this.cornerDefaultStyle = {
	    width: '5px',
	    height: '5px',
	    borderWidth: '2px',
	    borderStyle: 'solid',
	    borderColor: '#FFF'
	  };
	  this.corner = null;
	  this.cornerStyle = null;
	  this.createBorders(settings);
	  this.registerListeners();
	};
	($traceurRuntime.createClass)(WalkontableBorder, {
	  registerListeners: function() {
	    var $__5 = this;
	    this.eventManager.addEventListener(document.body, 'mousedown', (function() {
	      return $__5.onMouseDown();
	    }));
	    this.eventManager.addEventListener(document.body, 'mouseup', (function() {
	      return $__5.onMouseUp();
	    }));
	    var $__7 = this,
	        $__8 = function(c, len) {
	          $__7.eventManager.addEventListener($__7.main.childNodes[c], 'mouseenter', (function(event) {
	            return $__5.onMouseEnter(event, $__5.main.childNodes[c]);
	          }));
	        };
	    for (var c = 0,
	        len = this.main.childNodes.length; c < len; c++) {
	      $__8(c, len);
	    }
	  },
	  onMouseDown: function() {
	    this.mouseDown = true;
	  },
	  onMouseUp: function() {
	    this.mouseDown = false;
	  },
	  onMouseEnter: function(event, parentElement) {
	    if (!this.mouseDown || !this.wot.getSetting('hideBorderOnMouseDownOver')) {
	      return;
	    }
	    event.preventDefault();
	    stopImmediatePropagation(event);
	    var _this = this;
	    var bounds = parentElement.getBoundingClientRect();
	    parentElement.style.display = 'none';
	    function isOutside(event) {
	      if (event.clientY < Math.floor(bounds.top)) {
	        return true;
	      }
	      if (event.clientY > Math.ceil(bounds.top + bounds.height)) {
	        return true;
	      }
	      if (event.clientX < Math.floor(bounds.left)) {
	        return true;
	      }
	      if (event.clientX > Math.ceil(bounds.left + bounds.width)) {
	        return true;
	      }
	    }
	    function handler(event) {
	      if (isOutside(event)) {
	        _this.eventManager.removeEventListener(document.body, 'mousemove', handler);
	        parentElement.style.display = 'block';
	      }
	    }
	    this.eventManager.addEventListener(document.body, 'mousemove', handler);
	  },
	  createBorders: function(settings) {
	    this.main = document.createElement('div');
	    var borderDivs = ['top', 'left', 'bottom', 'right', 'corner'];
	    var style = this.main.style;
	    style.position = 'absolute';
	    style.top = 0;
	    style.left = 0;
	    for (var i = 0; i < 5; i++) {
	      var position = borderDivs[i];
	      var div = document.createElement('div');
	      div.className = 'wtBorder ' + (this.settings.className || '');
	      if (this.settings[position] && this.settings[position].hide) {
	        div.className += ' hidden';
	      }
	      style = div.style;
	      style.backgroundColor = (this.settings[position] && this.settings[position].color) ? this.settings[position].color : settings.border.color;
	      style.height = (this.settings[position] && this.settings[position].width) ? this.settings[position].width + 'px' : settings.border.width + 'px';
	      style.width = (this.settings[position] && this.settings[position].width) ? this.settings[position].width + 'px' : settings.border.width + 'px';
	      this.main.appendChild(div);
	    }
	    this.top = this.main.childNodes[0];
	    this.left = this.main.childNodes[1];
	    this.bottom = this.main.childNodes[2];
	    this.right = this.main.childNodes[3];
	    this.topStyle = this.top.style;
	    this.leftStyle = this.left.style;
	    this.bottomStyle = this.bottom.style;
	    this.rightStyle = this.right.style;
	    this.corner = this.main.childNodes[4];
	    this.corner.className += ' corner';
	    this.cornerStyle = this.corner.style;
	    this.cornerStyle.width = this.cornerDefaultStyle.width;
	    this.cornerStyle.height = this.cornerDefaultStyle.height;
	    this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(' ');
	    if (Handsontable.mobileBrowser) {
	      this.createMultipleSelectorHandles();
	    }
	    this.disappear();
	    if (!this.wot.wtTable.bordersHolder) {
	      this.wot.wtTable.bordersHolder = document.createElement('div');
	      this.wot.wtTable.bordersHolder.className = 'htBorders';
	      this.wot.wtTable.spreader.appendChild(this.wot.wtTable.bordersHolder);
	    }
	    this.wot.wtTable.bordersHolder.insertBefore(this.main, this.wot.wtTable.bordersHolder.firstChild);
	  },
	  createMultipleSelectorHandles: function() {
	    this.selectionHandles = {
	      topLeft: document.createElement('DIV'),
	      topLeftHitArea: document.createElement('DIV'),
	      bottomRight: document.createElement('DIV'),
	      bottomRightHitArea: document.createElement('DIV')
	    };
	    var width = 10;
	    var hitAreaWidth = 40;
	    this.selectionHandles.topLeft.className = 'topLeftSelectionHandle';
	    this.selectionHandles.topLeftHitArea.className = 'topLeftSelectionHandle-HitArea';
	    this.selectionHandles.bottomRight.className = 'bottomRightSelectionHandle';
	    this.selectionHandles.bottomRightHitArea.className = 'bottomRightSelectionHandle-HitArea';
	    this.selectionHandles.styles = {
	      topLeft: this.selectionHandles.topLeft.style,
	      topLeftHitArea: this.selectionHandles.topLeftHitArea.style,
	      bottomRight: this.selectionHandles.bottomRight.style,
	      bottomRightHitArea: this.selectionHandles.bottomRightHitArea.style
	    };
	    var hitAreaStyle = {
	      position: 'absolute',
	      height: hitAreaWidth + 'px',
	      width: hitAreaWidth + 'px',
	      'border-radius': parseInt(hitAreaWidth / 1.5, 10) + 'px'
	    };
	    for (var prop in hitAreaStyle) {
	      if (hitAreaStyle.hasOwnProperty(prop)) {
	        this.selectionHandles.styles.bottomRightHitArea[prop] = hitAreaStyle[prop];
	        this.selectionHandles.styles.topLeftHitArea[prop] = hitAreaStyle[prop];
	      }
	    }
	    var handleStyle = {
	      position: 'absolute',
	      height: width + 'px',
	      width: width + 'px',
	      'border-radius': parseInt(width / 1.5, 10) + 'px',
	      background: '#F5F5FF',
	      border: '1px solid #4285c8'
	    };
	    for (var prop$__9 in handleStyle) {
	      if (handleStyle.hasOwnProperty(prop$__9)) {
	        this.selectionHandles.styles.bottomRight[prop$__9] = handleStyle[prop$__9];
	        this.selectionHandles.styles.topLeft[prop$__9] = handleStyle[prop$__9];
	      }
	    }
	    this.main.appendChild(this.selectionHandles.topLeft);
	    this.main.appendChild(this.selectionHandles.bottomRight);
	    this.main.appendChild(this.selectionHandles.topLeftHitArea);
	    this.main.appendChild(this.selectionHandles.bottomRightHitArea);
	  },
	  isPartRange: function(row, col) {
	    if (this.wot.selections.area.cellRange) {
	      if (row != this.wot.selections.area.cellRange.to.row || col != this.wot.selections.area.cellRange.to.col) {
	        return true;
	      }
	    }
	    return false;
	  },
	  updateMultipleSelectionHandlesPosition: function(row, col, top, left, width, height) {
	    var handleWidth = parseInt(this.selectionHandles.styles.topLeft.width, 10);
	    var hitAreaWidth = parseInt(this.selectionHandles.styles.topLeftHitArea.width, 10);
	    this.selectionHandles.styles.topLeft.top = parseInt(top - handleWidth, 10) + 'px';
	    this.selectionHandles.styles.topLeft.left = parseInt(left - handleWidth, 10) + 'px';
	    this.selectionHandles.styles.topLeftHitArea.top = parseInt(top - (hitAreaWidth / 4) * 3, 10) + 'px';
	    this.selectionHandles.styles.topLeftHitArea.left = parseInt(left - (hitAreaWidth / 4) * 3, 10) + 'px';
	    this.selectionHandles.styles.bottomRight.top = parseInt(top + height, 10) + 'px';
	    this.selectionHandles.styles.bottomRight.left = parseInt(left + width, 10) + 'px';
	    this.selectionHandles.styles.bottomRightHitArea.top = parseInt(top + height - hitAreaWidth / 4, 10) + 'px';
	    this.selectionHandles.styles.bottomRightHitArea.left = parseInt(left + width - hitAreaWidth / 4, 10) + 'px';
	    if (this.settings.border.multipleSelectionHandlesVisible && this.settings.border.multipleSelectionHandlesVisible()) {
	      this.selectionHandles.styles.topLeft.display = 'block';
	      this.selectionHandles.styles.topLeftHitArea.display = 'block';
	      if (this.isPartRange(row, col)) {
	        this.selectionHandles.styles.bottomRight.display = 'none';
	        this.selectionHandles.styles.bottomRightHitArea.display = 'none';
	      } else {
	        this.selectionHandles.styles.bottomRight.display = 'block';
	        this.selectionHandles.styles.bottomRightHitArea.display = 'block';
	      }
	    } else {
	      this.selectionHandles.styles.topLeft.display = 'none';
	      this.selectionHandles.styles.bottomRight.display = 'none';
	      this.selectionHandles.styles.topLeftHitArea.display = 'none';
	      this.selectionHandles.styles.bottomRightHitArea.display = 'none';
	    }
	    if (row == this.wot.wtSettings.getSetting('fixedRowsTop') || col == this.wot.wtSettings.getSetting('fixedColumnsLeft')) {
	      this.selectionHandles.styles.topLeft.zIndex = '9999';
	      this.selectionHandles.styles.topLeftHitArea.zIndex = '9999';
	    } else {
	      this.selectionHandles.styles.topLeft.zIndex = '';
	      this.selectionHandles.styles.topLeftHitArea.zIndex = '';
	    }
	  },
	  appear: function(corners) {
	    if (this.disabled) {
	      return;
	    }
	    var isMultiple,
	        fromTD,
	        toTD,
	        fromOffset,
	        toOffset,
	        containerOffset,
	        top,
	        minTop,
	        left,
	        minLeft,
	        height,
	        width,
	        fromRow,
	        fromColumn,
	        toRow,
	        toColumn,
	        trimmingContainer,
	        cornerOverlappingContainer,
	        ilen;
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER)) {
	      ilen = this.wot.getSetting('fixedRowsTop');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      ilen = this.wot.getSetting('fixedRowsBottom');
	    } else {
	      ilen = this.wot.wtTable.getRenderedRowsCount();
	    }
	    for (var i = 0; i < ilen; i++) {
	      var s = this.wot.wtTable.rowFilter.renderedToSource(i);
	      if (s >= corners[0] && s <= corners[2]) {
	        fromRow = s;
	        break;
	      }
	    }
	    for (var i$__10 = ilen - 1; i$__10 >= 0; i$__10--) {
	      var s$__11 = this.wot.wtTable.rowFilter.renderedToSource(i$__10);
	      if (s$__11 >= corners[0] && s$__11 <= corners[2]) {
	        toRow = s$__11;
	        break;
	      }
	    }
	    ilen = this.wot.wtTable.getRenderedColumnsCount();
	    for (var i$__12 = 0; i$__12 < ilen; i$__12++) {
	      var s$__13 = this.wot.wtTable.columnFilter.renderedToSource(i$__12);
	      if (s$__13 >= corners[1] && s$__13 <= corners[3]) {
	        fromColumn = s$__13;
	        break;
	      }
	    }
	    for (var i$__14 = ilen - 1; i$__14 >= 0; i$__14--) {
	      var s$__15 = this.wot.wtTable.columnFilter.renderedToSource(i$__14);
	      if (s$__15 >= corners[1] && s$__15 <= corners[3]) {
	        toColumn = s$__15;
	        break;
	      }
	    }
	    if (fromRow === void 0 || fromColumn === void 0) {
	      this.disappear();
	      return;
	    }
	    isMultiple = (fromRow !== toRow || fromColumn !== toColumn);
	    fromTD = this.wot.wtTable.getCell(new WalkontableCellCoords(fromRow, fromColumn));
	    toTD = isMultiple ? this.wot.wtTable.getCell(new WalkontableCellCoords(toRow, toColumn)) : fromTD;
	    fromOffset = offset(fromTD);
	    toOffset = isMultiple ? offset(toTD) : fromOffset;
	    containerOffset = offset(this.wot.wtTable.TABLE);
	    minTop = fromOffset.top;
	    height = toOffset.top + outerHeight(toTD) - minTop;
	    minLeft = fromOffset.left;
	    width = toOffset.left + outerWidth(toTD) - minLeft;
	    top = minTop - containerOffset.top - 1;
	    left = minLeft - containerOffset.left - 1;
	    var style = getComputedStyle(fromTD);
	    if (parseInt(style.borderTopWidth, 10) > 0) {
	      top += 1;
	      height = height > 0 ? height - 1 : 0;
	    }
	    if (parseInt(style.borderLeftWidth, 10) > 0) {
	      left += 1;
	      width = width > 0 ? width - 1 : 0;
	    }
	    this.topStyle.top = top + 'px';
	    this.topStyle.left = left + 'px';
	    this.topStyle.width = width + 'px';
	    this.topStyle.display = 'block';
	    this.leftStyle.top = top + 'px';
	    this.leftStyle.left = left + 'px';
	    this.leftStyle.height = height + 'px';
	    this.leftStyle.display = 'block';
	    var delta = Math.floor(this.settings.border.width / 2);
	    this.bottomStyle.top = top + height - delta + 'px';
	    this.bottomStyle.left = left + 'px';
	    this.bottomStyle.width = width + 'px';
	    this.bottomStyle.display = 'block';
	    this.rightStyle.top = top + 'px';
	    this.rightStyle.left = left + width - delta + 'px';
	    this.rightStyle.height = height + 1 + 'px';
	    this.rightStyle.display = 'block';
	    if (Handsontable.mobileBrowser || (!this.hasSetting(this.settings.border.cornerVisible) || this.isPartRange(toRow, toColumn))) {
	      this.cornerStyle.display = 'none';
	    } else {
	      this.cornerStyle.top = top + height - 4 + 'px';
	      this.cornerStyle.left = left + width - 4 + 'px';
	      this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth;
	      this.cornerStyle.width = this.cornerDefaultStyle.width;
	      this.cornerStyle.display = 'block';
	      trimmingContainer = getTrimmingContainer(this.wot.wtTable.TABLE);
	      if (toColumn === this.wot.getSetting('totalColumns') - 1) {
	        cornerOverlappingContainer = toTD.offsetLeft + outerWidth(toTD) >= innerWidth(trimmingContainer);
	        if (cornerOverlappingContainer) {
	          this.cornerStyle.left = Math.floor(left + width - 3 - parseInt(this.cornerDefaultStyle.width) / 2) + 'px';
	          this.cornerStyle.borderRightWidth = 0;
	        }
	      }
	      if (toRow === this.wot.getSetting('totalRows') - 1) {
	        cornerOverlappingContainer = toTD.offsetTop + outerHeight(toTD) >= innerHeight(trimmingContainer);
	        if (cornerOverlappingContainer) {
	          this.cornerStyle.top = Math.floor(top + height - 3 - parseInt(this.cornerDefaultStyle.height) / 2) + 'px';
	          this.cornerStyle.borderBottomWidth = 0;
	        }
	      }
	    }
	    if (Handsontable.mobileBrowser) {
	      this.updateMultipleSelectionHandlesPosition(fromRow, fromColumn, top, left, width, height);
	    }
	  },
	  disappear: function() {
	    this.topStyle.display = 'none';
	    this.leftStyle.display = 'none';
	    this.bottomStyle.display = 'none';
	    this.rightStyle.display = 'none';
	    this.cornerStyle.display = 'none';
	    if (Handsontable.mobileBrowser) {
	      this.selectionHandles.styles.topLeft.display = 'none';
	      this.selectionHandles.styles.bottomRight.display = 'none';
	    }
	  },
	  hasSetting: function(setting) {
	    if (typeof setting === 'function') {
	      return setting();
	    }
	    return !!setting;
	  }
	}, {});
	;
	window.WalkontableBorder = WalkontableBorder;

	//# 
	},{"cell/coords":5,"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"overlay/_base.js":11}],3:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableViewportColumnsCalculator: {get: function() {
	      return WalkontableViewportColumnsCalculator;
	    }},
	  __esModule: {value: true}
	});
	var privatePool = new WeakMap();
	var WalkontableViewportColumnsCalculator = function WalkontableViewportColumnsCalculator(viewportWidth, scrollOffset, totalColumns, columnWidthFn, overrideFn, onlyFullyVisible, stretchH) {
	  privatePool.set(this, {
	    viewportWidth: viewportWidth,
	    scrollOffset: scrollOffset,
	    totalColumns: totalColumns,
	    columnWidthFn: columnWidthFn,
	    overrideFn: overrideFn,
	    onlyFullyVisible: onlyFullyVisible
	  });
	  this.count = 0;
	  this.startColumn = null;
	  this.endColumn = null;
	  this.startPosition = null;
	  this.stretchAllRatio = 0;
	  this.stretchLastWidth = 0;
	  this.stretch = stretchH;
	  this.totalTargetWidth = 0;
	  this.needVerifyLastColumnWidth = true;
	  this.stretchAllColumnsWidth = [];
	  this.calculate();
	};
	var $WalkontableViewportColumnsCalculator = WalkontableViewportColumnsCalculator;
	($traceurRuntime.createClass)(WalkontableViewportColumnsCalculator, {
	  calculate: function() {
	    var sum = 0;
	    var needReverse = true;
	    var startPositions = [];
	    var columnWidth;
	    var priv = privatePool.get(this);
	    var onlyFullyVisible = priv.onlyFullyVisible;
	    var overrideFn = priv.overrideFn;
	    var scrollOffset = priv.scrollOffset;
	    var totalColumns = priv.totalColumns;
	    var viewportWidth = priv.viewportWidth;
	    for (var i = 0; i < totalColumns; i++) {
	      columnWidth = this._getColumnWidth(i);
	      if (sum <= scrollOffset && !onlyFullyVisible) {
	        this.startColumn = i;
	      }
	      if (sum >= scrollOffset && sum + columnWidth <= scrollOffset + viewportWidth) {
	        if (this.startColumn == null) {
	          this.startColumn = i;
	        }
	        this.endColumn = i;
	      }
	      startPositions.push(sum);
	      sum += columnWidth;
	      if (!onlyFullyVisible) {
	        this.endColumn = i;
	      }
	      if (sum >= scrollOffset + viewportWidth) {
	        needReverse = false;
	        break;
	      }
	    }
	    if (this.endColumn === totalColumns - 1 && needReverse) {
	      this.startColumn = this.endColumn;
	      while (this.startColumn > 0) {
	        var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];
	        if (viewportSum <= viewportWidth || !onlyFullyVisible) {
	          this.startColumn--;
	        }
	        if (viewportSum > viewportWidth) {
	          break;
	        }
	      }
	    }
	    if (this.startColumn !== null && overrideFn) {
	      overrideFn(this);
	    }
	    this.startPosition = startPositions[this.startColumn];
	    if (this.startPosition == void 0) {
	      this.startPosition = null;
	    }
	    if (this.startColumn !== null) {
	      this.count = this.endColumn - this.startColumn + 1;
	    }
	  },
	  refreshStretching: function(totalWidth) {
	    if (this.stretch === 'none') {
	      return;
	    }
	    var sumAll = 0;
	    var columnWidth;
	    var remainingSize;
	    var priv = privatePool.get(this);
	    var totalColumns = priv.totalColumns;
	    for (var i = 0; i < totalColumns; i++) {
	      columnWidth = this._getColumnWidth(i);
	      sumAll += columnWidth;
	    }
	    this.totalTargetWidth = totalWidth;
	    remainingSize = sumAll - totalWidth;
	    if (this.stretch === 'all' && remainingSize < 0) {
	      this.stretchAllRatio = totalWidth / sumAll;
	      this.stretchAllColumnsWidth = [];
	      this.needVerifyLastColumnWidth = true;
	    } else if (this.stretch === 'last' && totalWidth !== Infinity) {
	      this.stretchLastWidth = -remainingSize + this._getColumnWidth(totalColumns - 1);
	    }
	  },
	  getStretchedColumnWidth: function(column, baseWidth) {
	    var result = null;
	    if (this.stretch === 'all' && this.stretchAllRatio !== 0) {
	      result = this._getStretchedAllColumnWidth(column, baseWidth);
	    } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {
	      result = this._getStretchedLastColumnWidth(column);
	    }
	    return result;
	  },
	  _getStretchedAllColumnWidth: function(column, baseWidth) {
	    var sumRatioWidth = 0;
	    var priv = privatePool.get(this);
	    var totalColumns = priv.totalColumns;
	    if (!this.stretchAllColumnsWidth[column]) {
	      this.stretchAllColumnsWidth[column] = Math.round(baseWidth * this.stretchAllRatio);
	    }
	    if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {
	      this.needVerifyLastColumnWidth = false;
	      for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {
	        sumRatioWidth += this.stretchAllColumnsWidth[i];
	      }
	      if (sumRatioWidth !== this.totalTargetWidth) {
	        this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;
	      }
	    }
	    return this.stretchAllColumnsWidth[column];
	  },
	  _getStretchedLastColumnWidth: function(column) {
	    var priv = privatePool.get(this);
	    var totalColumns = priv.totalColumns;
	    if (column === totalColumns - 1) {
	      return this.stretchLastWidth;
	    }
	    return null;
	  },
	  _getColumnWidth: function(column) {
	    var width = privatePool.get(this).columnWidthFn(column);
	    if (width === undefined) {
	      width = $WalkontableViewportColumnsCalculator.DEFAULT_WIDTH;
	    }
	    return width;
	  }
	}, {get DEFAULT_WIDTH() {
	    return 50;
	  }});
	;
	window.WalkontableViewportColumnsCalculator = WalkontableViewportColumnsCalculator;

	//# 
	},{}],4:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableViewportRowsCalculator: {get: function() {
	      return WalkontableViewportRowsCalculator;
	    }},
	  __esModule: {value: true}
	});
	var privatePool = new WeakMap();
	var WalkontableViewportRowsCalculator = function WalkontableViewportRowsCalculator(viewportHeight, scrollOffset, totalRows, rowHeightFn, overrideFn, onlyFullyVisible, horizontalScrollbarHeight) {
	  privatePool.set(this, {
	    viewportHeight: viewportHeight,
	    scrollOffset: scrollOffset,
	    totalRows: totalRows,
	    rowHeightFn: rowHeightFn,
	    overrideFn: overrideFn,
	    onlyFullyVisible: onlyFullyVisible,
	    horizontalScrollbarHeight: horizontalScrollbarHeight
	  });
	  this.count = 0;
	  this.startRow = null;
	  this.endRow = null;
	  this.startPosition = null;
	  this.calculate();
	};
	var $WalkontableViewportRowsCalculator = WalkontableViewportRowsCalculator;
	($traceurRuntime.createClass)(WalkontableViewportRowsCalculator, {calculate: function() {
	    var sum = 0;
	    var needReverse = true;
	    var startPositions = [];
	    var priv = privatePool.get(this);
	    var onlyFullyVisible = priv.onlyFullyVisible;
	    var overrideFn = priv.overrideFn;
	    var rowHeightFn = priv.rowHeightFn;
	    var scrollOffset = priv.scrollOffset;
	    var totalRows = priv.totalRows;
	    var viewportHeight = priv.viewportHeight;
	    var horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;
	    for (var i = 0; i < totalRows; i++) {
	      var rowHeight = rowHeightFn(i);
	      if (rowHeight === undefined) {
	        rowHeight = $WalkontableViewportRowsCalculator.DEFAULT_HEIGHT;
	      }
	      if (sum <= scrollOffset && !onlyFullyVisible) {
	        this.startRow = i;
	      }
	      if (sum >= scrollOffset && sum + rowHeight <= scrollOffset + viewportHeight - horizontalScrollbarHeight) {
	        if (this.startRow === null) {
	          this.startRow = i;
	        }
	        this.endRow = i;
	      }
	      startPositions.push(sum);
	      sum += rowHeight;
	      if (!onlyFullyVisible) {
	        this.endRow = i;
	      }
	      if (sum >= scrollOffset + viewportHeight - horizontalScrollbarHeight) {
	        needReverse = false;
	        break;
	      }
	    }
	    if (this.endRow === totalRows - 1 && needReverse) {
	      this.startRow = this.endRow;
	      while (this.startRow > 0) {
	        var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];
	        if (viewportSum <= viewportHeight - horizontalScrollbarHeight || !onlyFullyVisible) {
	          this.startRow--;
	        }
	        if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {
	          break;
	        }
	      }
	    }
	    if (this.startRow !== null && overrideFn) {
	      overrideFn(this);
	    }
	    this.startPosition = startPositions[this.startRow];
	    if (this.startPosition == void 0) {
	      this.startPosition = null;
	    }
	    if (this.startRow !== null) {
	      this.count = this.endRow - this.startRow + 1;
	    }
	  }}, {get DEFAULT_HEIGHT() {
	    return 23;
	  }});
	;
	window.WalkontableViewportRowsCalculator = WalkontableViewportRowsCalculator;

	//# 
	},{}],5:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableCellCoords: {get: function() {
	      return WalkontableCellCoords;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableCellCoords = function WalkontableCellCoords(row, col) {
	  if (typeof row !== 'undefined' && typeof col !== 'undefined') {
	    this.row = row;
	    this.col = col;
	  } else {
	    this.row = null;
	    this.col = null;
	  }
	};
	($traceurRuntime.createClass)(WalkontableCellCoords, {
	  isValid: function(wotInstance) {
	    if (this.row < 0 || this.col < 0) {
	      return false;
	    }
	    if (this.row >= wotInstance.getSetting('totalRows') || this.col >= wotInstance.getSetting('totalColumns')) {
	      return false;
	    }
	    return true;
	  },
	  isEqual: function(cellCoords) {
	    if (cellCoords === this) {
	      return true;
	    }
	    return this.row === cellCoords.row && this.col === cellCoords.col;
	  },
	  isSouthEastOf: function(testedCoords) {
	    return this.row >= testedCoords.row && this.col >= testedCoords.col;
	  },
	  isNorthWestOf: function(testedCoords) {
	    return this.row <= testedCoords.row && this.col <= testedCoords.col;
	  },
	  isSouthWestOf: function(testedCoords) {
	    return this.row >= testedCoords.row && this.col <= testedCoords.col;
	  },
	  isNorthEastOf: function(testedCoords) {
	    return this.row <= testedCoords.row && this.col >= testedCoords.col;
	  }
	}, {});
	;
	window.WalkontableCellCoords = WalkontableCellCoords;

	//# 
	},{}],6:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableCellRange: {get: function() {
	      return WalkontableCellRange;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_cell_47_coords__;
	var WalkontableCellCoords = ($___46__46__47_cell_47_coords__ = require("cell/coords"), $___46__46__47_cell_47_coords__ && $___46__46__47_cell_47_coords__.__esModule && $___46__46__47_cell_47_coords__ || {default: $___46__46__47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = function WalkontableCellRange(highlight, from, to) {
	  this.highlight = highlight;
	  this.from = from;
	  this.to = to;
	};
	var $WalkontableCellRange = WalkontableCellRange;
	($traceurRuntime.createClass)(WalkontableCellRange, {
	  isValid: function(wotInstance) {
	    return this.from.isValid(wotInstance) && this.to.isValid(wotInstance);
	  },
	  isSingle: function() {
	    return this.from.row === this.to.row && this.from.col === this.to.col;
	  },
	  getHeight: function() {
	    return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;
	  },
	  getWidth: function() {
	    return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;
	  },
	  includes: function(cellCoords) {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    if (cellCoords.row < 0) {
	      cellCoords.row = 0;
	    }
	    if (cellCoords.col < 0) {
	      cellCoords.col = 0;
	    }
	    return topLeft.row <= cellCoords.row && bottomRight.row >= cellCoords.row && topLeft.col <= cellCoords.col && bottomRight.col >= cellCoords.col;
	  },
	  includesRange: function(testedRange) {
	    return this.includes(testedRange.getTopLeftCorner()) && this.includes(testedRange.getBottomRightCorner());
	  },
	  isEqual: function(testedRange) {
	    return (Math.min(this.from.row, this.to.row) == Math.min(testedRange.from.row, testedRange.to.row)) && (Math.max(this.from.row, this.to.row) == Math.max(testedRange.from.row, testedRange.to.row)) && (Math.min(this.from.col, this.to.col) == Math.min(testedRange.from.col, testedRange.to.col)) && (Math.max(this.from.col, this.to.col) == Math.max(testedRange.from.col, testedRange.to.col));
	  },
	  overlaps: function(testedRange) {
	    return testedRange.isSouthEastOf(this.getTopLeftCorner()) && testedRange.isNorthWestOf(this.getBottomRightCorner());
	  },
	  isSouthEastOf: function(testedCoords) {
	    return this.getTopLeftCorner().isSouthEastOf(testedCoords) || this.getBottomRightCorner().isSouthEastOf(testedCoords);
	  },
	  isNorthWestOf: function(testedCoords) {
	    return this.getTopLeftCorner().isNorthWestOf(testedCoords) || this.getBottomRightCorner().isNorthWestOf(testedCoords);
	  },
	  expand: function(cellCoords) {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    if (cellCoords.row < topLeft.row || cellCoords.col < topLeft.col || cellCoords.row > bottomRight.row || cellCoords.col > bottomRight.col) {
	      this.from = new WalkontableCellCoords(Math.min(topLeft.row, cellCoords.row), Math.min(topLeft.col, cellCoords.col));
	      this.to = new WalkontableCellCoords(Math.max(bottomRight.row, cellCoords.row), Math.max(bottomRight.col, cellCoords.col));
	      return true;
	    }
	    return false;
	  },
	  expandByRange: function(expandingRange) {
	    if (this.includesRange(expandingRange) || !this.overlaps(expandingRange)) {
	      return false;
	    }
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    var topRight = this.getTopRightCorner();
	    var bottomLeft = this.getBottomLeftCorner();
	    var expandingTopLeft = expandingRange.getTopLeftCorner();
	    var expandingBottomRight = expandingRange.getBottomRightCorner();
	    var resultTopRow = Math.min(topLeft.row, expandingTopLeft.row);
	    var resultTopCol = Math.min(topLeft.col, expandingTopLeft.col);
	    var resultBottomRow = Math.max(bottomRight.row, expandingBottomRight.row);
	    var resultBottomCol = Math.max(bottomRight.col, expandingBottomRight.col);
	    var finalFrom = new WalkontableCellCoords(resultTopRow, resultTopCol),
	        finalTo = new WalkontableCellCoords(resultBottomRow, resultBottomCol);
	    var isCorner = new $WalkontableCellRange(finalFrom, finalFrom, finalTo).isCorner(this.from, expandingRange),
	        onlyMerge = expandingRange.isEqual(new $WalkontableCellRange(finalFrom, finalFrom, finalTo));
	    if (isCorner && !onlyMerge) {
	      if (this.from.col > finalFrom.col) {
	        finalFrom.col = resultBottomCol;
	        finalTo.col = resultTopCol;
	      }
	      if (this.from.row > finalFrom.row) {
	        finalFrom.row = resultBottomRow;
	        finalTo.row = resultTopRow;
	      }
	    }
	    this.from = finalFrom;
	    this.to = finalTo;
	    return true;
	  },
	  getDirection: function() {
	    if (this.from.isNorthWestOf(this.to)) {
	      return 'NW-SE';
	    } else if (this.from.isNorthEastOf(this.to)) {
	      return 'NE-SW';
	    } else if (this.from.isSouthEastOf(this.to)) {
	      return 'SE-NW';
	    } else if (this.from.isSouthWestOf(this.to)) {
	      return 'SW-NE';
	    }
	  },
	  setDirection: function(direction) {
	    switch (direction) {
	      case 'NW-SE':
	        this.from = this.getTopLeftCorner();
	        this.to = this.getBottomRightCorner();
	        break;
	      case 'NE-SW':
	        this.from = this.getTopRightCorner();
	        this.to = this.getBottomLeftCorner();
	        break;
	      case 'SE-NW':
	        this.from = this.getBottomRightCorner();
	        this.to = this.getTopLeftCorner();
	        break;
	      case 'SW-NE':
	        this.from = this.getBottomLeftCorner();
	        this.to = this.getTopRightCorner();
	        break;
	    }
	  },
	  getTopLeftCorner: function() {
	    return new WalkontableCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
	  },
	  getBottomRightCorner: function() {
	    return new WalkontableCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
	  },
	  getTopRightCorner: function() {
	    return new WalkontableCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
	  },
	  getBottomLeftCorner: function() {
	    return new WalkontableCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
	  },
	  isCorner: function(coords, expandedRange) {
	    if (expandedRange) {
	      if (expandedRange.includes(coords)) {
	        if (this.getTopLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.from.col)) || this.getTopRightCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.to.col)) || this.getBottomLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.from.col)) || this.getBottomRightCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.to.col))) {
	          return true;
	        }
	      }
	    }
	    return coords.isEqual(this.getTopLeftCorner()) || coords.isEqual(this.getTopRightCorner()) || coords.isEqual(this.getBottomLeftCorner()) || coords.isEqual(this.getBottomRightCorner());
	  },
	  getOppositeCorner: function(coords, expandedRange) {
	    if (!(coords instanceof WalkontableCellCoords)) {
	      return false;
	    }
	    if (expandedRange) {
	      if (expandedRange.includes(coords)) {
	        if (this.getTopLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.from.col))) {
	          return this.getBottomRightCorner();
	        }
	        if (this.getTopRightCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.to.col))) {
	          return this.getBottomLeftCorner();
	        }
	        if (this.getBottomLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.from.col))) {
	          return this.getTopRightCorner();
	        }
	        if (this.getBottomRightCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.to.col))) {
	          return this.getTopLeftCorner();
	        }
	      }
	    }
	    if (coords.isEqual(this.getBottomRightCorner())) {
	      return this.getTopLeftCorner();
	    } else if (coords.isEqual(this.getTopLeftCorner())) {
	      return this.getBottomRightCorner();
	    } else if (coords.isEqual(this.getTopRightCorner())) {
	      return this.getBottomLeftCorner();
	    } else if (coords.isEqual(this.getBottomLeftCorner())) {
	      return this.getTopRightCorner();
	    }
	  },
	  getBordersSharedWith: function(range) {
	    if (!this.includesRange(range)) {
	      return [];
	    }
	    var thisBorders = {
	      top: Math.min(this.from.row, this.to.row),
	      bottom: Math.max(this.from.row, this.to.row),
	      left: Math.min(this.from.col, this.to.col),
	      right: Math.max(this.from.col, this.to.col)
	    };
	    var rangeBorders = {
	      top: Math.min(range.from.row, range.to.row),
	      bottom: Math.max(range.from.row, range.to.row),
	      left: Math.min(range.from.col, range.to.col),
	      right: Math.max(range.from.col, range.to.col)
	    };
	    var result = [];
	    if (thisBorders.top == rangeBorders.top) {
	      result.push('top');
	    }
	    if (thisBorders.right == rangeBorders.right) {
	      result.push('right');
	    }
	    if (thisBorders.bottom == rangeBorders.bottom) {
	      result.push('bottom');
	    }
	    if (thisBorders.left == rangeBorders.left) {
	      result.push('left');
	    }
	    return result;
	  },
	  getInner: function() {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    var out = [];
	    for (var r = topLeft.row; r <= bottomRight.row; r++) {
	      for (var c = topLeft.col; c <= bottomRight.col; c++) {
	        if (!(this.from.row === r && this.from.col === c) && !(this.to.row === r && this.to.col === c)) {
	          out.push(new WalkontableCellCoords(r, c));
	        }
	      }
	    }
	    return out;
	  },
	  getAll: function() {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    var out = [];
	    for (var r = topLeft.row; r <= bottomRight.row; r++) {
	      for (var c = topLeft.col; c <= bottomRight.col; c++) {
	        if (topLeft.row === r && topLeft.col === c) {
	          out.push(topLeft);
	        } else if (bottomRight.row === r && bottomRight.col === c) {
	          out.push(bottomRight);
	        } else {
	          out.push(new WalkontableCellCoords(r, c));
	        }
	      }
	    }
	    return out;
	  },
	  forAll: function(callback) {
	    var topLeft = this.getTopLeftCorner();
	    var bottomRight = this.getBottomRightCorner();
	    for (var r = topLeft.row; r <= bottomRight.row; r++) {
	      for (var c = topLeft.col; c <= bottomRight.col; c++) {
	        var breakIteration = callback(r, c);
	        if (breakIteration === false) {
	          return;
	        }
	      }
	    }
	  }
	}, {});
	;
	window.WalkontableCellRange = WalkontableCellRange;

	//# 
	},{"cell/coords":5}],7:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Walkontable: {get: function() {
	      return Walkontable;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_string__,
	    $__event__,
	    $__overlays__,
	    $__scroll__,
	    $__settings__,
	    $__table__,
	    $__viewport__,
	    $__overlay_47__95_base_46_js__,
	    $__overlay_47_top_46_js__,
	    $__overlay_47_left_46_js__,
	    $__overlay_47_debug_46_js__,
	    $__overlay_47_topLeftCorner_46_js__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    fastInnerText = $__0.fastInnerText,
	    isVisible = $__0.isVisible,
	    removeClass = $__0.removeClass;
	var objectEach = ($___46__46__47__46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_object__}).objectEach;
	var $__2 = ($___46__46__47__46__46__47__46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47__46__46__47__46__46__47_helpers_47_string__ && $___46__46__47__46__46__47__46__46__47_helpers_47_string__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_string__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_string__}),
	    toUpperCaseFirst = $__2.toUpperCaseFirst,
	    randomString = $__2.randomString;
	var WalkontableEvent = ($__event__ = require("event"), $__event__ && $__event__.__esModule && $__event__ || {default: $__event__}).WalkontableEvent;
	var WalkontableOverlays = ($__overlays__ = require("overlays"), $__overlays__ && $__overlays__.__esModule && $__overlays__ || {default: $__overlays__}).WalkontableOverlays;
	var WalkontableScroll = ($__scroll__ = require("scroll"), $__scroll__ && $__scroll__.__esModule && $__scroll__ || {default: $__scroll__}).WalkontableScroll;
	var WalkontableSettings = ($__settings__ = require("settings"), $__settings__ && $__settings__.__esModule && $__settings__ || {default: $__settings__}).WalkontableSettings;
	var WalkontableTable = ($__table__ = require("table"), $__table__ && $__table__.__esModule && $__table__ || {default: $__table__}).WalkontableTable;
	var WalkontableViewport = ($__viewport__ = require("viewport"), $__viewport__ && $__viewport__.__esModule && $__viewport__ || {default: $__viewport__}).WalkontableViewport;
	var WalkontableOverlay = ($__overlay_47__95_base_46_js__ = require("overlay/_base.js"), $__overlay_47__95_base_46_js__ && $__overlay_47__95_base_46_js__.__esModule && $__overlay_47__95_base_46_js__ || {default: $__overlay_47__95_base_46_js__}).WalkontableOverlay;
	var WalkontableTopOverlay = ($__overlay_47_top_46_js__ = require("overlay/top.js"), $__overlay_47_top_46_js__ && $__overlay_47_top_46_js__.__esModule && $__overlay_47_top_46_js__ || {default: $__overlay_47_top_46_js__}).WalkontableTopOverlay;
	var WalkontableLeftOverlay = ($__overlay_47_left_46_js__ = require("overlay/left.js"), $__overlay_47_left_46_js__ && $__overlay_47_left_46_js__.__esModule && $__overlay_47_left_46_js__ || {default: $__overlay_47_left_46_js__}).WalkontableLeftOverlay;
	var WalkontableDebugOverlay = ($__overlay_47_debug_46_js__ = require("overlay/debug.js"), $__overlay_47_debug_46_js__ && $__overlay_47_debug_46_js__.__esModule && $__overlay_47_debug_46_js__ || {default: $__overlay_47_debug_46_js__}).WalkontableDebugOverlay;
	var WalkontableTopLeftCornerOverlay = ($__overlay_47_topLeftCorner_46_js__ = require("overlay/topLeftCorner.js"), $__overlay_47_topLeftCorner_46_js__ && $__overlay_47_topLeftCorner_46_js__.__esModule && $__overlay_47_topLeftCorner_46_js__ || {default: $__overlay_47_topLeftCorner_46_js__}).WalkontableTopLeftCornerOverlay;
	var Walkontable = function Walkontable(settings) {
	  var originalHeaders = [];
	  this.guid = 'wt_' + randomString();
	  if (settings.cloneSource) {
	    this.cloneSource = settings.cloneSource;
	    this.cloneOverlay = settings.cloneOverlay;
	    this.wtSettings = settings.cloneSource.wtSettings;
	    this.wtTable = new WalkontableTable(this, settings.table, settings.wtRootElement);
	    this.wtScroll = new WalkontableScroll(this);
	    this.wtViewport = settings.cloneSource.wtViewport;
	    this.wtEvent = new WalkontableEvent(this);
	    this.selections = this.cloneSource.selections;
	  } else {
	    this.wtSettings = new WalkontableSettings(this, settings);
	    this.wtTable = new WalkontableTable(this, settings.table);
	    this.wtScroll = new WalkontableScroll(this);
	    this.wtViewport = new WalkontableViewport(this);
	    this.wtEvent = new WalkontableEvent(this);
	    this.selections = this.getSetting('selections');
	    this.wtOverlays = new WalkontableOverlays(this);
	    this.exportSettingsAsClassNames();
	  }
	  if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
	    for (var c = 0,
	        clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {
	      originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);
	    }
	    if (!this.getSetting('columnHeaders').length) {
	      this.update('columnHeaders', [function(column, TH) {
	        fastInnerText(TH, originalHeaders[column]);
	      }]);
	    }
	  }
	  this.drawn = false;
	  this.drawInterrupted = false;
	};
	($traceurRuntime.createClass)(Walkontable, {
	  draw: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    this.drawInterrupted = false;
	    if (!fastDraw && !isVisible(this.wtTable.TABLE)) {
	      this.drawInterrupted = true;
	    } else {
	      this.wtTable.draw(fastDraw);
	    }
	    return this;
	  },
	  getCell: function(coords) {
	    var topmost = arguments[1] !== (void 0) ? arguments[1] : false;
	    if (!topmost) {
	      return this.wtTable.getCell(coords);
	    }
	    var totalRows = this.wtSettings.getSetting('totalRows');
	    var fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');
	    var fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');
	    var fixedColumns = this.wtSettings.getSetting('fixedColumnsLeft');
	    if (coords.row < fixedRowsTop && coords.col < fixedColumns) {
	      return this.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell(coords);
	    } else if (coords.row < fixedRowsTop) {
	      return this.wtOverlays.topOverlay.clone.wtTable.getCell(coords);
	    } else if (coords.col < fixedColumns && coords.row >= totalRows - fixedRowsBottom) {
	      if (this.wtOverlays.bottomLeftCornerOverlay.clone) {
	        return this.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell(coords);
	      }
	    } else if (coords.col < fixedColumns) {
	      return this.wtOverlays.leftOverlay.clone.wtTable.getCell(coords);
	    } else if (coords.row >= totalRows - fixedRowsBottom) {
	      if (this.wtOverlays.bottomOverlay.clone) {
	        return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(coords);
	      }
	    }
	    return this.wtTable.getCell(coords);
	  },
	  update: function(settings, value) {
	    return this.wtSettings.update(settings, value);
	  },
	  scrollVertical: function(row) {
	    this.wtOverlays.topOverlay.scrollTo(row);
	    this.getSetting('onScrollVertically');
	    return this;
	  },
	  scrollHorizontal: function(column) {
	    this.wtOverlays.leftOverlay.scrollTo(column);
	    this.getSetting('onScrollHorizontally');
	    return this;
	  },
	  scrollViewport: function(coords) {
	    this.wtScroll.scrollViewport(coords);
	    return this;
	  },
	  getViewport: function() {
	    return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];
	  },
	  getOverlayName: function() {
	    return this.cloneOverlay ? this.cloneOverlay.type : 'master';
	  },
	  exportSettingsAsClassNames: function() {
	    var $__14 = this;
	    var toExport = {
	      rowHeaders: ['array'],
	      columnHeaders: ['array']
	    };
	    var allClassNames = [];
	    var newClassNames = [];
	    objectEach(toExport, (function(optionType, key) {
	      if (optionType.indexOf('array') > -1 && $__14.getSetting(key).length) {
	        newClassNames.push('ht' + toUpperCaseFirst(key));
	      }
	      allClassNames.push('ht' + toUpperCaseFirst(key));
	    }));
	    removeClass(this.wtTable.wtRootElement.parentNode, allClassNames);
	    addClass(this.wtTable.wtRootElement.parentNode, newClassNames);
	  },
	  getSetting: function(key, param1, param2, param3, param4) {
	    return this.wtSettings.getSetting(key, param1, param2, param3, param4);
	  },
	  hasSetting: function(key) {
	    return this.wtSettings.has(key);
	  },
	  destroy: function() {
	    this.wtOverlays.destroy();
	    this.wtEvent.destroy();
	  }
	}, {});
	;
	window.Walkontable = Walkontable;

	//# 
	},{"event":8,"helpers/dom/element":45,"helpers/object":50,"helpers/string":52,"overlay/_base.js":11,"overlay/debug.js":12,"overlay/left.js":13,"overlay/top.js":14,"overlay/topLeftCorner.js":15,"overlays":16,"scroll":17,"settings":19,"table":20,"viewport":22}],8:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableEvent: {get: function() {
	      return WalkontableEvent;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    closest = $__0.closest,
	    hasClass = $__0.hasClass,
	    isChildOf = $__0.isChildOf;
	var eventManagerObject = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).eventManager;
	function WalkontableEvent(instance) {
	  var that = this;
	  var eventManager = eventManagerObject(instance);
	  this.instance = instance;
	  var dblClickOrigin = [null, null];
	  this.dblClickTimeout = [null, null];
	  var onMouseDown = function(event) {
	    var cell = that.parentCell(event.realTarget);
	    if (hasClass(event.realTarget, 'corner')) {
	      that.instance.getSetting('onCellCornerMouseDown', event, event.realTarget);
	    } else if (cell.TD) {
	      if (that.instance.hasSetting('onCellMouseDown')) {
	        that.instance.getSetting('onCellMouseDown', event, cell.coords, cell.TD, that.instance);
	      }
	    }
	    if (event.button !== 2) {
	      if (cell.TD) {
	        dblClickOrigin[0] = cell.TD;
	        clearTimeout(that.dblClickTimeout[0]);
	        that.dblClickTimeout[0] = setTimeout(function() {
	          dblClickOrigin[0] = null;
	        }, 1000);
	      }
	    }
	  };
	  var onTouchMove = function(event) {
	    that.instance.touchMoving = true;
	  };
	  var longTouchTimeout;
	  var onTouchStart = function(event) {
	    var container = this;
	    eventManager.addEventListener(this, 'touchmove', onTouchMove);
	    that.checkIfTouchMove = setTimeout(function() {
	      if (that.instance.touchMoving === true) {
	        that.instance.touchMoving = void 0;
	        eventManager.removeEventListener('touchmove', onTouchMove, false);
	        return;
	      } else {
	        onMouseDown(event);
	      }
	    }, 30);
	  };
	  var lastMouseOver;
	  var onMouseOver = function(event) {
	    var table,
	        td;
	    if (that.instance.hasSetting('onCellMouseOver')) {
	      table = that.instance.wtTable.TABLE;
	      td = closest(event.realTarget, ['TD', 'TH'], table);
	      if (td && td !== lastMouseOver && isChildOf(td, table)) {
	        lastMouseOver = td;
	        that.instance.getSetting('onCellMouseOver', event, that.instance.wtTable.getCoords(td), td, that.instance);
	      }
	    }
	  };
	  var onMouseUp = function(event) {
	    if (event.button !== 2) {
	      var cell = that.parentCell(event.realTarget);
	      if (cell.TD === dblClickOrigin[0] && cell.TD === dblClickOrigin[1]) {
	        if (hasClass(event.realTarget, 'corner')) {
	          that.instance.getSetting('onCellCornerDblClick', event, cell.coords, cell.TD, that.instance);
	        } else {
	          that.instance.getSetting('onCellDblClick', event, cell.coords, cell.TD, that.instance);
	        }
	        dblClickOrigin[0] = null;
	        dblClickOrigin[1] = null;
	      } else if (cell.TD === dblClickOrigin[0]) {
	        dblClickOrigin[1] = cell.TD;
	        clearTimeout(that.dblClickTimeout[1]);
	        that.dblClickTimeout[1] = setTimeout(function() {
	          dblClickOrigin[1] = null;
	        }, 500);
	      }
	    }
	  };
	  var onTouchEnd = function(event) {
	    clearTimeout(longTouchTimeout);
	    event.preventDefault();
	    onMouseUp(event);
	  };
	  eventManager.addEventListener(this.instance.wtTable.holder, 'mousedown', onMouseDown);
	  eventManager.addEventListener(this.instance.wtTable.TABLE, 'mouseover', onMouseOver);
	  eventManager.addEventListener(this.instance.wtTable.holder, 'mouseup', onMouseUp);
	  if (this.instance.wtTable.holder.parentNode.parentNode && Handsontable.mobileBrowser && !that.instance.wtTable.isWorkingOnClone()) {
	    var classSelector = '.' + this.instance.wtTable.holder.parentNode.className.split(' ').join('.');
	    eventManager.addEventListener(this.instance.wtTable.holder, 'touchstart', function(event) {
	      that.instance.touchApplied = true;
	      if (isChildOf(event.target, classSelector)) {
	        onTouchStart.call(event.target, event);
	      }
	    });
	    eventManager.addEventListener(this.instance.wtTable.holder, 'touchend', function(event) {
	      that.instance.touchApplied = false;
	      if (isChildOf(event.target, classSelector)) {
	        onTouchEnd.call(event.target, event);
	      }
	    });
	    if (!that.instance.momentumScrolling) {
	      that.instance.momentumScrolling = {};
	    }
	    eventManager.addEventListener(this.instance.wtTable.holder, 'scroll', function(event) {
	      clearTimeout(that.instance.momentumScrolling._timeout);
	      if (!that.instance.momentumScrolling.ongoing) {
	        that.instance.getSetting('onBeforeTouchScroll');
	      }
	      that.instance.momentumScrolling.ongoing = true;
	      that.instance.momentumScrolling._timeout = setTimeout(function() {
	        if (!that.instance.touchApplied) {
	          that.instance.momentumScrolling.ongoing = false;
	          that.instance.getSetting('onAfterMomentumScroll');
	        }
	      }, 200);
	    });
	  }
	  eventManager.addEventListener(window, 'resize', function() {
	    if (that.instance.getSetting('stretchH') !== 'none') {
	      that.instance.draw();
	    }
	  });
	  this.destroy = function() {
	    clearTimeout(this.dblClickTimeout[0]);
	    clearTimeout(this.dblClickTimeout[1]);
	    eventManager.destroy();
	  };
	}
	WalkontableEvent.prototype.parentCell = function(elem) {
	  var cell = {};
	  var TABLE = this.instance.wtTable.TABLE;
	  var TD = closest(elem, ['TD', 'TH'], TABLE);
	  if (TD && isChildOf(TD, TABLE)) {
	    cell.coords = this.instance.wtTable.getCoords(TD);
	    cell.TD = TD;
	  } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'current')) {
	    cell.coords = this.instance.selections.current.cellRange.highlight;
	    cell.TD = this.instance.wtTable.getCell(cell.coords);
	  } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'area')) {
	    if (this.instance.selections.area.cellRange) {
	      cell.coords = this.instance.selections.area.cellRange.to;
	      cell.TD = this.instance.wtTable.getCell(cell.coords);
	    }
	  }
	  return cell;
	};
	;
	window.WalkontableEvent = WalkontableEvent;

	//# 
	},{"eventManager":41,"helpers/dom/element":45}],9:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableColumnFilter: {get: function() {
	      return WalkontableColumnFilter;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableColumnFilter = function WalkontableColumnFilter(offset, total, countTH) {
	  this.offset = offset;
	  this.total = total;
	  this.countTH = countTH;
	};
	($traceurRuntime.createClass)(WalkontableColumnFilter, {
	  offsetted: function(index) {
	    return index + this.offset;
	  },
	  unOffsetted: function(index) {
	    return index - this.offset;
	  },
	  renderedToSource: function(index) {
	    return this.offsetted(index);
	  },
	  sourceToRendered: function(index) {
	    return this.unOffsetted(index);
	  },
	  offsettedTH: function(index) {
	    return index - this.countTH;
	  },
	  unOffsettedTH: function(index) {
	    return index + this.countTH;
	  },
	  visibleRowHeadedColumnToSourceColumn: function(index) {
	    return this.renderedToSource(this.offsettedTH(index));
	  },
	  sourceColumnToVisibleRowHeadedColumn: function(index) {
	    return this.unOffsettedTH(this.sourceToRendered(index));
	  }
	}, {});
	;
	window.WalkontableColumnFilter = WalkontableColumnFilter;

	//# 
	},{}],10:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableRowFilter: {get: function() {
	      return WalkontableRowFilter;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableRowFilter = function WalkontableRowFilter(offset, total, countTH) {
	  this.offset = offset;
	  this.total = total;
	  this.countTH = countTH;
	};
	($traceurRuntime.createClass)(WalkontableRowFilter, {
	  offsetted: function(index) {
	    return index + this.offset;
	  },
	  unOffsetted: function(index) {
	    return index - this.offset;
	  },
	  renderedToSource: function(index) {
	    return this.offsetted(index);
	  },
	  sourceToRendered: function(index) {
	    return this.unOffsetted(index);
	  },
	  offsettedTH: function(index) {
	    return index - this.countTH;
	  },
	  unOffsettedTH: function(index) {
	    return index + this.countTH;
	  },
	  visibleColHeadedRowToSourceRow: function(index) {
	    return this.renderedToSource(this.offsettedTH(index));
	  },
	  sourceRowToVisibleColHeadedRow: function(index) {
	    return this.unOffsettedTH(this.sourceToRendered(index));
	  }
	}, {});
	;
	window.WalkontableRowFilter = WalkontableRowFilter;

	//# 
	},{}],11:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableOverlay: {get: function() {
	      return WalkontableOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getScrollableElement = $__0.getScrollableElement,
	    getTrimmingContainer = $__0.getTrimmingContainer;
	var defineGetter = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_object__}).defineGetter;
	var eventManagerObject = ($___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_eventManager__}).eventManager;
	var registeredOverlays = {};
	var WalkontableOverlay = function WalkontableOverlay(wotInstance) {
	  defineGetter(this, 'wot', wotInstance, {writable: false});
	  this.instance = this.wot;
	  this.type = '';
	  this.TABLE = this.wot.wtTable.TABLE;
	  this.hider = this.wot.wtTable.hider;
	  this.spreader = this.wot.wtTable.spreader;
	  this.holder = this.wot.wtTable.holder;
	  this.wtRootElement = this.wot.wtTable.wtRootElement;
	  this.trimmingContainer = getTrimmingContainer(this.hider.parentNode.parentNode);
	  this.mainTableScrollableElement = getScrollableElement(this.wot.wtTable.TABLE);
	  this.needFullRender = this.shouldBeRendered();
	  this.areElementSizesAdjusted = false;
	};
	var $WalkontableOverlay = WalkontableOverlay;
	($traceurRuntime.createClass)(WalkontableOverlay, {
	  shouldBeRendered: function() {
	    return true;
	  },
	  makeClone: function(direction) {
	    if ($WalkontableOverlay.CLONE_TYPES.indexOf(direction) === -1) {
	      throw new Error('Clone type "' + direction + '" is not supported.');
	    }
	    var clone = document.createElement('DIV');
	    var clonedTable = document.createElement('TABLE');
	    clone.className = 'ht_clone_' + direction + ' handsontable';
	    clone.style.position = 'absolute';
	    clone.style.top = 0;
	    clone.style.left = 0;
	    clone.style.overflow = 'hidden';
	    clonedTable.className = this.wot.wtTable.TABLE.className;
	    clone.appendChild(clonedTable);
	    this.type = direction;
	    this.wot.wtTable.wtRootElement.parentNode.appendChild(clone);
	    return new Walkontable({
	      cloneSource: this.wot,
	      cloneOverlay: this,
	      table: clonedTable
	    });
	  },
	  refresh: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    var nextCycleRenderFlag = this.shouldBeRendered();
	    if (this.clone && (this.needFullRender || nextCycleRenderFlag)) {
	      this.clone.draw(fastDraw);
	    }
	    this.needFullRender = nextCycleRenderFlag;
	  },
	  destroy: function() {
	    eventManagerObject(this.clone).destroy();
	  }
	}, {
	  get CLONE_TOP() {
	    return 'top';
	  },
	  get CLONE_BOTTOM() {
	    return 'bottom';
	  },
	  get CLONE_LEFT() {
	    return 'left';
	  },
	  get CLONE_TOP_LEFT_CORNER() {
	    return 'top_left_corner';
	  },
	  get CLONE_BOTTOM_LEFT_CORNER() {
	    return 'bottom_left_corner';
	  },
	  get CLONE_DEBUG() {
	    return 'debug';
	  },
	  get CLONE_TYPES() {
	    return [$WalkontableOverlay.CLONE_TOP, $WalkontableOverlay.CLONE_BOTTOM, $WalkontableOverlay.CLONE_LEFT, $WalkontableOverlay.CLONE_TOP_LEFT_CORNER, $WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER, $WalkontableOverlay.CLONE_DEBUG];
	  },
	  registerOverlay: function(type, overlayClass) {
	    if ($WalkontableOverlay.CLONE_TYPES.indexOf(type) === -1) {
	      throw new Error(("Unsupported overlay (" + type + ")."));
	    }
	    registeredOverlays[type] = overlayClass;
	  },
	  createOverlay: function(type, wot) {
	    return new registeredOverlays[type](wot);
	  },
	  isOverlayTypeOf: function(overlay, type) {
	    if (!overlay || !registeredOverlays[type]) {
	      return false;
	    }
	    return overlay instanceof registeredOverlays[type];
	  }
	});
	;
	window.WalkontableOverlay = WalkontableOverlay;

	//# 
	},{"eventManager":41,"helpers/dom/element":45,"helpers/object":50}],12:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableDebugOverlay: {get: function() {
	      return WalkontableDebugOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var addClass = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}).addClass;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableDebugOverlay = function WalkontableDebugOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableDebugOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_DEBUG);
	  this.clone.wtTable.holder.style.opacity = 0.4;
	  this.clone.wtTable.holder.style.textShadow = '0 0 2px #ff0000';
	  addClass(this.clone.wtTable.holder.parentNode, 'wtDebugVisible');
	};
	var $WalkontableDebugOverlay = WalkontableDebugOverlay;
	($traceurRuntime.createClass)(WalkontableDebugOverlay, {}, {}, WalkontableOverlay);
	;
	window.WalkontableDebugOverlay = WalkontableDebugOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_DEBUG, WalkontableDebugOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":45}],13:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableLeftOverlay: {get: function() {
	      return WalkontableLeftOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollLeft = $__0.getScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    outerWidth = $__0.outerWidth,
	    removeClass = $__0.removeClass,
	    setOverlayPosition = $__0.setOverlayPosition;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableLeftOverlay = function WalkontableLeftOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableLeftOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_LEFT);
	};
	var $WalkontableLeftOverlay = WalkontableLeftOverlay;
	($traceurRuntime.createClass)(WalkontableLeftOverlay, {
	  shouldBeRendered: function() {
	    return this.wot.getSetting('fixedColumnsLeft') || this.wot.getSetting('rowHeaders').length ? true : false;
	  },
	  resetFixedPosition: function() {
	    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {
	      return;
	    }
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var headerPosition = 0;
	    if (this.trimmingContainer === window) {
	      var box = this.wot.wtTable.hider.getBoundingClientRect();
	      var left = Math.ceil(box.left);
	      var right = Math.ceil(box.right);
	      var finalLeft;
	      var finalTop;
	      finalTop = this.wot.wtTable.hider.style.top;
	      finalTop = finalTop === '' ? 0 : finalTop;
	      if (left < 0 && (right - overlayRoot.offsetWidth) > 0) {
	        finalLeft = -left;
	      } else {
	        finalLeft = 0;
	      }
	      headerPosition = finalLeft;
	      finalLeft = finalLeft + 'px';
	      setOverlayPosition(overlayRoot, finalLeft, finalTop);
	    } else {
	      headerPosition = this.getScrollPosition();
	    }
	    this.adjustHeaderBordersPosition(headerPosition);
	    this.adjustElementsSize();
	  },
	  setScrollPosition: function(pos) {
	    if (this.mainTableScrollableElement === window) {
	      window.scrollTo(pos, getWindowScrollTop());
	    } else {
	      this.mainTableScrollableElement.scrollLeft = pos;
	    }
	  },
	  onScroll: function() {
	    this.wot.getSetting('onScrollHorizontally');
	  },
	  sumCellSizes: function(from, to) {
	    var sum = 0;
	    var defaultColumnWidth = this.wot.wtSettings.defaultColumnWidth;
	    while (from < to) {
	      sum += this.wot.wtTable.getStretchedColumnWidth(from) || defaultColumnWidth;
	      from++;
	    }
	    return sum;
	  },
	  adjustElementsSize: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (this.needFullRender || force) {
	      this.adjustRootElementSize();
	      this.adjustRootChildrenSize();
	      if (!force) {
	        this.areElementSizesAdjusted = true;
	      }
	    }
	  },
	  adjustRootElementSize: function() {
	    var masterHolder = this.wot.wtTable.holder;
	    var scrollbarHeight = masterHolder.clientHeight === masterHolder.offsetHeight ? 0 : getScrollbarWidth();
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var overlayRootStyle = overlayRoot.style;
	    var tableWidth;
	    if (this.trimmingContainer !== window) {
	      overlayRootStyle.height = this.wot.wtViewport.getWorkspaceHeight() - scrollbarHeight + 'px';
	    }
	    this.clone.wtTable.holder.style.height = overlayRootStyle.height;
	    tableWidth = outerWidth(this.clone.wtTable.TABLE);
	    overlayRootStyle.width = (tableWidth === 0 ? tableWidth : tableWidth + 4) + 'px';
	  },
	  adjustRootChildrenSize: function() {
	    var scrollbarWidth = getScrollbarWidth();
	    this.clone.wtTable.hider.style.height = this.hider.style.height;
	    this.clone.wtTable.holder.style.height = this.clone.wtTable.holder.parentNode.style.height;
	    if (scrollbarWidth === 0) {
	      scrollbarWidth = 30;
	    }
	    this.clone.wtTable.holder.style.width = parseInt(this.clone.wtTable.holder.parentNode.style.width, 10) + scrollbarWidth + 'px';
	  },
	  applyToDOM: function() {
	    var total = this.wot.getSetting('totalColumns');
	    if (!this.areElementSizesAdjusted) {
	      this.adjustElementsSize();
	    }
	    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {
	      this.spreader.style.left = this.wot.wtViewport.columnsRenderCalculator.startPosition + 'px';
	    } else if (total === 0) {
	      this.spreader.style.left = '0';
	    } else {
	      throw new Error('Incorrect value of the columnsRenderCalculator');
	    }
	    this.spreader.style.right = '';
	    if (this.needFullRender) {
	      this.syncOverlayOffset();
	    }
	  },
	  syncOverlayOffset: function() {
	    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {
	      this.clone.wtTable.spreader.style.top = this.wot.wtViewport.rowsRenderCalculator.startPosition + 'px';
	    } else {
	      this.clone.wtTable.spreader.style.top = '';
	    }
	  },
	  scrollTo: function(sourceCol, beyondRendered) {
	    var newX = this.getTableParentOffset();
	    var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	    var mainHolder = sourceInstance.wtTable.holder;
	    var scrollbarCompensation = 0;
	    if (beyondRendered && mainHolder.offsetWidth !== mainHolder.clientWidth) {
	      scrollbarCompensation = getScrollbarWidth();
	    }
	    if (beyondRendered) {
	      newX += this.sumCellSizes(0, sourceCol + 1);
	      newX -= this.wot.wtViewport.getViewportWidth();
	    } else {
	      newX += this.sumCellSizes(this.wot.getSetting('fixedColumnsLeft'), sourceCol);
	    }
	    newX += scrollbarCompensation;
	    this.setScrollPosition(newX);
	  },
	  getTableParentOffset: function() {
	    if (this.trimmingContainer === window) {
	      return this.wot.wtTable.holderOffset.left;
	    } else {
	      return 0;
	    }
	  },
	  getScrollPosition: function() {
	    return getScrollLeft(this.mainTableScrollableElement);
	  },
	  adjustHeaderBordersPosition: function(position) {
	    var masterParent = this.wot.wtTable.holder.parentNode;
	    var rowHeaders = this.wot.getSetting('rowHeaders');
	    var fixedColumnsLeft = this.wot.getSetting('fixedColumnsLeft');
	    if (fixedColumnsLeft && !rowHeaders.length) {
	      addClass(masterParent, 'innerBorderLeft');
	    } else if (!fixedColumnsLeft && rowHeaders.length) {
	      var previousState = hasClass(masterParent, 'innerBorderLeft');
	      if (position) {
	        addClass(masterParent, 'innerBorderLeft');
	      } else {
	        removeClass(masterParent, 'innerBorderLeft');
	      }
	      if (!previousState && position || previousState && !position) {
	        this.wot.wtOverlays.adjustElementsSize();
	      }
	    }
	  }
	}, {}, WalkontableOverlay);
	;
	window.WalkontableLeftOverlay = WalkontableLeftOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_LEFT, WalkontableLeftOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":45}],14:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTopOverlay: {get: function() {
	      return WalkontableTopOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollTop = $__0.getScrollTop,
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    hasClass = $__0.hasClass,
	    outerHeight = $__0.outerHeight,
	    removeClass = $__0.removeClass,
	    setOverlayPosition = $__0.setOverlayPosition;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableTopOverlay = function WalkontableTopOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableTopOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_TOP);
	};
	var $WalkontableTopOverlay = WalkontableTopOverlay;
	($traceurRuntime.createClass)(WalkontableTopOverlay, {
	  shouldBeRendered: function() {
	    return this.wot.getSetting('fixedRowsTop') || this.wot.getSetting('columnHeaders').length ? true : false;
	  },
	  resetFixedPosition: function() {
	    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {
	      return;
	    }
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var headerPosition = 0;
	    if (this.wot.wtOverlays.leftOverlay.trimmingContainer === window) {
	      var box = this.wot.wtTable.hider.getBoundingClientRect();
	      var top = Math.ceil(box.top);
	      var bottom = Math.ceil(box.bottom);
	      var finalLeft;
	      var finalTop;
	      finalLeft = this.wot.wtTable.hider.style.left;
	      finalLeft = finalLeft === '' ? 0 : finalLeft;
	      if (top < 0 && (bottom - overlayRoot.offsetHeight) > 0) {
	        finalTop = -top;
	      } else {
	        finalTop = 0;
	      }
	      headerPosition = finalTop;
	      finalTop = finalTop + 'px';
	      setOverlayPosition(overlayRoot, finalLeft, finalTop);
	    } else {
	      headerPosition = this.getScrollPosition();
	    }
	    this.adjustHeaderBordersPosition(headerPosition);
	    this.adjustElementsSize();
	  },
	  setScrollPosition: function(pos) {
	    if (this.mainTableScrollableElement === window) {
	      window.scrollTo(getWindowScrollLeft(), pos);
	    } else {
	      this.mainTableScrollableElement.scrollTop = pos;
	    }
	  },
	  onScroll: function() {
	    this.wot.getSetting('onScrollVertically');
	  },
	  sumCellSizes: function(from, to) {
	    var sum = 0;
	    var defaultRowHeight = this.wot.wtSettings.settings.defaultRowHeight;
	    while (from < to) {
	      var height = this.wot.wtTable.getRowHeight(from);
	      sum += height === void 0 ? defaultRowHeight : height;
	      from++;
	    }
	    return sum;
	  },
	  adjustElementsSize: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (this.needFullRender || force) {
	      this.adjustRootElementSize();
	      this.adjustRootChildrenSize();
	      if (!force) {
	        this.areElementSizesAdjusted = true;
	      }
	    }
	  },
	  adjustRootElementSize: function() {
	    var masterHolder = this.wot.wtTable.holder;
	    var scrollbarWidth = masterHolder.clientWidth === masterHolder.offsetWidth ? 0 : getScrollbarWidth();
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var overlayRootStyle = overlayRoot.style;
	    var tableHeight;
	    if (this.trimmingContainer !== window) {
	      overlayRootStyle.width = this.wot.wtViewport.getWorkspaceWidth() - scrollbarWidth + 'px';
	    }
	    this.clone.wtTable.holder.style.width = overlayRootStyle.width;
	    tableHeight = outerHeight(this.clone.wtTable.TABLE);
	    overlayRootStyle.height = (tableHeight === 0 ? tableHeight : tableHeight + 4) + 'px';
	  },
	  adjustRootChildrenSize: function() {
	    var scrollbarWidth = getScrollbarWidth();
	    this.clone.wtTable.hider.style.width = this.hider.style.width;
	    this.clone.wtTable.holder.style.width = this.clone.wtTable.holder.parentNode.style.width;
	    if (scrollbarWidth === 0) {
	      scrollbarWidth = 30;
	    }
	    this.clone.wtTable.holder.style.height = parseInt(this.clone.wtTable.holder.parentNode.style.height, 10) + scrollbarWidth + 'px';
	  },
	  applyToDOM: function() {
	    var total = this.wot.getSetting('totalRows');
	    if (!this.areElementSizesAdjusted) {
	      this.adjustElementsSize();
	    }
	    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {
	      this.spreader.style.top = this.wot.wtViewport.rowsRenderCalculator.startPosition + 'px';
	    } else if (total === 0) {
	      this.spreader.style.top = '0';
	    } else {
	      throw new Error('Incorrect value of the rowsRenderCalculator');
	    }
	    this.spreader.style.bottom = '';
	    if (this.needFullRender) {
	      this.syncOverlayOffset();
	    }
	  },
	  syncOverlayOffset: function() {
	    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {
	      this.clone.wtTable.spreader.style.left = this.wot.wtViewport.columnsRenderCalculator.startPosition + 'px';
	    } else {
	      this.clone.wtTable.spreader.style.left = '';
	    }
	  },
	  scrollTo: function(sourceRow, bottomEdge) {
	    var newY = this.getTableParentOffset();
	    var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	    var mainHolder = sourceInstance.wtTable.holder;
	    var scrollbarCompensation = 0;
	    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {
	      scrollbarCompensation = getScrollbarWidth();
	    }
	    if (bottomEdge) {
	      var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	      var fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	      var totalRows = this.wot.getSetting('totalRows');
	      newY += this.sumCellSizes(0, sourceRow + 1);
	      newY -= this.wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);
	      newY += 1;
	    } else {
	      newY += this.sumCellSizes(this.wot.getSetting('fixedRowsTop'), sourceRow);
	    }
	    newY += scrollbarCompensation;
	    this.setScrollPosition(newY);
	  },
	  getTableParentOffset: function() {
	    if (this.mainTableScrollableElement === window) {
	      return this.wot.wtTable.holderOffset.top;
	    } else {
	      return 0;
	    }
	  },
	  getScrollPosition: function() {
	    return getScrollTop(this.mainTableScrollableElement);
	  },
	  adjustHeaderBordersPosition: function(position) {
	    if (this.wot.getSetting('fixedRowsTop') === 0 && this.wot.getSetting('columnHeaders').length > 0) {
	      var masterParent = this.wot.wtTable.holder.parentNode;
	      var previousState = hasClass(masterParent, 'innerBorderTop');
	      if (position) {
	        addClass(masterParent, 'innerBorderTop');
	      } else {
	        removeClass(masterParent, 'innerBorderTop');
	      }
	      if (!previousState && position || previousState && !position) {
	        this.wot.wtOverlays.adjustElementsSize();
	      }
	    }
	    if (this.wot.getSetting('rowHeaders').length === 0) {
	      var secondHeaderCell = this.clone.wtTable.THEAD.querySelectorAll('th:nth-of-type(2)');
	      if (secondHeaderCell) {
	        for (var i = 0; i < secondHeaderCell.length; i++) {
	          secondHeaderCell[i].style['border-left-width'] = 0;
	        }
	      }
	    }
	  }
	}, {}, WalkontableOverlay);
	;
	window.WalkontableTopOverlay = WalkontableTopOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_TOP, WalkontableTopOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":45}],15:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTopLeftCornerOverlay: {get: function() {
	      return WalkontableTopLeftCornerOverlay;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___95_base__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth,
	    setOverlayPosition = $__0.setOverlayPosition;
	var WalkontableOverlay = ($___95_base__ = require("_base"), $___95_base__ && $___95_base__.__esModule && $___95_base__ || {default: $___95_base__}).WalkontableOverlay;
	var WalkontableTopLeftCornerOverlay = function WalkontableTopLeftCornerOverlay(wotInstance) {
	  $traceurRuntime.superConstructor($WalkontableTopLeftCornerOverlay).call(this, wotInstance);
	  this.clone = this.makeClone(WalkontableOverlay.CLONE_TOP_LEFT_CORNER);
	};
	var $WalkontableTopLeftCornerOverlay = WalkontableTopLeftCornerOverlay;
	($traceurRuntime.createClass)(WalkontableTopLeftCornerOverlay, {
	  shouldBeRendered: function() {
	    return (this.wot.getSetting('fixedRowsTop') || this.wot.getSetting('columnHeaders').length) && (this.wot.getSetting('fixedColumnsLeft') || this.wot.getSetting('rowHeaders').length) ? true : false;
	  },
	  resetFixedPosition: function() {
	    if (!this.wot.wtTable.holder.parentNode) {
	      return;
	    }
	    var overlayRoot = this.clone.wtTable.holder.parentNode;
	    var tableHeight = outerHeight(this.clone.wtTable.TABLE);
	    var tableWidth = outerWidth(this.clone.wtTable.TABLE);
	    if (this.trimmingContainer === window) {
	      var box = this.wot.wtTable.hider.getBoundingClientRect();
	      var top = Math.ceil(box.top);
	      var left = Math.ceil(box.left);
	      var bottom = Math.ceil(box.bottom);
	      var right = Math.ceil(box.right);
	      var finalLeft;
	      var finalTop;
	      if (left < 0 && (right - overlayRoot.offsetWidth) > 0) {
	        finalLeft = -left + 'px';
	      } else {
	        finalLeft = '0';
	      }
	      if (top < 0 && (bottom - overlayRoot.offsetHeight) > 0) {
	        finalTop = -top + 'px';
	      } else {
	        finalTop = '0';
	      }
	      setOverlayPosition(overlayRoot, finalLeft, finalTop);
	    }
	    overlayRoot.style.height = (tableHeight === 0 ? tableHeight : tableHeight + 4) + 'px';
	    overlayRoot.style.width = (tableWidth === 0 ? tableWidth : tableWidth + 4) + 'px';
	  }
	}, {}, WalkontableOverlay);
	;
	window.WalkontableTopLeftCornerOverlay = WalkontableTopLeftCornerOverlay;
	WalkontableOverlay.registerOverlay(WalkontableOverlay.CLONE_TOP_LEFT_CORNER, WalkontableTopLeftCornerOverlay);

	//# 
	},{"_base":11,"helpers/dom/element":45}],16:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableOverlays: {get: function() {
	      return WalkontableOverlays;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getScrollableElement = $__0.getScrollableElement,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollLeft = $__0.getScrollLeft,
	    getScrollTop = $__0.getScrollTop;
	var isKey = ($___46__46__47__46__46__47__46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__ && $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_unicode__}).isKey;
	var EventManager = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableOverlays = function WalkontableOverlays(wotInstance) {
	  this.wot = wotInstance;
	  this.instance = this.wot;
	  this.eventManager = new EventManager(this.wot);
	  this.wot.update('scrollbarWidth', getScrollbarWidth());
	  this.wot.update('scrollbarHeight', getScrollbarWidth());
	  this.mainTableScrollableElement = getScrollableElement(this.wot.wtTable.TABLE);
	  this.topOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_TOP, this.wot);
	  if (typeof WalkontableBottomOverlay === 'undefined') {
	    this.bottomOverlay = {needFullRender: false};
	  } else {
	    this.bottomOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_BOTTOM, this.wot);
	  }
	  this.leftOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_LEFT, this.wot);
	  if (this.topOverlay.needFullRender && this.leftOverlay.needFullRender) {
	    this.topLeftCornerOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_TOP_LEFT_CORNER, this.wot);
	  }
	  if (this.bottomOverlay.needFullRender && this.leftOverlay.needFullRender && typeof WalkontableBottomLeftCornerOverlay !== 'undefined') {
	    this.bottomLeftCornerOverlay = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER, this.wot);
	  } else {
	    this.bottomLeftCornerOverlay = {needFullRender: false};
	  }
	  if (this.wot.getSetting('debug')) {
	    this.debug = WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_DEBUG, this.wot);
	  }
	  this.destroyed = false;
	  this.keyPressed = false;
	  this.spreaderLastSize = {
	    width: null,
	    height: null
	  };
	  this.overlayScrollPositions = {
	    master: {
	      top: 0,
	      left: 0
	    },
	    top: {
	      top: null,
	      left: 0
	    },
	    bottom: {
	      top: null,
	      left: 0
	    },
	    left: {
	      top: 0,
	      left: null
	    }
	  };
	  this.registerListeners();
	};
	($traceurRuntime.createClass)(WalkontableOverlays, {
	  refreshAll: function() {
	    if (!this.wot.drawn) {
	      return;
	    }
	    if (!this.wot.wtTable.holder.parentNode) {
	      this.destroy();
	      return;
	    }
	    this.wot.draw(true);
	    this.topOverlay.onScroll();
	    this.leftOverlay.onScroll();
	  },
	  registerListeners: function() {
	    var $__3 = this;
	    this.eventManager.addEventListener(document.documentElement, 'keydown', (function(event) {
	      return $__3.onKeyDown(event);
	    }));
	    this.eventManager.addEventListener(document.documentElement, 'keyup', (function() {
	      return $__3.onKeyUp();
	    }));
	    this.eventManager.addEventListener(document, 'visibilitychange', (function() {
	      return $__3.onKeyUp();
	    }));
	    this.eventManager.addEventListener(this.mainTableScrollableElement, 'scroll', (function(event) {
	      return $__3.onTableScroll(event);
	    }));
	    if (this.topOverlay.needFullRender) {
	      this.eventManager.addEventListener(this.topOverlay.clone.wtTable.holder, 'scroll', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	      this.eventManager.addEventListener(this.topOverlay.clone.wtTable.holder, 'wheel', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	    }
	    if (this.bottomOverlay.needFullRender) {
	      this.eventManager.addEventListener(this.bottomOverlay.clone.wtTable.holder, 'scroll', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	      this.eventManager.addEventListener(this.bottomOverlay.clone.wtTable.holder, 'wheel', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	    }
	    if (this.leftOverlay.needFullRender) {
	      this.eventManager.addEventListener(this.leftOverlay.clone.wtTable.holder, 'scroll', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	      this.eventManager.addEventListener(this.leftOverlay.clone.wtTable.holder, 'wheel', (function(event) {
	        return $__3.onTableScroll(event);
	      }));
	    }
	    if (this.topOverlay.trimmingContainer !== window && this.leftOverlay.trimmingContainer !== window) {
	      this.eventManager.addEventListener(window, 'wheel', (function(event) {
	        var overlay;
	        var deltaY = event.wheelDeltaY || event.deltaY;
	        var deltaX = event.wheelDeltaX || event.deltaX;
	        if ($__3.topOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	          overlay = 'top';
	        } else if ($__3.bottomOverlay.clone && $__3.bottomOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	          overlay = 'bottom';
	        } else if ($__3.leftOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	          overlay = 'left';
	        }
	        if (overlay == 'top' && deltaY !== 0) {
	          event.preventDefault();
	        } else if (overlay == 'left' && deltaX !== 0) {
	          event.preventDefault();
	        } else if (overlay == 'bottom' && deltaY !== 0) {
	          event.preventDefault();
	        }
	      }));
	    }
	  },
	  onTableScroll: function(event) {
	    if (Handsontable.mobileBrowser) {
	      return;
	    }
	    if (this.keyPressed && this.mainTableScrollableElement !== window && !event.target.contains(this.mainTableScrollableElement)) {
	      return;
	    }
	    if (event.type === 'scroll') {
	      this.syncScrollPositions(event);
	    } else {
	      this.translateMouseWheelToScroll(event);
	    }
	  },
	  onKeyDown: function(event) {
	    this.keyPressed = isKey(event.keyCode, 'ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT');
	  },
	  onKeyUp: function() {
	    this.keyPressed = false;
	  },
	  translateMouseWheelToScroll: function(event) {
	    var topOverlay = this.topOverlay.clone.wtTable.holder;
	    var bottomOverlay = this.bottomOverlay.clone ? this.bottomOverlay.clone.wtTable.holder : null;
	    var leftOverlay = this.leftOverlay.clone.wtTable.holder;
	    var eventMockup = {type: 'wheel'};
	    var tempElem = event.target;
	    var deltaY = event.wheelDeltaY || (-1) * event.deltaY;
	    var deltaX = event.wheelDeltaX || (-1) * event.deltaX;
	    var parentHolder;
	    while (tempElem != document && tempElem != null) {
	      if (tempElem.className.indexOf('wtHolder') > -1) {
	        parentHolder = tempElem;
	        break;
	      }
	      tempElem = tempElem.parentNode;
	    }
	    eventMockup.target = parentHolder;
	    if (parentHolder == topOverlay) {
	      this.syncScrollPositions(eventMockup, (-0.2) * deltaY);
	    } else if (parentHolder == bottomOverlay) {
	      this.syncScrollPositions(eventMockup, (-0.2) * deltaY);
	    } else if (parentHolder == leftOverlay) {
	      this.syncScrollPositions(eventMockup, (-0.2) * deltaX);
	    }
	    return false;
	  },
	  syncScrollPositions: function(event) {
	    var fakeScrollValue = arguments[1] !== (void 0) ? arguments[1] : null;
	    if (this.destroyed) {
	      return;
	    }
	    if (arguments.length === 0) {
	      this.syncScrollWithMaster();
	      return;
	    }
	    var master = this.mainTableScrollableElement;
	    var target = event.target;
	    var tempScrollValue = 0;
	    var scrollValueChanged = false;
	    var topOverlay;
	    var leftOverlay;
	    var bottomOverlay;
	    if (this.topOverlay.needFullRender) {
	      topOverlay = this.topOverlay.clone.wtTable.holder;
	    }
	    if (this.bottomOverlay.needFullRender) {
	      bottomOverlay = this.bottomOverlay.clone.wtTable.holder;
	    }
	    if (this.leftOverlay.needFullRender) {
	      leftOverlay = this.leftOverlay.clone.wtTable.holder;
	    }
	    if (target === document) {
	      target = window;
	    }
	    if (target === master) {
	      tempScrollValue = getScrollLeft(target);
	      if (this.overlayScrollPositions.master.left !== tempScrollValue) {
	        this.overlayScrollPositions.master.left = tempScrollValue;
	        scrollValueChanged = true;
	        if (topOverlay) {
	          topOverlay.scrollLeft = tempScrollValue;
	        }
	        if (bottomOverlay) {
	          bottomOverlay.scrollLeft = tempScrollValue;
	        }
	      }
	      tempScrollValue = getScrollTop(target);
	      if (this.overlayScrollPositions.master.top !== tempScrollValue) {
	        this.overlayScrollPositions.master.top = tempScrollValue;
	        scrollValueChanged = true;
	        if (leftOverlay) {
	          leftOverlay.scrollTop = tempScrollValue;
	        }
	      }
	    } else if (target === bottomOverlay) {
	      tempScrollValue = getScrollLeft(target);
	      if (this.overlayScrollPositions.bottom.left !== tempScrollValue) {
	        this.overlayScrollPositions.bottom.left = tempScrollValue;
	        scrollValueChanged = true;
	        master.scrollLeft = tempScrollValue;
	      }
	      if (fakeScrollValue !== null) {
	        scrollValueChanged = true;
	        master.scrollTop += fakeScrollValue;
	      }
	    } else if (target === topOverlay) {
	      tempScrollValue = getScrollLeft(target);
	      if (this.overlayScrollPositions.top.left !== tempScrollValue) {
	        this.overlayScrollPositions.top.left = tempScrollValue;
	        scrollValueChanged = true;
	        master.scrollLeft = tempScrollValue;
	      }
	      if (fakeScrollValue !== null) {
	        scrollValueChanged = true;
	        master.scrollTop += fakeScrollValue;
	      }
	    } else if (target === leftOverlay) {
	      tempScrollValue = getScrollTop(target);
	      if (this.overlayScrollPositions.left.top !== tempScrollValue) {
	        this.overlayScrollPositions.left.top = tempScrollValue;
	        scrollValueChanged = true;
	        master.scrollTop = tempScrollValue;
	      }
	      if (fakeScrollValue !== null) {
	        scrollValueChanged = true;
	        master.scrollLeft += fakeScrollValue;
	      }
	    }
	    if (!this.keyPressed && scrollValueChanged && event.type === 'scroll') {
	      this.refreshAll();
	    }
	  },
	  syncScrollWithMaster: function() {
	    var master = this.topOverlay.mainTableScrollableElement;
	    if (this.topOverlay.needFullRender) {
	      this.topOverlay.clone.wtTable.holder.scrollLeft = master.scrollLeft;
	    }
	    if (this.leftOverlay.needFullRender) {
	      this.leftOverlay.clone.wtTable.holder.scrollTop = master.scrollTop;
	    }
	  },
	  destroy: function() {
	    this.eventManager.destroy();
	    this.topOverlay.destroy();
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.destroy();
	    }
	    this.leftOverlay.destroy();
	    if (this.topLeftCornerOverlay) {
	      this.topLeftCornerOverlay.destroy();
	    }
	    if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {
	      this.bottomLeftCornerOverlay.destroy();
	    }
	    if (this.debug) {
	      this.debug.destroy();
	    }
	    this.destroyed = true;
	  },
	  refresh: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (this.topOverlay.areElementSizesAdjusted && this.leftOverlay.areElementSizesAdjusted) {
	      var container = this.wot.wtTable.wtRootElement.parentNode || this.wot.wtTable.wtRootElement;
	      var width = container.clientWidth;
	      var height = container.clientHeight;
	      if (width !== this.spreaderLastSize.width || height !== this.spreaderLastSize.height) {
	        this.spreaderLastSize.width = width;
	        this.spreaderLastSize.height = height;
	        this.adjustElementsSize();
	      }
	    }
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.refresh(fastDraw);
	    }
	    this.leftOverlay.refresh(fastDraw);
	    this.topOverlay.refresh(fastDraw);
	    if (this.topLeftCornerOverlay) {
	      this.topLeftCornerOverlay.refresh(fastDraw);
	    }
	    if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {
	      this.bottomLeftCornerOverlay.refresh(fastDraw);
	    }
	    if (this.debug) {
	      this.debug.refresh(fastDraw);
	    }
	  },
	  adjustElementsSize: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    var totalColumns = this.wot.getSetting('totalColumns');
	    var totalRows = this.wot.getSetting('totalRows');
	    var headerRowSize = this.wot.wtViewport.getRowHeaderWidth();
	    var headerColumnSize = this.wot.wtViewport.getColumnHeaderHeight();
	    var hiderStyle = this.wot.wtTable.hider.style;
	    hiderStyle.width = (headerRowSize + this.leftOverlay.sumCellSizes(0, totalColumns)) + 'px';
	    hiderStyle.height = (headerColumnSize + this.topOverlay.sumCellSizes(0, totalRows) + 1) + 'px';
	    this.topOverlay.adjustElementsSize(force);
	    this.leftOverlay.adjustElementsSize(force);
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.adjustElementsSize(force);
	    }
	  },
	  applyToDOM: function() {
	    if (!this.topOverlay.areElementSizesAdjusted || !this.leftOverlay.areElementSizesAdjusted) {
	      this.adjustElementsSize();
	    }
	    this.topOverlay.applyToDOM();
	    if (this.bottomOverlay.clone) {
	      this.bottomOverlay.applyToDOM();
	    }
	    this.leftOverlay.applyToDOM();
	  }
	}, {});
	;
	window.WalkontableOverlays = WalkontableOverlays;

	//# 
	},{"eventManager":41,"helpers/dom/element":45,"helpers/unicode":53}],17:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableScroll: {get: function() {
	      return WalkontableScroll;
	    }},
	  __esModule: {value: true}
	});
	var WalkontableScroll = function WalkontableScroll(wotInstance) {
	  this.wot = wotInstance;
	  this.instance = wotInstance;
	};
	($traceurRuntime.createClass)(WalkontableScroll, {scrollViewport: function(coords) {
	    if (!this.wot.drawn) {
	      return;
	    }
	    var totalRows = this.wot.getSetting('totalRows');
	    var totalColumns = this.wot.getSetting('totalColumns');
	    var fixedRowsTop = this.instance.getSetting('fixedRowsTop');
	    var fixedRowsBottom = this.instance.getSetting('fixedRowsBottom');
	    var fixedColumnsLeft = this.instance.getSetting('fixedColumnsLeft');
	    if (coords.row < 0 || coords.row > totalRows - 1) {
	      throw new Error('row ' + coords.row + ' does not exist');
	    }
	    if (coords.col < 0 || coords.col > totalColumns - 1) {
	      throw new Error('column ' + coords.col + ' does not exist');
	    }
	    if (coords.row > this.instance.wtTable.getLastVisibleRow() && coords.row < totalRows - fixedRowsBottom) {
	      this.wot.wtOverlays.topOverlay.scrollTo(coords.row, true);
	    } else if (coords.row >= fixedRowsTop && coords.row < this.instance.wtTable.getFirstVisibleRow()) {
	      this.wot.wtOverlays.topOverlay.scrollTo(coords.row);
	    }
	    if (coords.col > this.instance.wtTable.getLastVisibleColumn()) {
	      this.wot.wtOverlays.leftOverlay.scrollTo(coords.col, true);
	    } else if (coords.col >= fixedColumnsLeft && coords.col < this.instance.wtTable.getFirstVisibleColumn()) {
	      this.wot.wtOverlays.leftOverlay.scrollTo(coords.col);
	    }
	  }}, {});
	;
	window.WalkontableScroll = WalkontableScroll;

	//# 
	},{}],18:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableSelection: {get: function() {
	      return WalkontableSelection;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $__border__,
	    $__cell_47_coords__,
	    $__cell_47_range__;
	var addClass = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}).addClass;
	var WalkontableBorder = ($__border__ = require("border"), $__border__ && $__border__.__esModule && $__border__ || {default: $__border__}).WalkontableBorder;
	var WalkontableCellCoords = ($__cell_47_coords__ = require("cell/coords"), $__cell_47_coords__ && $__cell_47_coords__.__esModule && $__cell_47_coords__ || {default: $__cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($__cell_47_range__ = require("cell/range"), $__cell_47_range__ && $__cell_47_range__.__esModule && $__cell_47_range__ || {default: $__cell_47_range__}).WalkontableCellRange;
	var WalkontableSelection = function WalkontableSelection(settings, cellRange) {
	  this.settings = settings;
	  this.cellRange = cellRange || null;
	  this.instanceBorders = {};
	};
	($traceurRuntime.createClass)(WalkontableSelection, {
	  getBorder: function(wotInstance) {
	    if (this.instanceBorders[wotInstance.guid]) {
	      return this.instanceBorders[wotInstance.guid];
	    }
	    this.instanceBorders[wotInstance.guid] = new WalkontableBorder(wotInstance, this.settings);
	  },
	  isEmpty: function() {
	    return this.cellRange === null;
	  },
	  add: function(coords) {
	    if (this.isEmpty()) {
	      this.cellRange = new WalkontableCellRange(coords, coords, coords);
	    } else {
	      this.cellRange.expand(coords);
	    }
	  },
	  replace: function(oldCoords, newCoords) {
	    if (!this.isEmpty()) {
	      if (this.cellRange.from.isEqual(oldCoords)) {
	        this.cellRange.from = newCoords;
	        return true;
	      }
	      if (this.cellRange.to.isEqual(oldCoords)) {
	        this.cellRange.to = newCoords;
	        return true;
	      }
	    }
	    return false;
	  },
	  clear: function() {
	    this.cellRange = null;
	  },
	  getCorners: function() {
	    var topLeft = this.cellRange.getTopLeftCorner();
	    var bottomRight = this.cellRange.getBottomRightCorner();
	    return [topLeft.row, topLeft.col, bottomRight.row, bottomRight.col];
	  },
	  addClassAtCoords: function(wotInstance, sourceRow, sourceColumn, className) {
	    var TD = wotInstance.wtTable.getCell(new WalkontableCellCoords(sourceRow, sourceColumn));
	    if (typeof TD === 'object') {
	      addClass(TD, className);
	    }
	  },
	  draw: function(wotInstance) {
	    if (this.isEmpty()) {
	      if (this.settings.border) {
	        var border = this.getBorder(wotInstance);
	        if (border) {
	          border.disappear();
	        }
	      }
	      return;
	    }
	    var renderedRows = wotInstance.wtTable.getRenderedRowsCount();
	    var renderedColumns = wotInstance.wtTable.getRenderedColumnsCount();
	    var corners = this.getCorners();
	    var sourceRow,
	        sourceCol,
	        TH;
	    for (var column = 0; column < renderedColumns; column++) {
	      sourceCol = wotInstance.wtTable.columnFilter.renderedToSource(column);
	      if (sourceCol >= corners[1] && sourceCol <= corners[3]) {
	        TH = wotInstance.wtTable.getColumnHeader(sourceCol);
	        if (TH && this.settings.highlightColumnClassName) {
	          addClass(TH, this.settings.highlightColumnClassName);
	        }
	      }
	    }
	    for (var row = 0; row < renderedRows; row++) {
	      sourceRow = wotInstance.wtTable.rowFilter.renderedToSource(row);
	      if (sourceRow >= corners[0] && sourceRow <= corners[2]) {
	        TH = wotInstance.wtTable.getRowHeader(sourceRow);
	        if (TH && this.settings.highlightRowClassName) {
	          addClass(TH, this.settings.highlightRowClassName);
	        }
	      }
	      for (var column$__5 = 0; column$__5 < renderedColumns; column$__5++) {
	        sourceCol = wotInstance.wtTable.columnFilter.renderedToSource(column$__5);
	        if (sourceRow >= corners[0] && sourceRow <= corners[2] && sourceCol >= corners[1] && sourceCol <= corners[3]) {
	          if (this.settings.className) {
	            this.addClassAtCoords(wotInstance, sourceRow, sourceCol, this.settings.className);
	          }
	        } else if (sourceRow >= corners[0] && sourceRow <= corners[2]) {
	          if (this.settings.highlightRowClassName) {
	            this.addClassAtCoords(wotInstance, sourceRow, sourceCol, this.settings.highlightRowClassName);
	          }
	        } else if (sourceCol >= corners[1] && sourceCol <= corners[3]) {
	          if (this.settings.highlightColumnClassName) {
	            this.addClassAtCoords(wotInstance, sourceRow, sourceCol, this.settings.highlightColumnClassName);
	          }
	        }
	      }
	    }
	    wotInstance.getSetting('onBeforeDrawBorders', corners, this.settings.className);
	    if (this.settings.border) {
	      var border$__6 = this.getBorder(wotInstance);
	      if (border$__6) {
	        border$__6.appear(corners);
	      }
	    }
	  }
	}, {});
	;
	window.WalkontableSelection = WalkontableSelection;

	//# 
	},{"border":2,"cell/coords":5,"cell/range":6,"helpers/dom/element":45}],19:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableSettings: {get: function() {
	      return WalkontableSettings;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__;
	var fastInnerText = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}).fastInnerText;
	var WalkontableSettings = function WalkontableSettings(wotInstance, settings) {
	  var $__1 = this;
	  this.wot = wotInstance;
	  this.instance = wotInstance;
	  this.defaults = {
	    table: void 0,
	    debug: false,
	    externalRowCalculator: false,
	    stretchH: 'none',
	    currentRowClassName: null,
	    currentColumnClassName: null,
	    data: void 0,
	    fixedColumnsLeft: 0,
	    fixedRowsTop: 0,
	    fixedRowsBottom: 0,
	    minSpareRows: 0,
	    rowHeaders: function() {
	      return [];
	    },
	    columnHeaders: function() {
	      return [];
	    },
	    totalRows: void 0,
	    totalColumns: void 0,
	    cellRenderer: (function(row, column, TD) {
	      var cellData = $__1.getSetting('data', row, column);
	      fastInnerText(TD, cellData === void 0 || cellData === null ? '' : cellData);
	    }),
	    columnWidth: function(col) {
	      return;
	    },
	    rowHeight: function(row) {
	      return;
	    },
	    defaultRowHeight: 23,
	    defaultColumnWidth: 50,
	    selections: null,
	    hideBorderOnMouseDownOver: false,
	    viewportRowCalculatorOverride: null,
	    viewportColumnCalculatorOverride: null,
	    onCellMouseDown: null,
	    onCellMouseOver: null,
	    onCellDblClick: null,
	    onCellCornerMouseDown: null,
	    onCellCornerDblClick: null,
	    beforeDraw: null,
	    onDraw: null,
	    onBeforeDrawBorders: null,
	    onScrollVertically: null,
	    onScrollHorizontally: null,
	    onBeforeTouchScroll: null,
	    onAfterMomentumScroll: null,
	    scrollbarWidth: 10,
	    scrollbarHeight: 10,
	    renderAllRows: false,
	    groups: false
	  };
	  this.settings = {};
	  for (var i in this.defaults) {
	    if (this.defaults.hasOwnProperty(i)) {
	      if (settings[i] !== void 0) {
	        this.settings[i] = settings[i];
	      } else if (this.defaults[i] === void 0) {
	        throw new Error('A required setting "' + i + '" was not provided');
	      } else {
	        this.settings[i] = this.defaults[i];
	      }
	    }
	  }
	};
	($traceurRuntime.createClass)(WalkontableSettings, {
	  update: function(settings, value) {
	    if (value === void 0) {
	      for (var i in settings) {
	        if (settings.hasOwnProperty(i)) {
	          this.settings[i] = settings[i];
	        }
	      }
	    } else {
	      this.settings[settings] = value;
	    }
	    return this.wot;
	  },
	  getSetting: function(key, param1, param2, param3, param4) {
	    if (typeof this.settings[key] === 'function') {
	      return this.settings[key](param1, param2, param3, param4);
	    } else if (param1 !== void 0 && Array.isArray(this.settings[key])) {
	      return this.settings[key][param1];
	    } else {
	      return this.settings[key];
	    }
	  },
	  has: function(key) {
	    return !!this.settings[key];
	  }
	}, {});
	;
	window.WalkontableSettings = WalkontableSettings;

	//# 
	},{"helpers/dom/element":45}],20:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTable: {get: function() {
	      return WalkontableTable;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $__cell_47_coords__,
	    $__cell_47_range__,
	    $__filter_47_column__,
	    $__filter_47_row__,
	    $__tableRenderer__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getStyle = $__0.getStyle,
	    getTrimmingContainer = $__0.getTrimmingContainer,
	    hasClass = $__0.hasClass,
	    index = $__0.index,
	    offset = $__0.offset,
	    removeClass = $__0.removeClass,
	    removeTextNodes = $__0.removeTextNodes,
	    overlayContainsElement = $__0.overlayContainsElement;
	var WalkontableCellCoords = ($__cell_47_coords__ = require("cell/coords"), $__cell_47_coords__ && $__cell_47_coords__.__esModule && $__cell_47_coords__ || {default: $__cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($__cell_47_range__ = require("cell/range"), $__cell_47_range__ && $__cell_47_range__.__esModule && $__cell_47_range__ || {default: $__cell_47_range__}).WalkontableCellRange;
	var WalkontableColumnFilter = ($__filter_47_column__ = require("filter/column"), $__filter_47_column__ && $__filter_47_column__.__esModule && $__filter_47_column__ || {default: $__filter_47_column__}).WalkontableColumnFilter;
	var WalkontableRowFilter = ($__filter_47_row__ = require("filter/row"), $__filter_47_row__ && $__filter_47_row__.__esModule && $__filter_47_row__ || {default: $__filter_47_row__}).WalkontableRowFilter;
	var WalkontableTableRenderer = ($__tableRenderer__ = require("tableRenderer"), $__tableRenderer__ && $__tableRenderer__.__esModule && $__tableRenderer__ || {default: $__tableRenderer__}).WalkontableTableRenderer;
	var WalkontableTable = function WalkontableTable(wotInstance, table) {
	  this.wot = wotInstance;
	  this.instance = this.wot;
	  this.TABLE = table;
	  this.TBODY = null;
	  this.THEAD = null;
	  this.COLGROUP = null;
	  this.tableOffset = 0;
	  this.holderOffset = 0;
	  removeTextNodes(this.TABLE);
	  this.spreader = this.createSpreader(this.TABLE);
	  this.hider = this.createHider(this.spreader);
	  this.holder = this.createHolder(this.hider);
	  this.wtRootElement = this.holder.parentNode;
	  this.alignOverlaysWithTrimmingContainer();
	  this.fixTableDomTree();
	  this.colgroupChildrenLength = this.COLGROUP.childNodes.length;
	  this.theadChildrenLength = this.THEAD.firstChild ? this.THEAD.firstChild.childNodes.length : 0;
	  this.tbodyChildrenLength = this.TBODY.childNodes.length;
	  this.rowFilter = null;
	  this.columnFilter = null;
	};
	($traceurRuntime.createClass)(WalkontableTable, {
	  fixTableDomTree: function() {
	    this.TBODY = this.TABLE.querySelector('tbody');
	    if (!this.TBODY) {
	      this.TBODY = document.createElement('tbody');
	      this.TABLE.appendChild(this.TBODY);
	    }
	    this.THEAD = this.TABLE.querySelector('thead');
	    if (!this.THEAD) {
	      this.THEAD = document.createElement('thead');
	      this.TABLE.insertBefore(this.THEAD, this.TBODY);
	    }
	    this.COLGROUP = this.TABLE.querySelector('colgroup');
	    if (!this.COLGROUP) {
	      this.COLGROUP = document.createElement('colgroup');
	      this.TABLE.insertBefore(this.COLGROUP, this.THEAD);
	    }
	    if (this.wot.getSetting('columnHeaders').length && !this.THEAD.childNodes.length) {
	      this.THEAD.appendChild(document.createElement('TR'));
	    }
	  },
	  createSpreader: function(table) {
	    var parent = table.parentNode;
	    var spreader;
	    if (!parent || parent.nodeType !== 1 || !hasClass(parent, 'wtHolder')) {
	      spreader = document.createElement('div');
	      spreader.className = 'wtSpreader';
	      if (parent) {
	        parent.insertBefore(spreader, table);
	      }
	      spreader.appendChild(table);
	    }
	    spreader.style.position = 'relative';
	    return spreader;
	  },
	  createHider: function(spreader) {
	    var parent = spreader.parentNode;
	    var hider;
	    if (!parent || parent.nodeType !== 1 || !hasClass(parent, 'wtHolder')) {
	      hider = document.createElement('div');
	      hider.className = 'wtHider';
	      if (parent) {
	        parent.insertBefore(hider, spreader);
	      }
	      hider.appendChild(spreader);
	    }
	    return hider;
	  },
	  createHolder: function(hider) {
	    var parent = hider.parentNode;
	    var holder;
	    if (!parent || parent.nodeType !== 1 || !hasClass(parent, 'wtHolder')) {
	      holder = document.createElement('div');
	      holder.style.position = 'relative';
	      holder.className = 'wtHolder';
	      if (parent) {
	        parent.insertBefore(holder, hider);
	      }
	      if (!this.isWorkingOnClone()) {
	        holder.parentNode.className += 'ht_master handsontable';
	      }
	      holder.appendChild(hider);
	    }
	    return holder;
	  },
	  alignOverlaysWithTrimmingContainer: function() {
	    var trimmingElement = getTrimmingContainer(this.wtRootElement);
	    if (!this.isWorkingOnClone()) {
	      this.holder.parentNode.style.position = 'relative';
	      if (trimmingElement === window) {
	        this.holder.style.overflow = 'visible';
	        this.wtRootElement.style.overflow = 'visible';
	      } else {
	        this.holder.style.width = getStyle(trimmingElement, 'width');
	        this.holder.style.height = getStyle(trimmingElement, 'height');
	        this.holder.style.overflow = '';
	      }
	    }
	  },
	  isWorkingOnClone: function() {
	    return !!this.wot.cloneSource;
	  },
	  draw: function(fastDraw) {
	    var totalRows = this.instance.getSetting('totalRows');
	    if (!this.isWorkingOnClone()) {
	      this.holderOffset = offset(this.holder);
	      fastDraw = this.wot.wtViewport.createRenderCalculators(fastDraw);
	    }
	    if (fastDraw) {
	      if (!this.isWorkingOnClone()) {
	        this.wot.wtViewport.createVisibleCalculators();
	      }
	      if (this.wot.wtOverlays) {
	        this.wot.wtOverlays.refresh(true);
	      }
	    } else {
	      if (this.isWorkingOnClone()) {
	        this.tableOffset = this.wot.cloneSource.wtTable.tableOffset;
	      } else {
	        this.tableOffset = offset(this.TABLE);
	      }
	      var startRow;
	      if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER)) {
	        startRow = 0;
	      } else if (WalkontableOverlay.isOverlayTypeOf(this.instance.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.instance.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	        startRow = totalRows - this.wot.getSetting('fixedRowsBottom');
	      } else {
	        startRow = this.wot.wtViewport.rowsRenderCalculator.startRow;
	      }
	      var startColumn;
	      if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_LEFT) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	        startColumn = 0;
	      } else {
	        startColumn = this.wot.wtViewport.columnsRenderCalculator.startColumn;
	      }
	      this.rowFilter = new WalkontableRowFilter(startRow, totalRows, this.wot.getSetting('columnHeaders').length);
	      this.columnFilter = new WalkontableColumnFilter(startColumn, this.wot.getSetting('totalColumns'), this.wot.getSetting('rowHeaders').length);
	      this._doDraw();
	      this.alignOverlaysWithTrimmingContainer();
	    }
	    this.refreshSelections(fastDraw);
	    if (!this.isWorkingOnClone()) {
	      this.wot.wtOverlays.topOverlay.resetFixedPosition();
	      if (this.wot.wtOverlays.bottomOverlay.clone) {
	        this.wot.wtOverlays.bottomOverlay.resetFixedPosition();
	      }
	      this.wot.wtOverlays.leftOverlay.resetFixedPosition();
	      if (this.wot.wtOverlays.topLeftCornerOverlay) {
	        this.wot.wtOverlays.topLeftCornerOverlay.resetFixedPosition();
	      }
	      if (this.instance.wtOverlays.bottomLeftCornerOverlay && this.instance.wtOverlays.bottomLeftCornerOverlay.clone) {
	        this.wot.wtOverlays.bottomLeftCornerOverlay.resetFixedPosition();
	      }
	    }
	    this.wot.drawn = true;
	    return this;
	  },
	  _doDraw: function() {
	    var wtRenderer = new WalkontableTableRenderer(this);
	    wtRenderer.render();
	  },
	  removeClassFromCells: function(className) {
	    var nodes = this.TABLE.querySelectorAll('.' + className);
	    for (var i = 0,
	        len = nodes.length; i < len; i++) {
	      removeClass(nodes[i], className);
	    }
	  },
	  refreshSelections: function(fastDraw) {
	    if (!this.wot.selections) {
	      return;
	    }
	    var len = this.wot.selections.length;
	    if (fastDraw) {
	      for (var i = 0; i < len; i++) {
	        if (this.wot.selections[i].settings.className) {
	          this.removeClassFromCells(this.wot.selections[i].settings.className);
	        }
	        if (this.wot.selections[i].settings.highlightRowClassName) {
	          this.removeClassFromCells(this.wot.selections[i].settings.highlightRowClassName);
	        }
	        if (this.wot.selections[i].settings.highlightColumnClassName) {
	          this.removeClassFromCells(this.wot.selections[i].settings.highlightColumnClassName);
	        }
	      }
	    }
	    for (var i$__7 = 0; i$__7 < len; i$__7++) {
	      this.wot.selections[i$__7].draw(this.wot, fastDraw);
	    }
	  },
	  getCell: function(coords) {
	    if (this.isRowBeforeRenderedRows(coords.row)) {
	      return -1;
	    } else if (this.isRowAfterRenderedRows(coords.row)) {
	      return -2;
	    }
	    var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(coords.row)];
	    if (TR) {
	      return TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(coords.col)];
	    }
	  },
	  getColumnHeader: function(col) {
	    var level = arguments[1] !== (void 0) ? arguments[1] : 0;
	    var TR = this.THEAD.childNodes[level];
	    if (TR) {
	      return TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(col)];
	    }
	  },
	  getRowHeader: function(row) {
	    if (this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) === 0) {
	      return null;
	    }
	    var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];
	    if (TR) {
	      return TR.childNodes[0];
	    }
	  },
	  getCoords: function(TD) {
	    var TR = TD.parentNode;
	    var row = index(TR);
	    if (TR.parentNode === this.THEAD) {
	      row = this.rowFilter.visibleColHeadedRowToSourceRow(row);
	    } else {
	      row = this.rowFilter.renderedToSource(row);
	    }
	    var col = this.columnFilter.visibleRowHeadedColumnToSourceColumn(TD.cellIndex);
	    return new WalkontableCellCoords(row, col);
	  },
	  getTrForRow: function(row) {
	    return this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];
	  },
	  getFirstRenderedRow: function() {
	    return this.wot.wtViewport.rowsRenderCalculator.startRow;
	  },
	  getFirstVisibleRow: function() {
	    return this.wot.wtViewport.rowsVisibleCalculator.startRow;
	  },
	  getFirstRenderedColumn: function() {
	    return this.wot.wtViewport.columnsRenderCalculator.startColumn;
	  },
	  getFirstVisibleColumn: function() {
	    return this.wot.wtViewport.columnsVisibleCalculator.startColumn;
	  },
	  getLastRenderedRow: function() {
	    return this.wot.wtViewport.rowsRenderCalculator.endRow;
	  },
	  getLastVisibleRow: function() {
	    return this.wot.wtViewport.rowsVisibleCalculator.endRow;
	  },
	  getLastRenderedColumn: function() {
	    return this.wot.wtViewport.columnsRenderCalculator.endColumn;
	  },
	  getLastVisibleColumn: function() {
	    return this.wot.wtViewport.columnsVisibleCalculator.endColumn;
	  },
	  isRowBeforeRenderedRows: function(row) {
	    return (this.rowFilter.sourceToRendered(row) < 0 && row >= 0);
	  },
	  isRowAfterViewport: function(row) {
	    return (this.rowFilter.sourceToRendered(row) > this.getLastVisibleRow());
	  },
	  isRowAfterRenderedRows: function(row) {
	    return (this.rowFilter.sourceToRendered(row) > this.getLastRenderedRow());
	  },
	  isColumnBeforeViewport: function(column) {
	    return this.columnFilter.sourceToRendered(column) < 0 && column >= 0;
	  },
	  isColumnAfterViewport: function(column) {
	    return (this.columnFilter.sourceToRendered(column) > this.getLastVisibleColumn());
	  },
	  isLastRowFullyVisible: function() {
	    return this.getLastVisibleRow() === this.getLastRenderedRow();
	  },
	  isLastColumnFullyVisible: function() {
	    return this.getLastVisibleColumn() === this.getLastRenderedColumn();
	  },
	  getRenderedColumnsCount: function() {
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG)) {
	      return this.wot.getSetting('totalColumns');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_LEFT) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      return this.wot.getSetting('fixedColumnsLeft');
	    } else {
	      return this.wot.wtViewport.columnsRenderCalculator.count;
	    }
	  },
	  getRenderedRowsCount: function() {
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_DEBUG)) {
	      return this.wot.getSetting('totalRows');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_TOP_LEFT_CORNER)) {
	      return this.wot.getSetting('fixedRowsTop');
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      return this.instance.getSetting('fixedRowsBottom');
	    }
	    return this.wot.wtViewport.rowsRenderCalculator.count;
	  },
	  getVisibleRowsCount: function() {
	    return this.wot.wtViewport.rowsVisibleCalculator.count;
	  },
	  allRowsInViewport: function() {
	    return this.wot.getSetting('totalRows') == this.getVisibleRowsCount();
	  },
	  getRowHeight: function(sourceRow) {
	    var height = this.wot.wtSettings.settings.rowHeight(sourceRow);
	    var oversizedHeight = this.wot.wtViewport.oversizedRows[sourceRow];
	    if (oversizedHeight !== void 0) {
	      height = height === void 0 ? oversizedHeight : Math.max(height, oversizedHeight);
	    }
	    return height;
	  },
	  getColumnHeaderHeight: function(level) {
	    var height = this.wot.wtSettings.settings.defaultRowHeight;
	    var oversizedHeight = this.wot.wtViewport.oversizedColumnHeaders[level];
	    if (oversizedHeight !== void 0) {
	      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;
	    }
	    return height;
	  },
	  getVisibleColumnsCount: function() {
	    return this.wot.wtViewport.columnsVisibleCalculator.count;
	  },
	  allColumnsInViewport: function() {
	    return this.wot.getSetting('totalColumns') == this.getVisibleColumnsCount();
	  },
	  getColumnWidth: function(sourceColumn) {
	    var width = this.wot.wtSettings.settings.columnWidth;
	    if (typeof width === 'function') {
	      width = width(sourceColumn);
	    } else if (typeof width === 'object') {
	      width = width[sourceColumn];
	    }
	    return width || this.wot.wtSettings.settings.defaultColumnWidth;
	  },
	  getStretchedColumnWidth: function(sourceColumn) {
	    var columnWidth = this.getColumnWidth(sourceColumn);
	    var width = [void 0, null].indexOf(columnWidth) === -1 ? columnWidth : this.instance.wtSettings.settings.defaultColumnWidth;
	    var calculator = this.wot.wtViewport.columnsRenderCalculator;
	    if (calculator) {
	      var stretchedWidth = calculator.getStretchedColumnWidth(sourceColumn, width);
	      if (stretchedWidth) {
	        width = stretchedWidth;
	      }
	    }
	    return width;
	  }
	}, {});
	;
	window.WalkontableTable = WalkontableTable;

	//# 
	},{"cell/coords":5,"cell/range":6,"filter/column":9,"filter/row":10,"helpers/dom/element":45,"tableRenderer":21}],21:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableTableRenderer: {get: function() {
	      return WalkontableTableRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    hasClass = $__0.hasClass,
	    innerHeight = $__0.innerHeight;
	var WalkontableTableRenderer = function WalkontableTableRenderer(wtTable) {
	  this.wtTable = wtTable;
	  this.wot = wtTable.instance;
	  this.instance = wtTable.instance;
	  this.rowFilter = wtTable.rowFilter;
	  this.columnFilter = wtTable.columnFilter;
	  this.TABLE = wtTable.TABLE;
	  this.THEAD = wtTable.THEAD;
	  this.TBODY = wtTable.TBODY;
	  this.COLGROUP = wtTable.COLGROUP;
	  this.rowHeaders = [];
	  this.rowHeaderCount = 0;
	  this.columnHeaders = [];
	  this.columnHeaderCount = 0;
	  this.fixedRowsTop = 0;
	  this.fixedRowsBottom = 0;
	};
	($traceurRuntime.createClass)(WalkontableTableRenderer, {
	  render: function() {
	    if (!this.wtTable.isWorkingOnClone()) {
	      this.wot.getSetting('beforeDraw', true);
	    }
	    this.rowHeaders = this.wot.getSetting('rowHeaders');
	    this.rowHeaderCount = this.rowHeaders.length;
	    this.fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	    this.fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	    this.columnHeaders = this.wot.getSetting('columnHeaders');
	    this.columnHeaderCount = this.columnHeaders.length;
	    var columnsToRender = this.wtTable.getRenderedColumnsCount();
	    var rowsToRender = this.wtTable.getRenderedRowsCount();
	    var totalColumns = this.wot.getSetting('totalColumns');
	    var totalRows = this.wot.getSetting('totalRows');
	    var workspaceWidth;
	    var adjusted = false;
	    if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM) || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)) {
	      this.columnHeaders = [];
	      this.columnHeaderCount = 0;
	    }
	    if (totalColumns > 0) {
	      this.adjustAvailableNodes();
	      adjusted = true;
	      this.renderColumnHeaders();
	      this.renderRows(totalRows, rowsToRender, columnsToRender);
	      if (!this.wtTable.isWorkingOnClone()) {
	        workspaceWidth = this.wot.wtViewport.getWorkspaceWidth();
	        this.wot.wtViewport.containerWidth = null;
	      }
	      this.adjustColumnHeaderHeights();
	      this.adjustColumnWidths(columnsToRender);
	      this.markOversizedColumns();
	    }
	    if (!adjusted) {
	      this.adjustAvailableNodes();
	    }
	    this.removeRedundantRows(rowsToRender);
	    if (!this.wtTable.isWorkingOnClone()) {
	      this.markOversizedRows();
	      this.wot.wtViewport.createVisibleCalculators();
	      this.wot.wtOverlays.refresh(false);
	      this.wot.wtOverlays.applyToDOM();
	      if (workspaceWidth !== this.wot.wtViewport.getWorkspaceWidth()) {
	        this.wot.wtViewport.containerWidth = null;
	        var firstRendered = this.wtTable.getFirstRenderedColumn();
	        var lastRendered = this.wtTable.getLastRenderedColumn();
	        for (var i = firstRendered; i < lastRendered; i++) {
	          var width = this.wtTable.getStretchedColumnWidth(i);
	          var renderedIndex = this.columnFilter.sourceToRendered(i);
	          this.COLGROUP.childNodes[renderedIndex + this.rowHeaderCount].style.width = width + 'px';
	        }
	      }
	      this.wot.getSetting('onDraw', true);
	    } else if (WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM)) {
	      var masterOverlay = this.wot.cloneOverlay.instance;
	      this.wot.cloneOverlay.markOversizedFixedBottomRows();
	      masterOverlay.wtOverlays.adjustElementsSize();
	    }
	  },
	  removeRedundantRows: function(renderedRowsCount) {
	    while (this.wtTable.tbodyChildrenLength > renderedRowsCount) {
	      this.TBODY.removeChild(this.TBODY.lastChild);
	      this.wtTable.tbodyChildrenLength--;
	    }
	  },
	  renderRows: function(totalRows, rowsToRender, columnsToRender) {
	    var lastTD,
	        TR;
	    var visibleRowIndex = 0;
	    var sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);
	    var isWorkingOnClone = this.wtTable.isWorkingOnClone();
	    while (sourceRowIndex < totalRows && sourceRowIndex >= 0) {
	      if (visibleRowIndex > 1000) {
	        console.error('Security brake: Too much TRs. Please define height for your table, which will enforce scrollbars.');
	      }
	      if (rowsToRender !== void 0 && visibleRowIndex === rowsToRender) {
	        break;
	      }
	      TR = this.getOrCreateTrForRow(visibleRowIndex, TR);
	      this.renderRowHeaders(sourceRowIndex, TR);
	      this.adjustColumns(TR, columnsToRender + this.rowHeaderCount);
	      lastTD = this.renderCells(sourceRowIndex, TR, columnsToRender);
	      if (!isWorkingOnClone || WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay, WalkontableOverlay.CLONE_BOTTOM)) {
	        this.resetOversizedRow(sourceRowIndex);
	      }
	      if (TR.firstChild) {
	        var height = this.wot.wtTable.getRowHeight(sourceRowIndex);
	        if (height) {
	          height--;
	          TR.firstChild.style.height = height + 'px';
	        } else {
	          TR.firstChild.style.height = '';
	        }
	      }
	      visibleRowIndex++;
	      sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);
	    }
	  },
	  resetOversizedRow: function(sourceRow) {
	    if (this.wot.getSetting('externalRowCalculator')) {
	      return;
	    }
	    if (this.wot.wtViewport.oversizedRows && this.wot.wtViewport.oversizedRows[sourceRow]) {
	      this.wot.wtViewport.oversizedRows[sourceRow] = void 0;
	    }
	  },
	  markOversizedRows: function() {
	    if (this.wot.getSetting('externalRowCalculator')) {
	      return;
	    }
	    var rowCount = this.instance.wtTable.TBODY.childNodes.length;
	    var expectedTableHeight = rowCount * this.instance.wtSettings.settings.defaultRowHeight;
	    var actualTableHeight = innerHeight(this.instance.wtTable.TBODY) - 1;
	    var previousRowHeight;
	    var rowInnerHeight;
	    var sourceRowIndex;
	    var currentTr;
	    var rowHeader;
	    var totalRows = this.instance.getSetting('totalRows');
	    if (expectedTableHeight === actualTableHeight && !this.instance.getSetting('fixedRowsBottom')) {
	      return;
	    }
	    while (rowCount) {
	      rowCount--;
	      sourceRowIndex = this.instance.wtTable.rowFilter.renderedToSource(rowCount);
	      previousRowHeight = this.instance.wtTable.getRowHeight(sourceRowIndex);
	      currentTr = this.instance.wtTable.getTrForRow(sourceRowIndex);
	      rowHeader = currentTr.querySelector('th');
	      if (rowHeader) {
	        rowInnerHeight = innerHeight(rowHeader);
	      } else {
	        rowInnerHeight = innerHeight(currentTr) - 1;
	      }
	      if ((!previousRowHeight && this.instance.wtSettings.settings.defaultRowHeight < rowInnerHeight || previousRowHeight < rowInnerHeight)) {
	        this.instance.wtViewport.oversizedRows[sourceRowIndex] = ++rowInnerHeight;
	      }
	    }
	  },
	  markOversizedColumns: function() {
	    var overlayName = this.wot.getOverlayName();
	    if (!this.columnHeaderCount || this.wot.wtViewport.isMarkedOversizedColumn[overlayName] || this.wtTable.isWorkingOnClone()) {
	      return;
	    }
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    for (var i = 0; i < this.columnHeaderCount; i++) {
	      for (var renderedColumnIndex = (-1) * this.rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {
	        this.markIfOversizedColumnHeader(renderedColumnIndex);
	      }
	    }
	    this.wot.wtViewport.isMarkedOversizedColumn[overlayName] = true;
	  },
	  adjustColumnHeaderHeights: function() {
	    var columnHeaders = this.wot.getSetting('columnHeaders');
	    var childs = this.wot.wtTable.THEAD.childNodes;
	    var oversizedCols = this.wot.wtViewport.oversizedColumnHeaders;
	    for (var i = 0,
	        len = columnHeaders.length; i < len; i++) {
	      if (oversizedCols[i]) {
	        if (childs[i].childNodes.length === 0) {
	          return;
	        }
	        childs[i].childNodes[0].style.height = oversizedCols[i] + 'px';
	      }
	    }
	  },
	  markIfOversizedColumnHeader: function(col) {
	    var sourceColIndex = this.wot.wtTable.columnFilter.renderedToSource(col);
	    var level = this.columnHeaderCount;
	    var defaultRowHeight = this.wot.wtSettings.settings.defaultRowHeight;
	    var previousColHeaderHeight;
	    var currentHeader;
	    var currentHeaderHeight;
	    while (level) {
	      level--;
	      previousColHeaderHeight = this.wot.wtTable.getColumnHeaderHeight(level);
	      currentHeader = this.wot.wtTable.getColumnHeader(sourceColIndex, level);
	      if (!currentHeader) {
	        continue;
	      }
	      currentHeaderHeight = innerHeight(currentHeader);
	      if (!previousColHeaderHeight && defaultRowHeight < currentHeaderHeight || previousColHeaderHeight < currentHeaderHeight) {
	        this.wot.wtViewport.oversizedColumnHeaders[level] = currentHeaderHeight;
	      }
	    }
	  },
	  renderCells: function(sourceRowIndex, TR, columnsToRender) {
	    var TD;
	    var sourceColIndex;
	    for (var visibleColIndex = 0; visibleColIndex < columnsToRender; visibleColIndex++) {
	      sourceColIndex = this.columnFilter.renderedToSource(visibleColIndex);
	      if (visibleColIndex === 0) {
	        TD = TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(sourceColIndex)];
	      } else {
	        TD = TD.nextSibling;
	      }
	      if (TD.nodeName == 'TH') {
	        TD = replaceThWithTd(TD, TR);
	      }
	      if (!hasClass(TD, 'hide')) {
	        TD.className = '';
	      }
	      TD.removeAttribute('style');
	      this.wot.wtSettings.settings.cellRenderer(sourceRowIndex, sourceColIndex, TD);
	    }
	    return TD;
	  },
	  adjustColumnWidths: function(columnsToRender) {
	    var scrollbarCompensation = 0;
	    var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	    var mainHolder = sourceInstance.wtTable.holder;
	    if (mainHolder.offsetHeight < mainHolder.scrollHeight) {
	      scrollbarCompensation = getScrollbarWidth();
	    }
	    this.wot.wtViewport.columnsRenderCalculator.refreshStretching(this.wot.wtViewport.getViewportWidth() - scrollbarCompensation);
	    for (var renderedColIndex = 0; renderedColIndex < columnsToRender; renderedColIndex++) {
	      var width = this.wtTable.getStretchedColumnWidth(this.columnFilter.renderedToSource(renderedColIndex));
	      this.COLGROUP.childNodes[renderedColIndex + this.rowHeaderCount].style.width = width + 'px';
	    }
	  },
	  appendToTbody: function(TR) {
	    this.TBODY.appendChild(TR);
	    this.wtTable.tbodyChildrenLength++;
	  },
	  getOrCreateTrForRow: function(rowIndex, currentTr) {
	    var TR;
	    if (rowIndex >= this.wtTable.tbodyChildrenLength) {
	      TR = this.createRow();
	      this.appendToTbody(TR);
	    } else if (rowIndex === 0) {
	      TR = this.TBODY.firstChild;
	    } else {
	      TR = currentTr.nextSibling;
	    }
	    if (TR.className) {
	      TR.removeAttribute('class');
	    }
	    return TR;
	  },
	  createRow: function() {
	    var TR = document.createElement('TR');
	    for (var visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {
	      TR.appendChild(document.createElement('TH'));
	    }
	    return TR;
	  },
	  renderRowHeader: function(row, col, TH) {
	    TH.className = '';
	    TH.removeAttribute('style');
	    this.rowHeaders[col](row, TH, col);
	  },
	  renderRowHeaders: function(row, TR) {
	    for (var TH = TR.firstChild,
	        visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {
	      if (!TH) {
	        TH = document.createElement('TH');
	        TR.appendChild(TH);
	      } else if (TH.nodeName == 'TD') {
	        TH = replaceTdWithTh(TH, TR);
	      }
	      this.renderRowHeader(row, visibleColIndex, TH);
	      TH = TH.nextSibling;
	    }
	  },
	  adjustAvailableNodes: function() {
	    this.adjustColGroups();
	    this.adjustThead();
	  },
	  renderColumnHeaders: function() {
	    var overlayName = this.wot.getOverlayName();
	    if (!this.columnHeaderCount) {
	      return;
	    }
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    for (var i = 0; i < this.columnHeaderCount; i++) {
	      var TR = this.getTrForColumnHeaders(i);
	      for (var renderedColumnIndex = (-1) * this.rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {
	        var sourceCol = this.columnFilter.renderedToSource(renderedColumnIndex);
	        this.renderColumnHeader(i, sourceCol, TR.childNodes[renderedColumnIndex + this.rowHeaderCount]);
	      }
	    }
	  },
	  adjustColGroups: function() {
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    while (this.wtTable.colgroupChildrenLength < columnCount + this.rowHeaderCount) {
	      this.COLGROUP.appendChild(document.createElement('COL'));
	      this.wtTable.colgroupChildrenLength++;
	    }
	    while (this.wtTable.colgroupChildrenLength > columnCount + this.rowHeaderCount) {
	      this.COLGROUP.removeChild(this.COLGROUP.lastChild);
	      this.wtTable.colgroupChildrenLength--;
	    }
	    if (this.rowHeaderCount) {
	      addClass(this.COLGROUP.childNodes[0], 'rowHeader');
	    }
	  },
	  adjustThead: function() {
	    var columnCount = this.wtTable.getRenderedColumnsCount();
	    var TR = this.THEAD.firstChild;
	    if (this.columnHeaders.length) {
	      for (var i = 0,
	          len = this.columnHeaders.length; i < len; i++) {
	        TR = this.THEAD.childNodes[i];
	        if (!TR) {
	          TR = document.createElement('TR');
	          this.THEAD.appendChild(TR);
	        }
	        this.theadChildrenLength = TR.childNodes.length;
	        while (this.theadChildrenLength < columnCount + this.rowHeaderCount) {
	          TR.appendChild(document.createElement('TH'));
	          this.theadChildrenLength++;
	        }
	        while (this.theadChildrenLength > columnCount + this.rowHeaderCount) {
	          TR.removeChild(TR.lastChild);
	          this.theadChildrenLength--;
	        }
	      }
	      var theadChildrenLength = this.THEAD.childNodes.length;
	      if (theadChildrenLength > this.columnHeaders.length) {
	        for (var i$__2 = this.columnHeaders.length; i$__2 < theadChildrenLength; i$__2++) {
	          this.THEAD.removeChild(this.THEAD.lastChild);
	        }
	      }
	    } else if (TR) {
	      empty(TR);
	    }
	  },
	  getTrForColumnHeaders: function(index) {
	    return this.THEAD.childNodes[index];
	  },
	  renderColumnHeader: function(row, col, TH) {
	    TH.className = '';
	    TH.removeAttribute('style');
	    return this.columnHeaders[row](col, TH, row);
	  },
	  adjustColumns: function(TR, desiredCount) {
	    var count = TR.childNodes.length;
	    while (count < desiredCount) {
	      var TD = document.createElement('TD');
	      TR.appendChild(TD);
	      count++;
	    }
	    while (count > desiredCount) {
	      TR.removeChild(TR.lastChild);
	      count--;
	    }
	  },
	  removeRedundantColumns: function(columnsToRender) {
	    while (this.wtTable.tbodyChildrenLength > columnsToRender) {
	      this.TBODY.removeChild(this.TBODY.lastChild);
	      this.wtTable.tbodyChildrenLength--;
	    }
	  }
	}, {});
	function replaceTdWithTh(TD, TR) {
	  var TH = document.createElement('TH');
	  TR.insertBefore(TH, TD);
	  TR.removeChild(TD);
	  return TH;
	}
	function replaceThWithTd(TH, TR) {
	  var TD = document.createElement('TD');
	  TR.insertBefore(TD, TH);
	  TR.removeChild(TH);
	  return TD;
	}
	;
	window.WalkontableTableRenderer = WalkontableTableRenderer;

	//# 
	},{"helpers/dom/element":45}],22:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  WalkontableViewport: {get: function() {
	      return WalkontableViewport;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47__46__46__47_eventManager__,
	    $__calculator_47_viewportColumns__,
	    $__calculator_47_viewportRows__;
	var $__0 = ($___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getScrollTop = $__0.getScrollTop,
	    getStyle = $__0.getStyle,
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var EventManager = ($___46__46__47__46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableViewportColumnsCalculator = ($__calculator_47_viewportColumns__ = require("calculator/viewportColumns"), $__calculator_47_viewportColumns__ && $__calculator_47_viewportColumns__.__esModule && $__calculator_47_viewportColumns__ || {default: $__calculator_47_viewportColumns__}).WalkontableViewportColumnsCalculator;
	var WalkontableViewportRowsCalculator = ($__calculator_47_viewportRows__ = require("calculator/viewportRows"), $__calculator_47_viewportRows__ && $__calculator_47_viewportRows__.__esModule && $__calculator_47_viewportRows__ || {default: $__calculator_47_viewportRows__}).WalkontableViewportRowsCalculator;
	var WalkontableViewport = function WalkontableViewport(wotInstance) {
	  var $__4 = this;
	  this.wot = wotInstance;
	  this.instance = this.wot;
	  this.oversizedRows = [];
	  this.oversizedColumnHeaders = [];
	  this.isMarkedOversizedColumn = {};
	  this.clientHeight = 0;
	  this.containerWidth = NaN;
	  this.rowHeaderWidth = NaN;
	  this.rowsVisibleCalculator = null;
	  this.columnsVisibleCalculator = null;
	  this.eventManager = new EventManager(this.wot);
	  this.eventManager.addEventListener(window, 'resize', (function() {
	    $__4.clientHeight = $__4.getWorkspaceHeight();
	  }));
	};
	($traceurRuntime.createClass)(WalkontableViewport, {
	  getWorkspaceHeight: function() {
	    var trimmingContainer = this.instance.wtOverlays.topOverlay.trimmingContainer;
	    var elemHeight;
	    var height = 0;
	    if (trimmingContainer === window) {
	      height = document.documentElement.clientHeight;
	    } else {
	      elemHeight = outerHeight(trimmingContainer);
	      height = (elemHeight > 0 && trimmingContainer.clientHeight > 0) ? trimmingContainer.clientHeight : Infinity;
	    }
	    return height;
	  },
	  getWorkspaceWidth: function() {
	    var width;
	    var totalColumns = this.instance.getSetting('totalColumns');
	    var trimmingContainer = this.instance.wtOverlays.leftOverlay.trimmingContainer;
	    var overflow;
	    var stretchSetting = this.instance.getSetting('stretchH');
	    var docOffsetWidth = document.documentElement.offsetWidth;
	    if (Handsontable.freezeOverlays) {
	      width = Math.min(docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);
	    } else {
	      width = Math.min(this.getContainerFillWidth(), docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);
	    }
	    if (trimmingContainer === window && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {
	      return document.documentElement.clientWidth;
	    }
	    if (trimmingContainer !== window) {
	      overflow = getStyle(this.instance.wtOverlays.leftOverlay.trimmingContainer, 'overflow');
	      if (overflow == 'scroll' || overflow == 'hidden' || overflow == 'auto') {
	        return Math.max(width, trimmingContainer.clientWidth);
	      }
	    }
	    if (stretchSetting === 'none' || !stretchSetting) {
	      return Math.max(width, outerWidth(this.instance.wtTable.TABLE));
	    } else {
	      return width;
	    }
	  },
	  hasVerticalScroll: function() {
	    return this.getWorkspaceActualHeight() > this.getWorkspaceHeight();
	  },
	  hasHorizontalScroll: function() {
	    return this.getWorkspaceActualWidth() > this.getWorkspaceWidth();
	  },
	  sumColumnWidths: function(from, length) {
	    var sum = 0;
	    while (from < length) {
	      sum += this.wot.wtTable.getColumnWidth(from);
	      from++;
	    }
	    return sum;
	  },
	  getContainerFillWidth: function() {
	    if (this.containerWidth) {
	      return this.containerWidth;
	    }
	    var mainContainer = this.instance.wtTable.holder;
	    var fillWidth;
	    var dummyElement;
	    dummyElement = document.createElement('div');
	    dummyElement.style.width = '100%';
	    dummyElement.style.height = '1px';
	    mainContainer.appendChild(dummyElement);
	    fillWidth = dummyElement.offsetWidth;
	    this.containerWidth = fillWidth;
	    mainContainer.removeChild(dummyElement);
	    return fillWidth;
	  },
	  getWorkspaceOffset: function() {
	    return offset(this.wot.wtTable.TABLE);
	  },
	  getWorkspaceActualHeight: function() {
	    return outerHeight(this.wot.wtTable.TABLE);
	  },
	  getWorkspaceActualWidth: function() {
	    return outerWidth(this.wot.wtTable.TABLE) || outerWidth(this.wot.wtTable.TBODY) || outerWidth(this.wot.wtTable.THEAD);
	  },
	  getColumnHeaderHeight: function() {
	    if (isNaN(this.columnHeaderHeight)) {
	      this.columnHeaderHeight = outerHeight(this.wot.wtTable.THEAD);
	    }
	    return this.columnHeaderHeight;
	  },
	  getViewportHeight: function() {
	    var containerHeight = this.getWorkspaceHeight();
	    var columnHeaderHeight;
	    if (containerHeight === Infinity) {
	      return containerHeight;
	    }
	    columnHeaderHeight = this.getColumnHeaderHeight();
	    if (columnHeaderHeight > 0) {
	      containerHeight -= columnHeaderHeight;
	    }
	    return containerHeight;
	  },
	  getRowHeaderWidth: function() {
	    if (this.wot.cloneSource) {
	      return this.wot.cloneSource.wtViewport.getRowHeaderWidth();
	    }
	    if (isNaN(this.rowHeaderWidth)) {
	      var rowHeaders = this.instance.getSetting('rowHeaders');
	      if (rowHeaders.length) {
	        var TH = this.instance.wtTable.TABLE.querySelector('TH');
	        this.rowHeaderWidth = 0;
	        for (var i = 0,
	            len = rowHeaders.length; i < len; i++) {
	          if (TH) {
	            this.rowHeaderWidth += outerWidth(TH);
	            TH = TH.nextSibling;
	          } else {
	            this.rowHeaderWidth += 50;
	          }
	        }
	      } else {
	        this.rowHeaderWidth = 0;
	      }
	    }
	    return this.rowHeaderWidth;
	  },
	  getViewportWidth: function() {
	    var containerWidth = this.getWorkspaceWidth();
	    var rowHeaderWidth;
	    if (containerWidth === Infinity) {
	      return containerWidth;
	    }
	    rowHeaderWidth = this.getRowHeaderWidth();
	    if (rowHeaderWidth > 0) {
	      return containerWidth - rowHeaderWidth;
	    }
	    return containerWidth;
	  },
	  createRowsCalculator: function() {
	    var visible = arguments[0] !== (void 0) ? arguments[0] : false;
	    var $__4 = this;
	    var height;
	    var pos;
	    var fixedRowsTop;
	    var scrollbarHeight;
	    var fixedRowsBottom;
	    var fixedRowsHeight;
	    var totalRows;
	    this.rowHeaderWidth = NaN;
	    if (this.wot.wtSettings.settings.renderAllRows) {
	      height = Infinity;
	    } else {
	      height = this.getViewportHeight();
	    }
	    pos = getScrollTop(this.wot.wtOverlays.mainTableScrollableElement) - this.wot.wtOverlays.topOverlay.getTableParentOffset();
	    if (pos < 0) {
	      pos = 0;
	    }
	    fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	    fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	    totalRows = this.wot.getSetting('totalRows');
	    if (fixedRowsTop) {
	      fixedRowsHeight = this.wot.wtOverlays.topOverlay.sumCellSizes(0, fixedRowsTop);
	      pos += fixedRowsHeight;
	      height -= fixedRowsHeight;
	    }
	    if (fixedRowsBottom && this.wot.wtOverlays.bottomOverlay.clone) {
	      fixedRowsHeight = this.wot.wtOverlays.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);
	      height -= fixedRowsHeight;
	    }
	    if (this.wot.wtTable.holder.clientHeight === this.wot.wtTable.holder.offsetHeight) {
	      scrollbarHeight = 0;
	    } else {
	      scrollbarHeight = getScrollbarWidth();
	    }
	    return new WalkontableViewportRowsCalculator(height, pos, this.wot.getSetting('totalRows'), (function(sourceRow) {
	      return $__4.wot.wtTable.getRowHeight(sourceRow);
	    }), visible ? null : this.wot.wtSettings.settings.viewportRowCalculatorOverride, visible, scrollbarHeight);
	  },
	  createColumnsCalculator: function() {
	    var visible = arguments[0] !== (void 0) ? arguments[0] : false;
	    var $__4 = this;
	    var width = this.getViewportWidth();
	    var pos;
	    var fixedColumnsLeft;
	    this.columnHeaderHeight = NaN;
	    pos = this.wot.wtOverlays.leftOverlay.getScrollPosition() - this.wot.wtOverlays.leftOverlay.getTableParentOffset();
	    if (pos < 0) {
	      pos = 0;
	    }
	    fixedColumnsLeft = this.wot.getSetting('fixedColumnsLeft');
	    if (fixedColumnsLeft) {
	      var fixedColumnsWidth = this.wot.wtOverlays.leftOverlay.sumCellSizes(0, fixedColumnsLeft);
	      pos += fixedColumnsWidth;
	      width -= fixedColumnsWidth;
	    }
	    if (this.wot.wtTable.holder.clientWidth !== this.wot.wtTable.holder.offsetWidth) {
	      width -= getScrollbarWidth();
	    }
	    return new WalkontableViewportColumnsCalculator(width, pos, this.wot.getSetting('totalColumns'), (function(sourceCol) {
	      return $__4.wot.wtTable.getColumnWidth(sourceCol);
	    }), visible ? null : this.wot.wtSettings.settings.viewportColumnCalculatorOverride, visible, this.wot.getSetting('stretchH'));
	  },
	  createRenderCalculators: function() {
	    var fastDraw = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (fastDraw) {
	      var proposedRowsVisibleCalculator = this.createRowsCalculator(true);
	      var proposedColumnsVisibleCalculator = this.createColumnsCalculator(true);
	      if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator))) {
	        fastDraw = false;
	      }
	    }
	    if (!fastDraw) {
	      this.rowsRenderCalculator = this.createRowsCalculator();
	      this.columnsRenderCalculator = this.createColumnsCalculator();
	    }
	    this.rowsVisibleCalculator = null;
	    this.columnsVisibleCalculator = null;
	    return fastDraw;
	  },
	  createVisibleCalculators: function() {
	    this.rowsVisibleCalculator = this.createRowsCalculator(true);
	    this.columnsVisibleCalculator = this.createColumnsCalculator(true);
	  },
	  areAllProposedVisibleRowsAlreadyRendered: function(proposedRowsVisibleCalculator) {
	    if (this.rowsVisibleCalculator) {
	      if (proposedRowsVisibleCalculator.startRow < this.rowsRenderCalculator.startRow || (proposedRowsVisibleCalculator.startRow === this.rowsRenderCalculator.startRow && proposedRowsVisibleCalculator.startRow > 0)) {
	        return false;
	      } else if (proposedRowsVisibleCalculator.endRow > this.rowsRenderCalculator.endRow || (proposedRowsVisibleCalculator.endRow === this.rowsRenderCalculator.endRow && proposedRowsVisibleCalculator.endRow < this.wot.getSetting('totalRows') - 1)) {
	        return false;
	      } else {
	        return true;
	      }
	    }
	    return false;
	  },
	  areAllProposedVisibleColumnsAlreadyRendered: function(proposedColumnsVisibleCalculator) {
	    if (this.columnsVisibleCalculator) {
	      if (proposedColumnsVisibleCalculator.startColumn < this.columnsRenderCalculator.startColumn || (proposedColumnsVisibleCalculator.startColumn === this.columnsRenderCalculator.startColumn && proposedColumnsVisibleCalculator.startColumn > 0)) {
	        return false;
	      } else if (proposedColumnsVisibleCalculator.endColumn > this.columnsRenderCalculator.endColumn || (proposedColumnsVisibleCalculator.endColumn === this.columnsRenderCalculator.endColumn && proposedColumnsVisibleCalculator.endColumn < this.wot.getSetting('totalColumns') - 1)) {
	        return false;
	      } else {
	        return true;
	      }
	    }
	    return false;
	  }
	}, {});
	;
	window.WalkontableViewport = WalkontableViewport;

	//# 
	},{"calculator/viewportColumns":3,"calculator/viewportRows":4,"eventManager":41,"helpers/dom/element":45}],23:[function(require,module,exports){
	"use strict";
	var $__shims_47_classes__,
	    $__es6collections__,
	    $__pluginHooks__,
	    $__core__,
	    $__renderers_47__95_cellDecorator__,
	    $__cellTypes__,
	    $___46__46__47_plugins_47_jqueryHandsontable__,
	    $__helpers_47_array__,
	    $__helpers_47_browser__,
	    $__helpers_47_data__,
	    $__helpers_47_function__,
	    $__helpers_47_mixed__,
	    $__helpers_47_number__,
	    $__helpers_47_object__,
	    $__helpers_47_setting__,
	    $__helpers_47_string__,
	    $__helpers_47_unicode__,
	    $__helpers_47_dom_47_element__,
	    $__helpers_47_dom_47_event__;
	window.Handsontable = function Handsontable(rootElement, userSettings) {
	  var instance = new Handsontable.Core(rootElement, userSettings || {});
	  instance.init();
	  return instance;
	};
	($__shims_47_classes__ = require("shims/classes"), $__shims_47_classes__ && $__shims_47_classes__.__esModule && $__shims_47_classes__ || {default: $__shims_47_classes__});
	($__es6collections__ = require("es6collections"), $__es6collections__ && $__es6collections__.__esModule && $__es6collections__ || {default: $__es6collections__});
	var Hooks = ($__pluginHooks__ = require("pluginHooks"), $__pluginHooks__ && $__pluginHooks__.__esModule && $__pluginHooks__ || {default: $__pluginHooks__}).Hooks;
	if (!Handsontable.hooks) {
	  Handsontable.hooks = new Hooks();
	}
	($__core__ = require("core"), $__core__ && $__core__.__esModule && $__core__ || {default: $__core__});
	($__renderers_47__95_cellDecorator__ = require("renderers/_cellDecorator"), $__renderers_47__95_cellDecorator__ && $__renderers_47__95_cellDecorator__.__esModule && $__renderers_47__95_cellDecorator__ || {default: $__renderers_47__95_cellDecorator__});
	($__cellTypes__ = require("cellTypes"), $__cellTypes__ && $__cellTypes__.__esModule && $__cellTypes__ || {default: $__cellTypes__});
	($___46__46__47_plugins_47_jqueryHandsontable__ = require("plugins/jqueryHandsontable"), $___46__46__47_plugins_47_jqueryHandsontable__ && $___46__46__47_plugins_47_jqueryHandsontable__.__esModule && $___46__46__47_plugins_47_jqueryHandsontable__ || {default: $___46__46__47_plugins_47_jqueryHandsontable__});
	var arrayHelpers = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__});
	var browserHelpers = ($__helpers_47_browser__ = require("helpers/browser"), $__helpers_47_browser__ && $__helpers_47_browser__.__esModule && $__helpers_47_browser__ || {default: $__helpers_47_browser__});
	var dataHelpers = ($__helpers_47_data__ = require("helpers/data"), $__helpers_47_data__ && $__helpers_47_data__.__esModule && $__helpers_47_data__ || {default: $__helpers_47_data__});
	var functionHelpers = ($__helpers_47_function__ = require("helpers/function"), $__helpers_47_function__ && $__helpers_47_function__.__esModule && $__helpers_47_function__ || {default: $__helpers_47_function__});
	var mixedHelpers = ($__helpers_47_mixed__ = require("helpers/mixed"), $__helpers_47_mixed__ && $__helpers_47_mixed__.__esModule && $__helpers_47_mixed__ || {default: $__helpers_47_mixed__});
	var numberHelpers = ($__helpers_47_number__ = require("helpers/number"), $__helpers_47_number__ && $__helpers_47_number__.__esModule && $__helpers_47_number__ || {default: $__helpers_47_number__});
	var objectHelpers = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__});
	var settingHelpers = ($__helpers_47_setting__ = require("helpers/setting"), $__helpers_47_setting__ && $__helpers_47_setting__.__esModule && $__helpers_47_setting__ || {default: $__helpers_47_setting__});
	var stringHelpers = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__});
	var unicodeHelpers = ($__helpers_47_unicode__ = require("helpers/unicode"), $__helpers_47_unicode__ && $__helpers_47_unicode__.__esModule && $__helpers_47_unicode__ || {default: $__helpers_47_unicode__});
	var domHelpers = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__});
	var domEventHelpers = ($__helpers_47_dom_47_event__ = require("helpers/dom/event"), $__helpers_47_dom_47_event__ && $__helpers_47_dom_47_event__.__esModule && $__helpers_47_dom_47_event__ || {default: $__helpers_47_dom_47_event__});
	var HELPERS = [arrayHelpers, browserHelpers, dataHelpers, functionHelpers, mixedHelpers, numberHelpers, objectHelpers, settingHelpers, stringHelpers, unicodeHelpers];
	var DOM = [domHelpers, domEventHelpers];
	Handsontable.buildDate = 'Thu Nov 19 2015 10:51:56 GMT+0100 (CET)';
	Handsontable.packageName = 'handsontable';
	Handsontable.version = '0.20.1';
	var baseVersion = '@@baseVersion';
	if (!/^@@/.test(baseVersion)) {
	  Handsontable.baseVersion = baseVersion;
	}
	Handsontable.plugins = {};
	Handsontable.helper = {};
	Handsontable.dom = {};
	Handsontable.Dom = Handsontable.dom;
	arrayHelpers.arrayEach(HELPERS, (function(helper) {
	  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), (function(key) {
	    if (key.charAt(0) !== '_') {
	      Handsontable.helper[key] = helper[key];
	    }
	  }));
	}));
	arrayHelpers.arrayEach(DOM, (function(helper) {
	  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), (function(key) {
	    if (key.charAt(0) !== '_') {
	      Handsontable.dom[key] = helper[key];
	    }
	  }));
	}));

	//# 
	},{"cellTypes":24,"core":25,"es6collections":"es6collections","helpers/array":42,"helpers/browser":43,"helpers/data":44,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/function":47,"helpers/mixed":48,"helpers/number":49,"helpers/object":50,"helpers/setting":51,"helpers/string":52,"helpers/unicode":53,"pluginHooks":56,"plugins/jqueryHandsontable":1,"renderers/_cellDecorator":89,"shims/classes":96}],24:[function(require,module,exports){
	"use strict";
	var $__helpers_47_browser__,
	    $__editors__,
	    $__renderers__,
	    $__editors_47_autocompleteEditor__,
	    $__editors_47_checkboxEditor__,
	    $__editors_47_dateEditor__,
	    $__editors_47_dropdownEditor__,
	    $__editors_47_handsontableEditor__,
	    $__editors_47_mobileTextEditor__,
	    $__editors_47_numericEditor__,
	    $__editors_47_passwordEditor__,
	    $__editors_47_selectEditor__,
	    $__editors_47_textEditor__,
	    $__renderers_47_autocompleteRenderer__,
	    $__renderers_47_checkboxRenderer__,
	    $__renderers_47_htmlRenderer__,
	    $__renderers_47_numericRenderer__,
	    $__renderers_47_passwordRenderer__,
	    $__renderers_47_textRenderer__,
	    $__validators_47_autocompleteValidator__,
	    $__validators_47_dateValidator__,
	    $__validators_47_numericValidator__;
	var isMobileBrowser = ($__helpers_47_browser__ = require("helpers/browser"), $__helpers_47_browser__ && $__helpers_47_browser__.__esModule && $__helpers_47_browser__ || {default: $__helpers_47_browser__}).isMobileBrowser;
	var getEditorConstructor = ($__editors__ = require("editors"), $__editors__ && $__editors__.__esModule && $__editors__ || {default: $__editors__}).getEditorConstructor;
	var getRenderer = ($__renderers__ = require("renderers"), $__renderers__ && $__renderers__.__esModule && $__renderers__ || {default: $__renderers__}).getRenderer;
	var AutocompleteEditor = ($__editors_47_autocompleteEditor__ = require("editors/autocompleteEditor"), $__editors_47_autocompleteEditor__ && $__editors_47_autocompleteEditor__.__esModule && $__editors_47_autocompleteEditor__ || {default: $__editors_47_autocompleteEditor__}).AutocompleteEditor;
	var CheckboxEditor = ($__editors_47_checkboxEditor__ = require("editors/checkboxEditor"), $__editors_47_checkboxEditor__ && $__editors_47_checkboxEditor__.__esModule && $__editors_47_checkboxEditor__ || {default: $__editors_47_checkboxEditor__}).CheckboxEditor;
	var DateEditor = ($__editors_47_dateEditor__ = require("editors/dateEditor"), $__editors_47_dateEditor__ && $__editors_47_dateEditor__.__esModule && $__editors_47_dateEditor__ || {default: $__editors_47_dateEditor__}).DateEditor;
	var DropdownEditor = ($__editors_47_dropdownEditor__ = require("editors/dropdownEditor"), $__editors_47_dropdownEditor__ && $__editors_47_dropdownEditor__.__esModule && $__editors_47_dropdownEditor__ || {default: $__editors_47_dropdownEditor__}).DropdownEditor;
	var HandsontableEditor = ($__editors_47_handsontableEditor__ = require("editors/handsontableEditor"), $__editors_47_handsontableEditor__ && $__editors_47_handsontableEditor__.__esModule && $__editors_47_handsontableEditor__ || {default: $__editors_47_handsontableEditor__}).HandsontableEditor;
	var MobileTextEditor = ($__editors_47_mobileTextEditor__ = require("editors/mobileTextEditor"), $__editors_47_mobileTextEditor__ && $__editors_47_mobileTextEditor__.__esModule && $__editors_47_mobileTextEditor__ || {default: $__editors_47_mobileTextEditor__}).MobileTextEditor;
	var NumericEditor = ($__editors_47_numericEditor__ = require("editors/numericEditor"), $__editors_47_numericEditor__ && $__editors_47_numericEditor__.__esModule && $__editors_47_numericEditor__ || {default: $__editors_47_numericEditor__}).NumericEditor;
	var PasswordEditor = ($__editors_47_passwordEditor__ = require("editors/passwordEditor"), $__editors_47_passwordEditor__ && $__editors_47_passwordEditor__.__esModule && $__editors_47_passwordEditor__ || {default: $__editors_47_passwordEditor__}).PasswordEditor;
	var SelectEditor = ($__editors_47_selectEditor__ = require("editors/selectEditor"), $__editors_47_selectEditor__ && $__editors_47_selectEditor__.__esModule && $__editors_47_selectEditor__ || {default: $__editors_47_selectEditor__}).SelectEditor;
	var TextEditor = ($__editors_47_textEditor__ = require("editors/textEditor"), $__editors_47_textEditor__ && $__editors_47_textEditor__.__esModule && $__editors_47_textEditor__ || {default: $__editors_47_textEditor__}).TextEditor;
	var AutocompleteRenderer = ($__renderers_47_autocompleteRenderer__ = require("renderers/autocompleteRenderer"), $__renderers_47_autocompleteRenderer__ && $__renderers_47_autocompleteRenderer__.__esModule && $__renderers_47_autocompleteRenderer__ || {default: $__renderers_47_autocompleteRenderer__}).AutocompleteRenderer;
	var CheckboxRenderer = ($__renderers_47_checkboxRenderer__ = require("renderers/checkboxRenderer"), $__renderers_47_checkboxRenderer__ && $__renderers_47_checkboxRenderer__.__esModule && $__renderers_47_checkboxRenderer__ || {default: $__renderers_47_checkboxRenderer__}).CheckboxRenderer;
	var HtmlRenderer = ($__renderers_47_htmlRenderer__ = require("renderers/htmlRenderer"), $__renderers_47_htmlRenderer__ && $__renderers_47_htmlRenderer__.__esModule && $__renderers_47_htmlRenderer__ || {default: $__renderers_47_htmlRenderer__}).HtmlRenderer;
	var NumericRenderer = ($__renderers_47_numericRenderer__ = require("renderers/numericRenderer"), $__renderers_47_numericRenderer__ && $__renderers_47_numericRenderer__.__esModule && $__renderers_47_numericRenderer__ || {default: $__renderers_47_numericRenderer__}).NumericRenderer;
	var PasswordRenderer = ($__renderers_47_passwordRenderer__ = require("renderers/passwordRenderer"), $__renderers_47_passwordRenderer__ && $__renderers_47_passwordRenderer__.__esModule && $__renderers_47_passwordRenderer__ || {default: $__renderers_47_passwordRenderer__}).PasswordRenderer;
	var TextRenderer = ($__renderers_47_textRenderer__ = require("renderers/textRenderer"), $__renderers_47_textRenderer__ && $__renderers_47_textRenderer__.__esModule && $__renderers_47_textRenderer__ || {default: $__renderers_47_textRenderer__}).TextRenderer;
	var AutocompleteValidator = ($__validators_47_autocompleteValidator__ = require("validators/autocompleteValidator"), $__validators_47_autocompleteValidator__ && $__validators_47_autocompleteValidator__.__esModule && $__validators_47_autocompleteValidator__ || {default: $__validators_47_autocompleteValidator__}).AutocompleteValidator;
	var DateValidator = ($__validators_47_dateValidator__ = require("validators/dateValidator"), $__validators_47_dateValidator__ && $__validators_47_dateValidator__.__esModule && $__validators_47_dateValidator__ || {default: $__validators_47_dateValidator__}).DateValidator;
	var NumericValidator = ($__validators_47_numericValidator__ = require("validators/numericValidator"), $__validators_47_numericValidator__ && $__validators_47_numericValidator__.__esModule && $__validators_47_numericValidator__ || {default: $__validators_47_numericValidator__}).NumericValidator;
	Handsontable.mobileBrowser = isMobileBrowser();
	Handsontable.AutocompleteCell = {
	  editor: getEditorConstructor('autocomplete'),
	  renderer: getRenderer('autocomplete'),
	  validator: Handsontable.AutocompleteValidator
	};
	Handsontable.CheckboxCell = {
	  editor: getEditorConstructor('checkbox'),
	  renderer: getRenderer('checkbox')
	};
	Handsontable.TextCell = {
	  editor: Handsontable.mobileBrowser ? getEditorConstructor('mobile') : getEditorConstructor('text'),
	  renderer: getRenderer('text')
	};
	Handsontable.NumericCell = {
	  editor: getEditorConstructor('numeric'),
	  renderer: getRenderer('numeric'),
	  validator: Handsontable.NumericValidator,
	  dataType: 'number'
	};
	Handsontable.DateCell = {
	  editor: getEditorConstructor('date'),
	  validator: Handsontable.DateValidator,
	  renderer: getRenderer('autocomplete')
	};
	Handsontable.HandsontableCell = {
	  editor: getEditorConstructor('handsontable'),
	  renderer: getRenderer('autocomplete')
	};
	Handsontable.PasswordCell = {
	  editor: getEditorConstructor('password'),
	  renderer: getRenderer('password'),
	  copyable: false
	};
	Handsontable.DropdownCell = {
	  editor: getEditorConstructor('dropdown'),
	  renderer: getRenderer('autocomplete'),
	  validator: Handsontable.AutocompleteValidator
	};
	Handsontable.cellTypes = {
	  text: Handsontable.TextCell,
	  date: Handsontable.DateCell,
	  numeric: Handsontable.NumericCell,
	  checkbox: Handsontable.CheckboxCell,
	  autocomplete: Handsontable.AutocompleteCell,
	  handsontable: Handsontable.HandsontableCell,
	  password: Handsontable.PasswordCell,
	  dropdown: Handsontable.DropdownCell
	};
	Handsontable.cellLookup = {validator: {
	    numeric: Handsontable.NumericValidator,
	    autocomplete: Handsontable.AutocompleteValidator
	  }};

	//# 
	},{"editors":29,"editors/autocompleteEditor":31,"editors/checkboxEditor":32,"editors/dateEditor":33,"editors/dropdownEditor":34,"editors/handsontableEditor":35,"editors/mobileTextEditor":36,"editors/numericEditor":37,"editors/passwordEditor":38,"editors/selectEditor":39,"editors/textEditor":40,"helpers/browser":43,"renderers":88,"renderers/autocompleteRenderer":90,"renderers/checkboxRenderer":91,"renderers/htmlRenderer":92,"renderers/numericRenderer":93,"renderers/passwordRenderer":94,"renderers/textRenderer":95,"validators/autocompleteValidator":100,"validators/dateValidator":101,"validators/numericValidator":102}],25:[function(require,module,exports){
	"use strict";
	var $__numeral__,
	    $__helpers_47_dom_47_element__,
	    $__helpers_47_setting__,
	    $__dataMap__,
	    $__editorManager__,
	    $__eventManager__,
	    $__helpers_47_object__,
	    $__helpers_47_array__,
	    $__plugins__,
	    $__renderers__,
	    $__helpers_47_string__,
	    $__helpers_47_number__,
	    $__tableView__,
	    $__dataSource__,
	    $__helpers_47_data__,
	    $__3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $__3rdparty_47_walkontable_47_src_47_cell_47_range__,
	    $__3rdparty_47_walkontable_47_src_47_selection__,
	    $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__;
	var numeral = ($__numeral__ = require("numeral"), $__numeral__ && $__numeral__.__esModule && $__numeral__ || {default: $__numeral__}).default;
	var $__1 = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__}),
	    addClass = $__1.addClass,
	    empty = $__1.empty,
	    isChildOfWebComponentTable = $__1.isChildOfWebComponentTable,
	    removeClass = $__1.removeClass;
	var columnFactory = ($__helpers_47_setting__ = require("helpers/setting"), $__helpers_47_setting__ && $__helpers_47_setting__.__esModule && $__helpers_47_setting__ || {default: $__helpers_47_setting__}).columnFactory;
	var DataMap = ($__dataMap__ = require("dataMap"), $__dataMap__ && $__dataMap__.__esModule && $__dataMap__ || {default: $__dataMap__}).DataMap;
	var EditorManager = ($__editorManager__ = require("editorManager"), $__editorManager__ && $__editorManager__.__esModule && $__editorManager__ || {default: $__editorManager__}).EditorManager;
	var eventManagerObject = ($__eventManager__ = require("eventManager"), $__eventManager__ && $__eventManager__.__esModule && $__eventManager__ || {default: $__eventManager__}).eventManager;
	var $__6 = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}),
	    extend = $__6.extend,
	    duckSchema = $__6.duckSchema,
	    isObjectEquals = $__6.isObjectEquals,
	    deepClone = $__6.deepClone;
	var arrayFlatten = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__}).arrayFlatten;
	var getPlugin = ($__plugins__ = require("plugins"), $__plugins__ && $__plugins__.__esModule && $__plugins__ || {default: $__plugins__}).getPlugin;
	var getRenderer = ($__renderers__ = require("renderers"), $__renderers__ && $__renderers__.__esModule && $__renderers__ || {default: $__renderers__}).getRenderer;
	var randomString = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).randomString;
	var rangeEach = ($__helpers_47_number__ = require("helpers/number"), $__helpers_47_number__ && $__helpers_47_number__.__esModule && $__helpers_47_number__ || {default: $__helpers_47_number__}).rangeEach;
	var TableView = ($__tableView__ = require("tableView"), $__tableView__ && $__tableView__.__esModule && $__tableView__ || {default: $__tableView__}).TableView;
	var DataSource = ($__dataSource__ = require("dataSource"), $__dataSource__ && $__dataSource__.__esModule && $__dataSource__ || {default: $__dataSource__}).DataSource;
	var $__14 = ($__helpers_47_data__ = require("helpers/data"), $__helpers_47_data__ && $__helpers_47_data__.__esModule && $__helpers_47_data__ || {default: $__helpers_47_data__}),
	    translateRowsToColumns = $__14.translateRowsToColumns,
	    cellMethodLookupFactory = $__14.cellMethodLookupFactory,
	    spreadsheetColumnLabel = $__14.spreadsheetColumnLabel;
	var WalkontableCellCoords = ($__3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($__3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $__3rdparty_47_walkontable_47_src_47_cell_47_range__ && $__3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	var WalkontableSelection = ($__3rdparty_47_walkontable_47_src_47_selection__ = require("3rdparty/walkontable/src/selection"), $__3rdparty_47_walkontable_47_src_47_selection__ && $__3rdparty_47_walkontable_47_src_47_selection__.__esModule && $__3rdparty_47_walkontable_47_src_47_selection__ || {default: $__3rdparty_47_walkontable_47_src_47_selection__}).WalkontableSelection;
	var WalkontableViewportColumnsCalculator = ($__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ = require("3rdparty/walkontable/src/calculator/viewportColumns"), $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ && $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__.__esModule && $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ || {default: $__3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__}).WalkontableViewportColumnsCalculator;
	Handsontable.activeGuid = null;
	Handsontable.Core = function Core(rootElement, userSettings) {
	  var priv,
	      datamap,
	      dataSource,
	      grid,
	      selection,
	      editorManager,
	      instance = this,
	      GridSettings = function() {},
	      eventManager = eventManagerObject(instance);
	  extend(GridSettings.prototype, DefaultSettings.prototype);
	  extend(GridSettings.prototype, userSettings);
	  extend(GridSettings.prototype, expandType(userSettings));
	  this.rootElement = rootElement;
	  this.isHotTableEnv = isChildOfWebComponentTable(this.rootElement);
	  Handsontable.eventManager.isHotTableEnv = this.isHotTableEnv;
	  this.container = document.createElement('DIV');
	  this.renderCall = false;
	  rootElement.insertBefore(this.container, rootElement.firstChild);
	  this.guid = 'ht_' + randomString();
	  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {
	    this.rootElement.id = this.guid;
	  }
	  priv = {
	    cellSettings: [],
	    columnSettings: [],
	    columnsSettingConflicts: ['data', 'width'],
	    settings: new GridSettings(),
	    selRange: null,
	    isPopulated: null,
	    scrollable: null,
	    firstRun: true
	  };
	  grid = {
	    alter: function(action, index, amount, source, keepEmptyRows) {
	      var delta;
	      amount = amount || 1;
	      switch (action) {
	        case 'insert_row':
	          if (instance.getSettings().maxRows === instance.countSourceRows()) {
	            return;
	          }
	          delta = datamap.createRow(index, amount);
	          if (delta) {
	            if (selection.isSelected() && priv.selRange.from.row >= index) {
	              priv.selRange.from.row = priv.selRange.from.row + delta;
	              selection.transformEnd(delta, 0);
	            } else {
	              selection.refreshBorders();
	            }
	          }
	          break;
	        case 'insert_col':
	          delta = datamap.createCol(index, amount);
	          if (delta) {
	            if (Array.isArray(instance.getSettings().colHeaders)) {
	              var spliceArray = [index, 0];
	              spliceArray.length += delta;
	              Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArray);
	            }
	            if (selection.isSelected() && priv.selRange.from.col >= index) {
	              priv.selRange.from.col = priv.selRange.from.col + delta;
	              selection.transformEnd(0, delta);
	            } else {
	              selection.refreshBorders();
	            }
	          }
	          break;
	        case 'remove_row':
	          datamap.removeRow(index, amount);
	          priv.cellSettings.splice(index, amount);
	          var totalRows = instance.countRows();
	          var fixedRowsTop = instance.getSettings().fixedRowsTop;
	          if (fixedRowsTop >= index + 1) {
	            instance.getSettings().fixedRowsTop -= Math.min(amount, fixedRowsTop - index);
	          }
	          var fixedRowsBottom = instance.getSettings().fixedRowsBottom;
	          if (fixedRowsBottom && totalRows - fixedRowsBottom <= index + 1) {
	            instance.getSettings().fixedRowsBottom -= Math.min(amount, fixedRowsBottom - index);
	          }
	          grid.adjustRowsAndCols();
	          selection.refreshBorders();
	          break;
	        case 'remove_col':
	          datamap.removeCol(index, amount);
	          for (var row = 0,
	              len = datamap.getAll().length; row < len; row++) {
	            if (row in priv.cellSettings) {
	              priv.cellSettings[row].splice(index, amount);
	            }
	          }
	          var fixedColumnsLeft = instance.getSettings().fixedColumnsLeft;
	          if (fixedColumnsLeft >= index + 1) {
	            instance.getSettings().fixedColumnsLeft -= Math.min(amount, fixedColumnsLeft - index);
	          }
	          if (Array.isArray(instance.getSettings().colHeaders)) {
	            if (typeof index == 'undefined') {
	              index = -1;
	            }
	            instance.getSettings().colHeaders.splice(index, amount);
	          }
	          grid.adjustRowsAndCols();
	          selection.refreshBorders();
	          break;
	        default:
	          throw new Error('There is no such action "' + action + '"');
	          break;
	      }
	      if (!keepEmptyRows) {
	        grid.adjustRowsAndCols();
	      }
	    },
	    adjustRowsAndCols: function() {
	      if (priv.settings.minRows) {
	        var rows = instance.countRows();
	        if (rows < priv.settings.minRows) {
	          for (var r = 0,
	              minRows = priv.settings.minRows; r < minRows - rows; r++) {
	            datamap.createRow(instance.countRows(), 1, true);
	          }
	        }
	      }
	      if (priv.settings.minSpareRows) {
	        var emptyRows = instance.countEmptyRows(true);
	        if (emptyRows < priv.settings.minSpareRows) {
	          for (; emptyRows < priv.settings.minSpareRows && instance.countRows() < priv.settings.maxRows; emptyRows++) {
	            datamap.createRow(instance.countRows(), 1, true);
	          }
	        }
	      }
	      {
	        var emptyCols;
	        if (priv.settings.minCols || priv.settings.minSpareCols) {
	          emptyCols = instance.countEmptyCols(true);
	        }
	        if (priv.settings.minCols && !priv.settings.columns && instance.countCols() < priv.settings.minCols) {
	          for (; instance.countCols() < priv.settings.minCols; emptyCols++) {
	            datamap.createCol(instance.countCols(), 1, true);
	          }
	        }
	        if (priv.settings.minSpareCols && !priv.settings.columns && instance.dataType === 'array' && emptyCols < priv.settings.minSpareCols) {
	          for (; emptyCols < priv.settings.minSpareCols && instance.countCols() < priv.settings.maxCols; emptyCols++) {
	            datamap.createCol(instance.countCols(), 1, true);
	          }
	        }
	      }
	      var rowCount = instance.countRows();
	      var colCount = instance.countCols();
	      if (rowCount === 0 || colCount === 0) {
	        selection.deselect();
	      }
	      if (selection.isSelected()) {
	        var selectionChanged = false;
	        var fromRow = priv.selRange.from.row;
	        var fromCol = priv.selRange.from.col;
	        var toRow = priv.selRange.to.row;
	        var toCol = priv.selRange.to.col;
	        if (fromRow > rowCount - 1) {
	          fromRow = rowCount - 1;
	          selectionChanged = true;
	          if (toRow > fromRow) {
	            toRow = fromRow;
	          }
	        } else if (toRow > rowCount - 1) {
	          toRow = rowCount - 1;
	          selectionChanged = true;
	          if (fromRow > toRow) {
	            fromRow = toRow;
	          }
	        }
	        if (fromCol > colCount - 1) {
	          fromCol = colCount - 1;
	          selectionChanged = true;
	          if (toCol > fromCol) {
	            toCol = fromCol;
	          }
	        } else if (toCol > colCount - 1) {
	          toCol = colCount - 1;
	          selectionChanged = true;
	          if (fromCol > toCol) {
	            fromCol = toCol;
	          }
	        }
	        if (selectionChanged) {
	          instance.selectCell(fromRow, fromCol, toRow, toCol);
	        }
	      }
	      if (instance.view) {
	        instance.view.wt.wtOverlays.adjustElementsSize();
	      }
	    },
	    populateFromArray: function(start, input, end, source, method, direction, deltas) {
	      var r,
	          rlen,
	          c,
	          clen,
	          setData = [],
	          current = {};
	      rlen = input.length;
	      if (rlen === 0) {
	        return false;
	      }
	      var repeatCol,
	          repeatRow,
	          cmax,
	          rmax,
	          baseEnd = {
	            row: end === null ? null : end.row,
	            col: end === null ? null : end.col
	          };
	      switch (method) {
	        case 'shift_down':
	          repeatCol = end ? end.col - start.col + 1 : 0;
	          repeatRow = end ? end.row - start.row + 1 : 0;
	          input = translateRowsToColumns(input);
	          for (c = 0, clen = input.length, cmax = Math.max(clen, repeatCol); c < cmax; c++) {
	            if (c < clen) {
	              for (r = 0, rlen = input[c].length; r < repeatRow - rlen; r++) {
	                input[c].push(input[c][r % rlen]);
	              }
	              input[c].unshift(start.col + c, start.row, 0);
	              instance.spliceCol.apply(instance, input[c]);
	            } else {
	              input[c % clen][0] = start.col + c;
	              instance.spliceCol.apply(instance, input[c % clen]);
	            }
	          }
	          break;
	        case 'shift_right':
	          repeatCol = end ? end.col - start.col + 1 : 0;
	          repeatRow = end ? end.row - start.row + 1 : 0;
	          for (r = 0, rlen = input.length, rmax = Math.max(rlen, repeatRow); r < rmax; r++) {
	            if (r < rlen) {
	              for (c = 0, clen = input[r].length; c < repeatCol - clen; c++) {
	                input[r].push(input[r][c % clen]);
	              }
	              input[r].unshift(start.row + r, start.col, 0);
	              instance.spliceRow.apply(instance, input[r]);
	            } else {
	              input[r % rlen][0] = start.row + r;
	              instance.spliceRow.apply(instance, input[r % rlen]);
	            }
	          }
	          break;
	        case 'overwrite':
	        default:
	          current.row = start.row;
	          current.col = start.col;
	          var selected = {
	            row: (end && start) ? (end.row - start.row + 1) : 1,
	            col: (end && start) ? (end.col - start.col + 1) : 1
	          };
	          var skippedRow = 0;
	          var skippedColumn = 0;
	          var pushData = true;
	          var cellMeta;
	          var getInputValue = function getInputValue(row) {
	            var col = arguments[1] !== (void 0) ? arguments[1] : null;
	            var rowValue = input[row % input.length];
	            if (col !== null) {
	              return rowValue[col % rowValue.length];
	            }
	            return rowValue;
	          };
	          var rowInputLength = input.length;
	          var rowSelectionLength = end ? end.row - start.row + 1 : 0;
	          if (end) {
	            rlen = rowSelectionLength;
	          } else {
	            rlen = Math.max(rowInputLength, rowSelectionLength);
	          }
	          for (r = 0; r < rlen; r++) {
	            if ((end && current.row > end.row && rowSelectionLength > rowInputLength) || (!priv.settings.allowInsertRow && current.row > instance.countRows() - 1) || (current.row >= priv.settings.maxRows)) {
	              break;
	            }
	            var logicalRow = r - skippedRow;
	            var colInputLength = getInputValue(logicalRow).length;
	            var colSelectionLength = end ? end.col - start.col + 1 : 0;
	            if (end) {
	              clen = colSelectionLength;
	            } else {
	              clen = Math.max(colInputLength, colSelectionLength);
	            }
	            current.col = start.col;
	            cellMeta = instance.getCellMeta(current.row, current.col);
	            if ((source === 'paste' || source === 'autofill') && cellMeta.skipRowOnPaste) {
	              skippedRow++;
	              current.row++;
	              rlen++;
	              continue;
	            }
	            skippedColumn = 0;
	            for (c = 0; c < clen; c++) {
	              if ((end && current.col > end.col && colSelectionLength > colInputLength) || (!priv.settings.allowInsertColumn && current.col > instance.countCols() - 1) || (current.col >= priv.settings.maxCols)) {
	                break;
	              }
	              cellMeta = instance.getCellMeta(current.row, current.col);
	              if ((source === 'paste' || source === 'autofill') && cellMeta.skipColumnOnPaste) {
	                skippedColumn++;
	                current.col++;
	                clen++;
	                continue;
	              }
	              if (cellMeta.readOnly) {
	                current.col++;
	                continue;
	              }
	              var logicalColumn = c - skippedColumn;
	              var value = getInputValue(logicalRow, logicalColumn);
	              var orgValue = instance.getDataAtCell(current.row, current.col);
	              var index = {
	                row: logicalRow,
	                col: logicalColumn
	              };
	              if (source === 'autofill') {
	                var result = instance.runHooks('beforeAutofillInsidePopulate', index, direction, input, deltas, {}, selected);
	                if (result) {
	                  value = typeof(result.value) === 'undefined' ? value : result.value;
	                }
	              }
	              if (value !== null && typeof value === 'object') {
	                if (orgValue === null || typeof orgValue !== 'object') {
	                  pushData = false;
	                } else {
	                  var orgValueSchema = duckSchema(orgValue[0] || orgValue);
	                  var valueSchema = duckSchema(value[0] || value);
	                  if (isObjectEquals(orgValueSchema, valueSchema)) {
	                    value = deepClone(value);
	                  } else {
	                    pushData = false;
	                  }
	                }
	              } else if (orgValue !== null && typeof orgValue === 'object') {
	                pushData = false;
	              }
	              if (pushData) {
	                setData.push([current.row, current.col, value]);
	              }
	              pushData = true;
	              current.col++;
	            }
	            current.row++;
	          }
	          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');
	          break;
	      }
	    }
	  };
	  this.selection = selection = {
	    inProgress: false,
	    selectedHeader: {
	      cols: false,
	      rows: false
	    },
	    setSelectedHeaders: function(rows, cols) {
	      instance.selection.selectedHeader.rows = rows;
	      instance.selection.selectedHeader.cols = cols;
	    },
	    begin: function() {
	      instance.selection.inProgress = true;
	    },
	    finish: function() {
	      var sel = instance.getSelected();
	      Handsontable.hooks.run(instance, 'afterSelectionEnd', sel[0], sel[1], sel[2], sel[3]);
	      Handsontable.hooks.run(instance, 'afterSelectionEndByProp', sel[0], instance.colToProp(sel[1]), sel[2], instance.colToProp(sel[3]));
	      instance.selection.inProgress = false;
	    },
	    isInProgress: function() {
	      return instance.selection.inProgress;
	    },
	    setRangeStart: function(coords, keepEditorOpened) {
	      Handsontable.hooks.run(instance, 'beforeSetRangeStart', coords);
	      priv.selRange = new WalkontableCellRange(coords, coords, coords);
	      selection.setRangeEnd(coords, null, keepEditorOpened);
	    },
	    setRangeEnd: function(coords, scrollToCell, keepEditorOpened) {
	      if (priv.selRange === null) {
	        return;
	      }
	      var disableVisualSelection,
	          isHeaderSelected = false,
	          areCoordsPositive = true;
	      var firstVisibleRow = instance.view.wt.wtTable.getFirstVisibleRow();
	      var firstVisibleColumn = instance.view.wt.wtTable.getFirstVisibleColumn();
	      var newRangeCoords = {
	        row: null,
	        col: null
	      };
	      Handsontable.hooks.run(instance, 'beforeSetRangeEnd', coords);
	      instance.selection.begin();
	      newRangeCoords.row = coords.row < 0 ? firstVisibleRow : coords.row;
	      newRangeCoords.col = coords.col < 0 ? firstVisibleColumn : coords.col;
	      priv.selRange.to = new WalkontableCellCoords(newRangeCoords.row, newRangeCoords.col);
	      if (!priv.settings.multiSelect) {
	        priv.selRange.from = coords;
	      }
	      instance.view.wt.selections.current.clear();
	      disableVisualSelection = instance.getCellMeta(priv.selRange.highlight.row, priv.selRange.highlight.col).disableVisualSelection;
	      if (typeof disableVisualSelection === 'string') {
	        disableVisualSelection = [disableVisualSelection];
	      }
	      if (disableVisualSelection === false || Array.isArray(disableVisualSelection) && disableVisualSelection.indexOf('current') === -1) {
	        instance.view.wt.selections.current.add(priv.selRange.highlight);
	      }
	      instance.view.wt.selections.area.clear();
	      if ((disableVisualSelection === false || Array.isArray(disableVisualSelection) && disableVisualSelection.indexOf('area') === -1) && selection.isMultiple()) {
	        instance.view.wt.selections.area.add(priv.selRange.from);
	        instance.view.wt.selections.area.add(priv.selRange.to);
	      }
	      if (priv.settings.currentRowClassName || priv.settings.currentColClassName) {
	        instance.view.wt.selections.highlight.clear();
	        instance.view.wt.selections.highlight.add(priv.selRange.from);
	        instance.view.wt.selections.highlight.add(priv.selRange.to);
	      }
	      Handsontable.hooks.run(instance, 'afterSelection', priv.selRange.from.row, priv.selRange.from.col, priv.selRange.to.row, priv.selRange.to.col);
	      Handsontable.hooks.run(instance, 'afterSelectionByProp', priv.selRange.from.row, datamap.colToProp(priv.selRange.from.col), priv.selRange.to.row, datamap.colToProp(priv.selRange.to.col));
	      if ((priv.selRange.from.row === 0 && priv.selRange.to.row === instance.countRows() - 1 && instance.countRows() > 1) || (priv.selRange.from.col === 0 && priv.selRange.to.col === instance.countCols() - 1 && instance.countCols() > 1)) {
	        isHeaderSelected = true;
	      }
	      if (coords.row < 0 || coords.col < 0) {
	        areCoordsPositive = false;
	      }
	      if (scrollToCell !== false && !isHeaderSelected && areCoordsPositive) {
	        if (priv.selRange.from && !selection.isMultiple()) {
	          instance.view.scrollViewport(priv.selRange.from);
	        } else {
	          instance.view.scrollViewport(coords);
	        }
	      }
	      selection.refreshBorders(null, keepEditorOpened);
	    },
	    refreshBorders: function(revertOriginal, keepEditor) {
	      if (!keepEditor) {
	        editorManager.destroyEditor(revertOriginal);
	      }
	      instance.view.render();
	      if (selection.isSelected() && !keepEditor) {
	        editorManager.prepareEditor();
	      }
	    },
	    isMultiple: function() {
	      var isMultiple = !(priv.selRange.to.col === priv.selRange.from.col && priv.selRange.to.row === priv.selRange.from.row),
	          modifier = Handsontable.hooks.run(instance, 'afterIsMultipleSelection', isMultiple);
	      if (isMultiple) {
	        return modifier;
	      }
	    },
	    transformStart: function(rowDelta, colDelta, force, keepEditorOpened) {
	      var delta = new WalkontableCellCoords(rowDelta, colDelta),
	          rowTransformDir = 0,
	          colTransformDir = 0,
	          totalRows,
	          totalCols,
	          coords,
	          fixedRowsBottom;
	      instance.runHooks('modifyTransformStart', delta);
	      totalRows = instance.countRows();
	      totalCols = instance.countCols();
	      fixedRowsBottom = instance.getSettings().fixedRowsBottom;
	      if (priv.selRange.highlight.row + rowDelta > totalRows - 1) {
	        if (force && priv.settings.minSpareRows > 0 && !(fixedRowsBottom && priv.selRange.highlight.row >= totalRows - fixedRowsBottom - 1)) {
	          instance.alter('insert_row', totalRows);
	          totalRows = instance.countRows();
	        } else if (priv.settings.autoWrapCol) {
	          delta.row = 1 - totalRows;
	          delta.col = priv.selRange.highlight.col + delta.col == totalCols - 1 ? 1 - totalCols : 1;
	        }
	      } else if (priv.settings.autoWrapCol && priv.selRange.highlight.row + delta.row < 0 && priv.selRange.highlight.col + delta.col >= 0) {
	        delta.row = totalRows - 1;
	        delta.col = priv.selRange.highlight.col + delta.col == 0 ? totalCols - 1 : -1;
	      }
	      if (priv.selRange.highlight.col + delta.col > totalCols - 1) {
	        if (force && priv.settings.minSpareCols > 0) {
	          instance.alter('insert_col', totalCols);
	          totalCols = instance.countCols();
	        } else if (priv.settings.autoWrapRow) {
	          delta.row = priv.selRange.highlight.row + delta.row == totalRows - 1 ? 1 - totalRows : 1;
	          delta.col = 1 - totalCols;
	        }
	      } else if (priv.settings.autoWrapRow && priv.selRange.highlight.col + delta.col < 0 && priv.selRange.highlight.row + delta.row >= 0) {
	        delta.row = priv.selRange.highlight.row + delta.row == 0 ? totalRows - 1 : -1;
	        delta.col = totalCols - 1;
	      }
	      coords = new WalkontableCellCoords(priv.selRange.highlight.row + delta.row, priv.selRange.highlight.col + delta.col);
	      if (coords.row < 0) {
	        rowTransformDir = -1;
	        coords.row = 0;
	      } else if (coords.row > 0 && coords.row >= totalRows) {
	        rowTransformDir = 1;
	        coords.row = totalRows - 1;
	      }
	      if (coords.col < 0) {
	        colTransformDir = -1;
	        coords.col = 0;
	      } else if (coords.col > 0 && coords.col >= totalCols) {
	        colTransformDir = 1;
	        coords.col = totalCols - 1;
	      }
	      instance.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);
	      selection.setRangeStart(coords, keepEditorOpened);
	    },
	    transformEnd: function(rowDelta, colDelta) {
	      var delta = new WalkontableCellCoords(rowDelta, colDelta),
	          rowTransformDir = 0,
	          colTransformDir = 0,
	          totalRows,
	          totalCols,
	          coords;
	      instance.runHooks('modifyTransformEnd', delta);
	      totalRows = instance.countRows();
	      totalCols = instance.countCols();
	      coords = new WalkontableCellCoords(priv.selRange.to.row + delta.row, priv.selRange.to.col + delta.col);
	      if (coords.row < 0) {
	        rowTransformDir = -1;
	        coords.row = 0;
	      } else if (coords.row > 0 && coords.row >= totalRows) {
	        rowTransformDir = 1;
	        coords.row = totalRows - 1;
	      }
	      if (coords.col < 0) {
	        colTransformDir = -1;
	        coords.col = 0;
	      } else if (coords.col > 0 && coords.col >= totalCols) {
	        colTransformDir = 1;
	        coords.col = totalCols - 1;
	      }
	      instance.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);
	      selection.setRangeEnd(coords, true);
	    },
	    isSelected: function() {
	      return (priv.selRange !== null);
	    },
	    inInSelection: function(coords) {
	      if (!selection.isSelected()) {
	        return false;
	      }
	      return priv.selRange.includes(coords);
	    },
	    deselect: function() {
	      if (!selection.isSelected()) {
	        return;
	      }
	      instance.selection.inProgress = false;
	      priv.selRange = null;
	      instance.view.wt.selections.current.clear();
	      instance.view.wt.selections.area.clear();
	      if (priv.settings.currentRowClassName || priv.settings.currentColClassName) {
	        instance.view.wt.selections.highlight.clear();
	      }
	      editorManager.destroyEditor();
	      selection.refreshBorders();
	      Handsontable.hooks.run(instance, 'afterDeselect');
	    },
	    selectAll: function() {
	      if (!priv.settings.multiSelect) {
	        return;
	      }
	      selection.setRangeStart(new WalkontableCellCoords(0, 0));
	      selection.setRangeEnd(new WalkontableCellCoords(instance.countRows() - 1, instance.countCols() - 1), false);
	    },
	    empty: function() {
	      if (!selection.isSelected()) {
	        return;
	      }
	      var topLeft = priv.selRange.getTopLeftCorner();
	      var bottomRight = priv.selRange.getBottomRightCorner();
	      var r,
	          c,
	          changes = [];
	      for (r = topLeft.row; r <= bottomRight.row; r++) {
	        for (c = topLeft.col; c <= bottomRight.col; c++) {
	          if (!instance.getCellMeta(r, c).readOnly) {
	            changes.push([r, c, '']);
	          }
	        }
	      }
	      instance.setDataAtCell(changes);
	    }
	  };
	  this.init = function() {
	    dataSource = new DataSource(instance, priv.settings.data);
	    Handsontable.hooks.run(instance, 'beforeInit');
	    if (Handsontable.mobileBrowser) {
	      addClass(instance.rootElement, 'mobile');
	    }
	    this.updateSettings(priv.settings, true);
	    this.view = new TableView(this);
	    editorManager = new EditorManager(instance, priv, selection, datamap);
	    this.forceFullRender = true;
	    Handsontable.hooks.run(instance, 'init');
	    this.view.render();
	    if (typeof priv.firstRun === 'object') {
	      Handsontable.hooks.run(instance, 'afterChange', priv.firstRun[0], priv.firstRun[1]);
	      priv.firstRun = false;
	    }
	    Handsontable.hooks.run(instance, 'afterInit');
	  };
	  function ValidatorsQueue() {
	    var resolved = false;
	    return {
	      validatorsInQueue: 0,
	      valid: true,
	      addValidatorToQueue: function() {
	        this.validatorsInQueue++;
	        resolved = false;
	      },
	      removeValidatorFormQueue: function() {
	        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;
	        this.checkIfQueueIsEmpty();
	      },
	      onQueueEmpty: function(valid) {},
	      checkIfQueueIsEmpty: function() {
	        if (this.validatorsInQueue == 0 && resolved == false) {
	          resolved = true;
	          this.onQueueEmpty(this.valid);
	        }
	      }
	    };
	  }
	  function validateChanges(changes, source, callback) {
	    var waitingForValidator = new ValidatorsQueue();
	    waitingForValidator.onQueueEmpty = resolve;
	    for (var i = changes.length - 1; i >= 0; i--) {
	      if (changes[i] === null) {
	        changes.splice(i, 1);
	      } else {
	        var row = changes[i][0];
	        var col = datamap.propToCol(changes[i][1]);
	        var logicalCol = instance.runHooks('modifyCol', col);
	        var cellProperties = instance.getCellMeta(row, logicalCol);
	        if (cellProperties.type === 'numeric' && typeof changes[i][3] === 'string') {
	          if (changes[i][3].length > 0 && (/^-?[\d\s]*(\.|\,)?\d*$/.test(changes[i][3]) || cellProperties.format)) {
	            var len = changes[i][3].length;
	            if (typeof cellProperties.language == 'undefined') {
	              numeral.language('en');
	            } else if (changes[i][3].indexOf('.') === len - 3 && changes[i][3].indexOf(',') === -1) {
	              numeral.language('en');
	            } else {
	              numeral.language(cellProperties.language);
	            }
	            if (numeral.validate(changes[i][3])) {
	              changes[i][3] = numeral().unformat(changes[i][3]);
	            }
	          }
	        }
	        if (instance.getCellValidator(cellProperties)) {
	          waitingForValidator.addValidatorToQueue();
	          instance.validateCell(changes[i][3], cellProperties, (function(i, cellProperties) {
	            return function(result) {
	              if (typeof result !== 'boolean') {
	                throw new Error('Validation error: result is not boolean');
	              }
	              if (result === false && cellProperties.allowInvalid === false) {
	                changes.splice(i, 1);
	                cellProperties.valid = true;
	                --i;
	              }
	              waitingForValidator.removeValidatorFormQueue();
	            };
	          })(i, cellProperties), source);
	        }
	      }
	    }
	    waitingForValidator.checkIfQueueIsEmpty();
	    function resolve() {
	      var beforeChangeResult;
	      if (changes.length) {
	        beforeChangeResult = Handsontable.hooks.run(instance, 'beforeChange', changes, source);
	        if (typeof beforeChangeResult === 'function') {
	          console.warn('Your beforeChange callback returns a function. It\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');
	        } else if (beforeChangeResult === false) {
	          changes.splice(0, changes.length);
	        }
	      }
	      callback();
	    }
	  }
	  function applyChanges(changes, source) {
	    var i = changes.length - 1;
	    if (i < 0) {
	      return;
	    }
	    for (; 0 <= i; i--) {
	      if (changes[i] === null) {
	        changes.splice(i, 1);
	        continue;
	      }
	      if (changes[i][2] == null && changes[i][3] == null) {
	        continue;
	      }
	      if (priv.settings.allowInsertRow) {
	        while (changes[i][0] > instance.countRows() - 1) {
	          datamap.createRow();
	        }
	      }
	      if (instance.dataType === 'array' && priv.settings.allowInsertColumn) {
	        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {
	          datamap.createCol();
	        }
	      }
	      datamap.set(changes[i][0], changes[i][1], changes[i][3]);
	    }
	    instance.forceFullRender = true;
	    grid.adjustRowsAndCols();
	    Handsontable.hooks.run(instance, 'beforeChangeRender', changes, source);
	    selection.refreshBorders(null, true);
	    instance.view.wt.wtOverlays.adjustElementsSize();
	    Handsontable.hooks.run(instance, 'afterChange', changes, source || 'edit');
	  }
	  this.validateCell = function(value, cellProperties, callback, source) {
	    var validator = instance.getCellValidator(cellProperties);
	    function done(valid) {
	      var col = cellProperties.physicalCol,
	          row = cellProperties.physicalRow,
	          td = instance.getCell(row, col, true);
	      if (td) {
	        instance.view.wt.wtSettings.settings.cellRenderer(row, col, td);
	      }
	      callback(valid);
	    }
	    if (Object.prototype.toString.call(validator) === '[object RegExp]') {
	      validator = (function(validator) {
	        return function(value, callback) {
	          callback(validator.test(value));
	        };
	      })(validator);
	    }
	    if (typeof validator == 'function') {
	      value = Handsontable.hooks.run(instance, 'beforeValidate', value, cellProperties.row, cellProperties.prop, source);
	      instance._registerTimeout(setTimeout(function() {
	        validator.call(cellProperties, value, function(valid) {
	          valid = Handsontable.hooks.run(instance, 'afterValidate', valid, value, cellProperties.row, cellProperties.prop, source);
	          cellProperties.valid = valid;
	          done(valid);
	          Handsontable.hooks.run(instance, 'postAfterValidate', valid, value, cellProperties.row, cellProperties.prop, source);
	        });
	      }, 0));
	    } else {
	      cellProperties.valid = true;
	      done(cellProperties.valid);
	    }
	  };
	  function setDataInputToArray(row, propOrCol, value) {
	    if (typeof row === 'object') {
	      return row;
	    } else {
	      return [[row, propOrCol, value]];
	    }
	  }
	  this.setDataAtCell = function(row, col, value, source) {
	    var input = setDataInputToArray(row, col, value),
	        i,
	        ilen,
	        changes = [],
	        prop;
	    for (i = 0, ilen = input.length; i < ilen; i++) {
	      if (typeof input[i] !== 'object') {
	        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');
	      }
	      if (typeof input[i][1] !== 'number') {
	        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`');
	      }
	      prop = datamap.colToProp(input[i][1]);
	      changes.push([input[i][0], prop, datamap.get(input[i][0], prop), input[i][2]]);
	    }
	    if (!source && typeof row === 'object') {
	      source = col;
	    }
	    validateChanges(changes, source, function() {
	      applyChanges(changes, source);
	    });
	  };
	  this.setDataAtRowProp = function(row, prop, value, source) {
	    var input = setDataInputToArray(row, prop, value),
	        i,
	        ilen,
	        changes = [];
	    for (i = 0, ilen = input.length; i < ilen; i++) {
	      changes.push([input[i][0], input[i][1], datamap.get(input[i][0], input[i][1]), input[i][2]]);
	    }
	    if (!source && typeof row === 'object') {
	      source = prop;
	    }
	    validateChanges(changes, source, function() {
	      applyChanges(changes, source);
	    });
	  };
	  this.listen = function() {
	    Handsontable.activeGuid = instance.guid;
	  };
	  this.unlisten = function() {
	    Handsontable.activeGuid = null;
	  };
	  this.isListening = function() {
	    return Handsontable.activeGuid === instance.guid;
	  };
	  this.destroyEditor = function(revertOriginal) {
	    selection.refreshBorders(revertOriginal);
	  };
	  this.populateFromArray = function(row, col, input, endRow, endCol, source, method, direction, deltas) {
	    var c;
	    if (!(typeof input === 'object' && typeof input[0] === 'object')) {
	      throw new Error('populateFromArray parameter `input` must be an array of arrays');
	    }
	    c = typeof endRow === 'number' ? new WalkontableCellCoords(endRow, endCol) : null;
	    return grid.populateFromArray(new WalkontableCellCoords(row, col), input, c, source, method, direction, deltas);
	  };
	  this.spliceCol = function(col, index, amount) {
	    return datamap.spliceCol.apply(datamap, arguments);
	  };
	  this.spliceRow = function(row, index, amount) {
	    return datamap.spliceRow.apply(datamap, arguments);
	  };
	  this.getSelected = function() {
	    if (selection.isSelected()) {
	      return [priv.selRange.from.row, priv.selRange.from.col, priv.selRange.to.row, priv.selRange.to.col];
	    }
	  };
	  this.getSelectedRange = function() {
	    if (selection.isSelected()) {
	      return priv.selRange;
	    }
	  };
	  this.render = function() {
	    if (instance.view) {
	      instance.renderCall = true;
	      instance.forceFullRender = true;
	      selection.refreshBorders(null, true);
	    }
	  };
	  this.loadData = function(data) {
	    if (typeof data === 'object' && data !== null) {
	      if (!(data.push && data.splice)) {
	        data = [data];
	      }
	    } else if (data === null) {
	      data = [];
	      var row;
	      for (var r = 0,
	          rlen = priv.settings.startRows; r < rlen; r++) {
	        row = [];
	        for (var c = 0,
	            clen = priv.settings.startCols; c < clen; c++) {
	          row.push(null);
	        }
	        data.push(row);
	      }
	    } else {
	      throw new Error('loadData only accepts array of objects or array of arrays (' + typeof data + ' given)');
	    }
	    priv.isPopulated = false;
	    GridSettings.prototype.data = data;
	    if (Array.isArray(priv.settings.dataSchema) || Array.isArray(data[0])) {
	      instance.dataType = 'array';
	    } else if (typeof priv.settings.dataSchema === 'function') {
	      instance.dataType = 'function';
	    } else {
	      instance.dataType = 'object';
	    }
	    datamap = new DataMap(instance, priv, GridSettings);
	    dataSource.data = data;
	    dataSource.dataType = instance.dataType;
	    dataSource.colToProp = datamap.colToProp.bind(datamap);
	    dataSource.propToCol = datamap.propToCol.bind(datamap);
	    clearCellSettingCache();
	    grid.adjustRowsAndCols();
	    Handsontable.hooks.run(instance, 'afterLoadData', priv.firstRun);
	    if (priv.firstRun) {
	      priv.firstRun = [null, 'loadData'];
	    } else {
	      Handsontable.hooks.run(instance, 'afterChange', null, 'loadData');
	      instance.render();
	    }
	    priv.isPopulated = true;
	    function clearCellSettingCache() {
	      priv.cellSettings.length = 0;
	    }
	  };
	  this.getData = function(r, c, r2, c2) {
	    if (typeof r === 'undefined') {
	      return datamap.getAll();
	    } else {
	      return datamap.getRange(new WalkontableCellCoords(r, c), new WalkontableCellCoords(r2, c2), datamap.DESTINATION_RENDERER);
	    }
	  };
	  this.getCopyableText = function(startRow, startCol, endRow, endCol) {
	    return datamap.getCopyableText(new WalkontableCellCoords(startRow, startCol), new WalkontableCellCoords(endRow, endCol));
	  };
	  this.getCopyableData = function(row, column) {
	    return datamap.getCopyable(row, datamap.colToProp(column));
	  };
	  this.getSchema = function() {
	    return datamap.getSchema();
	  };
	  this.updateSettings = function(settings, init) {
	    var i,
	        clen;
	    if (typeof settings.rows !== 'undefined') {
	      throw new Error('"rows" setting is no longer supported. do you mean startRows, minRows or maxRows?');
	    }
	    if (typeof settings.cols !== 'undefined') {
	      throw new Error('"cols" setting is no longer supported. do you mean startCols, minCols or maxCols?');
	    }
	    for (i in settings) {
	      if (i === 'data') {
	        continue;
	      } else {
	        if (Handsontable.hooks.getRegistered().indexOf(i) > -1) {
	          if (typeof settings[i] === 'function' || Array.isArray(settings[i])) {
	            instance.addHook(i, settings[i]);
	          }
	        } else {
	          if (!init && settings.hasOwnProperty(i)) {
	            GridSettings.prototype[i] = settings[i];
	          }
	        }
	      }
	    }
	    if (settings.data === void 0 && priv.settings.data === void 0) {
	      instance.loadData(null);
	    } else if (settings.data !== void 0) {
	      instance.loadData(settings.data);
	    } else if (settings.columns !== void 0) {
	      datamap.createMap();
	    }
	    clen = instance.countCols();
	    priv.cellSettings.length = 0;
	    if (clen > 0) {
	      var proto,
	          column;
	      for (i = 0; i < clen; i++) {
	        priv.columnSettings[i] = columnFactory(GridSettings, priv.columnsSettingConflicts);
	        proto = priv.columnSettings[i].prototype;
	        if (GridSettings.prototype.columns) {
	          column = GridSettings.prototype.columns[i];
	          extend(proto, column);
	          extend(proto, expandType(column));
	        }
	      }
	    }
	    if (typeof settings.cell !== 'undefined') {
	      for (i in settings.cell) {
	        if (settings.cell.hasOwnProperty(i)) {
	          var cell = settings.cell[i];
	          instance.setCellMetaObject(cell.row, cell.col, cell);
	        }
	      }
	    }
	    Handsontable.hooks.run(instance, 'afterCellMetaReset');
	    if (typeof settings.className !== 'undefined') {
	      if (GridSettings.prototype.className) {
	        removeClass(instance.rootElement, GridSettings.prototype.className);
	      }
	      if (settings.className) {
	        addClass(instance.rootElement, settings.className);
	      }
	    }
	    if (typeof settings.height != 'undefined') {
	      var height = settings.height;
	      if (typeof height == 'function') {
	        height = height();
	      }
	      instance.rootElement.style.height = height + 'px';
	    }
	    if (typeof settings.width != 'undefined') {
	      var width = settings.width;
	      if (typeof width == 'function') {
	        width = width();
	      }
	      instance.rootElement.style.width = width + 'px';
	    }
	    if (height) {
	      instance.rootElement.style.overflow = 'hidden';
	    }
	    if (!init) {
	      Handsontable.hooks.run(instance, 'afterUpdateSettings');
	    }
	    grid.adjustRowsAndCols();
	    if (instance.view && !priv.firstRun) {
	      instance.forceFullRender = true;
	      selection.refreshBorders(null, true);
	    }
	  };
	  this.getValue = function() {
	    var sel = instance.getSelected();
	    if (GridSettings.prototype.getValue) {
	      if (typeof GridSettings.prototype.getValue === 'function') {
	        return GridSettings.prototype.getValue.call(instance);
	      } else if (sel) {
	        return instance.getData()[sel[0]][GridSettings.prototype.getValue];
	      }
	    } else if (sel) {
	      return instance.getDataAtCell(sel[0], sel[1]);
	    }
	  };
	  function expandType(obj) {
	    if (!obj.hasOwnProperty('type')) {
	      return;
	    }
	    var type,
	        expandedType = {};
	    if (typeof obj.type === 'object') {
	      type = obj.type;
	    } else if (typeof obj.type === 'string') {
	      type = Handsontable.cellTypes[obj.type];
	      if (type === void 0) {
	        throw new Error('You declared cell type "' + obj.type + '" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');
	      }
	    }
	    for (var i in type) {
	      if (type.hasOwnProperty(i) && !obj.hasOwnProperty(i)) {
	        expandedType[i] = type[i];
	      }
	    }
	    return expandedType;
	  }
	  this.getSettings = function() {
	    return priv.settings;
	  };
	  this.clear = function() {
	    selection.selectAll();
	    selection.empty();
	  };
	  this.alter = function(action, index, amount, source, keepEmptyRows) {
	    grid.alter(action, index, amount, source, keepEmptyRows);
	  };
	  this.getCell = function(row, col, topmost) {
	    return instance.view.getCellAtCoords(new WalkontableCellCoords(row, col), topmost);
	  };
	  this.getCoords = function(elem) {
	    return this.view.wt.wtTable.getCoords.call(this.view.wt.wtTable, elem);
	  };
	  this.colToProp = function(col) {
	    return datamap.colToProp(col);
	  };
	  this.propToCol = function(prop) {
	    return datamap.propToCol(prop);
	  };
	  this.getDataAtCell = function(row, col) {
	    return datamap.get(row, datamap.colToProp(col));
	  };
	  this.getDataAtRowProp = function(row, prop) {
	    return datamap.get(row, prop);
	  };
	  this.getDataAtCol = function(col) {
	    var out = [];
	    return out.concat.apply(out, datamap.getRange(new WalkontableCellCoords(0, col), new WalkontableCellCoords(priv.settings.data.length - 1, col), datamap.DESTINATION_RENDERER));
	  };
	  this.getDataAtProp = function(prop) {
	    var out = [],
	        range;
	    range = datamap.getRange(new WalkontableCellCoords(0, datamap.propToCol(prop)), new WalkontableCellCoords(priv.settings.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);
	    return out.concat.apply(out, range);
	  };
	  this.getSourceData = function(r, c, r2, c2) {
	    var data;
	    if (r === void 0) {
	      data = dataSource.getData();
	    } else {
	      data = dataSource.getByRange(new WalkontableCellCoords(r, c), new WalkontableCellCoords(r2, c2));
	    }
	    return data;
	  };
	  this.getSourceDataAtCol = function(column) {
	    return dataSource.getAtColumn(column);
	  };
	  this.getSourceDataAtRow = function(row) {
	    return dataSource.getAtRow(row);
	  };
	  this.getSourceDataAtCell = function(row, column) {
	    return dataSource.getAtCell(row, column);
	  };
	  this.getDataAtRow = function(row) {
	    var data = datamap.getRange(new WalkontableCellCoords(row, 0), new WalkontableCellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);
	    return data[0];
	  };
	  this.getDataType = function(rowFrom, columnFrom, rowTo, columnTo) {
	    var $__19 = this;
	    var previousType = null;
	    var currentType = null;
	    if (rowFrom === void 0) {
	      rowFrom = 0;
	      rowTo = this.countRows();
	      columnFrom = 0;
	      columnTo = this.countCols();
	    }
	    if (rowTo === void 0) {
	      rowTo = rowFrom;
	    }
	    if (columnTo === void 0) {
	      columnTo = columnFrom;
	    }
	    var type = 'mixed';
	    rangeEach(Math.min(rowFrom, rowTo), Math.max(rowFrom, rowTo), (function(row) {
	      var isTypeEqual = true;
	      rangeEach(Math.min(columnFrom, columnTo), Math.max(columnFrom, columnTo), (function(column) {
	        var cellType = $__19.getCellMeta(row, column);
	        currentType = cellType.type;
	        if (previousType) {
	          isTypeEqual = previousType === currentType;
	        } else {
	          previousType = currentType;
	        }
	        return isTypeEqual;
	      }));
	      type = isTypeEqual ? currentType : 'mixed';
	      return isTypeEqual;
	    }));
	    return type;
	  };
	  this.removeCellMeta = function(row, col, key) {
	    var cellMeta = instance.getCellMeta(row, col);
	    if (cellMeta[key] != undefined) {
	      delete priv.cellSettings[row][col][key];
	    }
	  };
	  this.setCellMetaObject = function(row, col, prop) {
	    if (typeof prop === 'object') {
	      for (var key in prop) {
	        if (prop.hasOwnProperty(key)) {
	          var value = prop[key];
	          this.setCellMeta(row, col, key, value);
	        }
	      }
	    }
	  };
	  this.setCellMeta = function(row, col, key, val) {
	    if (!priv.cellSettings[row]) {
	      priv.cellSettings[row] = [];
	    }
	    if (!priv.cellSettings[row][col]) {
	      priv.cellSettings[row][col] = new priv.columnSettings[col]();
	    }
	    priv.cellSettings[row][col][key] = val;
	    Handsontable.hooks.run(instance, 'afterSetCellMeta', row, col, key, val);
	  };
	  this.getCellsMeta = function() {
	    return arrayFlatten(priv.cellSettings);
	  };
	  this.getCellMeta = function(row, col) {
	    var prop = datamap.colToProp(col),
	        cellProperties;
	    var physicalRow = row;
	    var physicalCol = col;
	    row = translateRowIndex(row);
	    col = translateColIndex(col);
	    if (!priv.columnSettings[col]) {
	      priv.columnSettings[col] = columnFactory(GridSettings, priv.columnsSettingConflicts);
	    }
	    if (!priv.cellSettings[row]) {
	      priv.cellSettings[row] = [];
	    }
	    if (!priv.cellSettings[row][col]) {
	      priv.cellSettings[row][col] = new priv.columnSettings[col]();
	    }
	    cellProperties = priv.cellSettings[row][col];
	    cellProperties.row = row;
	    cellProperties.col = col;
	    cellProperties.physicalRow = physicalRow;
	    cellProperties.physicalCol = physicalCol;
	    cellProperties.prop = prop;
	    cellProperties.instance = instance;
	    Handsontable.hooks.run(instance, 'beforeGetCellMeta', row, col, cellProperties);
	    extend(cellProperties, expandType(cellProperties));
	    if (cellProperties.cells) {
	      var settings = cellProperties.cells.call(cellProperties, row, col, prop);
	      if (settings) {
	        extend(cellProperties, settings);
	        extend(cellProperties, expandType(settings));
	      }
	    }
	    Handsontable.hooks.run(instance, 'afterGetCellMeta', row, col, cellProperties);
	    return cellProperties;
	  };
	  this.isColumnModificationAllowed = function() {
	    return !(instance.dataType === 'object' || instance.getSettings().columns);
	  };
	  function translateRowIndex(row) {
	    return Handsontable.hooks.run(instance, 'modifyRow', row);
	  }
	  function translateColIndex(col) {
	    return Handsontable.hooks.run(instance, 'modifyCol', col);
	  }
	  var rendererLookup = cellMethodLookupFactory('renderer');
	  this.getCellRenderer = function(row, col) {
	    var renderer = rendererLookup.call(this, row, col);
	    return getRenderer(renderer);
	  };
	  this.getCellEditor = cellMethodLookupFactory('editor');
	  this.getCellValidator = cellMethodLookupFactory('validator');
	  this.validateCells = function(callback) {
	    var waitingForValidator = new ValidatorsQueue();
	    waitingForValidator.onQueueEmpty = callback;
	    var i = instance.countRows() - 1;
	    while (i >= 0) {
	      var j = instance.countCols() - 1;
	      while (j >= 0) {
	        waitingForValidator.addValidatorToQueue();
	        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function(result) {
	          if (typeof result !== 'boolean') {
	            throw new Error('Validation error: result is not boolean');
	          }
	          if (result === false) {
	            waitingForValidator.valid = false;
	          }
	          waitingForValidator.removeValidatorFormQueue();
	        }, 'validateCells');
	        j--;
	      }
	      i--;
	    }
	    waitingForValidator.checkIfQueueIsEmpty();
	  };
	  this.getRowHeader = function(row) {
	    var rowHeader = priv.settings.rowHeaders;
	    if (row !== void 0) {
	      row = Handsontable.hooks.run(instance, 'modifyRowHeader', row);
	    }
	    if (row === void 0) {
	      rowHeader = [];
	      rangeEach(instance.countRows() - 1, (function(i) {
	        rowHeader.push(instance.getRowHeader(i));
	      }));
	    } else if (Array.isArray(rowHeader) && rowHeader[row] !== void 0) {
	      rowHeader = rowHeader[row];
	    } else if (typeof rowHeader === 'function') {
	      rowHeader = rowHeader(row);
	    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {
	      rowHeader = row + 1;
	    }
	    return rowHeader;
	  };
	  this.hasRowHeaders = function() {
	    return !!priv.settings.rowHeaders;
	  };
	  this.hasColHeaders = function() {
	    if (priv.settings.colHeaders !== void 0 && priv.settings.colHeaders !== null) {
	      return !!priv.settings.colHeaders;
	    }
	    for (var i = 0,
	        ilen = instance.countCols(); i < ilen; i++) {
	      if (instance.getColHeader(i)) {
	        return true;
	      }
	    }
	    return false;
	  };
	  this.getColHeader = function(col) {
	    col = Handsontable.hooks.run(instance, 'modifyColHeader', col);
	    if (col === void 0) {
	      var out = [];
	      for (var i = 0,
	          ilen = instance.countCols(); i < ilen; i++) {
	        out.push(instance.getColHeader(i));
	      }
	      return out;
	    } else {
	      var baseCol = col;
	      col = Handsontable.hooks.run(instance, 'modifyCol', col);
	      if (priv.settings.columns && priv.settings.columns[col] && priv.settings.columns[col].title) {
	        return priv.settings.columns[col].title;
	      } else if (Array.isArray(priv.settings.colHeaders) && priv.settings.colHeaders[col] !== void 0) {
	        return priv.settings.colHeaders[col];
	      } else if (typeof priv.settings.colHeaders === 'function') {
	        return priv.settings.colHeaders(col);
	      } else if (priv.settings.colHeaders && typeof priv.settings.colHeaders !== 'string' && typeof priv.settings.colHeaders !== 'number') {
	        return spreadsheetColumnLabel(baseCol);
	      } else {
	        return priv.settings.colHeaders;
	      }
	    }
	  };
	  this._getColWidthFromSettings = function(col) {
	    var cellProperties = instance.getCellMeta(0, col);
	    var width = cellProperties.width;
	    if (width === void 0 || width === priv.settings.width) {
	      width = cellProperties.colWidths;
	    }
	    if (width !== void 0 && width !== null) {
	      switch (typeof width) {
	        case 'object':
	          width = width[col];
	          break;
	        case 'function':
	          width = width(col);
	          break;
	      }
	      if (typeof width === 'string') {
	        width = parseInt(width, 10);
	      }
	    }
	    return width;
	  };
	  this.getColWidth = function(col) {
	    var width = instance._getColWidthFromSettings(col);
	    width = Handsontable.hooks.run(instance, 'modifyColWidth', width, col);
	    if (width === void 0) {
	      width = WalkontableViewportColumnsCalculator.DEFAULT_WIDTH;
	    }
	    return width;
	  };
	  this._getRowHeightFromSettings = function(row) {
	    var height = priv.settings.rowHeights;
	    if (height !== void 0 && height !== null) {
	      switch (typeof height) {
	        case 'object':
	          height = height[row];
	          break;
	        case 'function':
	          height = height(row);
	          break;
	      }
	      if (typeof height === 'string') {
	        height = parseInt(height, 10);
	      }
	    }
	    return height;
	  };
	  this.getRowHeight = function(row) {
	    var height = instance._getRowHeightFromSettings(row);
	    height = Handsontable.hooks.run(instance, 'modifyRowHeight', height, row);
	    return height;
	  };
	  this.countSourceRows = function() {
	    return instance.getSourceData() ? instance.getSourceData().length : 0;
	  };
	  this.countRows = function() {
	    return datamap.getLength();
	  };
	  this.countCols = function() {
	    if (instance.dataType === 'object' || instance.dataType === 'function') {
	      if (priv.settings.columns && priv.settings.columns.length) {
	        return priv.settings.columns.length;
	      } else {
	        return datamap.colToPropCache.length;
	      }
	    } else if (instance.dataType === 'array') {
	      if (priv.settings.columns && priv.settings.columns.length) {
	        return priv.settings.columns.length;
	      } else if (priv.settings.data && priv.settings.data[0] && priv.settings.data[0].length) {
	        return priv.settings.data[0].length;
	      } else {
	        return 0;
	      }
	    }
	  };
	  this.getColspanOffset = function(col, level) {
	    var colspanSum = 0;
	    if (instance.colspanArray) {
	      for (var i = 0; i < col; i++) {
	        colspanSum += instance.colspanArray[level][i] - 1 || 0;
	      }
	      return colspanSum;
	    }
	    var colspanSum = 0;
	    var TRindex = instance.view.wt.wtTable.THEAD.childNodes.length - level - 1;
	    var TR = instance.view.wt.wtTable.THEAD.querySelector('tr:nth-child(' + parseInt(TRindex + 1, 10) + ')');
	    var rowHeadersCount = instance.view.wt.wtSettings.settings.rowHeaders().length;
	    for (var i = rowHeadersCount; i < rowHeadersCount + col; i++) {
	      if (TR.childNodes[i].hasAttribute('colspan')) {
	        colspanSum += parseInt(TR.childNodes[i].getAttribute('colspan'), 10) - 1;
	      }
	    }
	    return colspanSum;
	  };
	  this.getHeaderColspan = function(col, level) {
	    var TRindex = instance.view.wt.wtTable.THEAD.childNodes.length - level - 1;
	    var rowHeadersCount = instance.view.wt.wtSettings.settings.rowHeaders().length;
	    var TR = instance.view.wt.wtTable.THEAD.querySelector('tr:nth-child(' + parseInt(TRindex + 1, 10) + ')');
	    var offsettedColIndex = rowHeadersCount + col - instance.view.wt.wtViewport.columnsRenderCalculator.startColumn;
	    if (TR.childNodes[offsettedColIndex].hasAttribute('colspan')) {
	      return parseInt(TR.childNodes[offsettedColIndex].getAttribute('colspan'), 10);
	    }
	    return 0;
	  };
	  this.rowOffset = function() {
	    return instance.view.wt.wtTable.getFirstRenderedRow();
	  };
	  this.colOffset = function() {
	    return instance.view.wt.wtTable.getFirstRenderedColumn();
	  };
	  this.countRenderedRows = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedRowsCount() : -1;
	  };
	  this.countVisibleRows = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleRowsCount() : -1;
	  };
	  this.countRenderedCols = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedColumnsCount() : -1;
	  };
	  this.countVisibleCols = function() {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleColumnsCount() : -1;
	  };
	  this.countEmptyRows = function(ending) {
	    var i = instance.countRows() - 1,
	        empty = 0,
	        row;
	    while (i >= 0) {
	      row = Handsontable.hooks.run(this, 'modifyRow', i);
	      if (instance.isEmptyRow(row)) {
	        empty++;
	      } else if (ending) {
	        break;
	      }
	      i--;
	    }
	    return empty;
	  };
	  this.countEmptyCols = function(ending) {
	    if (instance.countRows() < 1) {
	      return 0;
	    }
	    var i = instance.countCols() - 1,
	        empty = 0;
	    while (i >= 0) {
	      if (instance.isEmptyCol(i)) {
	        empty++;
	      } else if (ending) {
	        break;
	      }
	      i--;
	    }
	    return empty;
	  };
	  this.isEmptyRow = function(row) {
	    return priv.settings.isEmptyRow.call(instance, row);
	  };
	  this.isEmptyCol = function(col) {
	    return priv.settings.isEmptyCol.call(instance, col);
	  };
	  this.selectCell = function(row, col, endRow, endCol, scrollToCell, changeListener) {
	    var coords;
	    changeListener = typeof changeListener === 'undefined' || changeListener === true;
	    if (typeof row !== 'number' || row < 0 || row >= instance.countRows()) {
	      return false;
	    }
	    if (typeof col !== 'number' || col < 0 || col >= instance.countCols()) {
	      return false;
	    }
	    if (typeof endRow !== 'undefined') {
	      if (typeof endRow !== 'number' || endRow < 0 || endRow >= instance.countRows()) {
	        return false;
	      }
	      if (typeof endCol !== 'number' || endCol < 0 || endCol >= instance.countCols()) {
	        return false;
	      }
	    }
	    coords = new WalkontableCellCoords(row, col);
	    priv.selRange = new WalkontableCellRange(coords, coords, coords);
	    if (changeListener) {
	      instance.listen();
	    }
	    if (typeof endRow === 'undefined') {
	      selection.setRangeEnd(priv.selRange.from, scrollToCell);
	    } else {
	      selection.setRangeEnd(new WalkontableCellCoords(endRow, endCol), scrollToCell);
	    }
	    instance.selection.finish();
	    return true;
	  };
	  this.selectCellByProp = function(row, prop, endRow, endProp, scrollToCell) {
	    arguments[1] = datamap.propToCol(arguments[1]);
	    if (typeof arguments[3] !== 'undefined') {
	      arguments[3] = datamap.propToCol(arguments[3]);
	    }
	    return instance.selectCell.apply(instance, arguments);
	  };
	  this.deselectCell = function() {
	    selection.deselect();
	  };
	  this.destroy = function() {
	    instance._clearTimeouts();
	    if (instance.view) {
	      instance.view.destroy();
	    }
	    if (dataSource) {
	      dataSource.destroy();
	    }
	    dataSource = null;
	    empty(instance.rootElement);
	    eventManager.destroy();
	    Handsontable.hooks.run(instance, 'afterDestroy');
	    Handsontable.hooks.destroy(instance);
	    for (var i in instance) {
	      if (instance.hasOwnProperty(i)) {
	        if (typeof instance[i] === 'function') {
	          instance[i] = postMortem;
	        } else if (i !== 'guid') {
	          instance[i] = null;
	        }
	      }
	    }
	    priv = null;
	    datamap = null;
	    grid = null;
	    selection = null;
	    editorManager = null;
	    instance = null;
	    GridSettings = null;
	  };
	  function postMortem() {
	    throw new Error('This method cannot be called because this Handsontable instance has been destroyed');
	  }
	  this.getActiveEditor = function() {
	    return editorManager.getActiveEditor();
	  };
	  this.getPlugin = function(pluginName) {
	    return getPlugin(this, pluginName);
	  };
	  this.getInstance = function() {
	    return instance;
	  };
	  this.addHook = function(key, callback) {
	    Handsontable.hooks.add(key, callback, instance);
	  };
	  this.addHookOnce = function(key, callback) {
	    Handsontable.hooks.once(key, callback, instance);
	  };
	  this.removeHook = function(key, callback) {
	    Handsontable.hooks.remove(key, callback, instance);
	  };
	  this.runHooks = function(key, p1, p2, p3, p4, p5, p6) {
	    return Handsontable.hooks.run(instance, key, p1, p2, p3, p4, p5, p6);
	  };
	  this.timeouts = [];
	  this._registerTimeout = function(handle) {
	    this.timeouts.push(handle);
	  };
	  this._clearTimeouts = function() {
	    for (var i = 0,
	        ilen = this.timeouts.length; i < ilen; i++) {
	      clearTimeout(this.timeouts[i]);
	    }
	  };
	  this.version = Handsontable.version;
	  Handsontable.hooks.run(instance, 'construct');
	};
	var DefaultSettings = function() {};
	DefaultSettings.prototype = {
	  data: void 0,
	  dataSchema: void 0,
	  width: void 0,
	  height: void 0,
	  startRows: 5,
	  startCols: 5,
	  rowHeaders: null,
	  colHeaders: null,
	  colWidths: void 0,
	  rowHeights: void 0,
	  columns: void 0,
	  cells: void 0,
	  cell: [],
	  comments: false,
	  customBorders: false,
	  minRows: 0,
	  minCols: 0,
	  maxRows: Infinity,
	  maxCols: Infinity,
	  minSpareRows: 0,
	  minSpareCols: 0,
	  allowInsertRow: true,
	  allowInsertColumn: true,
	  allowRemoveRow: true,
	  allowRemoveColumn: true,
	  multiSelect: true,
	  fillHandle: true,
	  fixedRowsTop: 0,
	  fixedRowsBottom: 0,
	  fixedColumnsLeft: 0,
	  outsideClickDeselects: true,
	  enterBeginsEditing: true,
	  enterMoves: {
	    row: 1,
	    col: 0
	  },
	  tabMoves: {
	    row: 0,
	    col: 1
	  },
	  autoWrapRow: false,
	  autoWrapCol: false,
	  copyRowsLimit: 1000,
	  copyColsLimit: 1000,
	  pasteMode: 'overwrite',
	  persistentState: false,
	  currentRowClassName: void 0,
	  currentColClassName: void 0,
	  className: void 0,
	  tableClassName: void 0,
	  stretchH: 'none',
	  isEmptyRow: function(row) {
	    var col,
	        colLen,
	        value,
	        meta;
	    for (col = 0, colLen = this.countCols(); col < colLen; col++) {
	      value = this.getDataAtCell(row, col);
	      if (value !== '' && value !== null && typeof value !== 'undefined') {
	        if (typeof value === 'object') {
	          meta = this.getCellMeta(row, col);
	          return isObjectEquals(this.getSchema()[meta.prop], value);
	        }
	        return false;
	      }
	    }
	    return true;
	  },
	  isEmptyCol: function(col) {
	    var row,
	        rowLen,
	        value;
	    for (row = 0, rowLen = this.countRows(); row < rowLen; row++) {
	      value = this.getDataAtCell(row, col);
	      if (value !== '' && value !== null && typeof value !== 'undefined') {
	        return false;
	      }
	    }
	    return true;
	  },
	  observeDOMVisibility: true,
	  allowInvalid: true,
	  invalidCellClassName: 'htInvalid',
	  placeholder: false,
	  placeholderCellClassName: 'htPlaceholder',
	  readOnlyCellClassName: 'htDimmed',
	  renderer: void 0,
	  commentedCellClassName: 'htCommentCell',
	  fragmentSelection: false,
	  readOnly: false,
	  skipColumnOnPaste: false,
	  search: false,
	  type: 'text',
	  copyable: true,
	  editor: void 0,
	  autoComplete: void 0,
	  visibleRows: 10,
	  trimDropdown: true,
	  debug: false,
	  wordWrap: true,
	  noWordWrapClassName: 'htNoWrap',
	  contextMenu: void 0,
	  contextMenuCopyPaste: void 0,
	  copyPaste: void 0,
	  undo: void 0,
	  columnSorting: void 0,
	  manualColumnMove: void 0,
	  manualColumnResize: void 0,
	  manualRowMove: void 0,
	  manualRowResize: void 0,
	  mergeCells: false,
	  viewportRowRenderingOffset: 'auto',
	  viewportColumnRenderingOffset: 'auto',
	  validator: void 0,
	  disableVisualSelection: false,
	  sortIndicator: false,
	  manualColumnFreeze: void 0,
	  trimWhitespace: true,
	  settings: void 0,
	  source: void 0,
	  title: void 0,
	  checkedTemplate: void 0,
	  uncheckedTemplate: void 0,
	  label: void 0,
	  format: void 0,
	  language: void 0,
	  selectOptions: void 0,
	  autoColumnSize: void 0,
	  autoRowSize: void 0,
	  dateFormat: void 0,
	  correctFormat: false,
	  defaultDate: void 0,
	  strict: void 0,
	  renderAllRows: void 0
	};
	Handsontable.DefaultSettings = DefaultSettings;

	//# 
	},{"3rdparty/walkontable/src/calculator/viewportColumns":3,"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/selection":18,"dataMap":26,"dataSource":27,"editorManager":28,"eventManager":41,"helpers/array":42,"helpers/data":44,"helpers/dom/element":45,"helpers/number":49,"helpers/object":50,"helpers/setting":51,"helpers/string":52,"numeral":"numeral","plugins":57,"renderers":88,"tableView":97}],26:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DataMap: {get: function() {
	      return DataMap;
	    }},
	  __esModule: {value: true}
	});
	var $__SheetClip__,
	    $__helpers_47_data__,
	    $__helpers_47_setting__,
	    $__helpers_47_object__,
	    $__helpers_47_array__,
	    $__helpers_47_number__,
	    $__multiMap__;
	var SheetClip = ($__SheetClip__ = require("SheetClip"), $__SheetClip__ && $__SheetClip__.__esModule && $__SheetClip__ || {default: $__SheetClip__}).default;
	var cellMethodLookupFactory = ($__helpers_47_data__ = require("helpers/data"), $__helpers_47_data__ && $__helpers_47_data__.__esModule && $__helpers_47_data__ || {default: $__helpers_47_data__}).cellMethodLookupFactory;
	var columnFactory = ($__helpers_47_setting__ = require("helpers/setting"), $__helpers_47_setting__ && $__helpers_47_setting__.__esModule && $__helpers_47_setting__ || {default: $__helpers_47_setting__}).columnFactory;
	var $__3 = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}),
	    duckSchema = $__3.duckSchema,
	    deepExtend = $__3.deepExtend;
	var $__4 = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__}),
	    extendArray = $__4.extendArray,
	    to2dArray = $__4.to2dArray;
	var rangeEach = ($__helpers_47_number__ = require("helpers/number"), $__helpers_47_number__ && $__helpers_47_number__.__esModule && $__helpers_47_number__ || {default: $__helpers_47_number__}).rangeEach;
	var MultiMap = ($__multiMap__ = require("multiMap"), $__multiMap__ && $__multiMap__.__esModule && $__multiMap__ || {default: $__multiMap__}).MultiMap;
	function DataMap(instance, priv, GridSettings) {
	  this.instance = instance;
	  this.priv = priv;
	  this.GridSettings = GridSettings;
	  this.dataSource = this.instance.getSettings().data;
	  if (this.dataSource[0]) {
	    this.duckSchema = this.recursiveDuckSchema(this.dataSource[0]);
	  } else {
	    this.duckSchema = {};
	  }
	  this.createMap();
	}
	DataMap.prototype.DESTINATION_RENDERER = 1;
	DataMap.prototype.DESTINATION_CLIPBOARD_GENERATOR = 2;
	DataMap.prototype.recursiveDuckSchema = function(object) {
	  return duckSchema(object);
	};
	DataMap.prototype.recursiveDuckColumns = function(schema, lastCol, parent) {
	  var prop,
	      i;
	  if (typeof lastCol === 'undefined') {
	    lastCol = 0;
	    parent = '';
	  }
	  if (typeof schema === 'object' && !Array.isArray(schema)) {
	    for (i in schema) {
	      if (schema.hasOwnProperty(i)) {
	        if (schema[i] === null) {
	          prop = parent + i;
	          this.colToPropCache.push(prop);
	          this.propToColCache.set(prop, lastCol);
	          lastCol++;
	        } else {
	          lastCol = this.recursiveDuckColumns(schema[i], lastCol, i + '.');
	        }
	      }
	    }
	  }
	  return lastCol;
	};
	DataMap.prototype.createMap = function() {
	  var i,
	      ilen,
	      schema = this.getSchema();
	  if (typeof schema === 'undefined') {
	    throw new Error('trying to create `columns` definition but you didnt\' provide `schema` nor `data`');
	  }
	  this.colToPropCache = [];
	  this.propToColCache = new MultiMap();
	  var columns = this.instance.getSettings().columns;
	  if (columns) {
	    for (i = 0, ilen = columns.length; i < ilen; i++) {
	      if (typeof columns[i].data != 'undefined') {
	        this.colToPropCache[i] = columns[i].data;
	        this.propToColCache.set(columns[i].data, i);
	      }
	    }
	  } else {
	    this.recursiveDuckColumns(schema);
	  }
	};
	DataMap.prototype.colToProp = function(col) {
	  col = Handsontable.hooks.run(this.instance, 'modifyCol', col);
	  if (this.colToPropCache && typeof this.colToPropCache[col] !== 'undefined') {
	    return this.colToPropCache[col];
	  }
	  return col;
	};
	DataMap.prototype.propToCol = function(prop) {
	  var col;
	  if (typeof this.propToColCache.get(prop) === 'undefined') {
	    col = prop;
	  } else {
	    col = this.propToColCache.get(prop);
	  }
	  col = Handsontable.hooks.run(this.instance, 'modifyCol', col);
	  return col;
	};
	DataMap.prototype.getSchema = function() {
	  var schema = this.instance.getSettings().dataSchema;
	  if (schema) {
	    if (typeof schema === 'function') {
	      return schema();
	    }
	    return schema;
	  }
	  return this.duckSchema;
	};
	DataMap.prototype.createRow = function(index, amount, createdAutomatically) {
	  var row,
	      colCount = this.instance.countCols(),
	      numberOfCreatedRows = 0,
	      currentIndex;
	  if (!amount) {
	    amount = 1;
	  }
	  if (typeof index !== 'number' || index >= this.instance.countSourceRows()) {
	    index = this.instance.countSourceRows();
	  }
	  currentIndex = index;
	  var maxRows = this.instance.getSettings().maxRows;
	  while (numberOfCreatedRows < amount && this.instance.countSourceRows() < maxRows) {
	    if (this.instance.dataType === 'array') {
	      row = [];
	      for (var c = 0; c < colCount; c++) {
	        row.push(null);
	      }
	    } else if (this.instance.dataType === 'function') {
	      row = this.instance.getSettings().dataSchema(index);
	    } else {
	      row = {};
	      deepExtend(row, this.getSchema());
	    }
	    if (index === this.instance.countSourceRows()) {
	      this.dataSource.push(row);
	    } else {
	      this.dataSource.splice(index, 0, row);
	    }
	    numberOfCreatedRows++;
	    currentIndex++;
	  }
	  Handsontable.hooks.run(this.instance, 'afterCreateRow', index, numberOfCreatedRows, createdAutomatically);
	  this.instance.forceFullRender = true;
	  return numberOfCreatedRows;
	};
	DataMap.prototype.createCol = function(index, amount, createdAutomatically) {
	  if (!this.instance.isColumnModificationAllowed()) {
	    throw new Error('Cannot create new column. When data source in an object, ' + 'you can only have as much columns as defined in first data row, data schema or in the \'columns\' setting.' + 'If you want to be able to add new columns, you have to use array datasource.');
	  }
	  var rlen = this.instance.countSourceRows(),
	      data = this.dataSource,
	      constructor,
	      numberOfCreatedCols = 0,
	      currentIndex;
	  if (!amount) {
	    amount = 1;
	  }
	  currentIndex = index;
	  var maxCols = this.instance.getSettings().maxCols;
	  while (numberOfCreatedCols < amount && this.instance.countCols() < maxCols) {
	    constructor = columnFactory(this.GridSettings, this.priv.columnsSettingConflicts);
	    if (typeof index !== 'number' || index >= this.instance.countCols()) {
	      for (var r = 0; r < rlen; r++) {
	        if (typeof data[r] === 'undefined') {
	          data[r] = [];
	        }
	        data[r].push(null);
	      }
	      this.priv.columnSettings.push(constructor);
	    } else {
	      for (var r = 0; r < rlen; r++) {
	        data[r].splice(currentIndex, 0, null);
	      }
	      this.priv.columnSettings.splice(currentIndex, 0, constructor);
	    }
	    numberOfCreatedCols++;
	    currentIndex++;
	  }
	  Handsontable.hooks.run(this.instance, 'afterCreateCol', index, numberOfCreatedCols, createdAutomatically);
	  this.instance.forceFullRender = true;
	  return numberOfCreatedCols;
	};
	DataMap.prototype.removeRow = function(index, amount) {
	  if (!amount) {
	    amount = 1;
	  }
	  if (typeof index !== 'number') {
	    index = -amount;
	  }
	  index = (this.instance.countSourceRows() + index) % this.instance.countSourceRows();
	  var logicRows = this.physicalRowsToLogical(index, amount);
	  var actionWasNotCancelled = Handsontable.hooks.run(this.instance, 'beforeRemoveRow', index, amount, logicRows);
	  if (actionWasNotCancelled === false) {
	    return;
	  }
	  var data = this.dataSource;
	  var newData = data.filter(function(row, index) {
	    return logicRows.indexOf(index) == -1;
	  });
	  data.length = 0;
	  Array.prototype.push.apply(data, newData);
	  Handsontable.hooks.run(this.instance, 'afterRemoveRow', index, amount, logicRows);
	  this.instance.forceFullRender = true;
	};
	DataMap.prototype.removeCol = function(index, amount) {
	  if (this.instance.dataType === 'object' || this.instance.getSettings().columns) {
	    throw new Error('cannot remove column with object data source or columns option specified');
	  }
	  if (!amount) {
	    amount = 1;
	  }
	  if (typeof index !== 'number') {
	    index = -amount;
	  }
	  index = (this.instance.countCols() + index) % this.instance.countCols();
	  var actionWasNotCancelled = Handsontable.hooks.run(this.instance, 'beforeRemoveCol', index, amount);
	  if (actionWasNotCancelled === false) {
	    return;
	  }
	  var data = this.dataSource;
	  for (var r = 0,
	      rlen = this.instance.countSourceRows(); r < rlen; r++) {
	    data[r].splice(index, amount);
	  }
	  this.priv.columnSettings.splice(index, amount);
	  Handsontable.hooks.run(this.instance, 'afterRemoveCol', index, amount);
	  this.instance.forceFullRender = true;
	};
	DataMap.prototype.spliceCol = function(col, index, amount) {
	  var elements = 4 <= arguments.length ? [].slice.call(arguments, 3) : [];
	  var colData = this.instance.getDataAtCol(col);
	  var removed = colData.slice(index, index + amount);
	  var after = colData.slice(index + amount);
	  extendArray(elements, after);
	  var i = 0;
	  while (i < amount) {
	    elements.push(null);
	    i++;
	  }
	  to2dArray(elements);
	  this.instance.populateFromArray(index, col, elements, null, null, 'spliceCol');
	  return removed;
	};
	DataMap.prototype.spliceRow = function(row, index, amount) {
	  var elements = 4 <= arguments.length ? [].slice.call(arguments, 3) : [];
	  var rowData = this.instance.getSourceDataAtRow(row);
	  var removed = rowData.slice(index, index + amount);
	  var after = rowData.slice(index + amount);
	  extendArray(elements, after);
	  var i = 0;
	  while (i < amount) {
	    elements.push(null);
	    i++;
	  }
	  this.instance.populateFromArray(row, index, [elements], null, null, 'spliceRow');
	  return removed;
	};
	DataMap.prototype.get = function(row, prop) {
	  row = Handsontable.hooks.run(this.instance, 'modifyRow', row);
	  if (typeof prop === 'string' && prop.indexOf('.') > -1) {
	    var sliced = prop.split('.');
	    var out = this.dataSource[row];
	    if (!out) {
	      return null;
	    }
	    for (var i = 0,
	        ilen = sliced.length; i < ilen; i++) {
	      out = out[sliced[i]];
	      if (typeof out === 'undefined') {
	        return null;
	      }
	    }
	    return out;
	  } else if (typeof prop === 'function') {
	    return prop(this.dataSource.slice(row, row + 1)[0]);
	  }
	  if (this.dataSource[row] && this.dataSource[row].hasOwnProperty && this.dataSource[row].hasOwnProperty(prop)) {
	    return this.dataSource[row][prop];
	  }
	  return null;
	};
	var copyableLookup = cellMethodLookupFactory('copyable', false);
	DataMap.prototype.getCopyable = function(row, prop) {
	  if (copyableLookup.call(this.instance, row, this.propToCol(prop))) {
	    return this.get(row, prop);
	  }
	  return '';
	};
	DataMap.prototype.set = function(row, prop, value, source) {
	  row = Handsontable.hooks.run(this.instance, 'modifyRow', row, source || 'datamapGet');
	  if (typeof prop === 'string' && prop.indexOf('.') > -1) {
	    var sliced = prop.split('.');
	    var out = this.dataSource[row];
	    for (var i = 0,
	        ilen = sliced.length - 1; i < ilen; i++) {
	      if (typeof out[sliced[i]] === 'undefined') {
	        out[sliced[i]] = {};
	      }
	      out = out[sliced[i]];
	    }
	    out[sliced[i]] = value;
	  } else if (typeof prop === 'function') {
	    prop(this.dataSource.slice(row, row + 1)[0], value);
	  } else {
	    this.dataSource[row][prop] = value;
	  }
	};
	DataMap.prototype.physicalRowsToLogical = function(index, amount) {
	  var totalRows = this.instance.countSourceRows();
	  var physicRow = (totalRows + index) % totalRows;
	  var logicRows = [];
	  var rowsToRemove = amount;
	  var row;
	  while (physicRow < totalRows && rowsToRemove) {
	    row = Handsontable.hooks.run(this.instance, 'modifyRow', physicRow);
	    logicRows.push(row);
	    rowsToRemove--;
	    physicRow++;
	  }
	  return logicRows;
	};
	DataMap.prototype.clear = function() {
	  for (var r = 0; r < this.instance.countSourceRows(); r++) {
	    for (var c = 0; c < this.instance.countCols(); c++) {
	      this.set(r, this.colToProp(c), '');
	    }
	  }
	};
	DataMap.prototype.getLength = function() {
	  var $__7 = this;
	  var length = this.instance.countSourceRows();
	  if (Handsontable.hooks.has('modifyRow', this.instance)) {
	    rangeEach(this.instance.countSourceRows() - 1, (function(row) {
	      row = Handsontable.hooks.run($__7.instance, 'modifyRow', row);
	      if (row === null) {
	        length--;
	      }
	    }));
	  }
	  return length;
	};
	DataMap.prototype.getAll = function() {
	  var start = {
	    row: 0,
	    col: 0
	  };
	  var end = {
	    row: Math.max(this.instance.countSourceRows() - 1, 0),
	    col: Math.max(this.instance.countCols() - 1, 0)
	  };
	  if (start.row - end.row === 0 && !this.instance.countSourceRows()) {
	    return [];
	  }
	  return this.getRange(start, end, DataMap.prototype.DESTINATION_RENDERER);
	};
	DataMap.prototype.getRange = function(start, end, destination) {
	  var r,
	      rlen,
	      c,
	      clen,
	      output = [],
	      row,
	      rowExists;
	  var getFn = destination === this.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get;
	  rlen = Math.max(start.row, end.row);
	  clen = Math.max(start.col, end.col);
	  for (r = Math.min(start.row, end.row); r <= rlen; r++) {
	    row = [];
	    var physicalRow = Handsontable.hooks.run(this.instance, 'modifyRow', r);
	    for (c = Math.min(start.col, end.col); c <= clen; c++) {
	      var rowValue;
	      if (physicalRow === null) {
	        break;
	      }
	      row.push(getFn.call(this, r, this.colToProp(c)));
	    }
	    if (physicalRow !== null) {
	      output.push(row);
	    }
	  }
	  return output;
	};
	DataMap.prototype.getText = function(start, end) {
	  return SheetClip.stringify(this.getRange(start, end, this.DESTINATION_RENDERER));
	};
	DataMap.prototype.getCopyableText = function(start, end) {
	  return SheetClip.stringify(this.getRange(start, end, this.DESTINATION_CLIPBOARD_GENERATOR));
	};
	;
	Handsontable.DataMap = DataMap;

	//# 
	},{"SheetClip":"SheetClip","helpers/array":42,"helpers/data":44,"helpers/number":49,"helpers/object":50,"helpers/setting":51,"multiMap":55}],27:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DataSource: {get: function() {
	      return DataSource;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_data__,
	    $__helpers_47_setting__,
	    $__helpers_47_object__,
	    $__helpers_47_array__,
	    $__helpers_47_number__;
	var cellMethodLookupFactory = ($__helpers_47_data__ = require("helpers/data"), $__helpers_47_data__ && $__helpers_47_data__.__esModule && $__helpers_47_data__ || {default: $__helpers_47_data__}).cellMethodLookupFactory;
	var columnFactory = ($__helpers_47_setting__ = require("helpers/setting"), $__helpers_47_setting__ && $__helpers_47_setting__.__esModule && $__helpers_47_setting__ || {default: $__helpers_47_setting__}).columnFactory;
	var $__2 = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}),
	    duckSchema = $__2.duckSchema,
	    deepExtend = $__2.deepExtend,
	    getProperty = $__2.getProperty;
	var $__3 = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__}),
	    extendArray = $__3.extendArray,
	    arrayEach = $__3.arrayEach;
	var rangeEach = ($__helpers_47_number__ = require("helpers/number"), $__helpers_47_number__ && $__helpers_47_number__.__esModule && $__helpers_47_number__ || {default: $__helpers_47_number__}).rangeEach;
	var DataSource = function DataSource(hotInstance, dataSource) {
	  this.hot = hotInstance;
	  this.data = dataSource;
	  this.dataType = 'array';
	  this.colToProp = (function() {});
	  this.propToCol = (function() {});
	};
	($traceurRuntime.createClass)(DataSource, {
	  getData: function() {
	    return this.data;
	  },
	  getAtColumn: function(column) {
	    var $__5 = this;
	    var result = [];
	    arrayEach(this.data, (function(row) {
	      var property = $__5.colToProp(column);
	      if (typeof property === 'string') {
	        row = getProperty(row, property);
	      } else {
	        row = row[property];
	      }
	      result.push(row);
	    }));
	    return result;
	  },
	  getAtRow: function(row) {
	    return this.data[row];
	  },
	  getAtCell: function(row, column) {
	    return this.data[row][this.colToProp(column)];
	  },
	  getByRange: function(start, end) {
	    var $__5 = this;
	    var startRow = Math.min(start.row, end.row);
	    var startCol = Math.min(start.col, end.col);
	    var endRow = Math.max(start.row, end.row);
	    var endCol = Math.max(start.col, end.col);
	    var result = [];
	    rangeEach(startRow, endRow, (function(currentRow) {
	      var row = $__5.getAtRow(currentRow);
	      var newRow;
	      if ($__5.dataType === 'array') {
	        newRow = row.slice(startCol, endCol);
	      } else if ($__5.dataType === 'object') {
	        newRow = {};
	        rangeEach(startCol, endCol, (function(column) {
	          var prop = $__5.colToProp(column);
	          newRow[prop] = row[prop];
	        }));
	      }
	      result.push(newRow);
	    }));
	    return result;
	  },
	  destroy: function() {
	    this.data = null;
	    this.hot = null;
	  }
	}, {});
	;

	//# 
	},{"helpers/array":42,"helpers/data":44,"helpers/number":49,"helpers/object":50,"helpers/setting":51}],28:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  EditorManager: {get: function() {
	      return EditorManager;
	    }},
	  __esModule: {value: true}
	});
	var $__3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $__helpers_47_unicode__,
	    $__helpers_47_dom_47_event__,
	    $__editors__,
	    $__eventManager__;
	var WalkontableCellCoords = ($__3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var $__1 = ($__helpers_47_unicode__ = require("helpers/unicode"), $__helpers_47_unicode__ && $__helpers_47_unicode__.__esModule && $__helpers_47_unicode__ || {default: $__helpers_47_unicode__}),
	    KEY_CODES = $__1.KEY_CODES,
	    isMetaKey = $__1.isMetaKey,
	    isCtrlKey = $__1.isCtrlKey;
	var $__2 = ($__helpers_47_dom_47_event__ = require("helpers/dom/event"), $__helpers_47_dom_47_event__ && $__helpers_47_dom_47_event__.__esModule && $__helpers_47_dom_47_event__ || {default: $__helpers_47_dom_47_event__}),
	    stopPropagation = $__2.stopPropagation,
	    stopImmediatePropagation = $__2.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__2.isImmediatePropagationStopped;
	var getEditor = ($__editors__ = require("editors"), $__editors__ && $__editors__.__esModule && $__editors__ || {default: $__editors__}).getEditor;
	var eventManagerObject = ($__eventManager__ = require("eventManager"), $__eventManager__ && $__eventManager__.__esModule && $__eventManager__ || {default: $__eventManager__}).eventManager;
	;
	Handsontable.EditorManager = EditorManager;
	function EditorManager(instance, priv, selection) {
	  var _this = this,
	      destroyed = false,
	      eventManager,
	      activeEditor;
	  eventManager = eventManagerObject(instance);
	  function moveSelectionAfterEnter(shiftKey) {
	    var enterMoves = typeof priv.settings.enterMoves === 'function' ? priv.settings.enterMoves(event) : priv.settings.enterMoves;
	    if (shiftKey) {
	      selection.transformStart(-enterMoves.row, -enterMoves.col);
	    } else {
	      selection.transformStart(enterMoves.row, enterMoves.col, true);
	    }
	  }
	  function moveSelectionUp(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(-1, 0);
	    } else {
	      selection.transformStart(-1, 0);
	    }
	  }
	  function moveSelectionDown(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(1, 0);
	    } else {
	      selection.transformStart(1, 0);
	    }
	  }
	  function moveSelectionRight(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(0, 1);
	    } else {
	      selection.transformStart(0, 1);
	    }
	  }
	  function moveSelectionLeft(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(0, -1);
	    } else {
	      selection.transformStart(0, -1);
	    }
	  }
	  function onKeyDown(event) {
	    var ctrlDown,
	        rangeModifier;
	    if (!instance.isListening()) {
	      return;
	    }
	    Handsontable.hooks.run(instance, 'beforeKeyDown', event);
	    if (destroyed) {
	      return;
	    }
	    if (isImmediatePropagationStopped(event)) {
	      return;
	    }
	    priv.lastKeyCode = event.keyCode;
	    if (!selection.isSelected()) {
	      return;
	    }
	    ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	    if (activeEditor && !activeEditor.isWaiting()) {
	      if (!isMetaKey(event.keyCode) && !isCtrlKey(event.keyCode) && !ctrlDown && !_this.isEditorOpened()) {
	        _this.openEditor('', event);
	        return;
	      }
	    }
	    rangeModifier = event.shiftKey ? selection.setRangeEnd : selection.setRangeStart;
	    switch (event.keyCode) {
	      case KEY_CODES.A:
	        if (!_this.isEditorOpened() && ctrlDown) {
	          selection.selectAll();
	          event.preventDefault();
	          stopPropagation(event);
	        }
	        break;
	      case KEY_CODES.ARROW_UP:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionUp(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.ARROW_DOWN:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionDown(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.ARROW_RIGHT:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionRight(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.ARROW_LEFT:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionLeft(event.shiftKey);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.TAB:
	        var tabMoves = typeof priv.settings.tabMoves === 'function' ? priv.settings.tabMoves(event) : priv.settings.tabMoves;
	        if (event.shiftKey) {
	          selection.transformStart(-tabMoves.row, -tabMoves.col);
	        } else {
	          selection.transformStart(tabMoves.row, tabMoves.col, true);
	        }
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.BACKSPACE:
	      case KEY_CODES.DELETE:
	        selection.empty(event);
	        _this.prepareEditor();
	        event.preventDefault();
	        break;
	      case KEY_CODES.F2:
	        _this.openEditor(null, event);
	        if (activeEditor) {
	          activeEditor.enableFullEditMode();
	        }
	        event.preventDefault();
	        break;
	      case KEY_CODES.ENTER:
	        if (_this.isEditorOpened()) {
	          if (activeEditor && activeEditor.state !== Handsontable.EditorState.WAITING) {
	            _this.closeEditorAndSaveChanges(ctrlDown);
	          }
	          moveSelectionAfterEnter(event.shiftKey);
	        } else {
	          if (instance.getSettings().enterBeginsEditing) {
	            _this.openEditor(null, event);
	            if (activeEditor) {
	              activeEditor.enableFullEditMode();
	            }
	          } else {
	            moveSelectionAfterEnter(event.shiftKey);
	          }
	        }
	        event.preventDefault();
	        stopImmediatePropagation(event);
	        break;
	      case KEY_CODES.ESCAPE:
	        if (_this.isEditorOpened()) {
	          _this.closeEditorAndRestoreOriginalValue(ctrlDown);
	        }
	        event.preventDefault();
	        break;
	      case KEY_CODES.HOME:
	        if (event.ctrlKey || event.metaKey) {
	          rangeModifier(new WalkontableCellCoords(0, priv.selRange.from.col));
	        } else {
	          rangeModifier(new WalkontableCellCoords(priv.selRange.from.row, 0));
	        }
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.END:
	        if (event.ctrlKey || event.metaKey) {
	          rangeModifier(new WalkontableCellCoords(instance.countRows() - 1, priv.selRange.from.col));
	        } else {
	          rangeModifier(new WalkontableCellCoords(priv.selRange.from.row, instance.countCols() - 1));
	        }
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.PAGE_UP:
	        selection.transformStart(-instance.countVisibleRows(), 0);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	      case KEY_CODES.PAGE_DOWN:
	        selection.transformStart(instance.countVisibleRows(), 0);
	        event.preventDefault();
	        stopPropagation(event);
	        break;
	    }
	  }
	  function init() {
	    instance.addHook('afterDocumentKeyDown', onKeyDown);
	    eventManager.addEventListener(document.documentElement, 'keydown', function(event) {
	      instance.runHooks('afterDocumentKeyDown', event);
	    });
	    function onDblClick(event, coords, elem) {
	      if (elem.nodeName == 'TD') {
	        _this.openEditor();
	        if (activeEditor) {
	          activeEditor.enableFullEditMode();
	        }
	      }
	    }
	    instance.view.wt.update('onCellDblClick', onDblClick);
	    instance.addHook('afterDestroy', function() {
	      destroyed = true;
	    });
	  }
	  this.destroyEditor = function(revertOriginal) {
	    this.closeEditor(revertOriginal);
	  };
	  this.getActiveEditor = function() {
	    return activeEditor;
	  };
	  this.prepareEditor = function() {
	    var row,
	        col,
	        prop,
	        td,
	        originalValue,
	        cellProperties,
	        editorClass;
	    if (activeEditor && activeEditor.isWaiting()) {
	      this.closeEditor(false, false, function(dataSaved) {
	        if (dataSaved) {
	          _this.prepareEditor();
	        }
	      });
	      return;
	    }
	    row = priv.selRange.highlight.row;
	    col = priv.selRange.highlight.col;
	    prop = instance.colToProp(col);
	    td = instance.getCell(row, col);
	    originalValue = instance.getDataAtCell(row, col);
	    cellProperties = instance.getCellMeta(row, col);
	    editorClass = instance.getCellEditor(cellProperties);
	    if (editorClass) {
	      activeEditor = Handsontable.editors.getEditor(editorClass, instance);
	      activeEditor.prepare(row, col, prop, td, originalValue, cellProperties);
	    } else {
	      activeEditor = void 0;
	    }
	  };
	  this.isEditorOpened = function() {
	    return activeEditor && activeEditor.isOpened();
	  };
	  this.openEditor = function(initialValue, event) {
	    if (activeEditor && !activeEditor.cellProperties.readOnly) {
	      activeEditor.beginEditing(initialValue, event);
	    } else if (activeEditor && activeEditor.cellProperties.readOnly) {
	      if (event && event.keyCode === KEY_CODES.ENTER) {
	        moveSelectionAfterEnter();
	      }
	    }
	  };
	  this.closeEditor = function(restoreOriginalValue, ctrlDown, callback) {
	    if (activeEditor) {
	      activeEditor.finishEditing(restoreOriginalValue, ctrlDown, callback);
	    } else {
	      if (callback) {
	        callback(false);
	      }
	    }
	  };
	  this.closeEditorAndSaveChanges = function(ctrlDown) {
	    return this.closeEditor(false, ctrlDown);
	  };
	  this.closeEditorAndRestoreOriginalValue = function(ctrlDown) {
	    return this.closeEditor(true, ctrlDown);
	  };
	  init();
	}

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"editors":29,"eventManager":41,"helpers/dom/event":46,"helpers/unicode":53}],29:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  registerEditor: {get: function() {
	      return registerEditor;
	    }},
	  getEditor: {get: function() {
	      return getEditor;
	    }},
	  hasEditor: {get: function() {
	      return hasEditor;
	    }},
	  getEditorConstructor: {get: function() {
	      return getEditorConstructor;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_string__;
	var toUpperCaseFirst = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).toUpperCaseFirst;
	;
	var registeredEditorNames = {},
	    registeredEditorClasses = new WeakMap();
	Handsontable.editors = Handsontable.editors || {};
	Handsontable.editors.registerEditor = registerEditor;
	Handsontable.editors.getEditor = getEditor;
	function RegisteredEditor(editorClass) {
	  var Clazz,
	      instances;
	  instances = {};
	  Clazz = editorClass;
	  this.getConstructor = function() {
	    return editorClass;
	  };
	  this.getInstance = function(hotInstance) {
	    if (!(hotInstance.guid in instances)) {
	      instances[hotInstance.guid] = new Clazz(hotInstance);
	    }
	    return instances[hotInstance.guid];
	  };
	}
	function registerEditor(editorName, editorClass) {
	  var editor = new RegisteredEditor(editorClass);
	  if (typeof editorName === 'string') {
	    registeredEditorNames[editorName] = editor;
	    Handsontable.editors[toUpperCaseFirst(editorName) + 'Editor'] = editorClass;
	  }
	  registeredEditorClasses.set(editorClass, editor);
	}
	function getEditor(editorName, hotInstance) {
	  var editor;
	  if (typeof editorName == 'function') {
	    if (!(registeredEditorClasses.get(editorName))) {
	      registerEditor(null, editorName);
	    }
	    editor = registeredEditorClasses.get(editorName);
	  } else if (typeof editorName == 'string') {
	    editor = registeredEditorNames[editorName];
	  } else {
	    throw Error('Only strings and functions can be passed as "editor" parameter ');
	  }
	  if (!editor) {
	    throw Error('No editor registered under name "' + editorName + '"');
	  }
	  return editor.getInstance(hotInstance);
	}
	function getEditorConstructor(editorName) {
	  var editor;
	  if (typeof editorName == 'string') {
	    editor = registeredEditorNames[editorName];
	  } else {
	    throw Error('Only strings and functions can be passed as "editor" parameter ');
	  }
	  if (!editor) {
	    throw Error('No editor registered under name "' + editorName + '"');
	  }
	  return editor.getConstructor();
	}
	function hasEditor(editorName) {
	  return registeredEditorNames[editorName] ? true : false;
	}

	//# 
	},{"helpers/string":52}],30:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  BaseEditor: {get: function() {
	      return BaseEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_mixed__,
	    $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var WalkontableCellCoords = ($___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	;
	Handsontable.editors = Handsontable.editors || {};
	Handsontable.editors.BaseEditor = BaseEditor;
	Handsontable.EditorState = {
	  VIRGIN: 'STATE_VIRGIN',
	  EDITING: 'STATE_EDITING',
	  WAITING: 'STATE_WAITING',
	  FINISHED: 'STATE_FINISHED'
	};
	function BaseEditor(instance) {
	  this.instance = instance;
	  this.state = Handsontable.EditorState.VIRGIN;
	  this._opened = false;
	  this._fullEditMode = false;
	  this._closeCallback = null;
	  this.init();
	}
	BaseEditor.prototype._fireCallbacks = function(result) {
	  if (this._closeCallback) {
	    this._closeCallback(result);
	    this._closeCallback = null;
	  }
	};
	BaseEditor.prototype.init = function() {};
	BaseEditor.prototype.getValue = function() {
	  throw Error('Editor getValue() method unimplemented');
	};
	BaseEditor.prototype.setValue = function(newValue) {
	  throw Error('Editor setValue() method unimplemented');
	};
	BaseEditor.prototype.open = function() {
	  throw Error('Editor open() method unimplemented');
	};
	BaseEditor.prototype.close = function() {
	  throw Error('Editor close() method unimplemented');
	};
	BaseEditor.prototype.prepare = function(row, col, prop, td, originalValue, cellProperties) {
	  this.TD = td;
	  this.row = row;
	  this.col = col;
	  this.prop = prop;
	  this.originalValue = originalValue;
	  this.cellProperties = cellProperties;
	  if (this.instance.view.isMouseDown() && document.activeElement && document.activeElement !== document.body) {
	    document.activeElement.blur();
	  } else if (!document.activeElement) {
	    document.body.focus();
	  }
	  this.state = Handsontable.EditorState.VIRGIN;
	};
	BaseEditor.prototype.extend = function() {
	  var baseClass = this.constructor;
	  function Editor() {
	    baseClass.apply(this, arguments);
	  }
	  function inherit(Child, Parent) {
	    function Bridge() {}
	    Bridge.prototype = Parent.prototype;
	    Child.prototype = new Bridge();
	    Child.prototype.constructor = Child;
	    return Child;
	  }
	  return inherit(Editor, baseClass);
	};
	BaseEditor.prototype.saveValue = function(val, ctrlDown) {
	  var sel,
	      tmp;
	  if (ctrlDown) {
	    sel = this.instance.getSelected();
	    if (sel[0] > sel[2]) {
	      tmp = sel[0];
	      sel[0] = sel[2];
	      sel[2] = tmp;
	    }
	    if (sel[1] > sel[3]) {
	      tmp = sel[1];
	      sel[1] = sel[3];
	      sel[3] = tmp;
	    }
	    this.instance.populateFromArray(sel[0], sel[1], val, sel[2], sel[3], 'edit');
	  } else {
	    this.instance.populateFromArray(this.row, this.col, val, null, null, 'edit');
	  }
	};
	BaseEditor.prototype.beginEditing = function(initialValue, event) {
	  if (this.state != Handsontable.EditorState.VIRGIN) {
	    return;
	  }
	  this.instance.view.scrollViewport(new WalkontableCellCoords(this.row, this.col));
	  this.instance.view.render();
	  this.state = Handsontable.EditorState.EDITING;
	  initialValue = typeof initialValue == 'string' ? initialValue : this.originalValue;
	  this.setValue(stringify(initialValue));
	  this.open(event);
	  this._opened = true;
	  this.focus();
	  this.instance.view.render();
	};
	BaseEditor.prototype.finishEditing = function(restoreOriginalValue, ctrlDown, callback) {
	  var _this = this,
	      val;
	  if (callback) {
	    var previousCloseCallback = this._closeCallback;
	    this._closeCallback = function(result) {
	      if (previousCloseCallback) {
	        previousCloseCallback(result);
	      }
	      callback(result);
	    };
	  }
	  if (this.isWaiting()) {
	    return;
	  }
	  if (this.state == Handsontable.EditorState.VIRGIN) {
	    this.instance._registerTimeout(setTimeout(function() {
	      _this._fireCallbacks(true);
	    }, 0));
	    return;
	  }
	  if (this.state == Handsontable.EditorState.EDITING) {
	    if (restoreOriginalValue) {
	      this.cancelChanges();
	      this.instance.view.render();
	      return;
	    }
	    if (this.instance.getSettings().trimWhitespace) {
	      val = [[typeof this.getValue() === 'string' ? String.prototype.trim.call(this.getValue() || '') : this.getValue()]];
	    } else {
	      val = [[this.getValue()]];
	    }
	    this.state = Handsontable.EditorState.WAITING;
	    this.saveValue(val, ctrlDown);
	    if (this.instance.getCellValidator(this.cellProperties)) {
	      this.instance.addHookOnce('postAfterValidate', function(result) {
	        _this.state = Handsontable.EditorState.FINISHED;
	        _this.discardEditor(result);
	      });
	    } else {
	      this.state = Handsontable.EditorState.FINISHED;
	      this.discardEditor(true);
	    }
	  }
	};
	BaseEditor.prototype.cancelChanges = function() {
	  this.state = Handsontable.EditorState.FINISHED;
	  this.discardEditor();
	};
	BaseEditor.prototype.discardEditor = function(result) {
	  if (this.state !== Handsontable.EditorState.FINISHED) {
	    return;
	  }
	  if (result === false && this.cellProperties.allowInvalid !== true) {
	    this.instance.selectCell(this.row, this.col);
	    this.focus();
	    this.state = Handsontable.EditorState.EDITING;
	    this._fireCallbacks(false);
	  } else {
	    this.close();
	    this._opened = false;
	    this._fullEditMode = false;
	    this.state = Handsontable.EditorState.VIRGIN;
	    this._fireCallbacks(true);
	  }
	};
	BaseEditor.prototype.enableFullEditMode = function() {
	  this._fullEditMode = true;
	};
	BaseEditor.prototype.isInFullEditMode = function() {
	  return this._fullEditMode;
	};
	BaseEditor.prototype.isOpened = function() {
	  return this._opened;
	};
	BaseEditor.prototype.isWaiting = function() {
	  return this.state === Handsontable.EditorState.WAITING;
	};
	BaseEditor.prototype.checkEditorSection = function() {
	  var totalRows = this.instance.countRows();
	  var section = '';
	  if (this.row < this.instance.getSettings().fixedRowsTop) {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'top-left-corner';
	    } else {
	      section = 'top';
	    }
	  } else if (this.instance.getSettings().fixedRowsBottom && this.row >= totalRows - this.instance.getSettings().fixedRowsBottom) {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'bottom-left-corner';
	    } else {
	      section = 'bottom';
	    }
	  } else {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'left';
	    }
	  }
	  return section;
	};

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"helpers/mixed":48}],31:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  AutocompleteEditor: {get: function() {
	      return AutocompleteEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_mixed__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_editors__,
	    $__handsontableEditor__;
	var $__0 = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}),
	    KEY_CODES = $__0.KEY_CODES,
	    isPrintableChar = $__0.isPrintableChar;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var pivot = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).pivot;
	var $__3 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__3.addClass,
	    getCaretPosition = $__3.getCaretPosition,
	    getScrollbarWidth = $__3.getScrollbarWidth,
	    getSelectionEndPosition = $__3.getSelectionEndPosition,
	    outerWidth = $__3.outerWidth,
	    setCaretPosition = $__3.setCaretPosition;
	var $__4 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditorConstructor = $__4.getEditorConstructor,
	    registerEditor = $__4.registerEditor;
	var HandsontableEditor = ($__handsontableEditor__ = require("handsontableEditor"), $__handsontableEditor__ && $__handsontableEditor__.__esModule && $__handsontableEditor__ || {default: $__handsontableEditor__}).HandsontableEditor;
	var AutocompleteEditor = HandsontableEditor.prototype.extend();
	AutocompleteEditor.prototype.init = function() {
	  HandsontableEditor.prototype.init.apply(this, arguments);
	  this.query = null;
	  this.choices = [];
	};
	AutocompleteEditor.prototype.createElements = function() {
	  HandsontableEditor.prototype.createElements.apply(this, arguments);
	  addClass(this.htContainer, 'autocompleteEditor');
	  addClass(this.htContainer, window.navigator.platform.indexOf('Mac') === -1 ? '' : 'htMacScroll');
	};
	var skipOne = false;
	function onBeforeKeyDown(event) {
	  skipOne = false;
	  var editor = this.getActiveEditor();
	  if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {
	    var timeOffset = 0;
	    if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {
	      return;
	    }
	    if (!editor.isOpened()) {
	      timeOffset += 10;
	    }
	    if (editor.htEditor) {
	      editor.instance._registerTimeout(setTimeout(function() {
	        editor.queryChoices(editor.TEXTAREA.value);
	        skipOne = true;
	      }, timeOffset));
	    }
	  }
	}
	AutocompleteEditor.prototype.prepare = function() {
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  HandsontableEditor.prototype.prepare.apply(this, arguments);
	};
	AutocompleteEditor.prototype.open = function() {
	  this.TEXTAREA_PARENT.style.overflow = 'auto';
	  HandsontableEditor.prototype.open.apply(this, arguments);
	  this.TEXTAREA_PARENT.style.overflow = '';
	  var choicesListHot = this.htEditor.getInstance();
	  var that = this;
	  var trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;
	  this.TEXTAREA.style.visibility = 'visible';
	  this.focus();
	  choicesListHot.updateSettings({
	    colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : void 0,
	    width: trimDropdown ? outerWidth(this.TEXTAREA) + getScrollbarWidth() + 2 : void 0,
	    afterRenderer: function(TD, row, col, prop, value) {
	      var caseSensitive = this.getCellMeta(row, col).filteringCaseSensitive === true,
	          indexOfMatch,
	          match,
	          value = stringify(value);
	      if (value) {
	        indexOfMatch = caseSensitive ? value.indexOf(this.query) : value.toLowerCase().indexOf(that.query.toLowerCase());
	        if (indexOfMatch != -1) {
	          match = value.substr(indexOfMatch, that.query.length);
	          TD.innerHTML = value.replace(match, '<strong>' + match + '</strong>');
	        }
	      }
	    },
	    autoColumnSize: true,
	    modifyColWidth: function(width, col) {
	      var autoWidths = this.getPlugin('autoColumnSize').widths;
	      if (autoWidths[col]) {
	        width = autoWidths[col];
	      }
	      return trimDropdown ? width : width + 15;
	    }
	  });
	  this.htEditor.view.wt.wtTable.holder.parentNode.style['padding-right'] = getScrollbarWidth() + 2 + 'px';
	  if (skipOne) {
	    skipOne = false;
	  }
	  that.instance._registerTimeout(setTimeout(function() {
	    that.queryChoices(that.TEXTAREA.value);
	  }, 0));
	};
	AutocompleteEditor.prototype.close = function() {
	  HandsontableEditor.prototype.close.apply(this, arguments);
	};
	AutocompleteEditor.prototype.queryChoices = function(query) {
	  this.query = query;
	  if (typeof this.cellProperties.source == 'function') {
	    var that = this;
	    this.cellProperties.source(query, function(choices) {
	      that.updateChoicesList(choices);
	    });
	  } else if (Array.isArray(this.cellProperties.source)) {
	    var choices;
	    if (!query || this.cellProperties.filter === false) {
	      choices = this.cellProperties.source;
	    } else {
	      var filteringCaseSensitive = this.cellProperties.filteringCaseSensitive === true;
	      var lowerCaseQuery = query.toLowerCase();
	      choices = this.cellProperties.source.filter(function(choice) {
	        if (filteringCaseSensitive) {
	          return choice.indexOf(query) != -1;
	        } else {
	          return choice.toLowerCase().indexOf(lowerCaseQuery) != -1;
	        }
	      });
	    }
	    this.updateChoicesList(choices);
	  } else {
	    this.updateChoicesList([]);
	  }
	};
	AutocompleteEditor.prototype.updateChoicesList = function(choices) {
	  var pos = getCaretPosition(this.TEXTAREA),
	      endPos = getSelectionEndPosition(this.TEXTAREA);
	  var orderByRelevance = AutocompleteEditor.sortByRelevance(this.getValue(), choices, this.cellProperties.filteringCaseSensitive);
	  var highlightIndex;
	  if (this.cellProperties.filter == false) {
	    highlightIndex = orderByRelevance[0];
	  } else {
	    var sorted = [];
	    for (var i = 0,
	        choicesCount = orderByRelevance.length; i < choicesCount; i++) {
	      sorted.push(choices[orderByRelevance[i]]);
	    }
	    highlightIndex = 0;
	    choices = sorted;
	  }
	  this.choices = choices;
	  this.htEditor.loadData(pivot([choices]));
	  this.updateDropdownHeight();
	  if (this.cellProperties.strict === true) {
	    this.highlightBestMatchingChoice(highlightIndex);
	  }
	  this.instance.listen();
	  this.TEXTAREA.focus();
	  setCaretPosition(this.TEXTAREA, pos, (pos == endPos ? void 0 : endPos));
	};
	AutocompleteEditor.prototype.updateDropdownHeight = function() {
	  var currentDropdownWidth = this.htEditor.getColWidth(0) + getScrollbarWidth() + 2;
	  var trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;
	  this.htEditor.updateSettings({
	    height: this.getDropdownHeight(),
	    width: trimDropdown ? void 0 : currentDropdownWidth
	  });
	  this.htEditor.view.wt.wtTable.alignOverlaysWithTrimmingContainer();
	};
	AutocompleteEditor.prototype.finishEditing = function(restoreOriginalValue) {
	  if (!restoreOriginalValue) {
	    this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	  }
	  HandsontableEditor.prototype.finishEditing.apply(this, arguments);
	};
	AutocompleteEditor.prototype.highlightBestMatchingChoice = function(index) {
	  if (typeof index === 'number') {
	    this.htEditor.selectCell(index, 0);
	  } else {
	    this.htEditor.deselectCell();
	  }
	};
	AutocompleteEditor.sortByRelevance = function(value, choices, caseSensitive) {
	  var choicesRelevance = [],
	      currentItem,
	      valueLength = value.length,
	      valueIndex,
	      charsLeft,
	      result = [],
	      i,
	      choicesCount;
	  if (valueLength === 0) {
	    for (i = 0, choicesCount = choices.length; i < choicesCount; i++) {
	      result.push(i);
	    }
	    return result;
	  }
	  for (i = 0, choicesCount = choices.length; i < choicesCount; i++) {
	    currentItem = stringify(choices[i]);
	    if (caseSensitive) {
	      valueIndex = currentItem.indexOf(value);
	    } else {
	      valueIndex = currentItem.toLowerCase().indexOf(value.toLowerCase());
	    }
	    if (valueIndex == -1) {
	      continue;
	    }
	    charsLeft = currentItem.length - valueIndex - valueLength;
	    choicesRelevance.push({
	      baseIndex: i,
	      index: valueIndex,
	      charsLeft: charsLeft,
	      value: currentItem
	    });
	  }
	  choicesRelevance.sort(function(a, b) {
	    if (b.index === -1) {
	      return -1;
	    }
	    if (a.index === -1) {
	      return 1;
	    }
	    if (a.index < b.index) {
	      return -1;
	    } else if (b.index < a.index) {
	      return 1;
	    } else if (a.index === b.index) {
	      if (a.charsLeft < b.charsLeft) {
	        return -1;
	      } else if (a.charsLeft > b.charsLeft) {
	        return 1;
	      } else {
	        return 0;
	      }
	    }
	  });
	  for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {
	    result.push(choicesRelevance[i].baseIndex);
	  }
	  return result;
	};
	AutocompleteEditor.prototype.getDropdownHeight = function() {
	  var firstRowHeight = this.htEditor.getInstance().getRowHeight(0) || 23;
	  var _visibleRows = this.cellProperties.visibleRows;
	  return this.choices.length >= _visibleRows ? _visibleRows * firstRowHeight : this.choices.length * firstRowHeight + 8;
	};
	AutocompleteEditor.prototype.allowKeyEventPropagation = function(keyCode) {
	  var selected = {row: this.htEditor.getSelectedRange() ? this.htEditor.getSelectedRange().from.row : -1};
	  var allowed = false;
	  if (keyCode === KEY_CODES.ARROW_DOWN && selected.row < this.htEditor.countRows() - 1) {
	    allowed = true;
	  }
	  if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {
	    allowed = true;
	  }
	  return allowed;
	};
	;
	registerEditor('autocomplete', AutocompleteEditor);

	//# 
	},{"editors":29,"handsontableEditor":35,"helpers/array":42,"helpers/dom/element":45,"helpers/mixed":48,"helpers/unicode":53}],32:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CheckboxEditor: {get: function() {
	      return CheckboxEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_editors__,
	    $___95_baseEditor__,
	    $___46__46__47_helpers_47_dom_47_element__;
	var registerEditor = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}).registerEditor;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var hasClass = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).hasClass;
	var CheckboxEditor = function CheckboxEditor() {
	  $traceurRuntime.superConstructor($CheckboxEditor).apply(this, arguments);
	};
	var $CheckboxEditor = CheckboxEditor;
	($traceurRuntime.createClass)(CheckboxEditor, {
	  beginEditing: function() {
	    var checkbox = this.TD.querySelector('input[type="checkbox"]');
	    if (!hasClass(checkbox, 'htBadValue')) {
	      checkbox.click();
	    }
	  },
	  finishEditing: function() {},
	  init: function() {},
	  open: function() {},
	  close: function() {},
	  getValue: function() {},
	  setValue: function() {},
	  focus: function() {}
	}, {}, BaseEditor);
	;
	registerEditor('checkbox', CheckboxEditor);

	//# 
	},{"_baseEditor":30,"editors":29,"helpers/dom/element":45}],33:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DateEditor: {get: function() {
	      return DateEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_editors__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $__textEditor__,
	    $__moment__,
	    $__pikaday__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    outerHeight = $__0.outerHeight;
	var deepExtend = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).deepExtend;
	var EventManager = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).EventManager;
	var $__3 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__3.getEditor,
	    registerEditor = $__3.registerEditor;
	var isMetaKey = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).isMetaKey;
	var stopPropagation = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}).stopPropagation;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var moment = ($__moment__ = require("moment"), $__moment__ && $__moment__.__esModule && $__moment__ || {default: $__moment__}).default;
	var Pikaday = ($__pikaday__ = require("pikaday"), $__pikaday__ && $__pikaday__.__esModule && $__pikaday__ || {default: $__pikaday__}).default;
	Handsontable.editors = Handsontable.editors || {};
	Handsontable.editors.DateEditor = DateEditor;
	var DateEditor = function DateEditor(hotInstance) {
	  this.$datePicker = null;
	  this.datePicker = null;
	  this.datePickerStyle = null;
	  this.defaultDateFormat = 'DD/MM/YYYY';
	  this.isCellEdited = false;
	  this.parentDestroyed = false;
	  $traceurRuntime.superConstructor($DateEditor).call(this, hotInstance);
	};
	var $DateEditor = DateEditor;
	($traceurRuntime.createClass)(DateEditor, {
	  init: function() {
	    var $__9 = this;
	    if (typeof moment !== 'function') {
	      throw new Error('You need to include moment.js to your project.');
	    }
	    if (typeof Pikaday !== 'function') {
	      throw new Error('You need to include Pikaday to your project.');
	    }
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "init").call(this);
	    this.instance.addHook('afterDestroy', (function() {
	      $__9.parentDestroyed = true;
	      $__9.destroyElements();
	    }));
	  },
	  createElements: function() {
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "createElements").call(this);
	    this.datePicker = document.createElement('DIV');
	    this.datePickerStyle = this.datePicker.style;
	    this.datePickerStyle.position = 'absolute';
	    this.datePickerStyle.top = 0;
	    this.datePickerStyle.left = 0;
	    this.datePickerStyle.zIndex = 9999;
	    addClass(this.datePicker, 'htDatepickerHolder');
	    document.body.appendChild(this.datePicker);
	    this.$datePicker = new Pikaday(this.getDatePickerConfig());
	    var eventManager = new EventManager(this);
	    eventManager.addEventListener(this.datePicker, 'mousedown', (function(event) {
	      return stopPropagation(event);
	    }));
	    this.hideDatepicker();
	  },
	  destroyElements: function() {
	    this.$datePicker.destroy();
	  },
	  prepare: function(row, col, prop, td, originalValue, cellProperties) {
	    this._opened = false;
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "prepare").call(this, row, col, prop, td, originalValue, cellProperties);
	  },
	  open: function() {
	    var event = arguments[0] !== (void 0) ? arguments[0] : null;
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "open").call(this);
	    this.showDatepicker(event);
	  },
	  close: function() {
	    var $__9 = this;
	    this._opened = false;
	    this.instance._registerTimeout(setTimeout((function() {
	      $__9.instance.selection.refreshBorders();
	    }), 0));
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "close").call(this);
	  },
	  finishEditing: function() {
	    var isCancelled = arguments[0] !== (void 0) ? arguments[0] : false;
	    var ctrlDown = arguments[1] !== (void 0) ? arguments[1] : false;
	    if (isCancelled) {
	      var value = this.originalValue;
	      if (value !== void 0) {
	        this.setValue(value);
	      }
	    }
	    this.hideDatepicker();
	    $traceurRuntime.superGet(this, $DateEditor.prototype, "finishEditing").call(this, isCancelled, ctrlDown);
	  },
	  showDatepicker: function(event) {
	    this.$datePicker.config(this.getDatePickerConfig());
	    var offset = this.TD.getBoundingClientRect();
	    var dateFormat = this.cellProperties.dateFormat || this.defaultDateFormat;
	    var datePickerConfig = this.$datePicker.config();
	    var dateStr;
	    var isMouseDown = this.instance.view.isMouseDown();
	    var isMeta = event ? isMetaKey(event.keyCode) : false;
	    this.datePickerStyle.top = (window.pageYOffset + offset.top + outerHeight(this.TD)) + 'px';
	    this.datePickerStyle.left = (window.pageXOffset + offset.left) + 'px';
	    this.$datePicker._onInputFocus = function() {};
	    datePickerConfig.format = dateFormat;
	    if (this.originalValue) {
	      dateStr = this.originalValue;
	      if (moment(dateStr, dateFormat, true).isValid()) {
	        this.$datePicker.setMoment(moment(dateStr, dateFormat), true);
	      }
	      if (!isMeta && !isMouseDown) {
	        this.setValue('');
	      }
	    } else {
	      if (this.cellProperties.defaultDate) {
	        dateStr = this.cellProperties.defaultDate;
	        datePickerConfig.defaultDate = dateStr;
	        if (moment(dateStr, dateFormat, true).isValid()) {
	          this.$datePicker.setMoment(moment(dateStr, dateFormat), true);
	        }
	        if (!isMeta && !isMouseDown) {
	          this.setValue('');
	        }
	      } else {
	        this.$datePicker.gotoToday();
	      }
	    }
	    this.datePickerStyle.display = 'block';
	    this.$datePicker.show();
	  },
	  hideDatepicker: function() {
	    this.datePickerStyle.display = 'none';
	    this.$datePicker.hide();
	  },
	  getDatePickerConfig: function() {
	    var $__9 = this;
	    var htInput = this.TEXTAREA;
	    var options = {};
	    if (this.cellProperties && this.cellProperties.datePickerConfig) {
	      deepExtend(options, this.cellProperties.datePickerConfig);
	    }
	    var origOnSelect = options.onSelect;
	    var origOnClose = options.onClose;
	    options.field = htInput;
	    options.trigger = htInput;
	    options.container = this.datePicker;
	    options.bound = false;
	    options.format = options.format || this.defaultDateFormat;
	    options.reposition = options.reposition || false;
	    options.onSelect = (function(dateStr) {
	      if (!isNaN(dateStr.getTime())) {
	        dateStr = moment(dateStr).format($__9.cellProperties.dateFormat || $__9.defaultDateFormat);
	      }
	      $__9.setValue(dateStr);
	      $__9.hideDatepicker();
	      if (origOnSelect) {
	        origOnSelect();
	      }
	    });
	    options.onClose = (function() {
	      if (!$__9.parentDestroyed) {
	        $__9.finishEditing(false);
	      }
	      if (origOnClose) {
	        origOnClose();
	      }
	    });
	    return options;
	  }
	}, {}, TextEditor);
	;
	registerEditor('date', DateEditor);

	//# 
	},{"editors":29,"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/object":50,"helpers/unicode":53,"moment":"moment","pikaday":"pikaday","textEditor":40}],34:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DropdownEditor: {get: function() {
	      return DropdownEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_editors__,
	    $__autocompleteEditor__;
	var $__0 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__0.getEditor,
	    registerEditor = $__0.registerEditor;
	var AutocompleteEditor = ($__autocompleteEditor__ = require("autocompleteEditor"), $__autocompleteEditor__ && $__autocompleteEditor__.__esModule && $__autocompleteEditor__ || {default: $__autocompleteEditor__}).AutocompleteEditor;
	var DropdownEditor = function DropdownEditor() {
	  $traceurRuntime.superConstructor($DropdownEditor).apply(this, arguments);
	};
	var $DropdownEditor = DropdownEditor;
	($traceurRuntime.createClass)(DropdownEditor, {prepare: function(row, col, prop, td, originalValue, cellProperties) {
	    $traceurRuntime.superGet(this, $DropdownEditor.prototype, "prepare").call(this, row, col, prop, td, originalValue, cellProperties);
	    this.cellProperties.filter = false;
	    this.cellProperties.strict = true;
	  }}, {}, AutocompleteEditor);
	Handsontable.hooks.add('beforeValidate', function(value, row, col, source) {
	  var cellMeta = this.getCellMeta(row, col);
	  if (cellMeta.editor === Handsontable.editors.DropdownEditor) {
	    if (cellMeta.strict === void 0) {
	      cellMeta.filter = false;
	      cellMeta.strict = true;
	    }
	  }
	});
	;
	registerEditor('dropdown', DropdownEditor);

	//# 
	},{"autocompleteEditor":31,"editors":29}],35:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  HandsontableEditor: {get: function() {
	      return HandsontableEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47_editors__,
	    $__textEditor__;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var extend = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).extend;
	var setCaretPosition = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).setCaretPosition;
	var $__3 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopImmediatePropagation = $__3.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__3.isImmediatePropagationStopped;
	var $__4 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__4.getEditor,
	    registerEditor = $__4.registerEditor;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var HandsontableEditor = TextEditor.prototype.extend();
	HandsontableEditor.prototype.createElements = function() {
	  TextEditor.prototype.createElements.apply(this, arguments);
	  var DIV = document.createElement('DIV');
	  DIV.className = 'handsontableEditor';
	  this.TEXTAREA_PARENT.appendChild(DIV);
	  this.htContainer = DIV;
	  this.assignHooks();
	};
	HandsontableEditor.prototype.prepare = function(td, row, col, prop, value, cellProperties) {
	  TextEditor.prototype.prepare.apply(this, arguments);
	  var parent = this;
	  var options = {
	    startRows: 0,
	    startCols: 0,
	    minRows: 0,
	    minCols: 0,
	    className: 'listbox',
	    copyPaste: false,
	    autoColumnSize: false,
	    autoRowSize: false,
	    readOnly: true,
	    fillHandle: false,
	    afterOnCellMouseDown: function() {
	      var value = this.getValue();
	      if (value !== void 0) {
	        parent.setValue(value);
	      }
	      parent.instance.destroyEditor();
	    }
	  };
	  if (this.cellProperties.handsontable) {
	    extend(options, cellProperties.handsontable);
	  }
	  this.htOptions = options;
	};
	var onBeforeKeyDown = function(event) {
	  if (isImmediatePropagationStopped(event)) {
	    return;
	  }
	  var editor = this.getActiveEditor();
	  var innerHOT = editor.htEditor.getInstance();
	  var rowToSelect;
	  if (event.keyCode == KEY_CODES.ARROW_DOWN) {
	    if (innerHOT.getSelected()) {
	      var selectedRow = innerHOT.getSelected()[0];
	      var lastRow = innerHOT.countRows() - 1;
	      rowToSelect = Math.min(lastRow, selectedRow + 1);
	    } else {
	      rowToSelect = 0;
	    }
	  } else if (event.keyCode == KEY_CODES.ARROW_UP) {
	    if (innerHOT.getSelected()) {
	      var selectedRow = innerHOT.getSelected()[0];
	      rowToSelect = selectedRow - 1;
	    }
	  }
	  if (rowToSelect !== void 0) {
	    if (rowToSelect < 0) {
	      innerHOT.deselectCell();
	    } else {
	      innerHOT.selectCell(rowToSelect, 0);
	    }
	    if (innerHOT.getData().length) {
	      event.preventDefault();
	      stopImmediatePropagation(event);
	      editor.instance.listen();
	      editor.TEXTAREA.focus();
	    }
	  }
	};
	HandsontableEditor.prototype.open = function() {
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  TextEditor.prototype.open.apply(this, arguments);
	  if (this.htEditor) {
	    this.htEditor.destroy();
	  }
	  this.htEditor = new Handsontable(this.htContainer, this.htOptions);
	  if (this.cellProperties.strict) {
	    this.htEditor.selectCell(0, 0);
	    this.TEXTAREA.style.visibility = 'hidden';
	  } else {
	    this.htEditor.deselectCell();
	    this.TEXTAREA.style.visibility = 'visible';
	  }
	  setCaretPosition(this.TEXTAREA, 0, this.TEXTAREA.value.length);
	};
	HandsontableEditor.prototype.close = function() {
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	  this.instance.listen();
	  TextEditor.prototype.close.apply(this, arguments);
	};
	HandsontableEditor.prototype.focus = function() {
	  this.instance.listen();
	  TextEditor.prototype.focus.apply(this, arguments);
	};
	HandsontableEditor.prototype.beginEditing = function(initialValue) {
	  var onBeginEditing = this.instance.getSettings().onBeginEditing;
	  if (onBeginEditing && onBeginEditing() === false) {
	    return;
	  }
	  TextEditor.prototype.beginEditing.apply(this, arguments);
	};
	HandsontableEditor.prototype.finishEditing = function(isCancelled, ctrlDown) {
	  if (this.htEditor && this.htEditor.isListening()) {
	    this.instance.listen();
	  }
	  if (this.htEditor && this.htEditor.getSelected()) {
	    var value = this.htEditor.getInstance().getValue();
	    if (value !== void 0) {
	      this.setValue(value);
	    }
	  }
	  return TextEditor.prototype.finishEditing.apply(this, arguments);
	};
	HandsontableEditor.prototype.assignHooks = function() {
	  var _this = this;
	  this.instance.addHook('afterDestroy', function() {
	    if (_this.htEditor) {
	      _this.htEditor.destroy();
	    }
	  });
	};
	;
	registerEditor('handsontable', HandsontableEditor);

	//# 
	},{"editors":29,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/object":50,"helpers/unicode":53,"textEditor":40}],36:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MobileTextEditor: {get: function() {
	      return MobileTextEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_editors__,
	    $___95_baseEditor__,
	    $___46__46__47_eventManager__;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__1 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopImmediatePropagation = $__1.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__1.isImmediatePropagationStopped;
	var $__2 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__2.addClass,
	    getScrollLeft = $__2.getScrollLeft,
	    getScrollTop = $__2.getScrollTop,
	    hasClass = $__2.hasClass,
	    isChildOf = $__2.isChildOf,
	    offset = $__2.offset,
	    outerHeight = $__2.outerHeight,
	    outerWidth = $__2.outerWidth,
	    removeClass = $__2.removeClass,
	    setCaretPosition = $__2.setCaretPosition;
	var $__3 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__3.getEditor,
	    registerEditor = $__3.registerEditor;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var eventManagerObject = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).eventManager;
	var MobileTextEditor = BaseEditor.prototype.extend(),
	    domDimensionsCache = {};
	var createControls = function() {
	  this.controls = {};
	  this.controls.leftButton = document.createElement('DIV');
	  this.controls.leftButton.className = 'leftButton';
	  this.controls.rightButton = document.createElement('DIV');
	  this.controls.rightButton.className = 'rightButton';
	  this.controls.upButton = document.createElement('DIV');
	  this.controls.upButton.className = 'upButton';
	  this.controls.downButton = document.createElement('DIV');
	  this.controls.downButton.className = 'downButton';
	  for (var button in this.controls) {
	    if (this.controls.hasOwnProperty(button)) {
	      this.positionControls.appendChild(this.controls[button]);
	    }
	  }
	};
	MobileTextEditor.prototype.valueChanged = function() {
	  return this.initValue != this.getValue();
	};
	MobileTextEditor.prototype.init = function() {
	  var that = this;
	  this.eventManager = eventManagerObject(this.instance);
	  this.createElements();
	  this.bindEvents();
	  this.instance.addHook('afterDestroy', function() {
	    that.destroy();
	  });
	};
	MobileTextEditor.prototype.getValue = function() {
	  return this.TEXTAREA.value;
	};
	MobileTextEditor.prototype.setValue = function(newValue) {
	  this.initValue = newValue;
	  this.TEXTAREA.value = newValue;
	};
	MobileTextEditor.prototype.createElements = function() {
	  this.editorContainer = document.createElement('DIV');
	  this.editorContainer.className = 'htMobileEditorContainer';
	  this.cellPointer = document.createElement('DIV');
	  this.cellPointer.className = 'cellPointer';
	  this.moveHandle = document.createElement('DIV');
	  this.moveHandle.className = 'moveHandle';
	  this.inputPane = document.createElement('DIV');
	  this.inputPane.className = 'inputs';
	  this.positionControls = document.createElement('DIV');
	  this.positionControls.className = 'positionControls';
	  this.TEXTAREA = document.createElement('TEXTAREA');
	  addClass(this.TEXTAREA, 'handsontableInput');
	  this.inputPane.appendChild(this.TEXTAREA);
	  this.editorContainer.appendChild(this.cellPointer);
	  this.editorContainer.appendChild(this.moveHandle);
	  this.editorContainer.appendChild(this.inputPane);
	  this.editorContainer.appendChild(this.positionControls);
	  createControls.call(this);
	  document.body.appendChild(this.editorContainer);
	};
	MobileTextEditor.prototype.onBeforeKeyDown = function(event) {
	  var instance = this;
	  var that = instance.getActiveEditor();
	  if (event.target !== that.TEXTAREA || isImmediatePropagationStopped(event)) {
	    return;
	  }
	  switch (event.keyCode) {
	    case KEY_CODES.ENTER:
	      that.close();
	      event.preventDefault();
	      break;
	    case KEY_CODES.BACKSPACE:
	      stopImmediatePropagation(event);
	      break;
	  }
	};
	MobileTextEditor.prototype.open = function() {
	  this.instance.addHook('beforeKeyDown', this.onBeforeKeyDown);
	  addClass(this.editorContainer, 'active');
	  removeClass(this.cellPointer, 'hidden');
	  this.updateEditorPosition();
	};
	MobileTextEditor.prototype.focus = function() {
	  this.TEXTAREA.focus();
	  setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length);
	};
	MobileTextEditor.prototype.close = function() {
	  this.TEXTAREA.blur();
	  this.instance.removeHook('beforeKeyDown', this.onBeforeKeyDown);
	  removeClass(this.editorContainer, 'active');
	};
	MobileTextEditor.prototype.scrollToView = function() {
	  var coords = this.instance.getSelectedRange().highlight;
	  this.instance.view.scrollViewport(coords);
	};
	MobileTextEditor.prototype.hideCellPointer = function() {
	  if (!hasClass(this.cellPointer, 'hidden')) {
	    addClass(this.cellPointer, 'hidden');
	  }
	};
	MobileTextEditor.prototype.updateEditorPosition = function(x, y) {
	  if (x && y) {
	    x = parseInt(x, 10);
	    y = parseInt(y, 10);
	    this.editorContainer.style.top = y + 'px';
	    this.editorContainer.style.left = x + 'px';
	  } else {
	    var selection = this.instance.getSelected(),
	        selectedCell = this.instance.getCell(selection[0], selection[1]);
	    if (!domDimensionsCache.cellPointer) {
	      domDimensionsCache.cellPointer = {
	        height: outerHeight(this.cellPointer),
	        width: outerWidth(this.cellPointer)
	      };
	    }
	    if (!domDimensionsCache.editorContainer) {
	      domDimensionsCache.editorContainer = {width: outerWidth(this.editorContainer)};
	    }
	    if (selectedCell !== undefined) {
	      var scrollLeft = this.instance.view.wt.wtOverlays.leftOverlay.trimmingContainer == window ? 0 : getScrollLeft(this.instance.view.wt.wtOverlays.leftOverlay.holder);
	      var scrollTop = this.instance.view.wt.wtOverlays.topOverlay.trimmingContainer == window ? 0 : getScrollTop(this.instance.view.wt.wtOverlays.topOverlay.holder);
	      var selectedCellOffset = offset(selectedCell),
	          selectedCellWidth = outerWidth(selectedCell),
	          currentScrollPosition = {
	            x: scrollLeft,
	            y: scrollTop
	          };
	      this.editorContainer.style.top = parseInt(selectedCellOffset.top + outerHeight(selectedCell) - currentScrollPosition.y + domDimensionsCache.cellPointer.height, 10) + 'px';
	      this.editorContainer.style.left = parseInt((window.innerWidth / 2) - (domDimensionsCache.editorContainer.width / 2), 10) + 'px';
	      if (selectedCellOffset.left + selectedCellWidth / 2 > parseInt(this.editorContainer.style.left, 10) + domDimensionsCache.editorContainer.width) {
	        this.editorContainer.style.left = window.innerWidth - domDimensionsCache.editorContainer.width + 'px';
	      } else if (selectedCellOffset.left + selectedCellWidth / 2 < parseInt(this.editorContainer.style.left, 10) + 20) {
	        this.editorContainer.style.left = 0 + 'px';
	      }
	      this.cellPointer.style.left = parseInt(selectedCellOffset.left - (domDimensionsCache.cellPointer.width / 2) - offset(this.editorContainer).left + (selectedCellWidth / 2) - currentScrollPosition.x, 10) + 'px';
	    }
	  }
	};
	MobileTextEditor.prototype.updateEditorData = function() {
	  var selected = this.instance.getSelected(),
	      selectedValue = this.instance.getDataAtCell(selected[0], selected[1]);
	  this.row = selected[0];
	  this.col = selected[1];
	  this.setValue(selectedValue);
	  this.updateEditorPosition();
	};
	MobileTextEditor.prototype.prepareAndSave = function() {
	  var val;
	  if (!this.valueChanged()) {
	    return true;
	  }
	  if (this.instance.getSettings().trimWhitespace) {
	    val = [[String.prototype.trim.call(this.getValue())]];
	  } else {
	    val = [[this.getValue()]];
	  }
	  this.saveValue(val);
	};
	MobileTextEditor.prototype.bindEvents = function() {
	  var that = this;
	  this.eventManager.addEventListener(this.controls.leftButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(0, -1, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.controls.rightButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(0, 1, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.controls.upButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(-1, 0, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.controls.downButton, 'touchend', function(event) {
	    that.prepareAndSave();
	    that.instance.selection.transformStart(1, 0, null, true);
	    that.updateEditorData();
	    event.preventDefault();
	  });
	  this.eventManager.addEventListener(this.moveHandle, 'touchstart', function(event) {
	    if (event.touches.length == 1) {
	      var touch = event.touches[0],
	          onTouchPosition = {
	            x: that.editorContainer.offsetLeft,
	            y: that.editorContainer.offsetTop
	          },
	          onTouchOffset = {
	            x: touch.pageX - onTouchPosition.x,
	            y: touch.pageY - onTouchPosition.y
	          };
	      that.eventManager.addEventListener(this, 'touchmove', function(event) {
	        var touch = event.touches[0];
	        that.updateEditorPosition(touch.pageX - onTouchOffset.x, touch.pageY - onTouchOffset.y);
	        that.hideCellPointer();
	        event.preventDefault();
	      });
	    }
	  });
	  this.eventManager.addEventListener(document.body, 'touchend', function(event) {
	    if (!isChildOf(event.target, that.editorContainer) && !isChildOf(event.target, that.instance.rootElement)) {
	      that.close();
	    }
	  });
	  this.eventManager.addEventListener(this.instance.view.wt.wtOverlays.leftOverlay.holder, 'scroll', function(event) {
	    if (that.instance.view.wt.wtOverlays.leftOverlay.trimmingContainer != window) {
	      that.hideCellPointer();
	    }
	  });
	  this.eventManager.addEventListener(this.instance.view.wt.wtOverlays.topOverlay.holder, 'scroll', function(event) {
	    if (that.instance.view.wt.wtOverlays.topOverlay.trimmingContainer != window) {
	      that.hideCellPointer();
	    }
	  });
	};
	MobileTextEditor.prototype.destroy = function() {
	  this.eventManager.clear();
	  this.editorContainer.parentNode.removeChild(this.editorContainer);
	};
	;
	registerEditor('mobile', MobileTextEditor);

	//# 
	},{"_baseEditor":30,"editors":29,"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/unicode":53}],37:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  NumericEditor: {get: function() {
	      return NumericEditor;
	    }},
	  __esModule: {value: true}
	});
	var $__numeral__,
	    $___46__46__47_editors__,
	    $__textEditor__;
	var numeral = ($__numeral__ = require("numeral"), $__numeral__ && $__numeral__.__esModule && $__numeral__ || {default: $__numeral__}).default;
	var $__1 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__1.getEditor,
	    registerEditor = $__1.registerEditor;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var NumericEditor = function NumericEditor() {
	  $traceurRuntime.superConstructor($NumericEditor).apply(this, arguments);
	};
	var $NumericEditor = NumericEditor;
	($traceurRuntime.createClass)(NumericEditor, {beginEditing: function(initialValue) {
	    if (typeof initialValue === 'undefined' && this.originalValue) {
	      if (typeof this.cellProperties.language !== 'undefined') {
	        numeral.language(this.cellProperties.language);
	      }
	      var decimalDelimiter = numeral.languageData().delimiters.decimal;
	      initialValue = ('' + this.originalValue).replace('.', decimalDelimiter);
	    }
	    $traceurRuntime.superGet(this, $NumericEditor.prototype, "beginEditing").call(this, initialValue);
	  }}, {}, TextEditor);
	;
	registerEditor('numeric', NumericEditor);

	//# 
	},{"editors":29,"numeral":"numeral","textEditor":40}],38:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  PasswordEditor: {get: function() {
	      return PasswordEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_editors__,
	    $__textEditor__;
	var empty = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).empty;
	var $__1 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__1.getEditor,
	    registerEditor = $__1.registerEditor;
	var TextEditor = ($__textEditor__ = require("textEditor"), $__textEditor__ && $__textEditor__.__esModule && $__textEditor__ || {default: $__textEditor__}).TextEditor;
	var PasswordEditor = function PasswordEditor() {
	  $traceurRuntime.superConstructor($PasswordEditor).apply(this, arguments);
	};
	var $PasswordEditor = PasswordEditor;
	($traceurRuntime.createClass)(PasswordEditor, {createElements: function() {
	    $traceurRuntime.superGet(this, $PasswordEditor.prototype, "createElements").call(this);
	    this.TEXTAREA = document.createElement('input');
	    this.TEXTAREA.setAttribute('type', 'password');
	    this.TEXTAREA.className = 'handsontableInput';
	    this.textareaStyle = this.TEXTAREA.style;
	    this.textareaStyle.width = 0;
	    this.textareaStyle.height = 0;
	    empty(this.TEXTAREA_PARENT);
	    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
	  }}, {}, TextEditor);
	;
	registerEditor('password', PasswordEditor);

	//# 
	},{"editors":29,"helpers/dom/element":45,"textEditor":40}],39:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  SelectEditor: {get: function() {
	      return SelectEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_editors__,
	    $___95_baseEditor__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    fastInnerHTML = $__0.fastInnerHTML,
	    getComputedStyle = $__0.getComputedStyle,
	    getCssTransform = $__0.getCssTransform,
	    getScrollableElement = $__0.getScrollableElement,
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth,
	    resetCssTransform = $__0.resetCssTransform;
	var stopImmediatePropagation = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__3 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__3.getEditor,
	    registerEditor = $__3.registerEditor;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var SelectEditor = BaseEditor.prototype.extend();
	SelectEditor.prototype.init = function() {
	  this.select = document.createElement('SELECT');
	  addClass(this.select, 'htSelectEditor');
	  this.select.style.display = 'none';
	  this.instance.rootElement.appendChild(this.select);
	  this.registerHooks();
	};
	SelectEditor.prototype.registerHooks = function() {
	  var $__5 = this;
	  this.instance.addHook('afterScrollVertically', (function() {
	    return $__5.refreshDimensions();
	  }));
	  this.instance.addHook('afterColumnResize', (function() {
	    return $__5.refreshDimensions();
	  }));
	  this.instance.addHook('afterRowResize', (function() {
	    return $__5.refreshDimensions();
	  }));
	};
	SelectEditor.prototype.prepare = function() {
	  BaseEditor.prototype.prepare.apply(this, arguments);
	  var selectOptions = this.cellProperties.selectOptions;
	  var options;
	  if (typeof selectOptions == 'function') {
	    options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));
	  } else {
	    options = this.prepareOptions(selectOptions);
	  }
	  empty(this.select);
	  for (var option in options) {
	    if (options.hasOwnProperty(option)) {
	      var optionElement = document.createElement('OPTION');
	      optionElement.value = option;
	      fastInnerHTML(optionElement, options[option]);
	      this.select.appendChild(optionElement);
	    }
	  }
	};
	SelectEditor.prototype.prepareOptions = function(optionsToPrepare) {
	  var preparedOptions = {};
	  if (Array.isArray(optionsToPrepare)) {
	    for (var i = 0,
	        len = optionsToPrepare.length; i < len; i++) {
	      preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];
	    }
	  } else if (typeof optionsToPrepare == 'object') {
	    preparedOptions = optionsToPrepare;
	  }
	  return preparedOptions;
	};
	SelectEditor.prototype.getValue = function() {
	  return this.select.value;
	};
	SelectEditor.prototype.setValue = function(value) {
	  this.select.value = value;
	};
	var onBeforeKeyDown = function(event) {
	  var instance = this;
	  var editor = instance.getActiveEditor();
	  switch (event.keyCode) {
	    case KEY_CODES.ARROW_UP:
	      var previousOptionIndex = editor.select.selectedIndex - 1;
	      if (previousOptionIndex >= 0) {
	        editor.select[previousOptionIndex].selected = true;
	      }
	      stopImmediatePropagation(event);
	      event.preventDefault();
	      break;
	    case KEY_CODES.ARROW_DOWN:
	      var nextOptionIndex = editor.select.selectedIndex + 1;
	      if (nextOptionIndex <= editor.select.length - 1) {
	        editor.select[nextOptionIndex].selected = true;
	      }
	      stopImmediatePropagation(event);
	      event.preventDefault();
	      break;
	  }
	};
	SelectEditor.prototype.open = function() {
	  this._opened = true;
	  this.refreshDimensions();
	  this.select.style.display = '';
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	};
	SelectEditor.prototype.close = function() {
	  this._opened = false;
	  this.select.style.display = 'none';
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	};
	SelectEditor.prototype.focus = function() {
	  this.select.focus();
	};
	SelectEditor.prototype.refreshDimensions = function() {
	  if (this.state !== Handsontable.EditorState.EDITING) {
	    return;
	  }
	  this.TD = this.getEditedCell();
	  if (!this.TD) {
	    this.close();
	    return;
	  }
	  var width = outerWidth(this.TD) + 1,
	      height = outerHeight(this.TD) + 1,
	      currentOffset = offset(this.TD),
	      containerOffset = offset(this.instance.rootElement),
	      scrollableContainer = getScrollableElement(this.TD),
	      editTop = currentOffset.top - containerOffset.top - 1 - (scrollableContainer.scrollTop || 0),
	      editLeft = currentOffset.left - containerOffset.left - 1 - (scrollableContainer.scrollLeft || 0),
	      editorSection = this.checkEditorSection(),
	      cssTransformOffset;
	  var settings = this.instance.getSettings();
	  var rowHeadersCount = settings.rowHeaders ? 1 : 0;
	  var colHeadersCount = settings.colHeaders ? 1 : 0;
	  switch (editorSection) {
	    case 'top':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'left':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'top-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      break;
	  }
	  if (this.instance.getSelected()[0] === 0) {
	    editTop += 1;
	  }
	  if (this.instance.getSelected()[1] === 0) {
	    editLeft += 1;
	  }
	  var selectStyle = this.select.style;
	  if (cssTransformOffset && cssTransformOffset != -1) {
	    selectStyle[cssTransformOffset[0]] = cssTransformOffset[1];
	  } else {
	    resetCssTransform(this.select);
	  }
	  var cellComputedStyle = getComputedStyle(this.TD);
	  if (parseInt(cellComputedStyle.borderTopWidth, 10) > 0) {
	    height -= 1;
	  }
	  if (parseInt(cellComputedStyle.borderLeftWidth, 10) > 0) {
	    width -= 1;
	  }
	  selectStyle.height = height + 'px';
	  selectStyle.minWidth = width + 'px';
	  selectStyle.top = editTop + 'px';
	  selectStyle.left = editLeft + 'px';
	  selectStyle.margin = '0px';
	};
	SelectEditor.prototype.getEditedCell = function() {
	  var editorSection = this.checkEditorSection(),
	      editedCell;
	  switch (editorSection) {
	    case 'top':
	      editedCell = this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 101;
	      break;
	    case 'corner':
	      editedCell = this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 103;
	      break;
	    case 'left':
	      editedCell = this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 102;
	      break;
	    default:
	      editedCell = this.instance.getCell(this.row, this.col);
	      this.select.style.zIndex = '';
	      break;
	  }
	  return editedCell != -1 && editedCell != -2 ? editedCell : void 0;
	};
	;
	registerEditor('select', SelectEditor);

	//# 
	},{"_baseEditor":30,"editors":29,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/unicode":53}],40:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  TextEditor: {get: function() {
	      return TextEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $__autoResize__,
	    $___95_baseEditor__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_editors__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    getCaretPosition = $__0.getCaretPosition,
	    getComputedStyle = $__0.getComputedStyle,
	    getCssTransform = $__0.getCssTransform,
	    getScrollableElement = $__0.getScrollableElement,
	    innerWidth = $__0.innerWidth,
	    offset = $__0.offset,
	    resetCssTransform = $__0.resetCssTransform,
	    setCaretPosition = $__0.setCaretPosition;
	var autoResize = ($__autoResize__ = require("autoResize"), $__autoResize__ && $__autoResize__.__esModule && $__autoResize__ || {default: $__autoResize__}).default;
	var BaseEditor = ($___95_baseEditor__ = require("_baseEditor"), $___95_baseEditor__ && $___95_baseEditor__.__esModule && $___95_baseEditor__ || {default: $___95_baseEditor__}).BaseEditor;
	var eventManagerObject = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).eventManager;
	var $__4 = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}),
	    getEditor = $__4.getEditor,
	    registerEditor = $__4.registerEditor;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__6 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopPropagation = $__6.stopPropagation,
	    stopImmediatePropagation = $__6.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__6.isImmediatePropagationStopped;
	var TextEditor = BaseEditor.prototype.extend();
	TextEditor.prototype.init = function() {
	  var that = this;
	  this.createElements();
	  this.eventManager = eventManagerObject(this);
	  this.bindEvents();
	  this.autoResize = autoResize();
	  this.instance.addHook('afterDestroy', function() {
	    that.destroy();
	  });
	};
	TextEditor.prototype.getValue = function() {
	  return this.TEXTAREA.value;
	};
	TextEditor.prototype.setValue = function(newValue) {
	  this.TEXTAREA.value = newValue;
	};
	var onBeforeKeyDown = function onBeforeKeyDown(event) {
	  var instance = this,
	      that = instance.getActiveEditor(),
	      ctrlDown;
	  ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	  if (event.target !== that.TEXTAREA || isImmediatePropagationStopped(event)) {
	    return;
	  }
	  if (event.keyCode === 17 || event.keyCode === 224 || event.keyCode === 91 || event.keyCode === 93) {
	    stopImmediatePropagation(event);
	    return;
	  }
	  switch (event.keyCode) {
	    case KEY_CODES.ARROW_RIGHT:
	      if (that.isInFullEditMode()) {
	        if ((!that.isWaiting() && !that.allowKeyEventPropagation) || (!that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode))) {
	          stopImmediatePropagation(event);
	        }
	      }
	      break;
	    case KEY_CODES.ARROW_LEFT:
	      if (that.isInFullEditMode()) {
	        if ((!that.isWaiting() && !that.allowKeyEventPropagation) || (!that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode))) {
	          stopImmediatePropagation(event);
	        }
	      }
	      break;
	    case KEY_CODES.ARROW_UP:
	    case KEY_CODES.ARROW_DOWN:
	      if (that.isInFullEditMode()) {
	        if ((!that.isWaiting() && !that.allowKeyEventPropagation) || (!that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode))) {
	          stopImmediatePropagation(event);
	        }
	      }
	      break;
	    case KEY_CODES.ENTER:
	      var selected = that.instance.getSelected();
	      var isMultipleSelection = !(selected[0] === selected[2] && selected[1] === selected[3]);
	      if ((ctrlDown && !isMultipleSelection) || event.altKey) {
	        if (that.isOpened()) {
	          var caretPosition = getCaretPosition(that.TEXTAREA),
	              value = that.getValue();
	          var newValue = value.slice(0, caretPosition) + '\n' + value.slice(caretPosition);
	          that.setValue(newValue);
	          setCaretPosition(that.TEXTAREA, caretPosition + 1);
	        } else {
	          that.beginEditing(that.originalValue + '\n');
	        }
	        stopImmediatePropagation(event);
	      }
	      event.preventDefault();
	      break;
	    case KEY_CODES.A:
	    case KEY_CODES.X:
	    case KEY_CODES.C:
	    case KEY_CODES.V:
	      if (ctrlDown) {
	        stopImmediatePropagation(event);
	      }
	      break;
	    case KEY_CODES.BACKSPACE:
	    case KEY_CODES.DELETE:
	    case KEY_CODES.HOME:
	    case KEY_CODES.END:
	      stopImmediatePropagation(event);
	      break;
	  }
	  if ([KEY_CODES.ARROW_UP, KEY_CODES.ARROW_RIGHT, KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_LEFT].indexOf(event.keyCode) === -1) {
	    that.autoResize.resize(String.fromCharCode(event.keyCode));
	  }
	};
	TextEditor.prototype.open = function() {
	  this.refreshDimensions();
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	};
	TextEditor.prototype.close = function(tdOutside) {
	  this.textareaParentStyle.display = 'none';
	  this.autoResize.unObserve();
	  if (document.activeElement === this.TEXTAREA) {
	    this.instance.listen();
	  }
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	};
	TextEditor.prototype.focus = function() {
	  this.TEXTAREA.focus();
	  setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length);
	};
	TextEditor.prototype.createElements = function() {
	  this.TEXTAREA = document.createElement('TEXTAREA');
	  addClass(this.TEXTAREA, 'handsontableInput');
	  this.textareaStyle = this.TEXTAREA.style;
	  this.textareaStyle.width = 0;
	  this.textareaStyle.height = 0;
	  this.TEXTAREA_PARENT = document.createElement('DIV');
	  addClass(this.TEXTAREA_PARENT, 'handsontableInputHolder');
	  this.textareaParentStyle = this.TEXTAREA_PARENT.style;
	  this.textareaParentStyle.top = 0;
	  this.textareaParentStyle.left = 0;
	  this.textareaParentStyle.display = 'none';
	  this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
	  this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);
	  var that = this;
	  this.instance._registerTimeout(setTimeout(function() {
	    that.refreshDimensions();
	  }, 0));
	};
	TextEditor.prototype.getEditedCell = function() {
	  var editorSection = this.checkEditorSection(),
	      editedCell;
	  switch (editorSection) {
	    case 'top':
	      editedCell = this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 101;
	      break;
	    case 'top-left-corner':
	      editedCell = this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 103;
	      break;
	    case 'bottom-left-corner':
	      editedCell = this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 103;
	      break;
	    case 'left':
	      editedCell = this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 102;
	      break;
	    case 'bottom':
	      editedCell = this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.textareaParentStyle.zIndex = 102;
	      break;
	    default:
	      editedCell = this.instance.getCell(this.row, this.col);
	      this.textareaParentStyle.zIndex = '';
	      break;
	  }
	  return editedCell != -1 && editedCell != -2 ? editedCell : void 0;
	};
	TextEditor.prototype.refreshDimensions = function() {
	  if (this.state !== Handsontable.EditorState.EDITING) {
	    return;
	  }
	  this.TD = this.getEditedCell();
	  if (!this.TD) {
	    this.close(true);
	    return;
	  }
	  var currentOffset = offset(this.TD),
	      containerOffset = offset(this.instance.rootElement),
	      scrollableContainer = getScrollableElement(this.TD),
	      totalRowsCount = this.instance.countRows(),
	      editTop = currentOffset.top - containerOffset.top - 1 - (scrollableContainer.scrollTop || 0),
	      editLeft = currentOffset.left - containerOffset.left - 1 - (scrollableContainer.scrollLeft || 0),
	      settings = this.instance.getSettings(),
	      rowHeadersCount = settings.rowHeaders ? 1 : 0,
	      colHeadersCount = settings.colHeaders ? 1 : 0,
	      editorSection = this.checkEditorSection(),
	      backgroundColor = this.TD.style.backgroundColor,
	      cssTransformOffset;
	  switch (editorSection) {
	    case 'top':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'left':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'top-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom-left-corner':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom':
	      cssTransformOffset = getCssTransform(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      break;
	  }
	  if (colHeadersCount && this.instance.getSelected()[0] === 0 || (settings.fixedRowsBottom && this.instance.getSelected()[0] === totalRowsCount - settings.fixedRowsBottom)) {
	    editTop += 1;
	  }
	  if (this.instance.getSelected()[1] === 0) {
	    editLeft += 1;
	  }
	  if (cssTransformOffset && cssTransformOffset != -1) {
	    this.textareaParentStyle[cssTransformOffset[0]] = cssTransformOffset[1];
	  } else {
	    resetCssTransform(this.textareaParentStyle);
	  }
	  this.textareaParentStyle.top = editTop + 'px';
	  this.textareaParentStyle.left = editLeft + 'px';
	  var cellTopOffset = this.TD.offsetTop - this.instance.view.wt.wtOverlays.topOverlay.getScrollPosition(),
	      cellLeftOffset = this.TD.offsetLeft - this.instance.view.wt.wtOverlays.leftOverlay.getScrollPosition();
	  var width = innerWidth(this.TD) - 8;
	  var maxWidth = this.instance.view.maximumVisibleElementWidth(cellLeftOffset) - 9;
	  var height = this.TD.scrollHeight + 1;
	  var maxHeight = Math.max(this.instance.view.maximumVisibleElementHeight(cellTopOffset) - 2, 23);
	  var cellComputedStyle = getComputedStyle(this.TD);
	  this.TEXTAREA.style.fontSize = cellComputedStyle.fontSize;
	  this.TEXTAREA.style.fontFamily = cellComputedStyle.fontFamily;
	  this.TEXTAREA.style.backgroundColor = '';
	  this.TEXTAREA.style.backgroundColor = backgroundColor ? backgroundColor : getComputedStyle(this.TEXTAREA).backgroundColor;
	  this.autoResize.init(this.TEXTAREA, {
	    minHeight: Math.min(height, maxHeight),
	    maxHeight: maxHeight,
	    minWidth: Math.min(width, maxWidth),
	    maxWidth: maxWidth
	  }, true);
	  this.textareaParentStyle.display = 'block';
	};
	TextEditor.prototype.bindEvents = function() {
	  var editor = this;
	  this.eventManager.addEventListener(this.TEXTAREA, 'cut', function(event) {
	    stopPropagation(event);
	  });
	  this.eventManager.addEventListener(this.TEXTAREA, 'paste', function(event) {
	    stopPropagation(event);
	  });
	  this.instance.addHook('afterScrollVertically', function() {
	    editor.refreshDimensions();
	  });
	  this.instance.addHook('afterColumnResize', function() {
	    editor.refreshDimensions();
	    editor.focus();
	  });
	  this.instance.addHook('afterRowResize', function() {
	    editor.refreshDimensions();
	    editor.focus();
	  });
	  this.instance.addHook('afterDestroy', function() {
	    editor.eventManager.destroy();
	  });
	};
	TextEditor.prototype.destroy = function() {
	  this.eventManager.destroy();
	};
	;
	registerEditor('text', TextEditor);

	//# 
	},{"_baseEditor":30,"autoResize":"autoResize","editors":29,"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/unicode":53}],41:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  EventManager: {get: function() {
	      return EventManager;
	    }},
	  eventManager: {get: function() {
	      return eventManager;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_dom_47_element__,
	    $__helpers_47_browser__;
	var $__0 = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__}),
	    polymerWrap = $__0.polymerWrap,
	    closest = $__0.closest;
	var isWebComponentSupportedNatively = ($__helpers_47_browser__ = require("helpers/browser"), $__helpers_47_browser__ && $__helpers_47_browser__.__esModule && $__helpers_47_browser__ || {default: $__helpers_47_browser__}).isWebComponentSupportedNatively;
	var EventManager = function EventManager() {
	  var context = arguments[0] !== (void 0) ? arguments[0] : null;
	  this.context = context || this;
	  if (!this.context.eventListeners) {
	    this.context.eventListeners = [];
	  }
	};
	($traceurRuntime.createClass)(EventManager, {
	  addEventListener: function(element, eventName, callback) {
	    var $__2 = this;
	    var context = this.context;
	    function callbackProxy(event) {
	      if (event.target == void 0 && event.srcElement != void 0) {
	        if (event.definePoperty) {
	          event.definePoperty('target', {value: event.srcElement});
	        } else {
	          event.target = event.srcElement;
	        }
	      }
	      if (event.preventDefault == void 0) {
	        if (event.definePoperty) {
	          event.definePoperty('preventDefault', {value: function() {
	              this.returnValue = false;
	            }});
	        } else {
	          event.preventDefault = function() {
	            this.returnValue = false;
	          };
	        }
	      }
	      event = extendEvent(context, event);
	      callback.call(this, event);
	    }
	    this.context.eventListeners.push({
	      element: element,
	      event: eventName,
	      callback: callback,
	      callbackProxy: callbackProxy
	    });
	    if (window.addEventListener) {
	      element.addEventListener(eventName, callbackProxy, false);
	    } else {
	      element.attachEvent('on' + eventName, callbackProxy);
	    }
	    Handsontable.countEventManagerListeners++;
	    return (function() {
	      $__2.removeEventListener(element, eventName, callback);
	    });
	  },
	  removeEventListener: function(element, eventName, callback) {
	    var len = this.context.eventListeners.length;
	    var tmpEvent;
	    while (len--) {
	      tmpEvent = this.context.eventListeners[len];
	      if (tmpEvent.event == eventName && tmpEvent.element == element) {
	        if (callback && callback != tmpEvent.callback) {
	          continue;
	        }
	        this.context.eventListeners.splice(len, 1);
	        if (tmpEvent.element.removeEventListener) {
	          tmpEvent.element.removeEventListener(tmpEvent.event, tmpEvent.callbackProxy, false);
	        } else {
	          tmpEvent.element.detachEvent('on' + tmpEvent.event, tmpEvent.callbackProxy);
	        }
	        Handsontable.countEventManagerListeners--;
	      }
	    }
	  },
	  clearEvents: function() {
	    if (!this.context) {
	      return;
	    }
	    var len = this.context.eventListeners.length;
	    while (len--) {
	      var event = this.context.eventListeners[len];
	      if (event) {
	        this.removeEventListener(event.element, event.event, event.callback);
	      }
	    }
	  },
	  clear: function() {
	    this.clearEvents();
	  },
	  destroy: function() {
	    this.clearEvents();
	    this.context = null;
	  },
	  fireEvent: function(element, eventName) {
	    var options = {
	      bubbles: true,
	      cancelable: (eventName !== 'mousemove'),
	      view: window,
	      detail: 0,
	      screenX: 0,
	      screenY: 0,
	      clientX: 1,
	      clientY: 1,
	      ctrlKey: false,
	      altKey: false,
	      shiftKey: false,
	      metaKey: false,
	      button: 0,
	      relatedTarget: undefined
	    };
	    var event;
	    if (document.createEvent) {
	      event = document.createEvent('MouseEvents');
	      event.initMouseEvent(eventName, options.bubbles, options.cancelable, options.view, options.detail, options.screenX, options.screenY, options.clientX, options.clientY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, options.relatedTarget || document.body.parentNode);
	    } else {
	      event = document.createEventObject();
	    }
	    if (element.dispatchEvent) {
	      element.dispatchEvent(event);
	    } else {
	      element.fireEvent('on' + eventName, event);
	    }
	  }
	}, {});
	function extendEvent(context, event) {
	  var componentName = 'HOT-TABLE';
	  var isHotTableSpotted;
	  var fromElement;
	  var realTarget;
	  var target;
	  var len;
	  event.isTargetWebComponent = false;
	  event.realTarget = event.target;
	  if (!Handsontable.eventManager.isHotTableEnv) {
	    return event;
	  }
	  event = polymerWrap(event);
	  len = event.path ? event.path.length : 0;
	  while (len--) {
	    if (event.path[len].nodeName === componentName) {
	      isHotTableSpotted = true;
	    } else if (isHotTableSpotted && event.path[len].shadowRoot) {
	      target = event.path[len];
	      break;
	    }
	    if (len === 0 && !target) {
	      target = event.path[len];
	    }
	  }
	  if (!target) {
	    target = event.target;
	  }
	  event.isTargetWebComponent = true;
	  if (isWebComponentSupportedNatively()) {
	    event.realTarget = event.srcElement || event.toElement;
	  } else if (context instanceof Handsontable.Core || context instanceof Walkontable) {
	    if (context instanceof Handsontable.Core) {
	      fromElement = context.view ? context.view.wt.wtTable.TABLE : null;
	    } else if (context instanceof Walkontable) {
	      fromElement = context.wtTable.TABLE.parentNode.parentNode;
	    }
	    realTarget = closest(event.target, [componentName], fromElement);
	    if (realTarget) {
	      event.realTarget = fromElement.querySelector(componentName) || event.target;
	    } else {
	      event.realTarget = event.target;
	    }
	  }
	  Object.defineProperty(event, 'target', {
	    get: function() {
	      return polymerWrap(target);
	    },
	    enumerable: true,
	    configurable: true
	  });
	  return event;
	}
	;
	window.Handsontable = window.Handsontable || {};
	Handsontable.countEventManagerListeners = 0;
	Handsontable.eventManager = eventManager;
	function eventManager(context) {
	  return new EventManager(context);
	}

	//# 
	},{"helpers/browser":43,"helpers/dom/element":45}],42:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  to2dArray: {get: function() {
	      return to2dArray;
	    }},
	  extendArray: {get: function() {
	      return extendArray;
	    }},
	  pivot: {get: function() {
	      return pivot;
	    }},
	  arrayReduce: {get: function() {
	      return arrayReduce;
	    }},
	  arrayFilter: {get: function() {
	      return arrayFilter;
	    }},
	  arrayMap: {get: function() {
	      return arrayMap;
	    }},
	  arrayEach: {get: function() {
	      return arrayEach;
	    }},
	  arraySum: {get: function() {
	      return arraySum;
	    }},
	  arrayMax: {get: function() {
	      return arrayMax;
	    }},
	  arrayMin: {get: function() {
	      return arrayMin;
	    }},
	  arrayAvg: {get: function() {
	      return arrayAvg;
	    }},
	  arrayFlatten: {get: function() {
	      return arrayFlatten;
	    }},
	  arrayUnique: {get: function() {
	      return arrayUnique;
	    }},
	  __esModule: {value: true}
	});
	function to2dArray(arr) {
	  var i = 0,
	      ilen = arr.length;
	  while (i < ilen) {
	    arr[i] = [arr[i]];
	    i++;
	  }
	}
	function extendArray(arr, extension) {
	  var i = 0,
	      ilen = extension.length;
	  while (i < ilen) {
	    arr.push(extension[i]);
	    i++;
	  }
	}
	function pivot(arr) {
	  var pivotedArr = [];
	  if (!arr || arr.length === 0 || !arr[0] || arr[0].length === 0) {
	    return pivotedArr;
	  }
	  var rowCount = arr.length;
	  var colCount = arr[0].length;
	  for (var i = 0; i < rowCount; i++) {
	    for (var j = 0; j < colCount; j++) {
	      if (!pivotedArr[j]) {
	        pivotedArr[j] = [];
	      }
	      pivotedArr[j][i] = arr[i][j];
	    }
	  }
	  return pivotedArr;
	}
	function arrayReduce(array, iteratee, accumulator, initFromArray) {
	  var index = -1,
	      length = array.length;
	  if (initFromArray && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];
	  while (++index < length) {
	    var value = array[index];
	    result[++resIndex] = iteratee(value, index, array);
	  }
	  return result;
	}
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	function arraySum(array) {
	  return arrayReduce(array, (function(a, b) {
	    return (a + b);
	  }), 0);
	}
	function arrayMax(array) {
	  return arrayReduce(array, (function(a, b) {
	    return (a > b ? a : b);
	  }), Array.isArray(array) ? array[0] : void 0);
	}
	function arrayMin(array) {
	  return arrayReduce(array, (function(a, b) {
	    return (a < b ? a : b);
	  }), Array.isArray(array) ? array[0] : void 0);
	}
	function arrayAvg(array) {
	  if (!array.length) {
	    return 0;
	  }
	  return arraySum(array) / array.length;
	}
	function arrayFlatten(array) {
	  return arrayReduce(array, (function(initial, value) {
	    return initial.concat(Array.isArray(value) ? arrayFlatten(value) : value);
	  }), []);
	}
	function arrayUnique(array) {
	  var unique = [];
	  arrayEach(array, (function(value) {
	    if (unique.indexOf(value) === -1) {
	      unique.push(value);
	    }
	  }));
	  return unique;
	}

	//# 
	},{}],43:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  isIE8: {get: function() {
	      return isIE8;
	    }},
	  isIE9: {get: function() {
	      return isIE9;
	    }},
	  isSafari: {get: function() {
	      return isSafari;
	    }},
	  isChrome: {get: function() {
	      return isChrome;
	    }},
	  isMobileBrowser: {get: function() {
	      return isMobileBrowser;
	    }},
	  isTouchSupported: {get: function() {
	      return isTouchSupported;
	    }},
	  isWebComponentSupportedNatively: {get: function() {
	      return isWebComponentSupportedNatively;
	    }},
	  hasCaptionProblem: {get: function() {
	      return hasCaptionProblem;
	    }},
	  __esModule: {value: true}
	});
	var _isIE8 = !(document.createTextNode('test').textContent);
	function isIE8() {
	  return _isIE8;
	}
	var _isIE9 = !!(document.documentMode);
	function isIE9() {
	  return _isIE9;
	}
	var _isSafari = (/Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor));
	function isSafari() {
	  return _isSafari;
	}
	var _isChrome = (/Chrome/.test(navigator.userAgent) && /Google/.test(navigator.vendor));
	function isChrome() {
	  return _isChrome;
	}
	function isMobileBrowser(userAgent) {
	  if (!userAgent) {
	    userAgent = navigator.userAgent;
	  }
	  return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent));
	}
	function isTouchSupported() {
	  return ('ontouchstart' in window);
	}
	function isWebComponentSupportedNatively() {
	  var test = document.createElement('div');
	  return test.createShadowRoot && test.createShadowRoot.toString().match(/\[native code\]/) ? true : false;
	}
	var _hasCaptionProblem;
	function detectCaptionProblem() {
	  var TABLE = document.createElement('TABLE');
	  TABLE.style.borderSpacing = 0;
	  TABLE.style.borderWidth = 0;
	  TABLE.style.padding = 0;
	  var TBODY = document.createElement('TBODY');
	  TABLE.appendChild(TBODY);
	  TBODY.appendChild(document.createElement('TR'));
	  TBODY.firstChild.appendChild(document.createElement('TD'));
	  TBODY.firstChild.firstChild.innerHTML = '<tr><td>t<br>t</td></tr>';
	  var CAPTION = document.createElement('CAPTION');
	  CAPTION.innerHTML = 'c<br>c<br>c<br>c';
	  CAPTION.style.padding = 0;
	  CAPTION.style.margin = 0;
	  TABLE.insertBefore(CAPTION, TBODY);
	  document.body.appendChild(TABLE);
	  _hasCaptionProblem = (TABLE.offsetHeight < 2 * TABLE.lastChild.offsetHeight);
	  document.body.removeChild(TABLE);
	}
	function hasCaptionProblem() {
	  if (_hasCaptionProblem === void 0) {
	    detectCaptionProblem();
	  }
	  return _hasCaptionProblem;
	}

	//# 
	},{}],44:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  spreadsheetColumnLabel: {get: function() {
	      return spreadsheetColumnLabel;
	    }},
	  createSpreadsheetData: {get: function() {
	      return createSpreadsheetData;
	    }},
	  createSpreadsheetObjectData: {get: function() {
	      return createSpreadsheetObjectData;
	    }},
	  createEmptySpreadsheetData: {get: function() {
	      return createEmptySpreadsheetData;
	    }},
	  translateRowsToColumns: {get: function() {
	      return translateRowsToColumns;
	    }},
	  cellMethodLookupFactory: {get: function() {
	      return cellMethodLookupFactory;
	    }},
	  __esModule: {value: true}
	});
	var $__object__;
	var getPrototypeOf = ($__object__ = require("object"), $__object__ && $__object__.__esModule && $__object__ || {default: $__object__}).getPrototypeOf;
	function spreadsheetColumnLabel(index) {
	  var dividend = index + 1;
	  var columnLabel = '';
	  var modulo;
	  while (dividend > 0) {
	    modulo = (dividend - 1) % 26;
	    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;
	    dividend = parseInt((dividend - modulo) / 26, 10);
	  }
	  return columnLabel;
	}
	function createSpreadsheetData(rowCount, colCount) {
	  rowCount = typeof rowCount === 'number' ? rowCount : 100;
	  colCount = typeof colCount === 'number' ? colCount : 4;
	  var rows = [],
	      i,
	      j;
	  for (i = 0; i < rowCount; i++) {
	    var row = [];
	    for (j = 0; j < colCount; j++) {
	      row.push(spreadsheetColumnLabel(j) + (i + 1));
	    }
	    rows.push(row);
	  }
	  return rows;
	}
	function createSpreadsheetObjectData(rowCount, colCount) {
	  rowCount = typeof rowCount === 'number' ? rowCount : 100;
	  colCount = typeof colCount === 'number' ? colCount : 4;
	  var rows = [],
	      i,
	      j;
	  for (i = 0; i < rowCount; i++) {
	    var row = {};
	    for (j = 0; j < colCount; j++) {
	      row['prop' + j] = spreadsheetColumnLabel(j) + (i + 1);
	    }
	    rows.push(row);
	  }
	  return rows;
	}
	function createEmptySpreadsheetData(rows, columns) {
	  var data = [];
	  var row;
	  for (var i = 0; i < rows; i++) {
	    row = [];
	    for (var j = 0; j < columns; j++) {
	      row.push('');
	    }
	    data.push(row);
	  }
	  return data;
	}
	function translateRowsToColumns(input) {
	  var i,
	      ilen,
	      j,
	      jlen,
	      output = [],
	      olen = 0;
	  for (i = 0, ilen = input.length; i < ilen; i++) {
	    for (j = 0, jlen = input[i].length; j < jlen; j++) {
	      if (j == olen) {
	        output.push([]);
	        olen++;
	      }
	      output[j].push(input[i][j]);
	    }
	  }
	  return output;
	}
	function cellMethodLookupFactory(methodName, allowUndefined) {
	  allowUndefined = typeof allowUndefined == 'undefined' ? true : allowUndefined;
	  return function cellMethodLookup(row, col) {
	    return (function getMethodFromProperties(properties) {
	      if (!properties) {
	        return;
	      } else if (properties.hasOwnProperty(methodName) && properties[methodName] !== void 0) {
	        return properties[methodName];
	      } else if (properties.hasOwnProperty('type') && properties.type) {
	        var type;
	        if (typeof properties.type != 'string') {
	          throw new Error('Cell type must be a string ');
	        }
	        type = translateTypeNameToObject(properties.type);
	        if (type.hasOwnProperty(methodName)) {
	          return type[methodName];
	        } else if (allowUndefined) {
	          return;
	        }
	      }
	      return getMethodFromProperties(getPrototypeOf(properties));
	    })(typeof row == 'number' ? this.getCellMeta(row, col) : row);
	  };
	  function translateTypeNameToObject(typeName) {
	    var type = Handsontable.cellTypes[typeName];
	    if (typeof type == 'undefined') {
	      throw new Error('You declared cell type "' + typeName + '" as a string that is not mapped to a known object. ' + 'Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');
	    }
	    return type;
	  }
	}

	//# 
	},{"object":50}],45:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  closest: {get: function() {
	      return closest;
	    }},
	  isChildOf: {get: function() {
	      return isChildOf;
	    }},
	  isChildOfWebComponentTable: {get: function() {
	      return isChildOfWebComponentTable;
	    }},
	  polymerWrap: {get: function() {
	      return polymerWrap;
	    }},
	  polymerUnwrap: {get: function() {
	      return polymerUnwrap;
	    }},
	  index: {get: function() {
	      return index;
	    }},
	  overlayContainsElement: {get: function() {
	      return overlayContainsElement;
	    }},
	  hasClass: {get: function() {
	      return hasClass;
	    }},
	  addClass: {get: function() {
	      return addClass;
	    }},
	  removeClass: {get: function() {
	      return removeClass;
	    }},
	  removeTextNodes: {get: function() {
	      return removeTextNodes;
	    }},
	  empty: {get: function() {
	      return empty;
	    }},
	  HTML_CHARACTERS: {get: function() {
	      return HTML_CHARACTERS;
	    }},
	  fastInnerHTML: {get: function() {
	      return fastInnerHTML;
	    }},
	  fastInnerText: {get: function() {
	      return fastInnerText;
	    }},
	  isVisible: {get: function() {
	      return isVisible;
	    }},
	  offset: {get: function() {
	      return offset;
	    }},
	  getWindowScrollTop: {get: function() {
	      return getWindowScrollTop;
	    }},
	  getWindowScrollLeft: {get: function() {
	      return getWindowScrollLeft;
	    }},
	  getScrollTop: {get: function() {
	      return getScrollTop;
	    }},
	  getScrollLeft: {get: function() {
	      return getScrollLeft;
	    }},
	  getScrollableElement: {get: function() {
	      return getScrollableElement;
	    }},
	  getTrimmingContainer: {get: function() {
	      return getTrimmingContainer;
	    }},
	  getStyle: {get: function() {
	      return getStyle;
	    }},
	  getComputedStyle: {get: function() {
	      return getComputedStyle;
	    }},
	  outerWidth: {get: function() {
	      return outerWidth;
	    }},
	  outerHeight: {get: function() {
	      return outerHeight;
	    }},
	  innerHeight: {get: function() {
	      return innerHeight;
	    }},
	  innerWidth: {get: function() {
	      return innerWidth;
	    }},
	  addEvent: {get: function() {
	      return addEvent;
	    }},
	  removeEvent: {get: function() {
	      return removeEvent;
	    }},
	  getCaretPosition: {get: function() {
	      return getCaretPosition;
	    }},
	  getSelectionEndPosition: {get: function() {
	      return getSelectionEndPosition;
	    }},
	  getSelectionText: {get: function() {
	      return getSelectionText;
	    }},
	  setCaretPosition: {get: function() {
	      return setCaretPosition;
	    }},
	  getScrollbarWidth: {get: function() {
	      return getScrollbarWidth;
	    }},
	  setOverlayPosition: {get: function() {
	      return setOverlayPosition;
	    }},
	  getCssTransform: {get: function() {
	      return getCssTransform;
	    }},
	  resetCssTransform: {get: function() {
	      return resetCssTransform;
	    }},
	  isInput: {get: function() {
	      return isInput;
	    }},
	  isOutsideInput: {get: function() {
	      return isOutsideInput;
	    }},
	  requestAnimationFrame: {get: function() {
	      return requestAnimationFrame;
	    }},
	  cancelAnimationFrame: {get: function() {
	      return cancelAnimationFrame;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_browser__;
	var $__0 = ($___46__46__47_browser__ = require("../browser"), $___46__46__47_browser__ && $___46__46__47_browser__.__esModule && $___46__46__47_browser__ || {default: $___46__46__47_browser__}),
	    isIE8 = $__0.isIE8,
	    isIE9 = $__0.isIE9,
	    isSafari = $__0.isSafari,
	    hasCaptionProblem = $__0.hasCaptionProblem;
	function closest(element, nodes, until) {
	  while (element != null && element !== until) {
	    if (element.nodeType === Node.ELEMENT_NODE && (nodes.indexOf(element.nodeName) > -1 || nodes.indexOf(element) > -1)) {
	      return element;
	    }
	    if (element.host && element.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      element = element.host;
	    } else {
	      element = element.parentNode;
	    }
	  }
	  return null;
	}
	function isChildOf(child, parent) {
	  var node = child.parentNode;
	  var queriedParents = [];
	  if (typeof parent === 'string') {
	    queriedParents = Array.prototype.slice.call(document.querySelectorAll(parent), 0);
	  } else {
	    queriedParents.push(parent);
	  }
	  while (node != null) {
	    if (queriedParents.indexOf(node) > -1) {
	      return true;
	    }
	    node = node.parentNode;
	  }
	  return false;
	}
	function isChildOfWebComponentTable(element) {
	  var hotTableName = 'hot-table',
	      result = false,
	      parentNode;
	  parentNode = polymerWrap(element);
	  function isHotTable(element) {
	    return element.nodeType === Node.ELEMENT_NODE && element.nodeName === hotTableName.toUpperCase();
	  }
	  while (parentNode != null) {
	    if (isHotTable(parentNode)) {
	      result = true;
	      break;
	    } else if (parentNode.host && parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      result = isHotTable(parentNode.host);
	      if (result) {
	        break;
	      }
	      parentNode = parentNode.host;
	    }
	    parentNode = parentNode.parentNode;
	  }
	  return result;
	}
	function polymerWrap(element) {
	  return typeof Polymer !== 'undefined' && typeof wrap === 'function' ? wrap(element) : element;
	}
	function polymerUnwrap(element) {
	  return typeof Polymer !== 'undefined' && typeof unwrap === 'function' ? unwrap(element) : element;
	}
	function index(element) {
	  var i = 0;
	  if (element.previousSibling) {
	    while (element = element.previousSibling) {
	      ++i;
	    }
	  }
	  return i;
	}
	function overlayContainsElement(overlayType, element) {
	  var overlayElement = document.querySelector('.ht_clone_' + overlayType);
	  return overlayElement ? overlayElement.contains(element) : null;
	}
	var classListSupport = document.documentElement.classList ? true : false;
	var _hasClass,
	    _addClass,
	    _removeClass;
	function filterEmptyClassNames(classNames) {
	  var len = 0,
	      result = [];
	  if (!classNames || !classNames.length) {
	    return result;
	  }
	  while (classNames[len]) {
	    result.push(classNames[len]);
	    len++;
	  }
	  return result;
	}
	if (classListSupport) {
	  var isSupportMultipleClassesArg = (function() {
	    var element = document.createElement('div');
	    element.classList.add('test', 'test2');
	    return element.classList.contains('test2');
	  }());
	  _hasClass = function _hasClass(element, className) {
	    if (className === '') {
	      return false;
	    }
	    return element.classList.contains(className);
	  };
	  _addClass = function _addClass(element, className) {
	    var len = 0;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    className = filterEmptyClassNames(className);
	    if (isSupportMultipleClassesArg) {
	      element.classList.add.apply(element.classList, className);
	    } else {
	      while (className && className[len]) {
	        element.classList.add(className[len]);
	        len++;
	      }
	    }
	  };
	  _removeClass = function _removeClass(element, className) {
	    var len = 0;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    className = filterEmptyClassNames(className);
	    if (isSupportMultipleClassesArg) {
	      element.classList.remove.apply(element.classList, className);
	    } else {
	      while (className && className[len]) {
	        element.classList.remove(className[len]);
	        len++;
	      }
	    }
	  };
	} else {
	  var createClassNameRegExp = function createClassNameRegExp(className) {
	    return new RegExp('(\\s|^)' + className + '(\\s|$)');
	  };
	  _hasClass = function _hasClass(element, className) {
	    return element.className.match(createClassNameRegExp(className)) ? true : false;
	  };
	  _addClass = function _addClass(element, className) {
	    var len = 0,
	        _className = element.className;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    if (_className === '') {
	      _className = className.join(' ');
	    } else {
	      while (className && className[len]) {
	        if (!createClassNameRegExp(className[len]).test(_className)) {
	          _className += ' ' + className[len];
	        }
	        len++;
	      }
	    }
	    element.className = _className;
	  };
	  _removeClass = function _removeClass(element, className) {
	    var len = 0,
	        _className = element.className;
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    while (className && className[len]) {
	      _className = _className.replace(createClassNameRegExp(className[len]), ' ').trim();
	      len++;
	    }
	    if (element.className !== _className) {
	      element.className = _className;
	    }
	  };
	}
	function hasClass(element, className) {
	  return _hasClass(element, className);
	}
	function addClass(element, className) {
	  return _addClass(element, className);
	}
	function removeClass(element, className) {
	  return _removeClass(element, className);
	}
	function removeTextNodes(element, parent) {
	  if (element.nodeType === 3) {
	    parent.removeChild(element);
	  } else if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR'].indexOf(element.nodeName) > -1) {
	    var childs = element.childNodes;
	    for (var i = childs.length - 1; i >= 0; i--) {
	      removeTextNodes(childs[i], element);
	    }
	  }
	}
	function empty(element) {
	  var child;
	  while (child = element.lastChild) {
	    element.removeChild(child);
	  }
	}
	var HTML_CHARACTERS = /(<(.*)>|&(.*);)/;
	function fastInnerHTML(element, content) {
	  if (HTML_CHARACTERS.test(content)) {
	    element.innerHTML = content;
	  } else {
	    fastInnerText(element, content);
	  }
	}
	var textContextSupport = document.createTextNode('test').textContent ? true : false;
	function fastInnerText(element, content) {
	  var child = element.firstChild;
	  if (child && child.nodeType === 3 && child.nextSibling === null) {
	    if (textContextSupport) {
	      child.textContent = content;
	    } else {
	      child.data = content;
	    }
	  } else {
	    empty(element);
	    element.appendChild(document.createTextNode(content));
	  }
	}
	function isVisible(elem) {
	  var next = elem;
	  while (polymerUnwrap(next) !== document.documentElement) {
	    if (next === null) {
	      return false;
	    } else if (next.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      if (next.host) {
	        if (next.host.impl) {
	          return isVisible(next.host.impl);
	        } else if (next.host) {
	          return isVisible(next.host);
	        } else {
	          throw new Error('Lost in Web Components world');
	        }
	      } else {
	        return false;
	      }
	    } else if (next.style.display === 'none') {
	      return false;
	    }
	    next = next.parentNode;
	  }
	  return true;
	}
	function offset(elem) {
	  var offsetLeft,
	      offsetTop,
	      lastElem,
	      docElem,
	      box;
	  docElem = document.documentElement;
	  if (hasCaptionProblem() && elem.firstChild && elem.firstChild.nodeName === 'CAPTION') {
	    box = elem.getBoundingClientRect();
	    return {
	      top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
	      left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
	    };
	  }
	  offsetLeft = elem.offsetLeft;
	  offsetTop = elem.offsetTop;
	  lastElem = elem;
	  while (elem = elem.offsetParent) {
	    if (elem === document.body) {
	      break;
	    }
	    offsetLeft += elem.offsetLeft;
	    offsetTop += elem.offsetTop;
	    lastElem = elem;
	  }
	  if (lastElem && lastElem.style.position === 'fixed') {
	    offsetLeft += window.pageXOffset || docElem.scrollLeft;
	    offsetTop += window.pageYOffset || docElem.scrollTop;
	  }
	  return {
	    left: offsetLeft,
	    top: offsetTop
	  };
	}
	function getWindowScrollTop() {
	  var res = window.scrollY;
	  if (res === void 0) {
	    res = document.documentElement.scrollTop;
	  }
	  return res;
	}
	function getWindowScrollLeft() {
	  var res = window.scrollX;
	  if (res === void 0) {
	    res = document.documentElement.scrollLeft;
	  }
	  return res;
	}
	function getScrollTop(element) {
	  if (element === window) {
	    return getWindowScrollTop();
	  } else {
	    return element.scrollTop;
	  }
	}
	function getScrollLeft(element) {
	  if (element === window) {
	    return getWindowScrollLeft();
	  } else {
	    return element.scrollLeft;
	  }
	}
	function getScrollableElement(element) {
	  var el = element.parentNode,
	      props = ['auto', 'scroll'],
	      overflow,
	      overflowX,
	      overflowY,
	      computedStyle = '',
	      computedOverflow = '',
	      computedOverflowY = '',
	      computedOverflowX = '';
	  while (el && el.style && document.body !== el) {
	    overflow = el.style.overflow;
	    overflowX = el.style.overflowX;
	    overflowY = el.style.overflowY;
	    if (overflow == 'scroll' || overflowX == 'scroll' || overflowY == 'scroll') {
	      return el;
	    } else if (window.getComputedStyle) {
	      computedStyle = window.getComputedStyle(el);
	      computedOverflow = computedStyle.getPropertyValue('overflow');
	      computedOverflowY = computedStyle.getPropertyValue('overflow-y');
	      computedOverflowX = computedStyle.getPropertyValue('overflow-x');
	      if (computedOverflow === 'scroll' || computedOverflowX === 'scroll' || computedOverflowY === 'scroll') {
	        return el;
	      }
	    }
	    if (el.clientHeight <= el.scrollHeight && (props.indexOf(overflowY) !== -1 || props.indexOf(overflow) !== -1 || props.indexOf(computedOverflow) !== -1 || props.indexOf(computedOverflowY) !== -1)) {
	      return el;
	    }
	    if (el.clientWidth <= el.scrollWidth && (props.indexOf(overflowX) !== -1 || props.indexOf(overflow) !== -1 || props.indexOf(computedOverflow) !== -1 || props.indexOf(computedOverflowX) !== -1)) {
	      return el;
	    }
	    el = el.parentNode;
	  }
	  return window;
	}
	function getTrimmingContainer(base) {
	  var el = base.parentNode;
	  while (el && el.style && document.body !== el) {
	    if (el.style.overflow !== 'visible' && el.style.overflow !== '') {
	      return el;
	    } else if (window.getComputedStyle) {
	      var computedStyle = window.getComputedStyle(el);
	      if (computedStyle.getPropertyValue('overflow') !== 'visible' && computedStyle.getPropertyValue('overflow') !== '') {
	        return el;
	      }
	    }
	    el = el.parentNode;
	  }
	  return window;
	}
	function getStyle(element, prop) {
	  if (!element) {
	    return;
	  } else if (element === window) {
	    if (prop === 'width') {
	      return window.innerWidth + 'px';
	    } else if (prop === 'height') {
	      return window.innerHeight + 'px';
	    }
	    return;
	  }
	  var styleProp = element.style[prop],
	      computedStyle;
	  if (styleProp !== '' && styleProp !== void 0) {
	    return styleProp;
	  } else {
	    computedStyle = getComputedStyle(element);
	    if (computedStyle[prop] !== '' && computedStyle[prop] !== void 0) {
	      return computedStyle[prop];
	    }
	    return void 0;
	  }
	}
	function getComputedStyle(element) {
	  return element.currentStyle || document.defaultView.getComputedStyle(element);
	}
	function outerWidth(element) {
	  return element.offsetWidth;
	}
	function outerHeight(elem) {
	  if (hasCaptionProblem() && elem.firstChild && elem.firstChild.nodeName === 'CAPTION') {
	    return elem.offsetHeight + elem.firstChild.offsetHeight;
	  } else {
	    return elem.offsetHeight;
	  }
	}
	function innerHeight(element) {
	  return element.clientHeight || element.innerHeight;
	}
	function innerWidth(element) {
	  return element.clientWidth || element.innerWidth;
	}
	function addEvent(element, event, callback) {
	  if (window.addEventListener) {
	    element.addEventListener(event, callback, false);
	  } else {
	    element.attachEvent('on' + event, callback);
	  }
	}
	function removeEvent(element, event, callback) {
	  if (window.removeEventListener) {
	    element.removeEventListener(event, callback, false);
	  } else {
	    element.detachEvent('on' + event, callback);
	  }
	}
	function getCaretPosition(el) {
	  if (el.selectionStart) {
	    return el.selectionStart;
	  } else if (document.selection) {
	    el.focus();
	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }
	    var re = el.createTextRange();
	    var rc = re.duplicate();
	    re.moveToBookmark(r.getBookmark());
	    rc.setEndPoint('EndToStart', re);
	    return rc.text.length;
	  }
	  return 0;
	}
	function getSelectionEndPosition(el) {
	  if (el.selectionEnd) {
	    return el.selectionEnd;
	  } else if (document.selection) {
	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }
	    var re = el.createTextRange();
	    return re.text.indexOf(r.text) + r.text.length;
	  }
	}
	function getSelectionText() {
	  var text = '';
	  if (window.getSelection) {
	    text = window.getSelection().toString();
	  } else if (document.selection && document.selection.type !== 'Control') {
	    text = document.selection.createRange().text;
	  }
	  return text;
	}
	function setCaretPosition(element, pos, endPos) {
	  if (endPos === void 0) {
	    endPos = pos;
	  }
	  if (element.setSelectionRange) {
	    element.focus();
	    try {
	      element.setSelectionRange(pos, endPos);
	    } catch (err) {
	      var elementParent = element.parentNode;
	      var parentDisplayValue = elementParent.style.display;
	      elementParent.style.display = 'block';
	      element.setSelectionRange(pos, endPos);
	      elementParent.style.display = parentDisplayValue;
	    }
	  } else if (element.createTextRange) {
	    var range = element.createTextRange();
	    range.collapse(true);
	    range.moveEnd('character', endPos);
	    range.moveStart('character', pos);
	    range.select();
	  }
	}
	var cachedScrollbarWidth;
	function walkontableCalculateScrollbarWidth() {
	  var inner = document.createElement('p');
	  inner.style.width = '100%';
	  inner.style.height = '200px';
	  var outer = document.createElement('div');
	  outer.style.position = 'absolute';
	  outer.style.top = '0px';
	  outer.style.left = '0px';
	  outer.style.visibility = 'hidden';
	  outer.style.width = '200px';
	  outer.style.height = '150px';
	  outer.style.overflow = 'hidden';
	  outer.appendChild(inner);
	  (document.body || document.documentElement).appendChild(outer);
	  var w1 = inner.offsetWidth;
	  outer.style.overflow = 'scroll';
	  var w2 = inner.offsetWidth;
	  if (w1 == w2) {
	    w2 = outer.clientWidth;
	  }
	  (document.body || document.documentElement).removeChild(outer);
	  return (w1 - w2);
	}
	function getScrollbarWidth() {
	  if (cachedScrollbarWidth === void 0) {
	    cachedScrollbarWidth = walkontableCalculateScrollbarWidth();
	  }
	  return cachedScrollbarWidth;
	}
	function setOverlayPosition(overlayElem, left, top) {
	  if (isIE8() || isIE9()) {
	    overlayElem.style.top = top;
	    overlayElem.style.left = left;
	  } else if (isSafari()) {
	    overlayElem.style['-webkit-transform'] = 'translate3d(' + left + ',' + top + ',0)';
	  } else {
	    overlayElem.style.transform = 'translate3d(' + left + ',' + top + ',0)';
	  }
	}
	function getCssTransform(element) {
	  var transform;
	  if (element.style.transform && (transform = element.style.transform) !== '') {
	    return ['transform', transform];
	  } else if (element.style['-webkit-transform'] && (transform = element.style['-webkit-transform']) !== '') {
	    return ['-webkit-transform', transform];
	  }
	  return -1;
	}
	function resetCssTransform(element) {
	  if (element.transform && element.transform !== '') {
	    element.transform = '';
	  } else if (element['-webkit-transform'] && element['-webkit-transform'] !== '') {
	    element['-webkit-transform'] = '';
	  }
	}
	function isInput(element) {
	  var inputs = ['INPUT', 'SELECT', 'TEXTAREA'];
	  return inputs.indexOf(element.nodeName) > -1 || element.contentEditable === 'true';
	}
	function isOutsideInput(element) {
	  return isInput(element) && element.className.indexOf('handsontableInput') == -1 && element.className.indexOf('copyPaste') == -1;
	}
	var lastTime = 0;
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	var _requestAnimationFrame = window.requestAnimationFrame;
	var _cancelAnimationFrame = window.cancelAnimationFrame;
	for (var x = 0; x < vendors.length && !_requestAnimationFrame; ++x) {
	  _requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	  _cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
	}
	if (!_requestAnimationFrame) {
	  _requestAnimationFrame = function(callback) {
	    var currTime = new Date().getTime();
	    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	    var id = window.setTimeout(function() {
	      callback(currTime + timeToCall);
	    }, timeToCall);
	    lastTime = currTime + timeToCall;
	    return id;
	  };
	}
	if (!_cancelAnimationFrame) {
	  _cancelAnimationFrame = function(id) {
	    clearTimeout(id);
	  };
	}
	function requestAnimationFrame(callback) {
	  return _requestAnimationFrame.call(window, callback);
	}
	function cancelAnimationFrame(id) {
	  _cancelAnimationFrame.call(window, id);
	}

	//# 
	},{"../browser":43}],46:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  stopImmediatePropagation: {get: function() {
	      return stopImmediatePropagation;
	    }},
	  isImmediatePropagationStopped: {get: function() {
	      return isImmediatePropagationStopped;
	    }},
	  stopPropagation: {get: function() {
	      return stopPropagation;
	    }},
	  pageX: {get: function() {
	      return pageX;
	    }},
	  pageY: {get: function() {
	      return pageY;
	    }},
	  __esModule: {value: true}
	});
	function stopImmediatePropagation(event) {
	  event.isImmediatePropagationEnabled = false;
	  event.cancelBubble = true;
	}
	function isImmediatePropagationStopped(event) {
	  return event.isImmediatePropagationEnabled === false;
	}
	function stopPropagation(event) {
	  if (typeof event.stopPropagation === 'function') {
	    event.stopPropagation();
	  } else {
	    event.cancelBubble = true;
	  }
	}
	function pageX(event) {
	  if (event.pageX) {
	    return event.pageX;
	  }
	  var scrollLeft = getWindowScrollLeft();
	  var cursorX = event.clientX + scrollLeft;
	  return cursorX;
	}
	function pageY(event) {
	  if (event.pageY) {
	    return event.pageY;
	  }
	  var scrollTop = getWindowScrollTop();
	  var cursorY = event.clientY + scrollTop;
	  return cursorY;
	}

	//# 
	},{}],47:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  proxy: {get: function() {
	      return proxy;
	    }},
	  throttle: {get: function() {
	      return throttle;
	    }},
	  throttleAfterHits: {get: function() {
	      return throttleAfterHits;
	    }},
	  __esModule: {value: true}
	});
	function proxy(fun, context) {
	  return function() {
	    return fun.apply(context, arguments);
	  };
	}
	function throttle(func) {
	  var wait = arguments[1] !== (void 0) ? arguments[1] : 200;
	  var lastCalled = 0;
	  var result = {lastCallThrottled: true};
	  var lastTimer = null;
	  function _throttle() {
	    var $__0 = this;
	    var args = arguments;
	    var stamp = Date.now();
	    var needCall = false;
	    result.lastCallThrottled = true;
	    if (!lastCalled) {
	      lastCalled = stamp;
	      needCall = true;
	    }
	    var remaining = wait - (stamp - lastCalled);
	    if (needCall) {
	      result.lastCallThrottled = false;
	      func.apply(this, args);
	    } else {
	      if (lastTimer) {
	        clearTimeout(lastTimer);
	      }
	      lastTimer = setTimeout((function() {
	        result.lastCallThrottled = false;
	        func.apply($__0, args);
	        lastCalled = 0;
	        lastTimer = void 0;
	      }), remaining);
	    }
	    return result;
	  }
	  return _throttle;
	}
	function throttleAfterHits(func) {
	  var wait = arguments[1] !== (void 0) ? arguments[1] : 200;
	  var hits = arguments[2] !== (void 0) ? arguments[2] : 10;
	  var funcThrottle = throttle(func, wait);
	  var remainHits = hits;
	  function _clearHits() {
	    remainHits = hits;
	  }
	  function _throttleAfterHits() {
	    if (remainHits) {
	      remainHits--;
	      return func.apply(this, arguments);
	    }
	    return funcThrottle.apply(this, arguments);
	  }
	  _throttleAfterHits.clearHits = _clearHits;
	  return _throttleAfterHits;
	}

	//# 
	},{}],48:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  stringify: {get: function() {
	      return stringify;
	    }},
	  __esModule: {value: true}
	});
	function stringify(value) {
	  switch (typeof value) {
	    case 'string':
	    case 'number':
	      return value + '';
	    case 'object':
	      if (value === null) {
	        return '';
	      } else {
	        return value.toString();
	      }
	      break;
	    case 'undefined':
	      return '';
	    default:
	      return value.toString();
	  }
	}

	//# 
	},{}],49:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  isNumeric: {get: function() {
	      return isNumeric;
	    }},
	  rangeEach: {get: function() {
	      return rangeEach;
	    }},
	  rangeEachReverse: {get: function() {
	      return rangeEachReverse;
	    }},
	  valueAccordingPercent: {get: function() {
	      return valueAccordingPercent;
	    }},
	  __esModule: {value: true}
	});
	function isNumeric(n) {
	  var t = typeof n;
	  return t == 'number' ? !isNaN(n) && isFinite(n) : t == 'string' ? !n.length ? false : n.length == 1 ? /\d/.test(n) : /^\s*[+-]?\s*(?:(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?)|(?:0x[a-f\d]+))\s*$/i.test(n) : t == 'object' ? !!n && typeof n.valueOf() == 'number' && !(n instanceof Date) : false;
	}
	function rangeEach(rangeFrom, rangeTo, iteratee) {
	  var index = -1;
	  if (typeof rangeTo === 'function') {
	    iteratee = rangeTo;
	    rangeTo = rangeFrom;
	  } else {
	    index = rangeFrom - 1;
	  }
	  while (++index <= rangeTo) {
	    if (iteratee(index) === false) {
	      break;
	    }
	  }
	}
	function rangeEachReverse(rangeFrom, rangeTo, iteratee) {
	  var index = rangeFrom + 1;
	  if (typeof rangeTo === 'function') {
	    iteratee = rangeTo;
	    rangeTo = 0;
	  }
	  while (--index >= rangeTo) {
	    if (iteratee(index) === false) {
	      break;
	    }
	  }
	}
	function valueAccordingPercent(value, percent) {
	  percent = parseInt(percent.toString().replace('%', ''), 10);
	  percent = parseInt(value * percent / 100);
	  return percent;
	}

	//# 
	},{}],50:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  duckSchema: {get: function() {
	      return duckSchema;
	    }},
	  inherit: {get: function() {
	      return inherit;
	    }},
	  extend: {get: function() {
	      return extend;
	    }},
	  deepExtend: {get: function() {
	      return deepExtend;
	    }},
	  deepClone: {get: function() {
	      return deepClone;
	    }},
	  clone: {get: function() {
	      return clone;
	    }},
	  mixin: {get: function() {
	      return mixin;
	    }},
	  isObjectEquals: {get: function() {
	      return isObjectEquals;
	    }},
	  isObject: {get: function() {
	      return isObject;
	    }},
	  getPrototypeOf: {get: function() {
	      return getPrototypeOf;
	    }},
	  defineGetter: {get: function() {
	      return defineGetter;
	    }},
	  objectEach: {get: function() {
	      return objectEach;
	    }},
	  getProperty: {get: function() {
	      return getProperty;
	    }},
	  __esModule: {value: true}
	});
	var $__array__;
	var arrayEach = ($__array__ = require("array"), $__array__ && $__array__.__esModule && $__array__ || {default: $__array__}).arrayEach;
	function duckSchema(object) {
	  var schema;
	  if (Array.isArray(object)) {
	    schema = [];
	  } else {
	    schema = {};
	    objectEach(object, function(value, key) {
	      if (value && typeof value === 'object' && !Array.isArray(value)) {
	        schema[key] = duckSchema(value);
	      } else if (Array.isArray(value)) {
	        if (value.length && typeof value[0] === 'object' && !Array.isArray(value[0])) {
	          schema[key] = [duckSchema(value[0])];
	        } else {
	          schema[key] = [];
	        }
	      } else {
	        schema[key] = null;
	      }
	    });
	  }
	  return schema;
	}
	function inherit(Child, Parent) {
	  Parent.prototype.constructor = Parent;
	  Child.prototype = new Parent();
	  Child.prototype.constructor = Child;
	  return Child;
	}
	function extend(target, extension) {
	  objectEach(extension, function(value, key) {
	    target[key] = value;
	  });
	  return target;
	}
	function deepExtend(target, extension) {
	  objectEach(extension, function(value, key) {
	    if (extension[key] && typeof extension[key] === 'object') {
	      if (!target[key]) {
	        if (Array.isArray(extension[key])) {
	          target[key] = [];
	        } else {
	          target[key] = {};
	        }
	      }
	      deepExtend(target[key], extension[key]);
	    } else {
	      target[key] = extension[key];
	    }
	  });
	}
	function deepClone(obj) {
	  if (typeof obj === 'object') {
	    return JSON.parse(JSON.stringify(obj));
	  }
	  return obj;
	}
	function clone(object) {
	  var result = {};
	  objectEach(object, (function(value, key) {
	    return result[key] = value;
	  }));
	  return result;
	}
	function mixin(Base) {
	  for (var mixins = [],
	      $__1 = 1; $__1 < arguments.length; $__1++)
	    mixins[$__1 - 1] = arguments[$__1];
	  if (!Base.MIXINS) {
	    Base.MIXINS = [];
	  }
	  arrayEach(mixins, (function(mixin) {
	    Base.MIXINS.push(mixin.MIXIN_NAME);
	    objectEach(mixin, (function(value, key) {
	      if (Base.prototype[key] !== void 0) {
	        throw new Error(("Mixin conflict. Property '" + key + "' already exist and cannot be overwritten."));
	      }
	      if (typeof value === 'function') {
	        Base.prototype[key] = value;
	      } else {
	        var getter = function _getter(propertyName, initialValue) {
	          propertyName = '_' + propertyName;
	          var initValue = (function(value) {
	            if (Array.isArray(value) || isObject(value)) {
	              value = deepClone(value);
	            }
	            return value;
	          });
	          return function() {
	            if (this[propertyName] === void 0) {
	              this[propertyName] = initValue(initialValue);
	            }
	            return this[propertyName];
	          };
	        };
	        var setter = function _setter(propertyName) {
	          propertyName = '_' + propertyName;
	          return function(value) {
	            this[propertyName] = value;
	          };
	        };
	        Object.defineProperty(Base.prototype, key, {
	          get: getter(key, value),
	          set: setter(key),
	          configurable: true
	        });
	      }
	    }));
	  }));
	  return Base;
	}
	function isObjectEquals(object1, object2) {
	  return JSON.stringify(object1) === JSON.stringify(object2);
	}
	function isObject(obj) {
	  return Object.prototype.toString.call(obj) == '[object Object]';
	}
	function getPrototypeOf(obj) {
	  var prototype;
	  if (typeof obj.__proto__ == 'object') {
	    prototype = obj.__proto__;
	  } else {
	    var oldConstructor,
	        constructor = obj.constructor;
	    if (typeof obj.constructor == 'function') {
	      oldConstructor = constructor;
	      if (delete obj.constructor) {
	        constructor = obj.constructor;
	        obj.constructor = oldConstructor;
	      }
	    }
	    prototype = constructor ? constructor.prototype : null;
	  }
	  return prototype;
	}
	function defineGetter(object, property, value, options) {
	  options.value = value;
	  options.writable = options.writable !== false;
	  options.enumerable = options.enumerable !== false;
	  options.configurable = options.configurable !== false;
	  Object.defineProperty(object, property, options);
	}
	function objectEach(object, iteratee) {
	  for (var key in object) {
	    if (!object.hasOwnProperty || (object.hasOwnProperty && object.hasOwnProperty(key))) {
	      if (iteratee(object[key], key, object) === false) {
	        break;
	      }
	    }
	  }
	  return object;
	}
	function getProperty(object, name) {
	  var names = name.split('.');
	  var result = object;
	  objectEach(names, (function(name) {
	    result = result[name];
	    if (result === void 0) {
	      result = void 0;
	      return false;
	    }
	  }));
	  return result;
	}

	//# 
	},{"array":42}],51:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  columnFactory: {get: function() {
	      return columnFactory;
	    }},
	  __esModule: {value: true}
	});
	var $__object__;
	var inherit = ($__object__ = require("object"), $__object__ && $__object__.__esModule && $__object__ || {default: $__object__}).inherit;
	function columnFactory(GridSettings, conflictList) {
	  function ColumnSettings() {}
	  ;
	  inherit(ColumnSettings, GridSettings);
	  for (var i = 0,
	      len = conflictList.length; i < len; i++) {
	    ColumnSettings.prototype[conflictList[i]] = void 0;
	  }
	  return ColumnSettings;
	}

	//# 
	},{"object":50}],52:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  toUpperCaseFirst: {get: function() {
	      return toUpperCaseFirst;
	    }},
	  startsWith: {get: function() {
	      return startsWith;
	    }},
	  endsWith: {get: function() {
	      return endsWith;
	    }},
	  equalsIgnoreCase: {get: function() {
	      return equalsIgnoreCase;
	    }},
	  randomString: {get: function() {
	      return randomString;
	    }},
	  isPercentValue: {get: function() {
	      return isPercentValue;
	    }},
	  __esModule: {value: true}
	});
	var $__mixed__,
	    $__number__;
	var stringify = ($__mixed__ = require("mixed"), $__mixed__ && $__mixed__.__esModule && $__mixed__ || {default: $__mixed__}).stringify;
	var rangeEach = ($__number__ = require("number"), $__number__ && $__number__.__esModule && $__number__ || {default: $__number__}).rangeEach;
	function toUpperCaseFirst(string) {
	  return string[0].toUpperCase() + string.substr(1);
	}
	function startsWith(string, needle) {
	  var result = true;
	  rangeEach(needle.length - 1, (function(index) {
	    if (string.charAt(index) !== needle.charAt(index)) {
	      result = false;
	      return false;
	    }
	  }));
	  return result;
	}
	function endsWith(string, needle) {
	  var result = true;
	  var needleLength = needle.length - 1;
	  var stringLength = string.length - 1;
	  rangeEach(needleLength, (function(index) {
	    var stringIndex = stringLength - index;
	    var needleIndex = needleLength - index;
	    if (string.charAt(stringIndex) !== needle.charAt(needleIndex)) {
	      result = false;
	      return false;
	    }
	  }));
	  return result;
	}
	function equalsIgnoreCase() {
	  for (var strings = [],
	      $__2 = 0; $__2 < arguments.length; $__2++)
	    strings[$__2] = arguments[$__2];
	  var unique = [];
	  var length = strings.length;
	  while (length--) {
	    var string = stringify(strings[length]).toLowerCase();
	    if (unique.indexOf(string) === -1) {
	      unique.push(string);
	    }
	  }
	  return unique.length === 1;
	}
	function randomString() {
	  function s4() {
	    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	  }
	  return s4() + s4() + s4() + s4();
	}
	function isPercentValue(value) {
	  return /^([0-9][0-9]?\%$)|(^100\%$)/.test(value);
	}

	//# 
	},{"mixed":48,"number":49}],53:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  KEY_CODES: {get: function() {
	      return KEY_CODES;
	    }},
	  isPrintableChar: {get: function() {
	      return isPrintableChar;
	    }},
	  isMetaKey: {get: function() {
	      return isMetaKey;
	    }},
	  isCtrlKey: {get: function() {
	      return isCtrlKey;
	    }},
	  isKey: {get: function() {
	      return isKey;
	    }},
	  __esModule: {value: true}
	});
	var $__array__;
	var arrayEach = ($__array__ = require("array"), $__array__ && $__array__.__esModule && $__array__ || {default: $__array__}).arrayEach;
	var KEY_CODES = {
	  MOUSE_LEFT: 1,
	  MOUSE_RIGHT: 3,
	  MOUSE_MIDDLE: 2,
	  BACKSPACE: 8,
	  COMMA: 188,
	  INSERT: 45,
	  DELETE: 46,
	  END: 35,
	  ENTER: 13,
	  ESCAPE: 27,
	  CONTROL_LEFT: 91,
	  COMMAND_LEFT: 17,
	  COMMAND_RIGHT: 93,
	  ALT: 18,
	  HOME: 36,
	  PAGE_DOWN: 34,
	  PAGE_UP: 33,
	  PERIOD: 190,
	  SPACE: 32,
	  SHIFT: 16,
	  CAPS_LOCK: 20,
	  TAB: 9,
	  ARROW_RIGHT: 39,
	  ARROW_LEFT: 37,
	  ARROW_UP: 38,
	  ARROW_DOWN: 40,
	  F1: 112,
	  F2: 113,
	  F3: 114,
	  F4: 115,
	  F5: 116,
	  F6: 117,
	  F7: 118,
	  F8: 119,
	  F9: 120,
	  F10: 121,
	  F11: 122,
	  F12: 123,
	  A: 65,
	  X: 88,
	  C: 67,
	  V: 86
	};
	function isPrintableChar(keyCode) {
	  return ((keyCode == 32) || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 111) || (keyCode >= 186 && keyCode <= 192) || (keyCode >= 219 && keyCode <= 222) || keyCode >= 226 || (keyCode >= 65 && keyCode <= 90));
	}
	function isMetaKey(keyCode) {
	  var metaKeys = [KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_UP, KEY_CODES.ARROW_LEFT, KEY_CODES.ARROW_RIGHT, KEY_CODES.HOME, KEY_CODES.END, KEY_CODES.DELETE, KEY_CODES.BACKSPACE, KEY_CODES.F1, KEY_CODES.F2, KEY_CODES.F3, KEY_CODES.F4, KEY_CODES.F5, KEY_CODES.F6, KEY_CODES.F7, KEY_CODES.F8, KEY_CODES.F9, KEY_CODES.F10, KEY_CODES.F11, KEY_CODES.F12, KEY_CODES.TAB, KEY_CODES.PAGE_DOWN, KEY_CODES.PAGE_UP, KEY_CODES.ENTER, KEY_CODES.ESCAPE, KEY_CODES.SHIFT, KEY_CODES.CAPS_LOCK, KEY_CODES.ALT];
	  return metaKeys.indexOf(keyCode) !== -1;
	}
	function isCtrlKey(keyCode) {
	  return [KEY_CODES.CONTROL_LEFT, 224, KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT].indexOf(keyCode) !== -1;
	}
	function isKey(keyCode, baseCode) {
	  var keys = baseCode.split('|');
	  var result = false;
	  arrayEach(keys, function(key) {
	    if (keyCode === KEY_CODES[key]) {
	      result = true;
	      return false;
	    }
	  });
	  return result;
	}

	//# 
	},{"array":42}],54:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  localHooks: {get: function() {
	      return localHooks;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_array__,
	    $___46__46__47_helpers_47_object__;
	var arrayEach = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).arrayEach;
	var defineGetter = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).defineGetter;
	var MIXIN_NAME = 'localHooks';
	var localHooks = {
	  _localHooks: Object.create(null),
	  addLocalHook: function(key, callback) {
	    if (!this._localHooks[key]) {
	      this._localHooks[key] = [];
	    }
	    this._localHooks[key].push(callback);
	  },
	  runLocalHooks: function(key) {
	    for (var params = [],
	        $__3 = 1; $__3 < arguments.length; $__3++)
	      params[$__3 - 1] = arguments[$__3];
	    var $__2 = this;
	    if (this._localHooks[key]) {
	      arrayEach(this._localHooks[key], (function(callback) {
	        return callback.apply($__2, params);
	      }));
	    }
	  },
	  clearLocalHooks: function() {
	    this._localHooks = {};
	  }
	};
	defineGetter(localHooks, 'MIXIN_NAME', MIXIN_NAME, {
	  writable: false,
	  enumerable: false
	});
	;
	Handsontable.utils = Handsontable.utils || {};
	Handsontable.utils.localHooks = localHooks;

	//# 
	},{"helpers/array":42,"helpers/object":50}],55:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MultiMap: {get: function() {
	      return MultiMap;
	    }},
	  __esModule: {value: true}
	});
	;
	window.MultiMap = MultiMap;
	function MultiMap() {
	  var map = {
	    arrayMap: [],
	    weakMap: new WeakMap()
	  };
	  return {
	    get: function(key) {
	      if (canBeAnArrayMapKey(key)) {
	        return map.arrayMap[key];
	      } else if (canBeAWeakMapKey(key)) {
	        return map.weakMap.get(key);
	      }
	    },
	    set: function(key, value) {
	      if (canBeAnArrayMapKey(key)) {
	        map.arrayMap[key] = value;
	      } else if (canBeAWeakMapKey(key)) {
	        map.weakMap.set(key, value);
	      } else {
	        throw new Error('Invalid key type');
	      }
	    },
	    delete: function(key) {
	      if (canBeAnArrayMapKey(key)) {
	        delete map.arrayMap[key];
	      } else if (canBeAWeakMapKey(key)) {
	        map.weakMap.delete(key);
	      }
	    }
	  };
	  function canBeAnArrayMapKey(obj) {
	    return obj !== null && !isNaNSymbol(obj) && (typeof obj == 'string' || typeof obj == 'number');
	  }
	  function canBeAWeakMapKey(obj) {
	    return obj !== null && (typeof obj == 'object' || typeof obj == 'function');
	  }
	  function isNaNSymbol(obj) {
	    return obj !== obj;
	  }
	}

	//# 
	},{}],56:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Hooks: {get: function() {
	      return Hooks;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_array__,
	    $__helpers_47_object__;
	var REGISTERED_HOOKS = ['afterCellMetaReset', 'afterChange', 'afterChangesObserved', 'afterColumnMove', 'afterColumnResize', 'afterContextMenuDefaultOptions', 'afterContextMenuHide', 'afterContextMenuShow', 'afterCopyLimit', 'afterCreateCol', 'afterCreateRow', 'afterDeselect', 'afterDestroy', 'afterDocumentKeyDown', 'afterGetCellMeta', 'afterGetColHeader', 'afterGetRowHeader', 'afterInit', 'afterIsMultipleSelectionCheck', 'afterLoadData', 'afterMomentumScroll', 'afterOnCellCornerMouseDown', 'afterOnCellMouseDown', 'afterOnCellMouseOver', 'afterRemoveCol', 'afterRemoveRow', 'afterRender', 'afterRenderer', 'afterScrollHorizontally', 'afterScrollVertically', 'afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'afterSetCellMeta', 'afterUpdateSettings', 'afterValidate', 'beforeAutofill', 'beforeCellAlignment', 'beforeChange', 'beforeChangeRender', 'beforeDrawBorders', 'beforeGetCellMeta', 'beforeInit', 'beforeInitWalkontable', 'beforeKeyDown', 'beforeOnCellMouseDown', 'beforeRemoveCol', 'beforeRemoveRow', 'beforeRender', 'beforeSetRangeEnd', 'beforeTouchScroll', 'beforeValidate', 'construct', 'init', 'modifyCol', 'modifyColumnHeader', 'modifyColWidth', 'modifyRow', 'modifyRowHeader', 'modifyRowHeight', 'persistentStateLoad', 'persistentStateReset', 'persistentStateSave', 'beforeColumnSort', 'afterColumnSort', 'afterAutofillApplyValues', 'modifyCopyableRange', 'beforeColumnMove', 'afterColumnMove', 'beforeRowMove', 'afterRowMove', 'beforeColumnResize', 'afterColumnResize', 'beforeRowResize', 'afterRowResize'];
	var arrayEach = ($__helpers_47_array__ = require("helpers/array"), $__helpers_47_array__ && $__helpers_47_array__.__esModule && $__helpers_47_array__ || {default: $__helpers_47_array__}).arrayEach;
	var objectEach = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}).objectEach;
	var Hooks = function Hooks() {
	  this.globalBucket = this.createEmptyBucket();
	};
	($traceurRuntime.createClass)(Hooks, {
	  createEmptyBucket: function() {
	    var bucket = Object.create(null);
	    arrayEach(REGISTERED_HOOKS, (function(hook) {
	      return (bucket[hook] = []);
	    }));
	    return bucket;
	  },
	  getBucket: function() {
	    var context = arguments[0] !== (void 0) ? arguments[0] : null;
	    if (context) {
	      if (!context.pluginHookBucket) {
	        context.pluginHookBucket = this.createEmptyBucket();
	      }
	      return context.pluginHookBucket;
	    }
	    return this.globalBucket;
	  },
	  add: function(key, callback) {
	    var context = arguments[2] !== (void 0) ? arguments[2] : null;
	    var $__2 = this;
	    if (Array.isArray(callback)) {
	      arrayEach(callback, (function(c) {
	        return ($__2.add(key, c, context));
	      }));
	    } else {
	      var bucket = this.getBucket(context);
	      if (typeof bucket[key] === 'undefined') {
	        this.register(key);
	        bucket[key] = [];
	      }
	      callback.skip = false;
	      if (bucket[key].indexOf(callback) === -1) {
	        bucket[key].push(callback);
	      }
	    }
	    return this;
	  },
	  once: function(key, callback) {
	    var context = arguments[2] !== (void 0) ? arguments[2] : null;
	    var $__2 = this;
	    if (Array.isArray(callback)) {
	      arrayEach(callback, (function(c) {
	        return ($__2.once(key, c, context));
	      }));
	    } else {
	      callback.runOnce = true;
	      this.add(key, callback, context);
	    }
	  },
	  remove: function(key, callback) {
	    var context = arguments[2] !== (void 0) ? arguments[2] : null;
	    var bucket = this.getBucket(context);
	    if (typeof bucket[key] !== 'undefined') {
	      if (bucket[key].indexOf(callback) >= 0) {
	        callback.skip = true;
	        return true;
	      }
	    }
	    return false;
	  },
	  has: function(key) {
	    var context = arguments[1] !== (void 0) ? arguments[1] : null;
	    var bucket = this.getBucket(context);
	    return bucket[key] !== void 0 && bucket[key].length ? true : false;
	  },
	  run: function(context, key, p1, p2, p3, p4, p5, p6) {
	    {
	      var globalHandlers = this.globalBucket[key];
	      var index = -1;
	      var length = globalHandlers ? globalHandlers.length : 0;
	      if (length) {
	        while (++index < length) {
	          if (!globalHandlers[index] || globalHandlers[index].skip) {
	            continue;
	          }
	          var res = globalHandlers[index].call(context, p1, p2, p3, p4, p5, p6);
	          if (res !== void 0) {
	            p1 = res;
	          }
	          if (globalHandlers[index] && globalHandlers[index].runOnce) {
	            this.remove(key, globalHandlers[index]);
	          }
	        }
	      }
	    }
	    {
	      var localHandlers = this.getBucket(context)[key];
	      var index$__4 = -1;
	      var length$__5 = localHandlers ? localHandlers.length : 0;
	      if (length$__5) {
	        while (++index$__4 < length$__5) {
	          if (!localHandlers[index$__4] || localHandlers[index$__4].skip) {
	            continue;
	          }
	          var res$__6 = localHandlers[index$__4].call(context, p1, p2, p3, p4, p5, p6);
	          if (res$__6 !== void 0) {
	            p1 = res$__6;
	          }
	          if (localHandlers[index$__4] && localHandlers[index$__4].runOnce) {
	            this.remove(key, localHandlers[index$__4], context);
	          }
	        }
	      }
	    }
	    return p1;
	  },
	  destroy: function() {
	    var context = arguments[0] !== (void 0) ? arguments[0] : null;
	    objectEach(this.getBucket(context), (function(value, key, bucket) {
	      return (bucket[key].length = 0);
	    }));
	  },
	  register: function(key) {
	    if (!this.isRegistered(key)) {
	      REGISTERED_HOOKS.push(key);
	    }
	  },
	  deregister: function(key) {
	    if (this.isRegistered(key)) {
	      REGISTERED_HOOKS.splice(REGISTERED_HOOKS.indexOf(key), 1);
	    }
	  },
	  isRegistered: function(key) {
	    return REGISTERED_HOOKS.indexOf(key) >= 0;
	  },
	  getRegistered: function() {
	    return REGISTERED_HOOKS;
	  }
	}, {});
	;
	Handsontable.utils = Handsontable.utils || {};
	Handsontable.utils.Hooks = Hooks;

	//# 
	},{"helpers/array":42,"helpers/object":50}],57:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  registerPlugin: {get: function() {
	      return registerPlugin;
	    }},
	  getPlugin: {get: function() {
	      return getPlugin;
	    }},
	  getRegistredPluginNames: {get: function() {
	      return getRegistredPluginNames;
	    }},
	  getPluginName: {get: function() {
	      return getPluginName;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_object__,
	    $__helpers_47_string__;
	var objectEach = ($__helpers_47_object__ = require("helpers/object"), $__helpers_47_object__ && $__helpers_47_object__.__esModule && $__helpers_47_object__ || {default: $__helpers_47_object__}).objectEach;
	var toUpperCaseFirst = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).toUpperCaseFirst;
	var registeredPlugins = new WeakMap();
	Handsontable.plugins = Handsontable.plugins || {};
	function registerPlugin(pluginName, PluginClass) {
	  pluginName = toUpperCaseFirst(pluginName);
	  Handsontable.plugins[pluginName] = PluginClass;
	  Handsontable.hooks.add('construct', function() {
	    var holder;
	    if (!registeredPlugins.has(this)) {
	      registeredPlugins.set(this, {});
	    }
	    holder = registeredPlugins.get(this);
	    if (!holder[pluginName]) {
	      holder[pluginName] = new PluginClass(this);
	    }
	  });
	  Handsontable.hooks.add('afterDestroy', function() {
	    if (registeredPlugins.has(this)) {
	      var pluginsHolder = registeredPlugins.get(this);
	      objectEach(pluginsHolder, (function(plugin) {
	        return plugin.destroy();
	      }));
	      registeredPlugins.delete(this);
	    }
	  });
	}
	function getPlugin(instance, pluginName) {
	  if (typeof pluginName != 'string') {
	    throw Error('Only strings can be passed as "plugin" parameter');
	  }
	  var _pluginName = toUpperCaseFirst(pluginName);
	  if (!registeredPlugins.has(instance) || !registeredPlugins.get(instance)[_pluginName]) {
	    return void 0;
	  }
	  return registeredPlugins.get(instance)[_pluginName];
	}
	function getRegistredPluginNames(hotInstance) {
	  return registeredPlugins.has(hotInstance) ? Object.keys(registeredPlugins.get(hotInstance)) : [];
	}
	function getPluginName(hotInstance, plugin) {
	  var pluginName = null;
	  if (registeredPlugins.has(hotInstance)) {
	    objectEach(registeredPlugins.get(hotInstance), (function(pluginInstance, name) {
	      if (pluginInstance === plugin) {
	        pluginName = name;
	      }
	    }));
	  }
	  return pluginName;
	}
	;
	Handsontable.plugins.utils = Handsontable.plugins.utils || {};
	Handsontable.plugins.registerPlugin = registerPlugin;

	//# 
	},{"helpers/object":50,"helpers/string":52}],58:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  default: {get: function() {
	      return $__default;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_plugins__;
	var $__0 = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}),
	    defineGetter = $__0.defineGetter,
	    objectEach = $__0.objectEach;
	var arrayEach = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).arrayEach;
	var $__2 = ($___46__46__47_plugins__ = require("plugins"), $___46__46__47_plugins__ && $___46__46__47_plugins__.__esModule && $___46__46__47_plugins__ || {default: $___46__46__47_plugins__}),
	    getRegistredPluginNames = $__2.getRegistredPluginNames,
	    getPluginName = $__2.getPluginName;
	var privatePool = new WeakMap();
	var initializedPlugins = null;
	var BasePlugin = function BasePlugin(hotInstance) {
	  var $__3 = this;
	  defineGetter(this, 'hot', hotInstance, {writable: false});
	  privatePool.set(this, {hooks: {}});
	  initializedPlugins = null;
	  this.pluginName = null;
	  this.pluginsInitializedCallbacks = [];
	  this.isPluginsReady = false;
	  this.enabled = false;
	  this.initialized = false;
	  this.hot.addHook('afterPluginsInitialized', (function() {
	    return $__3.onAfterPluginsInitialized();
	  }));
	  this.hot.addHook('afterUpdateSettings', (function() {
	    return $__3.onUpdateSettings();
	  }));
	  this.hot.addHook('beforeInit', (function() {
	    return $__3.init();
	  }));
	};
	($traceurRuntime.createClass)(BasePlugin, {
	  init: function() {
	    this.pluginName = getPluginName(this.hot, this);
	    if (this.isEnabled && this.isEnabled()) {
	      this.enablePlugin();
	    }
	    if (!initializedPlugins) {
	      initializedPlugins = getRegistredPluginNames(this.hot);
	    }
	    if (initializedPlugins.indexOf(this.pluginName) >= 0) {
	      initializedPlugins.splice(initializedPlugins.indexOf(this.pluginName), 1);
	    }
	    if (!initializedPlugins.length) {
	      this.hot.runHooks('afterPluginsInitialized');
	    }
	    this.initialized = true;
	  },
	  enablePlugin: function() {
	    this.enabled = true;
	  },
	  disablePlugin: function() {
	    if (this.eventManager) {
	      this.eventManager.clear();
	    }
	    this.clearHooks();
	    this.enabled = false;
	  },
	  addHook: function(name, callback) {
	    var hooks = privatePool.get(this).hooks[name] = (privatePool.get(this).hooks[name] || []);
	    this.hot.addHook(name, callback);
	    hooks.push(callback);
	    privatePool.get(this).hooks[name] = hooks;
	  },
	  removeHooks: function(name) {
	    var $__3 = this;
	    arrayEach(privatePool.get(this).hooks[name] || [], (function(callback) {
	      $__3.hot.removeHook(name, callback);
	    }));
	  },
	  clearHooks: function() {
	    var $__3 = this;
	    var hooks = privatePool.get(this).hooks;
	    objectEach(hooks, (function(callbacks, name) {
	      return $__3.removeHooks(name);
	    }));
	    hooks.length = 0;
	  },
	  callOnPluginsReady: function(callback) {
	    if (this.isPluginsReady) {
	      callback();
	    } else {
	      this.pluginsInitializedCallbacks.push(callback);
	    }
	  },
	  onAfterPluginsInitialized: function() {
	    arrayEach(this.pluginsInitializedCallbacks, (function(callback) {
	      return callback();
	    }));
	    this.pluginsInitializedCallbacks.length = 0;
	    this.isPluginsReady = true;
	  },
	  onUpdateSettings: function() {
	    if (this.isEnabled) {
	      if (this.enabled && !this.isEnabled()) {
	        this.disablePlugin();
	      }
	      if (!this.enabled && this.isEnabled()) {
	        this.enablePlugin();
	      }
	      if (this.enabled && this.isEnabled()) {
	        this.updatePlugin();
	      }
	    }
	  },
	  updatePlugin: function() {},
	  destroy: function() {
	    var $__3 = this;
	    if (this.eventManager) {
	      this.eventManager.destroy();
	    }
	    this.clearHooks();
	    objectEach(this, (function(value, property) {
	      if (property !== 'hot') {
	        $__3[property] = null;
	      }
	    }));
	    delete this.hot;
	  }
	}, {});
	var $__default = BasePlugin;
	Handsontable.plugins.BasePlugin = BasePlugin;

	//# 
	},{"helpers/array":42,"helpers/object":50,"plugins":57}],59:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  AutoColumnSize: {get: function() {
	      return AutoColumnSize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_utils_47_ghostTable__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_utils_47_samplesGenerator__,
	    $___46__46__47__46__46__47_helpers_47_string__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}),
	    arrayEach = $__1.arrayEach,
	    arrayFilter = $__1.arrayFilter;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    cancelAnimationFrame = $__2.cancelAnimationFrame,
	    requestAnimationFrame = $__2.requestAnimationFrame,
	    isVisible = $__2.isVisible;
	var GhostTable = ($___46__46__47__46__46__47_utils_47_ghostTable__ = require("utils/ghostTable"), $___46__46__47__46__46__47_utils_47_ghostTable__ && $___46__46__47__46__46__47_utils_47_ghostTable__.__esModule && $___46__46__47__46__46__47_utils_47_ghostTable__ || {default: $___46__46__47__46__46__47_utils_47_ghostTable__}).GhostTable;
	var $__4 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    isObject = $__4.isObject,
	    objectEach = $__4.objectEach;
	var $__5 = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}),
	    valueAccordingPercent = $__5.valueAccordingPercent,
	    rangeEach = $__5.rangeEach;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var SamplesGenerator = ($___46__46__47__46__46__47_utils_47_samplesGenerator__ = require("utils/samplesGenerator"), $___46__46__47__46__46__47_utils_47_samplesGenerator__ && $___46__46__47__46__46__47_utils_47_samplesGenerator__.__esModule && $___46__46__47__46__46__47_utils_47_samplesGenerator__ || {default: $___46__46__47__46__46__47_utils_47_samplesGenerator__}).SamplesGenerator;
	var isPercentValue = ($___46__46__47__46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47__46__46__47_helpers_47_string__ && $___46__46__47__46__46__47_helpers_47_string__.__esModule && $___46__46__47__46__46__47_helpers_47_string__ || {default: $___46__46__47__46__46__47_helpers_47_string__}).isPercentValue;
	var WalkontableViewportColumnsCalculator = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ = require("3rdparty/walkontable/src/calculator/viewportColumns"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_calculator_47_viewportColumns__}).WalkontableViewportColumnsCalculator;
	var AutoColumnSize = function AutoColumnSize(hotInstance) {
	  var $__10 = this;
	  $traceurRuntime.superConstructor($AutoColumnSize).call(this, hotInstance);
	  this.widths = [];
	  this.ghostTable = new GhostTable(this.hot);
	  this.samplesGenerator = new SamplesGenerator((function(row, col) {
	    return $__10.hot.getDataAtCell(row, col);
	  }));
	  this.firstCalculation = true;
	  this.inProgress = false;
	  this.addHook('beforeColumnResize', (function(col, size, isDblClick) {
	    return $__10.onBeforeColumnResize(col, size, isDblClick);
	  }));
	};
	var $AutoColumnSize = AutoColumnSize;
	($traceurRuntime.createClass)(AutoColumnSize, {
	  isEnabled: function() {
	    return this.hot.getSettings().autoColumnSize !== false && !this.hot.getSettings().colWidths;
	  },
	  enablePlugin: function() {
	    var $__10 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.addHook('afterLoadData', (function() {
	      return $__10.onAfterLoadData();
	    }));
	    this.addHook('beforeChange', (function(changes) {
	      return $__10.onBeforeChange(changes);
	    }));
	    this.addHook('beforeRender', (function(force) {
	      return $__10.onBeforeRender(force);
	    }));
	    this.addHook('modifyColWidth', (function(width, col) {
	      return $__10.getColumnWidth(col, width);
	    }));
	    $traceurRuntime.superGet(this, $AutoColumnSize.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $AutoColumnSize.prototype, "disablePlugin").call(this);
	  },
	  calculateColumnsWidth: function() {
	    var colRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countCols() - 1
	    };
	    var rowRange = arguments[1] !== (void 0) ? arguments[1] : {
	      from: 0,
	      to: this.hot.countRows() - 1
	    };
	    var force = arguments[2] !== (void 0) ? arguments[2] : false;
	    var $__10 = this;
	    if (typeof colRange === 'number') {
	      colRange = {
	        from: colRange,
	        to: colRange
	      };
	    }
	    if (typeof rowRange === 'number') {
	      rowRange = {
	        from: rowRange,
	        to: rowRange
	      };
	    }
	    rangeEach(colRange.from, colRange.to, (function(col) {
	      if (force || ($__10.widths[col] === void 0 && !$__10.hot._getColWidthFromSettings(col))) {
	        var samples = $__10.samplesGenerator.generateColumnSamples(col, rowRange);
	        samples.forEach((function(sample, col) {
	          return $__10.ghostTable.addColumn(col, sample);
	        }));
	      }
	    }));
	    if (this.ghostTable.columns.length) {
	      this.ghostTable.getWidths((function(col, width) {
	        return $__10.widths[col] = width;
	      }));
	      this.ghostTable.clean();
	    }
	  },
	  calculateAllColumnsWidth: function() {
	    var rowRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countRows() - 1
	    };
	    var $__10 = this;
	    var current = 0;
	    var length = this.hot.countCols() - 1;
	    var timer = null;
	    this.inProgress = true;
	    var loop = (function() {
	      if (!$__10.hot) {
	        cancelAnimationFrame(timer);
	        $__10.inProgress = false;
	        return;
	      }
	      $__10.calculateColumnsWidth({
	        from: current,
	        to: Math.min(current + $AutoColumnSize.CALCULATION_STEP, length)
	      }, rowRange);
	      current = current + $AutoColumnSize.CALCULATION_STEP + 1;
	      if (current < length) {
	        timer = requestAnimationFrame(loop);
	      } else {
	        cancelAnimationFrame(timer);
	        $__10.inProgress = false;
	        $__10.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        if ($__10.hot.view.wt.wtOverlays.leftOverlay.needFullRender) {
	          $__10.hot.view.wt.wtOverlays.leftOverlay.clone.draw();
	        }
	      }
	    });
	    if (this.firstCalculation && this.getSyncCalculationLimit()) {
	      this.calculateColumnsWidth({
	        from: 0,
	        to: this.getSyncCalculationLimit()
	      }, rowRange);
	      this.firstCalculation = false;
	      current = this.getSyncCalculationLimit() + 1;
	    }
	    if (current < length) {
	      loop();
	    } else {
	      this.inProgress = false;
	    }
	  },
	  recalculateAllColumnsWidth: function() {
	    if (this.hot.view && isVisible(this.hot.view.wt.wtTable.TABLE)) {
	      this.clearCache();
	      this.calculateAllColumnsWidth();
	    }
	  },
	  getSyncCalculationLimit: function() {
	    var limit = $AutoColumnSize.SYNC_CALCULATION_LIMIT;
	    var colsLimit = this.hot.countCols() - 1;
	    if (isObject(this.hot.getSettings().autoColumnSize)) {
	      limit = this.hot.getSettings().autoColumnSize.syncLimit;
	      if (isPercentValue(limit)) {
	        limit = valueAccordingPercent(colsLimit, limit);
	      } else {
	        limit = limit >> 0;
	      }
	    }
	    return Math.min(limit, colsLimit);
	  },
	  getColumnWidth: function(col) {
	    var defaultWidth = arguments[1];
	    var keepMinimum = arguments[2] !== (void 0) ? arguments[2] : true;
	    var width = defaultWidth;
	    if (width === void 0) {
	      width = this.widths[col];
	      if (keepMinimum && typeof width === 'number') {
	        width = Math.max(width, WalkontableViewportColumnsCalculator.DEFAULT_WIDTH);
	      }
	    }
	    return width;
	  },
	  getFirstVisibleColumn: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.columnsVisibleCalculator) {
	      return wot.wtTable.getFirstVisibleColumn();
	    }
	    if (wot.wtViewport.columnsRenderCalculator) {
	      return wot.wtTable.getFirstRenderedColumn();
	    }
	    return -1;
	  },
	  getLastVisibleColumn: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.columnsVisibleCalculator) {
	      return wot.wtTable.getLastVisibleColumn();
	    }
	    if (wot.wtViewport.columnsRenderCalculator) {
	      return wot.wtTable.getLastRenderedColumn();
	    }
	    return -1;
	  },
	  clearCache: function() {
	    this.widths.length = 0;
	  },
	  isNeedRecalculate: function() {
	    return arrayFilter(this.widths, (function(item) {
	      return (item === void 0);
	    })).length ? true : false;
	  },
	  onBeforeRender: function() {
	    var force = this.hot.renderCall;
	    this.calculateColumnsWidth({
	      from: this.getFirstVisibleColumn(),
	      to: this.getLastVisibleColumn()
	    }, void 0, force);
	    if (this.isNeedRecalculate() && !this.inProgress) {
	      this.calculateAllColumnsWidth();
	    }
	  },
	  onAfterLoadData: function() {
	    var $__10 = this;
	    if (this.hot.view) {
	      this.recalculateAllColumnsWidth();
	    } else {
	      setTimeout((function() {
	        if ($__10.hot) {
	          $__10.recalculateAllColumnsWidth();
	        }
	      }), 0);
	    }
	  },
	  onBeforeChange: function(changes) {
	    var $__10 = this;
	    arrayEach(changes, (function(data) {
	      return $__10.widths[data[1]] = void 0;
	    }));
	  },
	  onBeforeColumnResize: function(col, size, isDblClick) {
	    if (isDblClick) {
	      this.calculateColumnsWidth(col, void 0, true);
	      size = this.getColumnWidth(col, void 0, false);
	    }
	    return size;
	  },
	  destroy: function() {
	    this.ghostTable.clean();
	    $traceurRuntime.superGet(this, $AutoColumnSize.prototype, "destroy").call(this);
	  }
	}, {
	  get CALCULATION_STEP() {
	    return 50;
	  },
	  get SYNC_CALCULATION_LIMIT() {
	    return 50;
	  }
	}, BasePlugin);
	;
	registerPlugin('autoColumnSize', AutoColumnSize);

	//# 
	},{"3rdparty/walkontable/src/calculator/viewportColumns":3,"_base":58,"helpers/array":42,"helpers/dom/element":45,"helpers/number":49,"helpers/object":50,"helpers/string":52,"plugins":57,"utils/ghostTable":98,"utils/samplesGenerator":99}],60:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  AutoRowSize: {get: function() {
	      return AutoRowSize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_utils_47_ghostTable__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_utils_47_samplesGenerator__,
	    $___46__46__47__46__46__47_helpers_47_string__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}),
	    arrayEach = $__1.arrayEach,
	    arrayFilter = $__1.arrayFilter;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    cancelAnimationFrame = $__2.cancelAnimationFrame,
	    requestAnimationFrame = $__2.requestAnimationFrame,
	    isVisible = $__2.isVisible;
	var GhostTable = ($___46__46__47__46__46__47_utils_47_ghostTable__ = require("utils/ghostTable"), $___46__46__47__46__46__47_utils_47_ghostTable__ && $___46__46__47__46__46__47_utils_47_ghostTable__.__esModule && $___46__46__47__46__46__47_utils_47_ghostTable__ || {default: $___46__46__47__46__46__47_utils_47_ghostTable__}).GhostTable;
	var $__4 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    isObject = $__4.isObject,
	    objectEach = $__4.objectEach;
	var $__5 = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}),
	    valueAccordingPercent = $__5.valueAccordingPercent,
	    rangeEach = $__5.rangeEach;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var SamplesGenerator = ($___46__46__47__46__46__47_utils_47_samplesGenerator__ = require("utils/samplesGenerator"), $___46__46__47__46__46__47_utils_47_samplesGenerator__ && $___46__46__47__46__46__47_utils_47_samplesGenerator__.__esModule && $___46__46__47__46__46__47_utils_47_samplesGenerator__ || {default: $___46__46__47__46__46__47_utils_47_samplesGenerator__}).SamplesGenerator;
	var isPercentValue = ($___46__46__47__46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47__46__46__47_helpers_47_string__ && $___46__46__47__46__46__47_helpers_47_string__.__esModule && $___46__46__47__46__46__47_helpers_47_string__ || {default: $___46__46__47__46__46__47_helpers_47_string__}).isPercentValue;
	var AutoRowSize = function AutoRowSize(hotInstance) {
	  var $__9 = this;
	  $traceurRuntime.superConstructor($AutoRowSize).call(this, hotInstance);
	  this.heights = [];
	  this.ghostTable = new GhostTable(this.hot);
	  this.samplesGenerator = new SamplesGenerator((function(row, col) {
	    return $__9.hot.getDataAtCell(row, col);
	  }));
	  this.firstCalculation = true;
	  this.inProgress = false;
	  this.addHook('beforeRowResize', (function(row, size, isDblClick) {
	    return $__9.onBeforeRowResize(row, size, isDblClick);
	  }));
	};
	var $AutoRowSize = AutoRowSize;
	($traceurRuntime.createClass)(AutoRowSize, {
	  isEnabled: function() {
	    return this.hot.getSettings().autoRowSize === true || isObject(this.hot.getSettings().autoRowSize);
	  },
	  enablePlugin: function() {
	    var $__9 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.addHook('afterLoadData', (function() {
	      return $__9.onAfterLoadData();
	    }));
	    this.addHook('beforeChange', (function(changes) {
	      return $__9.onBeforeChange(changes);
	    }));
	    this.addHook('beforeColumnMove', (function() {
	      return $__9.recalculateAllRowsHeight();
	    }));
	    this.addHook('beforeColumnResize', (function() {
	      return $__9.recalculateAllRowsHeight();
	    }));
	    this.addHook('beforeColumnSort', (function() {
	      return $__9.clearCache();
	    }));
	    this.addHook('beforeRender', (function(force) {
	      return $__9.onBeforeRender(force);
	    }));
	    this.addHook('beforeRowMove', (function(rowStart, rowEnd) {
	      return $__9.onBeforeRowMove(rowStart, rowEnd);
	    }));
	    this.addHook('modifyRowHeight', (function(height, row) {
	      return $__9.getRowHeight(row, height);
	    }));
	    $traceurRuntime.superGet(this, $AutoRowSize.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $AutoRowSize.prototype, "disablePlugin").call(this);
	  },
	  calculateRowsHeight: function() {
	    var rowRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countRows() - 1
	    };
	    var colRange = arguments[1] !== (void 0) ? arguments[1] : {
	      from: 0,
	      to: this.hot.countCols() - 1
	    };
	    var force = arguments[2] !== (void 0) ? arguments[2] : false;
	    var $__9 = this;
	    if (typeof rowRange === 'number') {
	      rowRange = {
	        from: rowRange,
	        to: rowRange
	      };
	    }
	    if (typeof colRange === 'number') {
	      colRange = {
	        from: colRange,
	        to: colRange
	      };
	    }
	    rangeEach(rowRange.from, rowRange.to, (function(row) {
	      if (force || $__9.heights[row] === void 0) {
	        var samples = $__9.samplesGenerator.generateRowSamples(row, colRange);
	        samples.forEach((function(sample, row) {
	          return $__9.ghostTable.addRow(row, sample);
	        }));
	      }
	    }));
	    if (this.ghostTable.rows.length) {
	      this.ghostTable.getHeights((function(row, height) {
	        return $__9.heights[row] = height;
	      }));
	      this.ghostTable.clean();
	    }
	  },
	  calculateAllRowsHeight: function() {
	    var colRange = arguments[0] !== (void 0) ? arguments[0] : {
	      from: 0,
	      to: this.hot.countCols() - 1
	    };
	    var $__9 = this;
	    var current = 0;
	    var length = this.hot.countRows() - 1;
	    var timer = null;
	    this.inProgress = true;
	    var loop = (function() {
	      if (!$__9.hot) {
	        cancelAnimationFrame(timer);
	        $__9.inProgress = false;
	        return;
	      }
	      $__9.calculateRowsHeight({
	        from: current,
	        to: Math.min(current + $AutoRowSize.CALCULATION_STEP, length)
	      }, colRange);
	      current = current + $AutoRowSize.CALCULATION_STEP + 1;
	      if (current < length) {
	        timer = requestAnimationFrame(loop);
	      } else {
	        cancelAnimationFrame(timer);
	        $__9.inProgress = false;
	        $__9.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        if ($__9.hot.view.wt.wtOverlays.leftOverlay.needFullRender) {
	          $__9.hot.view.wt.wtOverlays.leftOverlay.clone.draw();
	        }
	      }
	    });
	    if (this.firstCalculation && this.getSyncCalculationLimit()) {
	      this.calculateRowsHeight({
	        from: 0,
	        to: this.getSyncCalculationLimit()
	      }, colRange);
	      this.firstCalculation = false;
	      current = this.getSyncCalculationLimit() + 1;
	    }
	    if (current < length) {
	      loop();
	    } else {
	      this.inProgress = false;
	    }
	  },
	  recalculateAllRowsHeight: function() {
	    if (isVisible(this.hot.view.wt.wtTable.TABLE)) {
	      this.clearCache();
	      this.calculateAllRowsHeight();
	    }
	  },
	  getSyncCalculationLimit: function() {
	    var limit = $AutoRowSize.SYNC_CALCULATION_LIMIT;
	    var rowsLimit = this.hot.countRows() - 1;
	    if (isObject(this.hot.getSettings().autoRowSize)) {
	      limit = this.hot.getSettings().autoRowSize.syncLimit;
	      if (isPercentValue(limit)) {
	        limit = valueAccordingPercent(rowsLimit, limit);
	      } else {
	        limit = limit >> 0;
	      }
	    }
	    return Math.min(limit, rowsLimit);
	  },
	  getRowHeight: function(row) {
	    var defaultHeight = arguments[1];
	    var height = defaultHeight;
	    if (this.heights[row] !== void 0 && this.heights[row] > (defaultHeight || 0)) {
	      height = this.heights[row];
	    }
	    return height;
	  },
	  getFirstVisibleRow: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.rowsVisibleCalculator) {
	      return wot.wtTable.getFirstVisibleRow();
	    }
	    if (wot.wtViewport.rowsRenderCalculator) {
	      return wot.wtTable.getFirstRenderedRow();
	    }
	    return -1;
	  },
	  getLastVisibleRow: function() {
	    var wot = this.hot.view.wt;
	    if (wot.wtViewport.rowsVisibleCalculator) {
	      return wot.wtTable.getLastVisibleRow();
	    }
	    if (wot.wtViewport.rowsRenderCalculator) {
	      return wot.wtTable.getLastRenderedRow();
	    }
	    return -1;
	  },
	  clearCache: function() {
	    this.heights.length = 0;
	  },
	  clearCacheByRange: function(range) {
	    var $__9 = this;
	    if (typeof range === 'number') {
	      range = {
	        from: range,
	        to: range
	      };
	    }
	    rangeEach(Math.min(range.from, range.to), Math.max(range.from, range.to), (function(row) {
	      return $__9.heights[row] = void 0;
	    }));
	  },
	  isNeedRecalculate: function() {
	    return arrayFilter(this.heights, (function(item) {
	      return (item === void 0);
	    })).length ? true : false;
	  },
	  onBeforeRender: function() {
	    var force = this.hot.renderCall;
	    this.calculateRowsHeight({
	      from: this.getFirstVisibleRow(),
	      to: this.getLastVisibleRow()
	    }, void 0, force);
	    if (this.isNeedRecalculate() && !this.inProgress) {
	      this.calculateAllRowsHeight();
	    }
	  },
	  onBeforeRowMove: function(from, to) {
	    this.clearCacheByRange({
	      from: from,
	      to: to
	    });
	    this.calculateAllRowsHeight();
	  },
	  onBeforeRowResize: function(row, size, isDblClick) {
	    if (isDblClick) {
	      this.calculateRowsHeight(row, void 0, true);
	      size = this.getRowHeight(row);
	    }
	    return size;
	  },
	  onAfterLoadData: function() {
	    var $__9 = this;
	    if (this.hot.view) {
	      this.recalculateAllRowsHeight();
	    } else {
	      setTimeout((function() {
	        if ($__9.hot) {
	          $__9.recalculateAllRowsHeight();
	        }
	      }), 0);
	    }
	  },
	  onBeforeChange: function(changes) {
	    var range = null;
	    if (changes.length === 1) {
	      range = changes[0][0];
	    } else if (changes.length > 1) {
	      range = {
	        from: changes[0][0],
	        to: changes[changes.length - 1][0]
	      };
	    }
	    if (range !== null) {
	      this.clearCacheByRange(range);
	    }
	  },
	  destroy: function() {
	    this.ghostTable.clean();
	    $traceurRuntime.superGet(this, $AutoRowSize.prototype, "destroy").call(this);
	  }
	}, {
	  get CALCULATION_STEP() {
	    return 50;
	  },
	  get SYNC_CALCULATION_LIMIT() {
	    return 500;
	  }
	}, BasePlugin);
	;
	registerPlugin('autoRowSize', AutoRowSize);

	//# 
	},{"_base":58,"helpers/array":42,"helpers/dom/element":45,"helpers/number":49,"helpers/object":50,"helpers/string":52,"plugins":57,"utils/ghostTable":98,"utils/samplesGenerator":99}],61:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Autofill: {get: function() {
	      return Autofill;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    offset = $__0.offset,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	;
	function getDeltas(start, end, data, direction) {
	  var rlength = data.length,
	      clength = data ? data[0].length : 0,
	      deltas = [],
	      arr = [],
	      diffRow,
	      diffCol,
	      startValue,
	      endValue,
	      delta;
	  diffRow = end.row - start.row;
	  diffCol = end.col - start.col;
	  if (['down', 'up'].indexOf(direction) !== -1) {
	    for (var col = 0; col <= diffCol; col++) {
	      startValue = parseInt(data[0][col], 10);
	      endValue = parseInt(data[rlength - 1][col], 10);
	      delta = (direction === 'down' ? (endValue - startValue) : (startValue - endValue)) / (rlength - 1) || 0;
	      arr.push(delta);
	    }
	    deltas.push(arr);
	  }
	  if (['right', 'left'].indexOf(direction) !== -1) {
	    for (var row = 0; row <= diffRow; row++) {
	      startValue = parseInt(data[row][0], 10);
	      endValue = parseInt(data[row][clength - 1], 10);
	      delta = (direction === 'right' ? (endValue - startValue) : (startValue - endValue)) / (clength - 1) || 0;
	      arr = [];
	      arr.push(delta);
	      deltas.push(arr);
	    }
	  }
	  return deltas;
	}
	function Autofill(instance) {
	  var _this = this,
	      mouseDownOnCellCorner = false,
	      wtOnCellCornerMouseDown,
	      wtOnCellMouseOver,
	      eventManager;
	  this.instance = instance;
	  this.addingStarted = false;
	  eventManager = eventManagerObject(instance);
	  function mouseUpCallback(event) {
	    if (!instance.autofill) {
	      return true;
	    }
	    if (instance.autofill.handle && instance.autofill.handle.isDragged) {
	      if (instance.autofill.handle.isDragged > 1) {
	        instance.autofill.apply();
	      }
	      instance.autofill.handle.isDragged = 0;
	      mouseDownOnCellCorner = false;
	    }
	  }
	  function mouseMoveCallback(event) {
	    var tableBottom,
	        tableRight;
	    if (!_this.instance.autofill) {
	      return false;
	    }
	    tableBottom = offset(_this.instance.table).top - (window.pageYOffset || document.documentElement.scrollTop) + outerHeight(_this.instance.table);
	    tableRight = offset(_this.instance.table).left - (window.pageXOffset || document.documentElement.scrollLeft) + outerWidth(_this.instance.table);
	    if (_this.addingStarted === false && _this.instance.autofill.handle.isDragged > 0 && event.clientY > tableBottom && event.clientX <= tableRight) {
	      _this.instance.mouseDragOutside = true;
	      _this.addingStarted = true;
	    } else {
	      _this.instance.mouseDragOutside = false;
	    }
	    if (_this.instance.mouseDragOutside) {
	      setTimeout(function() {
	        _this.addingStarted = false;
	        _this.instance.alter('insert_row');
	      }, 200);
	    }
	  }
	  eventManager.addEventListener(document, 'mouseup', mouseUpCallback);
	  eventManager.addEventListener(document, 'mousemove', mouseMoveCallback);
	  wtOnCellCornerMouseDown = this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown;
	  this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown = function(event) {
	    instance.autofill.handle.isDragged = 1;
	    mouseDownOnCellCorner = true;
	    wtOnCellCornerMouseDown(event);
	  };
	  wtOnCellMouseOver = this.instance.view.wt.wtSettings.settings.onCellMouseOver;
	  this.instance.view.wt.wtSettings.settings.onCellMouseOver = function(event, coords, TD, wt) {
	    if (instance.autofill && mouseDownOnCellCorner && !instance.view.isMouseDown() && instance.autofill.handle && instance.autofill.handle.isDragged) {
	      instance.autofill.handle.isDragged++;
	      instance.autofill.showBorder(coords);
	      instance.autofill.checkIfNewRowNeeded();
	    }
	    wtOnCellMouseOver(event, coords, TD, wt);
	  };
	  this.instance.view.wt.wtSettings.settings.onCellCornerDblClick = function() {
	    instance.autofill.selectAdjacent();
	  };
	}
	Autofill.prototype.init = function() {
	  this.handle = {};
	};
	Autofill.prototype.disable = function() {
	  this.handle.disabled = true;
	};
	Autofill.prototype.selectAdjacent = function() {
	  var select,
	      data,
	      r,
	      maxR,
	      c;
	  if (this.instance.selection.isMultiple()) {
	    select = this.instance.view.wt.selections.area.getCorners();
	  } else {
	    select = this.instance.view.wt.selections.current.getCorners();
	  }
	  data = this.instance.getData();
	  rows: for (r = select[2] + 1; r < this.instance.countRows(); r++) {
	    for (c = select[1]; c <= select[3]; c++) {
	      if (data[r][c]) {
	        break rows;
	      }
	    }
	    if (!!data[r][select[1] - 1] || !!data[r][select[3] + 1]) {
	      maxR = r;
	    }
	  }
	  if (maxR) {
	    this.instance.view.wt.selections.fill.clear();
	    this.instance.view.wt.selections.fill.add(new WalkontableCellCoords(select[0], select[1]));
	    this.instance.view.wt.selections.fill.add(new WalkontableCellCoords(maxR, select[3]));
	    this.apply();
	  }
	};
	Autofill.prototype.apply = function() {
	  var drag,
	      select,
	      start,
	      end,
	      _data,
	      direction,
	      deltas,
	      selRange;
	  this.handle.isDragged = 0;
	  if (this.instance.view.wt.selections.fill.isEmpty()) {
	    return;
	  }
	  drag = this.instance.view.wt.selections.fill.getCorners();
	  this.instance.view.wt.selections.fill.clear();
	  if (this.instance.selection.isMultiple()) {
	    select = this.instance.view.wt.selections.area.getCorners();
	  } else {
	    select = this.instance.view.wt.selections.current.getCorners();
	  }
	  Handsontable.hooks.run(this.instance, 'afterAutofillApplyValues', select, drag);
	  if (drag[0] === select[0] && drag[1] < select[1]) {
	    direction = 'left';
	    start = new WalkontableCellCoords(drag[0], drag[1]);
	    end = new WalkontableCellCoords(drag[2], select[1] - 1);
	  } else if (drag[0] === select[0] && drag[3] > select[3]) {
	    direction = 'right';
	    start = new WalkontableCellCoords(drag[0], select[3] + 1);
	    end = new WalkontableCellCoords(drag[2], drag[3]);
	  } else if (drag[0] < select[0] && drag[1] === select[1]) {
	    direction = 'up';
	    start = new WalkontableCellCoords(drag[0], drag[1]);
	    end = new WalkontableCellCoords(select[0] - 1, drag[3]);
	  } else if (drag[2] > select[2] && drag[1] === select[1]) {
	    direction = 'down';
	    start = new WalkontableCellCoords(select[2] + 1, drag[1]);
	    end = new WalkontableCellCoords(drag[2], drag[3]);
	  }
	  if (start && start.row > -1 && start.col > -1) {
	    selRange = {
	      from: this.instance.getSelectedRange().from,
	      to: this.instance.getSelectedRange().to
	    };
	    _data = this.instance.getData(selRange.from.row, selRange.from.col, selRange.to.row, selRange.to.col);
	    deltas = getDeltas(start, end, _data, direction);
	    Handsontable.hooks.run(this.instance, 'beforeAutofill', start, end, _data);
	    this.instance.populateFromArray(start.row, start.col, _data, end.row, end.col, 'autofill', null, direction, deltas);
	    this.instance.selection.setRangeStart(new WalkontableCellCoords(drag[0], drag[1]));
	    this.instance.selection.setRangeEnd(new WalkontableCellCoords(drag[2], drag[3]));
	  } else {
	    this.instance.selection.refreshBorders();
	  }
	};
	Autofill.prototype.showBorder = function(coords) {
	  var topLeft = this.instance.getSelectedRange().getTopLeftCorner(),
	      bottomRight = this.instance.getSelectedRange().getBottomRightCorner();
	  if (this.instance.getSettings().fillHandle !== 'horizontal' && (bottomRight.row < coords.row || topLeft.row > coords.row)) {
	    coords = new WalkontableCellCoords(coords.row, bottomRight.col);
	  } else if (this.instance.getSettings().fillHandle !== 'vertical') {
	    coords = new WalkontableCellCoords(bottomRight.row, coords.col);
	  } else {
	    return;
	  }
	  this.instance.view.wt.selections.fill.clear();
	  this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().from);
	  this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().to);
	  this.instance.view.wt.selections.fill.add(coords);
	  this.instance.view.render();
	};
	Autofill.prototype.checkIfNewRowNeeded = function() {
	  var fillCorners,
	      selection,
	      tableRows = this.instance.countRows(),
	      that = this;
	  if (this.instance.view.wt.selections.fill.cellRange && this.addingStarted === false) {
	    selection = this.instance.getSelected();
	    fillCorners = this.instance.view.wt.selections.fill.getCorners();
	    if (selection[2] < tableRows - 1 && fillCorners[2] === tableRows - 1) {
	      this.addingStarted = true;
	      this.instance._registerTimeout(setTimeout(function() {
	        that.instance.alter('insert_row');
	        that.addingStarted = false;
	      }, 200));
	    }
	  }
	};
	Handsontable.hooks.add('afterInit', function() {
	  var autofill = new Autofill(this);
	  if (typeof this.getSettings().fillHandle !== 'undefined') {
	    if (autofill.handle && this.getSettings().fillHandle === false) {
	      autofill.disable();
	    } else if (!autofill.handle && this.getSettings().fillHandle !== false) {
	      this.autofill = autofill;
	      this.autofill.init();
	    }
	  }
	});
	Handsontable.Autofill = Autofill;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"eventManager":41,"helpers/dom/element":45,"plugins":57}],62:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ColumnSorting: {get: function() {
	      return ColumnSorting;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    closest = $__0.closest,
	    hasClass = $__0.hasClass,
	    index = $__0.index,
	    removeClass = $__0.removeClass;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}),
	    arrayEach = $__1.arrayEach,
	    arrayMap = $__1.arrayMap,
	    arrayReduce = $__1.arrayReduce;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	Handsontable.hooks.register('beforeColumnSort');
	Handsontable.hooks.register('afterColumnSort');
	var ColumnSorting = function ColumnSorting(hotInstance) {
	  $traceurRuntime.superConstructor($ColumnSorting).call(this, hotInstance);
	  this.sortIndicators = [];
	};
	var $ColumnSorting = ColumnSorting;
	($traceurRuntime.createClass)(ColumnSorting, {
	  isEnabled: function() {
	    return !!(this.hot.getSettings().columnSorting);
	  },
	  enablePlugin: function() {
	    var $__5 = this;
	    if (this.enabled) {
	      return;
	    }
	    var _this = this;
	    this.hot.sortIndex = [];
	    this.hot.sort = function() {
	      var args = Array.prototype.slice.call(arguments);
	      return _this.sortByColumn.apply(_this, args);
	    };
	    if (typeof this.hot.getSettings().observeChanges === 'undefined') {
	      this.enableObserveChangesPlugin();
	    }
	    this.bindColumnSortingAfterClick();
	    this.addHook('afterTrimRow', (function(row) {
	      return $__5.sort();
	    }));
	    this.addHook('afterUntrimRow', (function(row) {
	      return $__5.sort();
	    }));
	    this.addHook('modifyRow', (function(row) {
	      return $__5.translateRow(row);
	    }));
	    this.addHook('afterUpdateSettings', (function() {
	      return $__5.onAfterUpdateSettings();
	    }));
	    this.addHook('afterGetColHeader', (function(col, TH) {
	      return $__5.getColHeader(col, TH);
	    }));
	    this.addHook('afterCreateRow', function() {
	      _this.afterCreateRow.apply(_this, arguments);
	    });
	    this.addHook('afterRemoveRow', function() {
	      _this.afterRemoveRow.apply(_this, arguments);
	    });
	    this.addHook('afterInit', (function() {
	      return $__5.sortBySettings();
	    }));
	    this.addHook('afterLoadData', (function() {
	      $__5.hot.sortIndex = [];
	      if ($__5.hot.view) {
	        $__5.sortBySettings();
	      }
	    }));
	    if (this.hot.view) {
	      this.sortBySettings();
	    }
	    $traceurRuntime.superGet(this, $ColumnSorting.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    this.hot.sort = void 0;
	    $traceurRuntime.superGet(this, $ColumnSorting.prototype, "disablePlugin").call(this);
	  },
	  onAfterUpdateSettings: function() {
	    this.sortBySettings();
	  },
	  sortBySettings: function() {
	    var sortingSettings = this.hot.getSettings().columnSorting;
	    var loadedSortingState = this.loadSortingState();
	    var sortingColumn;
	    var sortingOrder;
	    if (typeof loadedSortingState === 'undefined') {
	      sortingColumn = sortingSettings.column;
	      sortingOrder = sortingSettings.sortOrder;
	    } else {
	      sortingColumn = loadedSortingState.sortColumn;
	      sortingOrder = loadedSortingState.sortOrder;
	    }
	    this.sortByColumn(sortingColumn, sortingOrder);
	  },
	  setSortingColumn: function(col, order) {
	    if (typeof col == 'undefined') {
	      this.hot.sortColumn = void 0;
	      this.hot.sortOrder = void 0;
	      return;
	    } else if (this.hot.sortColumn === col && typeof order == 'undefined') {
	      if (this.hot.sortOrder === false) {
	        this.hot.sortOrder = void 0;
	      } else {
	        this.hot.sortOrder = !this.hot.sortOrder;
	      }
	    } else {
	      this.hot.sortOrder = typeof order === 'undefined' ? true : order;
	    }
	    this.hot.sortColumn = col;
	  },
	  sortByColumn: function(col, order) {
	    this.setSortingColumn(col, order);
	    if (typeof this.hot.sortColumn == 'undefined') {
	      return;
	    }
	    Handsontable.hooks.run(this.hot, 'beforeColumnSort', this.hot.sortColumn, this.hot.sortOrder);
	    this.sort();
	    this.hot.render();
	    this.saveSortingState();
	    Handsontable.hooks.run(this.hot, 'afterColumnSort', this.hot.sortColumn, this.hot.sortOrder);
	  },
	  saveSortingState: function() {
	    var sortingState = {};
	    if (typeof this.hot.sortColumn != 'undefined') {
	      sortingState.sortColumn = this.hot.sortColumn;
	    }
	    if (typeof this.hot.sortOrder != 'undefined') {
	      sortingState.sortOrder = this.hot.sortOrder;
	    }
	    if (sortingState.hasOwnProperty('sortColumn') || sortingState.hasOwnProperty('sortOrder')) {
	      Handsontable.hooks.run(this.hot, 'persistentStateSave', 'columnSorting', sortingState);
	    }
	  },
	  loadSortingState: function() {
	    var storedState = {};
	    Handsontable.hooks.run(this.hot, 'persistentStateLoad', 'columnSorting', storedState);
	    return storedState.value;
	  },
	  bindColumnSortingAfterClick: function() {
	    if (this.bindedSortEvent) {
	      return;
	    }
	    var eventManager = eventManagerObject(this.hot),
	        _this = this;
	    this.bindedSortEvent = true;
	    eventManager.addEventListener(this.hot.rootElement, 'click', function(e) {
	      if (hasClass(e.target, 'columnSorting')) {
	        var col = getColumn(e.target);
	        if (col === this.lastSortedColumn) {
	          switch (_this.hot.sortOrder) {
	            case void 0:
	              _this.sortOrderClass = 'ascending';
	              break;
	            case true:
	              _this.sortOrderClass = 'descending';
	              break;
	            case false:
	              _this.sortOrderClass = void 0;
	          }
	        } else {
	          _this.sortOrderClass = 'ascending';
	        }
	        this.lastSortedColumn = col;
	        _this.sortByColumn(col);
	      }
	    });
	    function countRowHeaders() {
	      var tr = _this.hot.view.TBODY.querySelector('tr');
	      var length = 1;
	      if (tr) {
	        length = tr.querySelectorAll('th').length;
	      }
	      return length;
	    }
	    function getColumn(target) {
	      var TH = closest(target, 'TH');
	      return _this.hot.view.wt.wtTable.getFirstRenderedColumn() + index(TH) - countRowHeaders();
	    }
	  },
	  enableObserveChangesPlugin: function() {
	    var _this = this;
	    this.hot._registerTimeout(setTimeout(function() {
	      _this.hot.updateSettings({observeChanges: true});
	    }, 0));
	  },
	  defaultSort: function(sortOrder) {
	    return function(a, b) {
	      if (typeof a[1] == 'string') {
	        a[1] = a[1].toLowerCase();
	      }
	      if (typeof b[1] == 'string') {
	        b[1] = b[1].toLowerCase();
	      }
	      if (a[1] === b[1]) {
	        return 0;
	      }
	      if (a[1] === null || a[1] === '') {
	        return 1;
	      }
	      if (b[1] === null || b[1] === '') {
	        return -1;
	      }
	      if (isNaN(a[1]) && !isNaN(b[1])) {
	        return sortOrder ? 1 : -1;
	      } else if (!isNaN(a[1]) && isNaN(b[1])) {
	        return sortOrder ? -1 : 1;
	      }
	      if (a[1] < b[1]) {
	        return sortOrder ? -1 : 1;
	      }
	      if (a[1] > b[1]) {
	        return sortOrder ? 1 : -1;
	      }
	      return 0;
	    };
	  },
	  dateSort: function(sortOrder) {
	    return function(a, b) {
	      if (a[1] === b[1]) {
	        return 0;
	      }
	      if (a[1] === null || a[1] === '') {
	        return 1;
	      }
	      if (b[1] === null || b[1] === '') {
	        return -1;
	      }
	      var aDate = new Date(a[1]);
	      var bDate = new Date(b[1]);
	      if (aDate < bDate) {
	        return sortOrder ? -1 : 1;
	      }
	      if (aDate > bDate) {
	        return sortOrder ? 1 : -1;
	      }
	      return 0;
	    };
	  },
	  sort: function() {
	    if (typeof this.hot.sortOrder == 'undefined') {
	      this.hot.sortIndex.length = 0;
	      return;
	    }
	    var colMeta,
	        sortFunction;
	    this.hot.sortingEnabled = false;
	    this.hot.sortIndex.length = 0;
	    var colOffset = this.hot.colOffset();
	    for (var i = 0,
	        ilen = this.hot.countRows() - this.hot.getSettings().minSpareRows; i < ilen; i++) {
	      this.hot.sortIndex.push([i, this.hot.getDataAtCell(i, this.hot.sortColumn + colOffset)]);
	    }
	    colMeta = this.hot.getCellMeta(0, this.hot.sortColumn);
	    this.sortIndicators[this.hot.sortColumn] = colMeta.sortIndicator;
	    switch (colMeta.type) {
	      case 'date':
	        sortFunction = this.dateSort;
	        break;
	      default:
	        sortFunction = this.defaultSort;
	    }
	    this.hot.sortIndex.sort(sortFunction(this.hot.sortOrder));
	    for (var i = this.hot.sortIndex.length; i < this.hot.countRows(); i++) {
	      this.hot.sortIndex.push([i, this.hot.getDataAtCell(i, this.hot.sortColumn + colOffset)]);
	    }
	    this.hot.sortingEnabled = true;
	  },
	  translateRow: function(row) {
	    if (this.hot.sortingEnabled && (typeof this.hot.sortOrder !== 'undefined') && this.hot.sortIndex && this.hot.sortIndex.length && this.hot.sortIndex[row]) {
	      return this.hot.sortIndex[row][0];
	    }
	    return row;
	  },
	  untranslateRow: function(row) {
	    if (this.hot.sortingEnabled && this.hot.sortIndex && this.hot.sortIndex.length) {
	      for (var i = 0; i < this.hot.sortIndex.length; i++) {
	        if (this.hot.sortIndex[i][0] == row) {
	          return i;
	        }
	      }
	    }
	  },
	  getColHeader: function(col, TH) {
	    var headerLink = TH.querySelector('.colHeader');
	    var colspan = TH.getAttribute('colspan');
	    var TRs = TH.parentNode.parentNode.childNodes;
	    var headerLevel = Array.prototype.indexOf.call(TRs, TH.parentNode);
	    headerLevel = headerLevel - TRs.length;
	    if (!headerLink) {
	      return;
	    }
	    if (this.hot.getSettings().columnSorting && col >= 0 && headerLevel === -1) {
	      addClass(headerLink, 'columnSorting');
	    }
	    removeClass(headerLink, 'descending');
	    removeClass(headerLink, 'ascending');
	    if (this.sortIndicators[col]) {
	      if (col === this.hot.sortColumn) {
	        if (this.sortOrderClass === 'ascending') {
	          addClass(headerLink, 'ascending');
	        } else if (this.sortOrderClass === 'descending') {
	          addClass(headerLink, 'descending');
	        }
	      }
	    }
	  },
	  isSorted: function() {
	    return typeof this.hot.sortColumn != 'undefined';
	  },
	  afterCreateRow: function(index, amount) {
	    if (!this.isSorted()) {
	      return;
	    }
	    for (var i = 0; i < this.hot.sortIndex.length; i++) {
	      if (this.hot.sortIndex[i][0] >= index) {
	        this.hot.sortIndex[i][0] += amount;
	      }
	    }
	    for (var i = 0; i < amount; i++) {
	      this.hot.sortIndex.splice(index + i, 0, [index + i, this.hot.getSourceData()[index + i][this.hot.sortColumn + this.hot.colOffset()]]);
	    }
	    this.saveSortingState();
	  },
	  afterRemoveRow: function(index, amount) {
	    if (!this.isSorted()) {
	      return;
	    }
	    var removedRows = this.hot.sortIndex.splice(index, amount);
	    removedRows = arrayMap(removedRows, (function(row) {
	      return row[0];
	    }));
	    function countRowShift(logicalRow) {
	      return arrayReduce(removedRows, (function(count, removedLogicalRow) {
	        if (logicalRow > removedLogicalRow) {
	          count++;
	        }
	        return count;
	      }), 0);
	    }
	    this.hot.sortIndex = arrayMap(this.hot.sortIndex, (function(logicalRow, physicalRow) {
	      var rowShift = countRowShift(logicalRow[0]);
	      if (rowShift) {
	        logicalRow[0] -= rowShift;
	      }
	      return logicalRow;
	    }));
	    this.saveSortingState();
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('columnSorting', ColumnSorting);

	//# 
	},{"_base":58,"eventManager":41,"helpers/array":42,"helpers/dom/element":45,"plugins":57}],63:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CommentEditor: {get: function() {
	      return CommentEditor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__;
	var addClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).addClass;
	var CommentEditor = function CommentEditor() {
	  this.editor = this.createEditor();
	  this.editorStyle = this.editor.style;
	  this.editorStyle.position = 'absolute';
	  this.editorStyle.zIndex = 100;
	  this.hide();
	};
	var $CommentEditor = CommentEditor;
	($traceurRuntime.createClass)(CommentEditor, {
	  setPosition: function(x, y) {
	    this.editorStyle.left = x + 'px';
	    this.editorStyle.top = y + 'px';
	  },
	  show: function() {
	    this.editorStyle.display = 'block';
	  },
	  hide: function() {
	    this.editorStyle.display = 'none';
	  },
	  isVisible: function() {
	    return this.editorStyle.display === 'block';
	  },
	  setValue: function() {
	    var value = arguments[0] !== (void 0) ? arguments[0] : '';
	    value = value || '';
	    this.getInputElement().value = value;
	  },
	  getValue: function() {
	    return this.getInputElement().value;
	  },
	  isFocused: function() {
	    return document.activeElement === this.getInputElement();
	  },
	  focus: function() {
	    this.getInputElement().focus();
	  },
	  createEditor: function() {
	    var container = document.querySelector('.' + $CommentEditor.CLASS_EDITOR_CONTAINER);
	    var editor;
	    var textArea;
	    if (!container) {
	      container = document.createElement('div');
	      addClass(container, $CommentEditor.CLASS_EDITOR_CONTAINER);
	      document.body.appendChild(container);
	    }
	    editor = document.createElement('div');
	    addClass(editor, $CommentEditor.CLASS_EDITOR);
	    textArea = document.createElement('textarea');
	    addClass(textArea, $CommentEditor.CLASS_INPUT);
	    editor.appendChild(textArea);
	    container.appendChild(editor);
	    return editor;
	  },
	  getInputElement: function() {
	    return this.editor.querySelector('.' + $CommentEditor.CLASS_INPUT);
	  },
	  destroy: function() {
	    this.editor.parentNode.removeChild(this.editor);
	    this.editor = null;
	    this.editorStyle = null;
	  }
	}, {
	  get CLASS_EDITOR_CONTAINER() {
	    return 'htCommentsContainer';
	  },
	  get CLASS_EDITOR() {
	    return 'htComments';
	  },
	  get CLASS_INPUT() {
	    return 'htCommentTextArea';
	  },
	  get CLASS_CELL() {
	    return 'htCommentCell';
	  }
	});
	;

	//# 
	},{"helpers/dom/element":45}],64:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Comments: {get: function() {
	      return Comments;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__95_base__,
	    $__commentEditor__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    closest = $__0.closest,
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    offset = $__0.offset;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var $__3 = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}),
	    registerPlugin = $__3.registerPlugin,
	    getPlugin = $__3.getPlugin;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var CommentEditor = ($__commentEditor__ = require("commentEditor"), $__commentEditor__ && $__commentEditor__.__esModule && $__commentEditor__ || {default: $__commentEditor__}).CommentEditor;
	var Comments = function Comments(hotInstance) {
	  $traceurRuntime.superConstructor($Comments).call(this, hotInstance);
	  this.editor = null;
	  this.eventManager = null;
	  this.range = {};
	  this.mouseDown = false;
	  this.contextMenuEvent = false;
	  this.timer = null;
	};
	var $Comments = Comments;
	($traceurRuntime.createClass)(Comments, {
	  isEnabled: function() {
	    return this.hot.getSettings().comments;
	  },
	  enablePlugin: function() {
	    var $__6 = this;
	    if (this.enabled) {
	      return;
	    }
	    if (!this.editor) {
	      this.editor = new CommentEditor();
	    }
	    if (!this.eventManager) {
	      this.eventManager = new EventManager(this);
	    }
	    this.addHook('afterContextMenuDefaultOptions', (function(options) {
	      return $__6.addToContextMenu(options);
	    }));
	    this.addHook('afterRenderer', (function(TD, row, col, prop, value, cellProperties) {
	      return $__6.onAfterRenderer(TD, cellProperties);
	    }));
	    this.addHook('afterScrollVertically', (function() {
	      return $__6.refreshEditorPosition();
	    }));
	    this.addHook('afterColumnResize', (function() {
	      return $__6.refreshEditorPosition();
	    }));
	    this.addHook('afterRowResize', (function() {
	      return $__6.refreshEditorPosition();
	    }));
	    this.registerListeners();
	    $traceurRuntime.superGet(this, $Comments.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $Comments.prototype, "disablePlugin").call(this);
	  },
	  registerListeners: function() {
	    var $__6 = this;
	    this.eventManager.addEventListener(document, 'mouseover', (function(event) {
	      return $__6.onMouseOver(event);
	    }));
	    this.eventManager.addEventListener(document, 'mousedown', (function(event) {
	      return $__6.onMouseDown(event);
	    }));
	    this.eventManager.addEventListener(document, 'mousemove', (function(event) {
	      return $__6.onMouseMove(event);
	    }));
	    this.eventManager.addEventListener(document, 'mouseup', (function(event) {
	      return $__6.onMouseUp(event);
	    }));
	    this.eventManager.addEventListener(this.editor.getInputElement(), 'blur', (function(event) {
	      return $__6.onEditorBlur(event);
	    }));
	  },
	  setRange: function(range) {
	    this.range = range;
	  },
	  clearRange: function() {
	    this.range = {};
	  },
	  targetIsCellWithComment: function(event) {
	    return hasClass(event.target, 'htCommentCell') && closest(event.target, [this.hot.rootElement]) ? true : false;
	  },
	  targetIsCommentTextArea: function(event) {
	    return this.editor.getInputElement() === event.target;
	  },
	  saveComment: function() {
	    if (!this.range.from) {
	      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	    }
	    var comment = this.editor.getValue();
	    var row = this.range.from.row;
	    var col = this.range.from.col;
	    this.hot.setCellMeta(row, col, 'comment', comment);
	    this.hot.render();
	  },
	  saveCommentAtCell: function(row, col) {
	    this.setRange({from: new WalkontableCellCoords(row, col)});
	    this.saveComment();
	  },
	  removeComment: function() {
	    if (!this.range.from) {
	      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	    }
	    this.hot.removeCellMeta(this.range.from.row, this.range.from.col, 'comment');
	    this.hot.render();
	    this.hide();
	  },
	  removeCommentAtCell: function(row, col) {
	    this.setRange({from: new WalkontableCellCoords(row, col)});
	    this.removeComment();
	  },
	  show: function() {
	    if (!this.range.from) {
	      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	    }
	    var meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
	    this.refreshEditorPosition(true);
	    this.editor.setValue(meta.comment || '');
	    this.editor.show();
	    return true;
	  },
	  showAtCell: function(row, col) {
	    this.setRange({from: new WalkontableCellCoords(row, col)});
	    return this.show();
	  },
	  hide: function() {
	    this.editor.hide();
	  },
	  refreshEditorPosition: function() {
	    var force = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (!force && (!this.range.from || !this.editor.isVisible())) {
	      return;
	    }
	    var TD = this.hot.view.wt.wtTable.getCell(this.range.from);
	    var cellOffset = offset(TD);
	    var lastColWidth = this.hot.getColWidth(this.range.from.col);
	    var cellTopOffset = cellOffset.top;
	    var cellLeftOffset = cellOffset.left;
	    var verticalCompensation = 0;
	    var horizontalCompensation = 0;
	    if (this.hot.view.wt.wtViewport.hasVerticalScroll()) {
	      cellTopOffset = cellTopOffset - this.hot.view.wt.wtOverlays.topOverlay.getScrollPosition();
	      verticalCompensation = 20;
	    }
	    if (this.hot.view.wt.wtViewport.hasHorizontalScroll()) {
	      cellLeftOffset = cellLeftOffset - this.hot.view.wt.wtOverlays.leftOverlay.getScrollPosition();
	      horizontalCompensation = 20;
	    }
	    var x = cellLeftOffset + lastColWidth;
	    var y = cellTopOffset;
	    var rect = this.hot.view.wt.wtTable.holder.getBoundingClientRect();
	    var holderPos = {
	      left: rect.left + getWindowScrollLeft() + horizontalCompensation,
	      right: rect.right + getWindowScrollLeft() - 15,
	      top: rect.top + getWindowScrollTop() + verticalCompensation,
	      bottom: rect.bottom + getWindowScrollTop()
	    };
	    if (x <= holderPos.left || x > holderPos.right || y <= holderPos.top || y > holderPos.bottom) {
	      this.hide();
	    } else {
	      this.editor.setPosition(x, y);
	    }
	  },
	  onMouseDown: function(event) {
	    this.mouseDown = true;
	    if (!this.hot.view || !this.hot.view.wt) {
	      return;
	    }
	    if (!this.contextMenuEvent && !this.targetIsCommentTextArea(event) && !this.targetIsCellWithComment(event)) {
	      this.hide();
	    }
	    this.contextMenuEvent = false;
	  },
	  onMouseOver: function(event) {
	    if (this.mouseDown || this.editor.isFocused()) {
	      return;
	    }
	    if (this.targetIsCellWithComment(event)) {
	      var coordinates = this.hot.view.wt.wtTable.getCoords(event.target);
	      var range = {from: new WalkontableCellCoords(coordinates.row, coordinates.col)};
	      this.setRange(range);
	      this.show();
	    } else if (!this.targetIsCommentTextArea(event) && !this.editor.isFocused()) {
	      this.hide();
	    }
	  },
	  onMouseMove: function(event) {
	    var $__6 = this;
	    if (this.targetIsCommentTextArea(event)) {
	      this.mouseDown = true;
	      clearTimeout(this.timer);
	      this.timer = setTimeout((function() {
	        $__6.mouseDown = false;
	      }), 200);
	    }
	  },
	  onMouseUp: function(event) {
	    this.mouseDown = false;
	  },
	  onAfterRenderer: function(TD, cellProperties) {
	    if (cellProperties.comment) {
	      addClass(TD, cellProperties.commentedCellClassName);
	    }
	  },
	  onEditorBlur: function(event) {
	    this.saveComment();
	  },
	  checkSelectionCommentsConsistency: function() {
	    var selected = this.hot.getSelectedRange();
	    if (!selected) {
	      return false;
	    }
	    var hasComment = false;
	    var cell = selected.from;
	    if (this.hot.getCellMeta(cell.row, cell.col).comment) {
	      hasComment = true;
	    }
	    return hasComment;
	  },
	  onContextMenuAddComment: function() {
	    var $__6 = this;
	    var coords = this.hot.getSelectedRange();
	    this.contextMenuEvent = true;
	    this.setRange({from: coords.from});
	    this.show();
	    setTimeout((function() {
	      if ($__6.hot) {
	        $__6.hot.deselectCell();
	        $__6.editor.focus();
	      }
	    }), 10);
	  },
	  onContextMenuRemoveComment: function(key, selection) {
	    this.contextMenuEvent = true;
	    this.removeCommentAtCell(selection.start.row, selection.start.col);
	  },
	  addToContextMenu: function(defaultOptions) {
	    var $__6 = this;
	    defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR, {
	      key: 'commentsAddEdit',
	      name: (function() {
	        return $__6.checkSelectionCommentsConsistency() ? 'Edit Comment' : 'Add Comment';
	      }),
	      callback: (function() {
	        return $__6.onContextMenuAddComment();
	      }),
	      disabled: function() {
	        return this.getSelected() ? false : true;
	      }
	    }, {
	      key: 'commentsRemove',
	      name: function() {
	        return 'Delete Comment';
	      },
	      callback: (function(key, selection) {
	        return $__6.onContextMenuRemoveComment(key, selection);
	      }),
	      disabled: (function() {
	        return !$__6.checkSelectionCommentsConsistency();
	      })
	    });
	  },
	  destroy: function() {
	    if (this.editor) {
	      this.editor.destroy();
	    }
	    $traceurRuntime.superGet(this, $Comments.prototype, "destroy").call(this);
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('comments', Comments);

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"_base":58,"commentEditor":63,"eventManager":41,"helpers/dom/element":45,"plugins":57}],65:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CommandExecutor: {get: function() {
	      return CommandExecutor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_array__;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var CommandExecutor = function CommandExecutor(hotInstance) {
	  this.hot = hotInstance;
	  this.commands = {};
	  this.commonCallback = null;
	};
	($traceurRuntime.createClass)(CommandExecutor, {
	  registerCommand: function(name, commandDescriptor) {
	    this.commands[name] = commandDescriptor;
	  },
	  setCommonCallback: function(callback) {
	    this.commonCallback = callback;
	  },
	  execute: function(commandName) {
	    for (var params = [],
	        $__3 = 1; $__3 < arguments.length; $__3++)
	      params[$__3 - 1] = arguments[$__3];
	    var $__1 = this;
	    var commandSplit = commandName.split(':');
	    commandName = commandSplit[0];
	    var subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;
	    var command = this.commands[commandName];
	    if (!command) {
	      throw new Error(("Menu command '" + commandName + "' not exists."));
	    }
	    if (subCommandName && command.submenu) {
	      command = findSubCommand(subCommandName, command.submenu.items);
	    }
	    if (command.disabled === true) {
	      return;
	    }
	    if (typeof command.disabled == 'function' && command.disabled.call(this.hot) === true) {
	      return;
	    }
	    if (command.hasOwnProperty('submenu')) {
	      return;
	    }
	    var callbacks = [];
	    if (typeof command.callback === 'function') {
	      callbacks.push(command.callback);
	    }
	    if (typeof this.commonCallback === 'function') {
	      callbacks.push(this.commonCallback);
	    }
	    params.unshift(commandSplit.join(':'));
	    arrayEach(callbacks, (function(callback) {
	      return callback.apply($__1.hot, params);
	    }));
	  }
	}, {});
	function findSubCommand(subCommandName, subCommands) {
	  var command;
	  arrayEach(subCommands, (function(cmd) {
	    var cmds = cmd.key ? cmd.key.split(':') : null;
	    if (Array.isArray(cmds) && cmds[1] === subCommandName) {
	      command = cmd;
	      return false;
	    }
	  }));
	  return command;
	}
	;

	//# 
	},{"helpers/array":42}],66:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ContextMenu: {get: function() {
	      return ContextMenu;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $__commandExecutor__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $__itemsFactory__,
	    $__menu__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $__predefinedItems__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var CommandExecutor = ($__commandExecutor__ = require("commandExecutor"), $__commandExecutor__ && $__commandExecutor__.__esModule && $__commandExecutor__ || {default: $__commandExecutor__}).CommandExecutor;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var hasClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).hasClass;
	var ItemsFactory = ($__itemsFactory__ = require("itemsFactory"), $__itemsFactory__ && $__itemsFactory__.__esModule && $__itemsFactory__ || {default: $__itemsFactory__}).ItemsFactory;
	var Menu = ($__menu__ = require("menu"), $__menu__ && $__menu__.__esModule && $__menu__ || {default: $__menu__}).Menu;
	var $__7 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    objectEach = $__7.objectEach,
	    mixin = $__7.mixin;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var stopPropagation = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}).stopPropagation;
	var $__10 = ($__predefinedItems__ = require("predefinedItems"), $__predefinedItems__ && $__predefinedItems__.__esModule && $__predefinedItems__ || {default: $__predefinedItems__}),
	    ROW_ABOVE = $__10.ROW_ABOVE,
	    ROW_BELOW = $__10.ROW_BELOW,
	    COLUMN_LEFT = $__10.COLUMN_LEFT,
	    COLUMN_RIGHT = $__10.COLUMN_RIGHT,
	    REMOVE_ROW = $__10.REMOVE_ROW,
	    REMOVE_COLUMN = $__10.REMOVE_COLUMN,
	    UNDO = $__10.UNDO,
	    REDO = $__10.REDO,
	    READ_ONLY = $__10.READ_ONLY,
	    ALIGNMENT = $__10.ALIGNMENT,
	    SEPARATOR = $__10.SEPARATOR,
	    predefinedItems = $__10.predefinedItems;
	var ContextMenu = function ContextMenu(hotInstance) {
	  $traceurRuntime.superConstructor($ContextMenu).call(this, hotInstance);
	  this.eventManager = new EventManager(this);
	  this.commandExecutor = new CommandExecutor(this.hot);
	  this.itemsFactory = null;
	  this.menu = null;
	};
	var $ContextMenu = ContextMenu;
	($traceurRuntime.createClass)(ContextMenu, {
	  isEnabled: function() {
	    return this.hot.getSettings().contextMenu;
	  },
	  enablePlugin: function() {
	    var $__11 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.itemsFactory = new ItemsFactory(this.hot, $ContextMenu.DEFAULT_ITEMS);
	    var settings = this.hot.getSettings().contextMenu;
	    var predefinedItems = {items: this.itemsFactory.getVisibleItems(settings)};
	    this.registerEvents();
	    if (typeof settings.callback === 'function') {
	      this.commandExecutor.setCommonCallback(settings.callback);
	    }
	    $traceurRuntime.superGet(this, $ContextMenu.prototype, "enablePlugin").call(this);
	    this.callOnPluginsReady((function() {
	      $__11.hot.runHooks('afterContextMenuDefaultOptions', predefinedItems);
	      $__11.itemsFactory.setPredefinedItems(predefinedItems.items);
	      var menuItems = $__11.itemsFactory.getVisibleItems(settings);
	      $__11.menu = new Menu($__11.hot, {className: 'htContextMenu'});
	      $__11.menu.setMenuItems(menuItems);
	      $__11.menu.addLocalHook('afterOpen', (function() {
	        return $__11.onMenuAfterOpen();
	      }));
	      $__11.menu.addLocalHook('afterClose', (function() {
	        return $__11.onMenuAfterClose();
	      }));
	      $__11.menu.addLocalHook('executeCommand', (function() {
	        for (var params = [],
	            $__13 = 0; $__13 < arguments.length; $__13++)
	          params[$__13] = arguments[$__13];
	        return $__11.executeCommand.apply($__11, params);
	      }));
	      arrayEach(menuItems, (function(command) {
	        return $__11.commandExecutor.registerCommand(command.key, command);
	      }));
	    }));
	  },
	  disablePlugin: function() {
	    this.close();
	    if (this.menu) {
	      this.menu.destroy();
	      this.menu = null;
	    }
	    $traceurRuntime.superGet(this, $ContextMenu.prototype, "disablePlugin").call(this);
	  },
	  registerEvents: function() {
	    var $__11 = this;
	    this.eventManager.addEventListener(this.hot.rootElement, 'contextmenu', (function(event) {
	      return $__11.onContextMenu(event);
	    }));
	  },
	  open: function(event) {
	    if (!this.menu) {
	      return;
	    }
	    this.menu.open();
	    this.menu.setPosition(event);
	    this.menu.hotMenu.isHotTableEnv = this.hot.isHotTableEnv;
	    Handsontable.eventManager.isHotTableEnv = this.hot.isHotTableEnv;
	  },
	  close: function() {
	    if (!this.menu) {
	      return;
	    }
	    this.menu.close();
	  },
	  executeCommand: function() {
	    for (var params = [],
	        $__13 = 0; $__13 < arguments.length; $__13++)
	      params[$__13] = arguments[$__13];
	    this.commandExecutor.execute.apply(this.commandExecutor, params);
	  },
	  onContextMenu: function(event) {
	    var settings = this.hot.getSettings();
	    var showRowHeaders = settings.rowHeaders;
	    var showColHeaders = settings.colHeaders;
	    function isValidElement(element) {
	      return element.nodeName === 'TD' || element.parentNode.nodeName === 'TD';
	    }
	    var element = event.realTarget;
	    this.close();
	    event.preventDefault();
	    stopPropagation(event);
	    if (!(showRowHeaders || showColHeaders)) {
	      if (!isValidElement(element) && !(hasClass(element, 'current') && hasClass(element, 'wtBorder'))) {
	        return;
	      }
	    } else if (showRowHeaders && showColHeaders) {
	      var containsCornerHeader = element.parentNode.querySelectorAll('.cornerHeader').length > 0;
	      if (containsCornerHeader) {
	        return;
	      }
	    }
	    this.open(event);
	  },
	  onMenuAfterOpen: function() {
	    this.hot.runHooks('afterContextMenuShow', this);
	  },
	  onMenuAfterClose: function() {
	    this.hot.listen();
	    this.hot.runHooks('afterContextMenuHide', this);
	  },
	  destroy: function() {
	    this.close();
	    if (this.menu) {
	      this.menu.destroy();
	    }
	    $traceurRuntime.superGet(this, $ContextMenu.prototype, "destroy").call(this);
	  }
	}, {get DEFAULT_ITEMS() {
	    return [ROW_ABOVE, ROW_BELOW, SEPARATOR, COLUMN_LEFT, COLUMN_RIGHT, SEPARATOR, REMOVE_ROW, REMOVE_COLUMN, SEPARATOR, UNDO, REDO, SEPARATOR, READ_ONLY, SEPARATOR, ALIGNMENT];
	  }}, BasePlugin);
	ContextMenu.SEPARATOR = {name: SEPARATOR};
	Handsontable.hooks.register('afterContextMenuDefaultOptions');
	Handsontable.hooks.register('afterContextMenuShow');
	Handsontable.hooks.register('afterContextMenuHide');
	Handsontable.hooks.register('afterContextMenuExecute');
	;
	registerPlugin('contextMenu', ContextMenu);

	//# 
	},{"_base":58,"commandExecutor":65,"eventManager":41,"helpers/array":42,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/object":50,"itemsFactory":68,"menu":69,"plugins":57,"predefinedItems":70}],67:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Cursor: {get: function() {
	      return Cursor;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__1.pageX,
	    pageY = $__1.pageY;
	var Cursor = function Cursor(object) {
	  var windowScrollTop = getWindowScrollTop();
	  var windowScrollLeft = getWindowScrollLeft();
	  var top,
	      topRelative;
	  var left,
	      leftRelative;
	  var scrollTop,
	      scrollLeft;
	  var cellHeight,
	      cellWidth;
	  this.type = this.getSourceType(object);
	  if (this.type === 'literal') {
	    top = parseInt(object.top, 10);
	    left = parseInt(object.left, 10);
	    cellHeight = object.height;
	    cellWidth = object.width;
	  } else if (this.type === 'event') {
	    top = parseInt(pageY(object), 10);
	    left = parseInt(pageX(object), 10);
	    cellHeight = object.target.clientHeight;
	    cellWidth = object.target.clientWidth;
	  }
	  topRelative = top - windowScrollTop;
	  leftRelative = left - windowScrollLeft;
	  scrollTop = windowScrollTop;
	  scrollLeft = windowScrollLeft;
	  this.top = top;
	  this.topRelative = topRelative;
	  this.left = left;
	  this.leftRelative = leftRelative;
	  this.scrollTop = scrollTop;
	  this.scrollLeft = scrollLeft;
	  this.cellHeight = cellHeight;
	  this.cellWidth = cellWidth;
	};
	($traceurRuntime.createClass)(Cursor, {
	  getSourceType: function(object) {
	    var type = 'literal';
	    if (object instanceof Event) {
	      type = 'event';
	    }
	    return type;
	  },
	  fitsAbove: function(element) {
	    return this.topRelative >= element.offsetHeight;
	  },
	  fitsBelow: function(element) {
	    var viewportHeight = arguments[1] !== (void 0) ? arguments[1] : window.innerHeight;
	    return this.topRelative + element.offsetHeight <= viewportHeight;
	  },
	  fitsOnRight: function(element) {
	    var viewportWidth = arguments[1] !== (void 0) ? arguments[1] : window.innerWidth;
	    return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;
	  },
	  fitsOnLeft: function(element) {
	    return this.leftRelative >= element.offsetWidth;
	  }
	}, {});
	;
	Handsontable.plugins.utils = Handsontable.plugins.utils || {};
	Handsontable.plugins.utils.Cursor = Cursor;

	//# 
	},{"helpers/dom/element":45,"helpers/dom/event":46}],68:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ItemsFactory: {get: function() {
	      return ItemsFactory;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $__predefinedItems__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    objectEach = $__0.objectEach,
	    isObject = $__0.isObject,
	    extend = $__0.extend;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var $__2 = ($__predefinedItems__ = require("predefinedItems"), $__predefinedItems__ && $__predefinedItems__.__esModule && $__predefinedItems__ || {default: $__predefinedItems__}),
	    SEPARATOR = $__2.SEPARATOR,
	    ITEMS = $__2.ITEMS,
	    predefinedItems = $__2.predefinedItems;
	var ItemsFactory = function ItemsFactory(hotInstance) {
	  var orderPattern = arguments[1] !== (void 0) ? arguments[1] : null;
	  this.hot = hotInstance;
	  this.predefinedItems = predefinedItems();
	  this.defaultOrderPattern = orderPattern;
	};
	($traceurRuntime.createClass)(ItemsFactory, {
	  setPredefinedItems: function(predefinedItems) {
	    var $__3 = this;
	    var items = {};
	    this.defaultOrderPattern.length = 0;
	    objectEach(predefinedItems, (function(value, key) {
	      var menuItemKey = '';
	      if (value.name === SEPARATOR) {
	        items[SEPARATOR] = value;
	        menuItemKey = SEPARATOR;
	      } else if (isNaN(parseInt(key, 10))) {
	        value.key = value.key === void 0 ? key : value.key;
	        items[key] = value;
	        menuItemKey = value.key;
	      } else {
	        items[value.key] = value;
	        menuItemKey = value.key;
	      }
	      $__3.defaultOrderPattern.push(menuItemKey);
	    }));
	    this.predefinedItems = items;
	  },
	  getVisibleItems: function() {
	    var pattern = arguments[0] !== (void 0) ? arguments[0] : null;
	    var $__3 = this;
	    var visibleItems = {};
	    objectEach(this.predefinedItems, (function(value, key) {
	      if (!value.hidden || value.hidden && !value.hidden.apply($__3.hot)) {
	        visibleItems[key] = value;
	      }
	    }));
	    return getItems(pattern, this.defaultOrderPattern, visibleItems);
	  },
	  getItems: function() {
	    var pattern = arguments[0] !== (void 0) ? arguments[0] : null;
	    return getItems(pattern, this.defaultOrderPattern, this.predefinedItems);
	  }
	}, {});
	function getItems() {
	  var pattern = arguments[0] !== (void 0) ? arguments[0] : null;
	  var defaultPattern = arguments[1] !== (void 0) ? arguments[1] : [];
	  var items = arguments[2] !== (void 0) ? arguments[2] : {};
	  var result = [];
	  if (pattern && pattern.items) {
	    pattern = pattern.items;
	  } else if (!Array.isArray(pattern)) {
	    pattern = defaultPattern;
	  }
	  if (isObject(pattern)) {
	    objectEach(pattern, (function(value, key) {
	      var item = items[typeof value === 'string' ? value : key];
	      if (!item) {
	        item = value;
	      }
	      if (isObject(value)) {
	        extend(item, value);
	      } else if (typeof item === 'string') {
	        item = {name: item};
	      }
	      if (item.key === void 0) {
	        item.key = key;
	      }
	      result.push(item);
	    }));
	  } else {
	    arrayEach(pattern, (function(name, key) {
	      var item = items[name];
	      if (!item && ITEMS.indexOf(name) >= 0) {
	        return;
	      }
	      if (!item) {
	        item = {
	          name: name,
	          key: key + ''
	        };
	      }
	      if (isObject(name)) {
	        extend(item, name);
	      }
	      if (item.key === void 0) {
	        item.key = key;
	      }
	      result.push(item);
	    }));
	  }
	  if (result[0].name === SEPARATOR) {
	    result.shift();
	  }
	  return result;
	}
	;

	//# 
	},{"helpers/array":42,"helpers/object":50,"predefinedItems":70}],69:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  Menu: {get: function() {
	      return Menu;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $__cursor__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_object__,
	    $__utils__,
	    $___46__46__47__46__46__47_helpers_47_unicode__,
	    $___46__46__47__46__46__47_mixins_47_localHooks__,
	    $__predefinedItems__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    fastInnerHTML = $__0.fastInnerHTML,
	    getComputedStyle = $__0.getComputedStyle,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    getWindowScrollLeft = $__0.getWindowScrollLeft,
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    isChildOf = $__0.isChildOf,
	    removeClass = $__0.removeClass;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var Cursor = ($__cursor__ = require("cursor"), $__cursor__ && $__cursor__.__esModule && $__cursor__ || {default: $__cursor__}).Cursor;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var $__4 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    extend = $__4.extend,
	    isObject = $__4.isObject,
	    objectEach = $__4.objectEach,
	    mixin = $__4.mixin;
	var $__5 = ($__utils__ = require("utils"), $__utils__ && $__utils__.__esModule && $__utils__ || {default: $__utils__}),
	    isSeparator = $__5.isSeparator,
	    isDisabled = $__5.isDisabled,
	    isSelectionDisabled = $__5.isSelectionDisabled,
	    hasSubMenu = $__5.hasSubMenu,
	    normalizeSelection = $__5.normalizeSelection;
	var KEY_CODES = ($___46__46__47__46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47__46__46__47_helpers_47_unicode__ && $___46__46__47__46__46__47_helpers_47_unicode__.__esModule && $___46__46__47__46__46__47_helpers_47_unicode__ || {default: $___46__46__47__46__46__47_helpers_47_unicode__}).KEY_CODES;
	var localHooks = ($___46__46__47__46__46__47_mixins_47_localHooks__ = require("mixins/localHooks"), $___46__46__47__46__46__47_mixins_47_localHooks__ && $___46__46__47__46__46__47_mixins_47_localHooks__.__esModule && $___46__46__47__46__46__47_mixins_47_localHooks__ || {default: $___46__46__47__46__46__47_mixins_47_localHooks__}).localHooks;
	var $__8 = ($__predefinedItems__ = require("predefinedItems"), $__predefinedItems__ && $__predefinedItems__.__esModule && $__predefinedItems__ || {default: $__predefinedItems__}),
	    SEPARATOR = $__8.SEPARATOR,
	    predefinedItems = $__8.predefinedItems;
	var $__9 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    stopPropagation = $__9.stopPropagation,
	    stopImmediatePropagation = $__9.stopImmediatePropagation,
	    pageX = $__9.pageX,
	    pageY = $__9.pageY;
	var Menu = function Menu(hotInstance) {
	  var options = arguments[1] !== (void 0) ? arguments[1] : {
	    parent: null,
	    name: null,
	    className: '',
	    keepInViewport: true
	  };
	  this.hot = hotInstance;
	  this.options = options;
	  this.eventManager = new EventManager(this);
	  this.container = this.createContainer(this.options.name);
	  this.hotMenu = null;
	  this.hotSubMenus = {};
	  this.parentMenu = this.options.parent || null;
	  this.menuItems = null;
	  this.origOutsideClickDeselects = null;
	  this._afterScrollCallback = null;
	  this.registerEvents();
	};
	var $Menu = Menu;
	($traceurRuntime.createClass)(Menu, {
	  registerEvents: function() {
	    var $__10 = this;
	    this.eventManager.addEventListener(document.documentElement, 'mousedown', (function(event) {
	      return $__10.onDocumentMouseDown(event);
	    }));
	  },
	  setMenuItems: function(menuItems) {
	    this.menuItems = menuItems;
	  },
	  isSubMenu: function() {
	    return this.parentMenu !== null;
	  },
	  open: function() {
	    var $__10 = this;
	    this.container.removeAttribute('style');
	    this.container.style.display = 'block';
	    var settings = {
	      data: this.menuItems,
	      colHeaders: false,
	      colWidths: [200],
	      autoRowSize: false,
	      readOnly: true,
	      copyPaste: false,
	      columns: [{
	        data: 'name',
	        renderer: (function(hot, TD, row, col, prop, value) {
	          return $__10.menuItemRenderer(hot, TD, row, col, prop, value);
	        })
	      }],
	      renderAllRows: true,
	      fragmentSelection: 'cell',
	      beforeKeyDown: (function(event) {
	        return $__10.onBeforeKeyDown(event);
	      }),
	      afterOnCellMouseOver: (function(event, coords, TD) {
	        return $__10.openSubMenu(coords.row);
	      })
	    };
	    this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects;
	    this.hot.getSettings().outsideClickDeselects = false;
	    this.hotMenu = new Handsontable.Core(this.container, settings);
	    this.hotMenu.addHook('afterInit', (function() {
	      return $__10.onAfterInit();
	    }));
	    this.hotMenu.init();
	    this.hotMenu.listen();
	    this.blockMainTableCallbacks();
	    this.runLocalHooks('afterOpen');
	  },
	  close: function() {
	    var closeParent = arguments[0] !== (void 0) ? arguments[0] : false;
	    if (!this.isOpened()) {
	      return;
	    }
	    if (closeParent && this.parentMenu) {
	      this.parentMenu.close();
	    } else {
	      this.closeAllSubMenus();
	      this.container.style.display = 'none';
	      this.releaseMainTableCallbacks();
	      this.hotMenu.destroy();
	      this.hotMenu = null;
	      this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects;
	      this.runLocalHooks('afterClose');
	    }
	  },
	  openSubMenu: function(row) {
	    var cell = this.hotMenu.getCell(row, 0);
	    this.closeAllSubMenus();
	    if (!cell || !hasSubMenu(cell)) {
	      return false;
	    }
	    var dataItem = this.hotMenu.getSourceDataAtRow(row);
	    var subMenu = new $Menu(this.hot, {
	      parent: this,
	      name: dataItem.name,
	      className: this.options.className
	    });
	    subMenu.setMenuItems(dataItem.submenu.items);
	    subMenu.open();
	    subMenu.setPosition(cell.getBoundingClientRect());
	    this.hotSubMenus[dataItem.key] = subMenu;
	    return subMenu;
	  },
	  closeSubMenu: function(row) {
	    var dataItem = this.hotMenu.getSourceDataAtRow(row);
	    var menus = this.hotSubMenus[dataItem.key];
	    if (menus) {
	      menus.destroy();
	      delete this.hotSubMenus[dataItem.key];
	    }
	  },
	  closeAllSubMenus: function() {
	    var $__10 = this;
	    arrayEach(this.hotMenu.getData(), (function(value, row) {
	      return $__10.closeSubMenu(row);
	    }));
	  },
	  isAllSubMenusClosed: function() {
	    return Object.keys(this.hotSubMenus).length === 0;
	  },
	  destroy: function() {
	    this.clearLocalHooks();
	    this.close();
	    this.parentMenu = null;
	    this.eventManager.destroy();
	  },
	  isOpened: function() {
	    return this.hotMenu !== null;
	  },
	  executeCommand: function(event) {
	    if (!this.isOpened() || !this.hotMenu.getSelected()) {
	      return;
	    }
	    var selectedItem = this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelected()[0]);
	    this.runLocalHooks('select', selectedItem, event);
	    if (selectedItem.isCommand === false) {
	      return;
	    }
	    var selRange = this.hot.getSelectedRange();
	    var normalizedSelection = selRange ? normalizeSelection(selRange) : {};
	    this.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);
	    if (this.isSubMenu()) {
	      this.parentMenu.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);
	    }
	    this.close(true);
	  },
	  setPosition: function(coords) {
	    var cursor = new Cursor(coords);
	    if (this.options.keepInViewport) {
	      if (cursor.fitsBelow(this.container)) {
	        this.setPositionBelowCursor(cursor);
	      } else if (cursor.fitsAbove(this.container)) {
	        this.setPositionAboveCursor(cursor);
	      } else {
	        this.setPositionBelowCursor(cursor);
	      }
	      if (cursor.fitsOnRight(this.container)) {
	        this.setPositionOnRightOfCursor(cursor);
	      } else {
	        this.setPositionOnLeftOfCursor(cursor);
	      }
	    } else {
	      this.setPositionBelowCursor(cursor);
	      this.setPositionOnRightOfCursor(cursor);
	    }
	  },
	  setPositionAboveCursor: function(cursor) {
	    var top = cursor.top - this.container.offsetHeight;
	    if (this.isSubMenu()) {
	      top = window.scrollY + cursor.top + cursor.cellHeight - this.container.offsetHeight + 3;
	    }
	    this.container.style.top = top + 'px';
	  },
	  setPositionBelowCursor: function(cursor) {
	    var top = cursor.top - 1;
	    if (this.isSubMenu()) {
	      top = cursor.top + window.scrollY - 1;
	    }
	    this.container.style.top = top + 'px';
	  },
	  setPositionOnRightOfCursor: function(cursor) {
	    var left;
	    if (this.isSubMenu()) {
	      left = window.scrollX + 1 + cursor.left + cursor.cellWidth;
	    } else {
	      left = 1 + cursor.left;
	    }
	    this.container.style.left = left + 'px';
	  },
	  setPositionOnLeftOfCursor: function(cursor) {
	    this.container.style.left = (cursor.left - this.container.offsetWidth + getScrollbarWidth() + 4) + 'px';
	  },
	  selectFirstCell: function() {
	    var cell = this.hotMenu.getCell(0, 0);
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectNextCell(0, 0);
	    } else {
	      this.hotMenu.selectCell(0, 0);
	    }
	  },
	  selectLastCell: function() {
	    var lastRow = this.hotMenu.countRows() - 1;
	    var cell = this.hotMenu.getCell(lastRow, 0);
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectPrevCell(lastRow, 0);
	    } else {
	      this.hotMenu.selectCell(lastRow, 0);
	    }
	  },
	  selectNextCell: function(row, col) {
	    var nextRow = row + 1;
	    var cell = nextRow < this.hotMenu.countRows() ? this.hotMenu.getCell(nextRow, col) : null;
	    if (!cell) {
	      return;
	    }
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectNextCell(nextRow, col);
	    } else {
	      this.hotMenu.selectCell(nextRow, col);
	    }
	  },
	  selectPrevCell: function(row, col) {
	    var prevRow = row - 1;
	    var cell = prevRow >= 0 ? this.hotMenu.getCell(prevRow, col) : null;
	    if (!cell) {
	      return;
	    }
	    if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
	      this.selectPrevCell(prevRow, col);
	    } else {
	      this.hotMenu.selectCell(prevRow, col);
	    }
	  },
	  menuItemRenderer: function(hot, TD, row, col, prop, value) {
	    var $__10 = this;
	    var item = hot.getSourceDataAtRow(row);
	    var wrapper = document.createElement('div');
	    var isSubMenu = (function(item) {
	      return item.hasOwnProperty('submenu');
	    });
	    var itemIsSeparator = (function(item) {
	      return new RegExp(SEPARATOR, 'i').test(item.name);
	    });
	    var itemIsDisabled = (function(item) {
	      return item.disabled === true || (typeof item.disabled == 'function' && item.disabled.call($__10.hot) === true);
	    });
	    var itemIsHidden = (function(item) {
	      return typeof item.hidden == 'function' && item.hidden.call($__10.hot) === true;
	    });
	    var itemIsSelectionDisabled = (function(item) {
	      return item.disableSelection;
	    });
	    var isHidden = itemIsHidden(item);
	    if (typeof value === 'function') {
	      value = value.call(this.hot);
	    }
	    empty(TD);
	    addClass(wrapper, 'htItemWrapper');
	    TD.appendChild(wrapper);
	    if (itemIsSeparator(item)) {
	      addClass(TD, 'htSeparator');
	    } else if (!isHidden && typeof item.renderer === 'function') {
	      addClass(TD, 'htCustomMenuRenderer');
	      TD.appendChild(item.renderer(hot, wrapper, row, col, prop, value));
	    } else {
	      fastInnerHTML(wrapper, value);
	    }
	    if (isHidden) {
	      if (TD.parentNode) {
	        addClass(TD.parentNode, 'htHidden');
	      }
	    } else if (itemIsDisabled(item)) {
	      addClass(TD, 'htDisabled');
	      this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	        return hot.deselectCell();
	      }));
	    } else if (itemIsSelectionDisabled(item)) {
	      addClass(TD, 'htSelectionDisabled');
	      this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	        return hot.deselectCell();
	      }));
	    } else if (isSubMenu(item)) {
	      addClass(TD, 'htSubmenu');
	      if (itemIsSelectionDisabled(item)) {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.deselectCell();
	        }));
	      } else {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.selectCell(row, col, void 0, void 0, void 0, false);
	        }));
	      }
	    } else {
	      removeClass(TD, 'htSubmenu');
	      removeClass(TD, 'htDisabled');
	      if (itemIsSelectionDisabled(item)) {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.deselectCell();
	        }));
	      } else {
	        this.eventManager.addEventListener(wrapper, 'mouseenter', (function() {
	          return hot.selectCell(row, col, void 0, void 0, void 0, false);
	        }));
	      }
	    }
	  },
	  createContainer: function() {
	    var name = arguments[0] !== (void 0) ? arguments[0] : null;
	    if (name) {
	      name = name.replace(/ /g, '_');
	      name = this.options.className + 'Sub_' + name;
	    }
	    var container;
	    if (name) {
	      container = document.querySelector('.' + this.options.className + '.' + name);
	    } else {
	      container = document.querySelector('.' + this.options.className);
	    }
	    if (!container) {
	      container = document.createElement('div');
	      addClass(container, 'htMenu ' + this.options.className);
	      if (name) {
	        addClass(container, name);
	      }
	      document.getElementsByTagName('body')[0].appendChild(container);
	    }
	    return container;
	  },
	  blockMainTableCallbacks: function() {
	    this._afterScrollCallback = function() {};
	    this.hot.addHook('afterScrollVertically', this._afterScrollCallback);
	    this.hot.addHook('afterScrollHorizontally', this._afterScrollCallback);
	  },
	  releaseMainTableCallbacks: function() {
	    if (this._afterScrollCallback) {
	      this.hot.removeHook('afterScrollVertically', this._afterScrollCallback);
	      this.hot.removeHook('afterScrollHorizontally', this._afterScrollCallback);
	      this._afterScrollCallback = null;
	    }
	  },
	  onBeforeKeyDown: function(event) {
	    var selection = this.hotMenu.getSelected();
	    var stopEvent = false;
	    switch (event.keyCode) {
	      case KEY_CODES.ESCAPE:
	        this.close();
	        stopEvent = true;
	        break;
	      case KEY_CODES.ENTER:
	        if (selection) {
	          if (this.hotMenu.getSourceDataAtRow(selection[0]).submenu) {
	            stopEvent = true;
	          } else {
	            this.executeCommand(event);
	            this.close(true);
	          }
	        }
	        break;
	      case KEY_CODES.ARROW_DOWN:
	        if (selection) {
	          this.selectNextCell(selection[0], selection[1]);
	        } else {
	          this.selectFirstCell();
	        }
	        stopEvent = true;
	        break;
	      case KEY_CODES.ARROW_UP:
	        if (selection) {
	          this.selectPrevCell(selection[0], selection[1]);
	        } else {
	          this.selectLastCell();
	        }
	        stopEvent = true;
	        break;
	      case KEY_CODES.ARROW_RIGHT:
	        if (selection) {
	          var menu = this.openSubMenu(selection[0]);
	          if (menu) {
	            menu.selectFirstCell();
	          }
	        }
	        stopEvent = true;
	        break;
	      case KEY_CODES.ARROW_LEFT:
	        if (selection && this.isSubMenu()) {
	          this.close();
	          if (this.parentMenu) {
	            this.parentMenu.hotMenu.listen();
	          }
	          stopEvent = true;
	        }
	        break;
	    }
	    if (stopEvent) {
	      event.preventDefault();
	      stopImmediatePropagation(event);
	    }
	  },
	  onAfterInit: function() {
	    var data = this.hotMenu.getSettings().data;
	    var hiderStyle = this.hotMenu.view.wt.wtTable.hider.style;
	    var holderStyle = this.hotMenu.view.wt.wtTable.holder.style;
	    var currentHiderWidth = parseInt(hiderStyle.width, 10);
	    var realHeight = 0;
	    arrayEach(data, (function(value) {
	      return realHeight += value.name === SEPARATOR ? 1 : 26;
	    }));
	    holderStyle.width = currentHiderWidth + 22 + 'px';
	    holderStyle.height = realHeight + 4 + 'px';
	  },
	  onDocumentMouseDown: function(event) {
	    if (!this.isOpened()) {
	      return;
	    }
	    if (this.container && isChildOf(event.target, this.container)) {
	      this.executeCommand(event);
	    }
	    if ((this.isAllSubMenusClosed() || this.isSubMenu()) && (!isChildOf(event.target, '.htMenu') && isChildOf(event.target, document))) {
	      this.close(true);
	    }
	  }
	}, {});
	mixin(Menu, localHooks);
	;

	//# 
	},{"cursor":67,"eventManager":41,"helpers/array":42,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/object":50,"helpers/unicode":53,"mixins/localHooks":54,"predefinedItems":70,"utils":71}],70:[function(require,module,exports){
	"use strict";
	var $__4;
	Object.defineProperties(exports, {
	  ROW_ABOVE: {get: function() {
	      return ROW_ABOVE;
	    }},
	  ROW_BELOW: {get: function() {
	      return ROW_BELOW;
	    }},
	  COLUMN_LEFT: {get: function() {
	      return COLUMN_LEFT;
	    }},
	  COLUMN_RIGHT: {get: function() {
	      return COLUMN_RIGHT;
	    }},
	  CLEAR_COLUMN: {get: function() {
	      return CLEAR_COLUMN;
	    }},
	  REMOVE_ROW: {get: function() {
	      return REMOVE_ROW;
	    }},
	  REMOVE_COLUMN: {get: function() {
	      return REMOVE_COLUMN;
	    }},
	  UNDO: {get: function() {
	      return UNDO;
	    }},
	  REDO: {get: function() {
	      return REDO;
	    }},
	  READ_ONLY: {get: function() {
	      return READ_ONLY;
	    }},
	  ALIGNMENT: {get: function() {
	      return ALIGNMENT;
	    }},
	  SEPARATOR: {get: function() {
	      return SEPARATOR;
	    }},
	  ITEMS: {get: function() {
	      return ITEMS;
	    }},
	  predefinedItems: {get: function() {
	      return predefinedItems;
	    }},
	  addItem: {get: function() {
	      return addItem;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $__utils__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    objectEach = $__0.objectEach,
	    clone = $__0.clone;
	var rangeEach = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}).rangeEach;
	var $__2 = ($__utils__ = require("utils"), $__utils__ && $__utils__.__esModule && $__utils__ || {default: $__utils__}),
	    align = $__2.align,
	    getAlignmentClasses = $__2.getAlignmentClasses,
	    getValidSelection = $__2.getValidSelection,
	    checkSelectionConsistency = $__2.checkSelectionConsistency,
	    markLabelAsSelected = $__2.markLabelAsSelected;
	var ROW_ABOVE = 'row_above';
	var ROW_BELOW = 'row_below';
	var COLUMN_LEFT = 'col_left';
	var COLUMN_RIGHT = 'col_right';
	var CLEAR_COLUMN = 'clear_column';
	var REMOVE_ROW = 'remove_row';
	var REMOVE_COLUMN = 'remove_col';
	var UNDO = 'undo';
	var REDO = 'redo';
	var READ_ONLY = 'make_read_only';
	var ALIGNMENT = 'alignment';
	var SEPARATOR = '---------';
	var ITEMS = [ROW_ABOVE, ROW_BELOW, COLUMN_LEFT, COLUMN_RIGHT, CLEAR_COLUMN, REMOVE_ROW, REMOVE_COLUMN, UNDO, REDO, READ_ONLY, ALIGNMENT, SEPARATOR];
	function predefinedItems() {
	  var items = {};
	  objectEach(_predefinedItems, (function(value, key) {
	    return items[key] = clone(value);
	  }));
	  return items;
	}
	function addItem(key, item) {
	  if (ITEMS.indexOf(key) === -1) {
	    _predefinedItems[key] = item;
	  }
	}
	var _predefinedItems = ($__4 = {}, Object.defineProperty($__4, SEPARATOR, {
	  value: {name: SEPARATOR},
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, ROW_ABOVE, {
	  value: {
	    key: ROW_ABOVE,
	    name: 'Insert row above',
	    callback: function(key, selection) {
	      this.alter('insert_row', selection.start.row);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var rowCount = this.countRows();
	      var entireColumnSelection = [0, selected[1], rowCount - 1, selected[1]];
	      return (entireColumnSelection.join(',') === selected.join(',')) && rowCount > 1;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertRow;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, ROW_BELOW, {
	  value: {
	    key: ROW_BELOW,
	    name: 'Insert row below',
	    callback: function(key, selection) {
	      this.alter('insert_row', selection.end.row + 1);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var rowCount = this.countRows();
	      var entireColumnSelection = [0, selected[1], rowCount - 1, selected[1]];
	      return (entireColumnSelection.join(',') === selected.join(',')) && rowCount > 1;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertRow;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, COLUMN_LEFT, {
	  value: {
	    key: COLUMN_LEFT,
	    name: 'Insert column on the left',
	    callback: function(key, selection) {
	      this.alter('insert_col', selection.start.col);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return selected[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertColumn;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, COLUMN_RIGHT, {
	  value: {
	    key: COLUMN_RIGHT,
	    name: 'Insert column on the right',
	    callback: function(key, selection) {
	      this.alter('insert_col', selection.end.col + 1);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return selected[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;
	    },
	    hidden: function() {
	      return !this.getSettings().allowInsertColumn;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, CLEAR_COLUMN, {
	  value: {
	    key: CLEAR_COLUMN,
	    name: 'Clear column',
	    callback: function(key, selection) {
	      var column = selection.start.col;
	      if (this.countRows()) {
	        this.populateFromArray(0, column, [[null]], Math.max(selection.start.row, selection.end.row), column);
	      }
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return selected[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, REMOVE_ROW, {
	  value: {
	    key: REMOVE_ROW,
	    name: 'Remove row',
	    callback: function(key, selection) {
	      var amount = selection.end.row - selection.start.row + 1;
	      this.alter('remove_row', selection.start.row, amount);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      var entireColumnSelection = [0, selected[1], this.countRows() - 1, selected[1]];
	      return entireColumnSelection.join(',') === selected.join(',');
	    },
	    hidden: function() {
	      return !this.getSettings().allowRemoveRow;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, REMOVE_COLUMN, {
	  value: {
	    key: REMOVE_COLUMN,
	    name: 'Remove column',
	    callback: function(key, selection) {
	      var amount = selection.end.col - selection.start.col + 1;
	      this.alter('remove_col', selection.start.col, amount);
	    },
	    disabled: function() {
	      var selected = getValidSelection(this);
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	      var entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') == selected.join(',');
	      return (selected[1] < 0 || rowSelected);
	    },
	    hidden: function() {
	      return !this.getSettings().allowRemoveColumn;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, UNDO, {
	  value: {
	    key: UNDO,
	    name: 'Undo',
	    callback: function() {
	      this.undo();
	    },
	    disabled: function() {
	      return this.undoRedo && !this.undoRedo.isUndoAvailable();
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, REDO, {
	  value: {
	    key: REDO,
	    name: 'Redo',
	    callback: function() {
	      this.redo();
	    },
	    disabled: function() {
	      return this.undoRedo && !this.undoRedo.isRedoAvailable();
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, READ_ONLY, {
	  value: {
	    key: READ_ONLY,
	    name: function() {
	      var $__3 = this;
	      var label = 'Read only';
	      var atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	        return $__3.getCellMeta(row, col).readOnly;
	      }));
	      if (atLeastOneReadOnly) {
	        label = markLabelAsSelected(label);
	      }
	      return label;
	    },
	    callback: function() {
	      var $__3 = this;
	      var range = this.getSelectedRange();
	      var atLeastOneReadOnly = checkSelectionConsistency(range, (function(row, col) {
	        return $__3.getCellMeta(row, col).readOnly;
	      }));
	      range.forAll((function(row, col) {
	        $__3.getCellMeta(row, col).readOnly = atLeastOneReadOnly ? false : true;
	      }));
	      this.render();
	    },
	    disabled: function() {
	      return this.getSelectedRange() ? false : true;
	    }
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__4, ALIGNMENT, {
	  value: {
	    key: ALIGNMENT,
	    name: 'Alignment',
	    disabled: function() {
	      return this.getSelectedRange() ? false : true;
	    },
	    submenu: {items: [{
	        key: (ALIGNMENT + ":left"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Left';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htLeft') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htLeft';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":center"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Center';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htCenter') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htCenter';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":right"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Right';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htRight') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htRight';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":justify"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Justify';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htJustify') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'horizontal';
	          var alignment = 'htJustify';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {name: SEPARATOR}, {
	        key: (ALIGNMENT + ":top"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Top';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htTop') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'vertical';
	          var alignment = 'htTop';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":middle"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Middle';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htMiddle') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'vertical';
	          var alignment = 'htMiddle';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }, {
	        key: (ALIGNMENT + ":bottom"),
	        name: function() {
	          var $__3 = this;
	          var label = 'Bottom';
	          var hasClass = checkSelectionConsistency(this.getSelectedRange(), (function(row, col) {
	            var className = $__3.getCellMeta(row, col).className;
	            if (className && className.indexOf('htBottom') !== -1) {
	              return true;
	            }
	          }));
	          if (hasClass) {
	            label = markLabelAsSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var $__3 = this;
	          var range = this.getSelectedRange();
	          var stateBefore = getAlignmentClasses(range, (function(row, col) {
	            return $__3.getCellMeta(row, col).className;
	          }));
	          var type = 'vertical';
	          var alignment = 'htBottom';
	          this.runHooks('beforeCellAlignment', stateBefore, range, type, alignment);
	          align(range, type, alignment, (function(row, col) {
	            return $__3.getCellMeta(row, col);
	          }));
	          this.render();
	        },
	        disabled: false
	      }]}
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), $__4);

	//# 
	},{"helpers/number":49,"helpers/object":50,"utils":71}],71:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  normalizeSelection: {get: function() {
	      return normalizeSelection;
	    }},
	  isSeparator: {get: function() {
	      return isSeparator;
	    }},
	  hasSubMenu: {get: function() {
	      return hasSubMenu;
	    }},
	  isDisabled: {get: function() {
	      return isDisabled;
	    }},
	  isSelectionDisabled: {get: function() {
	      return isSelectionDisabled;
	    }},
	  getValidSelection: {get: function() {
	      return getValidSelection;
	    }},
	  prepareVerticalAlignClass: {get: function() {
	      return prepareVerticalAlignClass;
	    }},
	  prepareHorizontalAlignClass: {get: function() {
	      return prepareHorizontalAlignClass;
	    }},
	  getAlignmentClasses: {get: function() {
	      return getAlignmentClasses;
	    }},
	  align: {get: function() {
	      return align;
	    }},
	  checkSelectionConsistency: {get: function() {
	      return checkSelectionConsistency;
	    }},
	  markLabelAsSelected: {get: function() {
	      return markLabelAsSelected;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__;
	var hasClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).hasClass;
	function normalizeSelection(selRange) {
	  return {
	    start: selRange.getTopLeftCorner(),
	    end: selRange.getBottomRightCorner()
	  };
	}
	function isSeparator(cell) {
	  return hasClass(cell, 'htSeparator');
	}
	function hasSubMenu(cell) {
	  return hasClass(cell, 'htSubmenu');
	}
	function isDisabled(cell) {
	  return hasClass(cell, 'htDisabled');
	}
	function isSelectionDisabled(cell) {
	  return hasClass(cell, 'htSelectionDisabled');
	}
	function getValidSelection(hot) {
	  var selected = hot.getSelected();
	  if (!selected) {
	    return null;
	  }
	  if (selected[0] < 0) {
	    return null;
	  }
	  if (hot.countRows() >= hot.getSettings().maxRows) {
	    return null;
	  }
	  return selected;
	}
	function prepareVerticalAlignClass(className, alignment) {
	  if (className.indexOf(alignment) != -1) {
	    return className;
	  }
	  className = className.replace('htTop', '').replace('htMiddle', '').replace('htBottom', '').replace('  ', '');
	  className += ' ' + alignment;
	  return className;
	}
	function prepareHorizontalAlignClass(className, alignment) {
	  if (className.indexOf(alignment) != -1) {
	    return className;
	  }
	  className = className.replace('htLeft', '').replace('htCenter', '').replace('htRight', '').replace('htJustify', '').replace('  ', '');
	  className += ' ' + alignment;
	  return className;
	}
	function getAlignmentClasses(range, callback) {
	  var classes = {};
	  for (var row = range.from.row; row <= range.to.row; row++) {
	    for (var col = range.from.col; col <= range.to.col; col++) {
	      if (!classes[row]) {
	        classes[row] = [];
	      }
	      classes[row][col] = callback(row, col);
	    }
	  }
	  return classes;
	}
	function align(range, type, alignment, cellDescriptor) {
	  if (range.from.row == range.to.row && range.from.col == range.to.col) {
	    applyAlignClassName(range.from.row, range.from.col, type, alignment, cellDescriptor);
	  } else {
	    for (var row = range.from.row; row <= range.to.row; row++) {
	      for (var col = range.from.col; col <= range.to.col; col++) {
	        applyAlignClassName(row, col, type, alignment, cellDescriptor);
	      }
	    }
	  }
	}
	function applyAlignClassName(row, col, type, alignment, cellDescriptor) {
	  var cellMeta = cellDescriptor(row, col);
	  var className = alignment;
	  if (cellMeta.className) {
	    if (type === 'vertical') {
	      className = prepareVerticalAlignClass(cellMeta.className, alignment);
	    } else {
	      className = prepareHorizontalAlignClass(cellMeta.className, alignment);
	    }
	  }
	  cellMeta.className = className;
	}
	function checkSelectionConsistency(range, comparator) {
	  var result = false;
	  if (range) {
	    range.forAll(function(row, col) {
	      if (comparator(row, col)) {
	        result = true;
	        return false;
	      }
	    });
	  }
	  return result;
	}
	function markLabelAsSelected(label) {
	  return '<span class="selected">' + String.fromCharCode(10003) + '</span>' + label;
	}

	//# 
	},{"helpers/dom/element":45}],72:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ContextMenuCopyPaste: {get: function() {
	      return ContextMenuCopyPaste;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__95_base__,
	    $__zeroclipboard__;
	var removeClass = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).removeClass;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var ZeroClipboard = ($__zeroclipboard__ = require("zeroclipboard"), $__zeroclipboard__ && $__zeroclipboard__.__esModule && $__zeroclipboard__ || {default: $__zeroclipboard__}).default;
	var ContextMenuCopyPaste = function ContextMenuCopyPaste(hotInstance) {
	  $traceurRuntime.superConstructor($ContextMenuCopyPaste).call(this, hotInstance);
	  this.eventManager = new EventManager(this);
	  this.swfPath = null;
	  this.outsideClickDeselectsCache = null;
	};
	var $ContextMenuCopyPaste = ContextMenuCopyPaste;
	($traceurRuntime.createClass)(ContextMenuCopyPaste, {
	  isEnabled: function() {
	    return this.hot.getSettings().contextMenuCopyPaste;
	  },
	  enablePlugin: function() {
	    var $__6 = this;
	    if (this.enabled) {
	      return;
	    }
	    if (typeof this.hot.getSettings().contextMenuCopyPaste === 'object') {
	      this.swfPath = this.hot.getSettings().contextMenuCopyPaste.swfPath;
	    }
	    if (typeof ZeroClipboard === 'undefined') {
	      console.error('To be able to use the Copy/Paste feature from the context menu, you need to manually include ZeroClipboard.js file to your website.');
	    }
	    try {
	      new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
	    } catch (exception) {
	      if (typeof navigator.mimeTypes['application/x-shockwave-flash'] == 'undefined') {
	        console.error('To be able to use the Copy/Paste feature from the context menu, your browser needs to have Flash Plugin installed.');
	      }
	    }
	    if (this.swfPath) {
	      ZeroClipboard.config({swfPath: this.swfPath});
	    }
	    this.hot.addHook('afterContextMenuShow', (function() {
	      return $__6.onAfterContextMenuShow();
	    }));
	    this.hot.addHook('afterContextMenuDefaultOptions', (function(options) {
	      return $__6.onAfterContextMenuDefaultOptions(options);
	    }));
	    this.registerEvents();
	    $traceurRuntime.superGet(this, $ContextMenuCopyPaste.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ContextMenuCopyPaste.prototype, "disablePlugin").call(this);
	  },
	  registerEvents: function() {
	    var $__6 = this;
	    this.eventManager.addEventListener(document, 'mouseenter', (function() {
	      return $__6.removeCurrentClass();
	    }));
	    this.eventManager.addEventListener(document, 'mouseleave', (function() {
	      return $__6.removeZeroClipboardClass();
	    }));
	  },
	  getCopyValue: function() {
	    this.hot.copyPaste.setCopyableText();
	    return this.hot.copyPaste.copyPasteInstance.elTextarea.value;
	  },
	  onAfterContextMenuDefaultOptions: function(defaultOptions) {
	    defaultOptions.items.unshift({
	      key: 'copy',
	      name: 'Copy'
	    }, {
	      key: 'paste',
	      name: 'Paste',
	      callback: function() {
	        this.copyPaste.triggerPaste();
	      }
	    }, Handsontable.plugins.ContextMenu.SEPARATOR);
	  },
	  onAfterContextMenuShow: function() {
	    var $__6 = this;
	    var contextMenu = this.hot.getPlugin('contextMenu');
	    var data = contextMenu.menu.hotMenu.getSourceData();
	    arrayEach(data, (function(item, index) {
	      if (item.key === 'copy') {
	        var zeroClipboardInstance = new ZeroClipboard(contextMenu.menu.hotMenu.getCell(index, 0));
	        zeroClipboardInstance.off();
	        zeroClipboardInstance.on('copy', (function(event) {
	          var clipboard = event.clipboardData;
	          clipboard.setData('text/plain', $__6.getCopyValue());
	          $__6.hot.getSettings().outsideClickDeselects = $__6.outsideClickDeselectsCache;
	        }));
	        return false;
	      }
	    }));
	  },
	  removeCurrentClass: function() {
	    var contextMenu = this.hot.getPlugin('contextMenu');
	    if (contextMenu.menu.isOpened()) {
	      var element = contextMenu.menu.hotMenu.rootElement.querySelector('td.current');
	      if (element) {
	        removeClass(element, 'current');
	      }
	    }
	    this.outsideClickDeselectsCache = this.hot.getSettings().outsideClickDeselects;
	    this.hot.getSettings().outsideClickDeselects = false;
	  },
	  removeZeroClipboardClass: function() {
	    var contextMenu = this.hot.getPlugin('contextMenu');
	    if (contextMenu.menu.isOpened()) {
	      var element = contextMenu.menu.hotMenu.rootElement.querySelector('td.zeroclipboard-is-hover');
	      if (element) {
	        removeClass(element, 'zeroclipboard-is-hover');
	      }
	    }
	    this.hot.getSettings().outsideClickDeselects = this.outsideClickDeselectsCache;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('contextMenuCopyPaste', ContextMenuCopyPaste);

	//# 
	},{"_base":58,"eventManager":41,"helpers/array":42,"helpers/dom/element":45,"plugins":57,"zeroclipboard":"zeroclipboard"}],73:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  CopyPastePlugin: {get: function() {
	      return CopyPastePlugin;
	    }},
	  __esModule: {value: true}
	});
	var $__copyPaste__,
	    $__SheetClip__,
	    $___46__46__47__46__46__47_helpers_47_unicode__,
	    $___46__46__47__46__46__47_helpers_47_array__,
	    $___46__46__47__46__46__47_helpers_47_number__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_helpers_47_function__,
	    $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__;
	var copyPaste = ($__copyPaste__ = require("copyPaste"), $__copyPaste__ && $__copyPaste__.__esModule && $__copyPaste__ || {default: $__copyPaste__}).default;
	var SheetClip = ($__SheetClip__ = require("SheetClip"), $__SheetClip__ && $__SheetClip__.__esModule && $__SheetClip__ || {default: $__SheetClip__}).default;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47__46__46__47_helpers_47_unicode__ && $___46__46__47__46__46__47_helpers_47_unicode__.__esModule && $___46__46__47__46__46__47_helpers_47_unicode__ || {default: $___46__46__47__46__46__47_helpers_47_unicode__}),
	    KEY_CODES = $__2.KEY_CODES,
	    isCtrlKey = $__2.isCtrlKey;
	var arrayEach = ($___46__46__47__46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47__46__46__47_helpers_47_array__ && $___46__46__47__46__46__47_helpers_47_array__.__esModule && $___46__46__47__46__46__47_helpers_47_array__ || {default: $___46__46__47__46__46__47_helpers_47_array__}).arrayEach;
	var rangeEach = ($___46__46__47__46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47__46__46__47_helpers_47_number__ && $___46__46__47__46__46__47_helpers_47_number__.__esModule && $___46__46__47__46__46__47_helpers_47_number__ || {default: $___46__46__47__46__46__47_helpers_47_number__}).rangeEach;
	var $__5 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    stopImmediatePropagation = $__5.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__5.isImmediatePropagationStopped;
	var getSelectionText = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}).getSelectionText;
	var proxy = ($___46__46__47__46__46__47_helpers_47_function__ = require("helpers/function"), $___46__46__47__46__46__47_helpers_47_function__ && $___46__46__47__46__46__47_helpers_47_function__.__esModule && $___46__46__47__46__46__47_helpers_47_function__ || {default: $___46__46__47__46__46__47_helpers_47_function__}).proxy;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	function CopyPastePlugin(instance) {
	  var _this = this;
	  this.copyPasteInstance = copyPaste();
	  this.copyPasteInstance.onCut(onCut);
	  this.copyPasteInstance.onPaste(onPaste);
	  this.onPaste = onPaste;
	  instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  function onCut() {
	    if (!instance.isListening()) {
	      return;
	    }
	    instance.selection.empty();
	  }
	  function onPaste(str) {
	    var input,
	        inputArray,
	        selected,
	        coordsFrom,
	        coordsTo,
	        cellRange,
	        topLeftCorner,
	        bottomRightCorner,
	        areaStart,
	        areaEnd;
	    if (!instance.isListening() || !instance.selection.isSelected()) {
	      return;
	    }
	    input = str;
	    inputArray = SheetClip.parse(input);
	    selected = instance.getSelected();
	    coordsFrom = new WalkontableCellCoords(selected[0], selected[1]);
	    coordsTo = new WalkontableCellCoords(selected[2], selected[3]);
	    cellRange = new WalkontableCellRange(coordsFrom, coordsFrom, coordsTo);
	    topLeftCorner = cellRange.getTopLeftCorner();
	    bottomRightCorner = cellRange.getBottomRightCorner();
	    areaStart = topLeftCorner;
	    areaEnd = new WalkontableCellCoords(Math.max(bottomRightCorner.row, inputArray.length - 1 + topLeftCorner.row), Math.max(bottomRightCorner.col, inputArray[0].length - 1 + topLeftCorner.col));
	    var isSelRowAreaCoverInputValue = coordsTo.row - coordsFrom.row >= inputArray.length - 1;
	    var isSelColAreaCoverInputValue = coordsTo.col - coordsFrom.col >= inputArray[0].length - 1;
	    instance.addHookOnce('afterChange', (function(changes, source) {
	      var changesLength = changes ? changes.length : 0;
	      if (changesLength) {
	        var offset = {
	          row: 0,
	          col: 0
	        };
	        var highestColumnIndex = -1;
	        arrayEach(changes, (function(change, index) {
	          var nextChange = changesLength > index + 1 ? changes[index + 1] : null;
	          if (nextChange) {
	            if (!isSelRowAreaCoverInputValue) {
	              offset.row = offset.row + Math.max(nextChange[0] - change[0] - 1, 0);
	            }
	            if (!isSelColAreaCoverInputValue && change[1] > highestColumnIndex) {
	              highestColumnIndex = change[1];
	              offset.col = offset.col + Math.max(nextChange[1] - change[1] - 1, 0);
	            }
	          }
	        }));
	        instance.selectCell(areaStart.row, areaStart.col, areaEnd.row + offset.row, areaEnd.col + offset.col);
	      }
	    }));
	    instance.populateFromArray(areaStart.row, areaStart.col, inputArray, areaEnd.row, areaEnd.col, 'paste', instance.getSettings().pasteMode);
	  }
	  function onBeforeKeyDown(event) {
	    if (!instance.getSelected()) {
	      return;
	    }
	    if (instance.getActiveEditor() && instance.getActiveEditor().isOpened()) {
	      return;
	    }
	    if (isImmediatePropagationStopped(event)) {
	      return;
	    }
	    if (isCtrlKey(event.keyCode)) {
	      if (instance.getSettings().fragmentSelection && getSelectionText()) {
	        return;
	      }
	      _this.setCopyableText();
	      stopImmediatePropagation(event);
	      return;
	    }
	    var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	    if (event.keyCode == KEY_CODES.A && ctrlDown) {
	      instance._registerTimeout(setTimeout(proxy(_this.setCopyableText, _this), 0));
	    }
	  }
	  this.destroy = function() {
	    if (this.copyPasteInstance) {
	      this.copyPasteInstance.removeCallback(onCut);
	      this.copyPasteInstance.removeCallback(onPaste);
	      this.copyPasteInstance.destroy();
	      this.copyPasteInstance = null;
	    }
	    instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	  };
	  instance.addHook('afterDestroy', proxy(this.destroy, this));
	  this.triggerPaste = proxy(this.copyPasteInstance.triggerPaste, this.copyPasteInstance);
	  this.triggerCut = proxy(this.copyPasteInstance.triggerCut, this.copyPasteInstance);
	  this.setCopyableText = function() {
	    var settings = instance.getSettings();
	    var copyRowsLimit = settings.copyRowsLimit;
	    var copyColsLimit = settings.copyColsLimit;
	    var selRange = instance.getSelectedRange();
	    var topLeft = selRange.getTopLeftCorner();
	    var bottomRight = selRange.getBottomRightCorner();
	    var startRow = topLeft.row;
	    var startCol = topLeft.col;
	    var endRow = bottomRight.row;
	    var endCol = bottomRight.col;
	    var finalEndRow = Math.min(endRow, startRow + copyRowsLimit - 1);
	    var finalEndCol = Math.min(endCol, startCol + copyColsLimit - 1);
	    var copyableRanges = [];
	    copyableRanges.push({
	      startRow: startRow,
	      startCol: startCol,
	      endRow: finalEndRow,
	      endCol: finalEndCol
	    });
	    copyableRanges = Handsontable.hooks.run(instance, 'modifyCopyableRange', copyableRanges);
	    var copyableData = this.getRangedCopyableData(copyableRanges);
	    instance.copyPaste.copyPasteInstance.copyable(copyableData);
	    if (endRow !== finalEndRow || endCol !== finalEndCol) {
	      Handsontable.hooks.run(instance, 'afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, copyRowsLimit, copyColsLimit);
	    }
	  };
	  this.getRangedCopyableData = function(ranges) {
	    var dataSet = [];
	    var copyableRows = [];
	    var copyableColumns = [];
	    arrayEach(ranges, (function(range) {
	      rangeEach(range.startRow, range.endRow, (function(row) {
	        if (copyableRows.indexOf(row) === -1) {
	          copyableRows.push(row);
	        }
	      }));
	      rangeEach(range.startCol, range.endCol, (function(column) {
	        if (copyableColumns.indexOf(column) === -1) {
	          copyableColumns.push(column);
	        }
	      }));
	    }));
	    arrayEach(copyableRows, (function(row) {
	      var rowSet = [];
	      arrayEach(copyableColumns, (function(column) {
	        rowSet.push(instance.getCopyableData(row, column));
	      }));
	      dataSet.push(rowSet);
	    }));
	    return SheetClip.stringify(dataSet);
	  };
	}
	function init() {
	  var instance = this,
	      pluginEnabled = instance.getSettings().copyPaste !== false;
	  if (pluginEnabled && !instance.copyPaste) {
	    instance.copyPaste = new CopyPastePlugin(instance);
	  } else if (!pluginEnabled && instance.copyPaste) {
	    instance.copyPaste.destroy();
	    instance.copyPaste = null;
	  }
	}
	Handsontable.hooks.add('afterInit', init);
	Handsontable.hooks.add('afterUpdateSettings', init);
	Handsontable.hooks.register('afterCopyLimit');
	Handsontable.hooks.register('modifyCopyableRange');
	;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"SheetClip":"SheetClip","copyPaste":"copyPaste","helpers/array":42,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/function":47,"helpers/number":49,"helpers/unicode":53,"plugins":57}],74:[function(require,module,exports){
	"use strict";
	var $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var WalkontableCellRange = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	var WalkontableSelection = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__ = require("3rdparty/walkontable/src/selection"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_selection__}).WalkontableSelection;
	function CustomBorders() {}
	var instance;
	var checkEnable = function(customBorders) {
	  if (typeof customBorders === 'boolean') {
	    if (customBorders === true) {
	      return true;
	    }
	  }
	  if (typeof customBorders === 'object') {
	    if (customBorders.length > 0) {
	      return true;
	    }
	  }
	  return false;
	};
	var init = function() {
	  if (checkEnable(this.getSettings().customBorders)) {
	    if (!this.customBorders) {
	      instance = this;
	      this.customBorders = new CustomBorders();
	    }
	  }
	};
	var getSettingIndex = function(className) {
	  for (var i = 0; i < instance.view.wt.selections.length; i++) {
	    if (instance.view.wt.selections[i].settings.className == className) {
	      return i;
	    }
	  }
	  return -1;
	};
	var insertBorderIntoSettings = function(border) {
	  var coordinates = {
	    row: border.row,
	    col: border.col
	  };
	  var selection = new WalkontableSelection(border, new WalkontableCellRange(coordinates, coordinates, coordinates));
	  var index = getSettingIndex(border.className);
	  if (index >= 0) {
	    instance.view.wt.selections[index] = selection;
	  } else {
	    instance.view.wt.selections.push(selection);
	  }
	};
	var prepareBorderFromCustomAdded = function(row, col, borderObj) {
	  var border = createEmptyBorders(row, col);
	  border = extendDefaultBorder(border, borderObj);
	  this.setCellMeta(row, col, 'borders', border);
	  insertBorderIntoSettings(border);
	};
	var prepareBorderFromCustomAddedRange = function(rowObj) {
	  var range = rowObj.range;
	  for (var row = range.from.row; row <= range.to.row; row++) {
	    for (var col = range.from.col; col <= range.to.col; col++) {
	      var border = createEmptyBorders(row, col);
	      var add = 0;
	      if (row == range.from.row) {
	        add++;
	        if (rowObj.hasOwnProperty('top')) {
	          border.top = rowObj.top;
	        }
	      }
	      if (row == range.to.row) {
	        add++;
	        if (rowObj.hasOwnProperty('bottom')) {
	          border.bottom = rowObj.bottom;
	        }
	      }
	      if (col == range.from.col) {
	        add++;
	        if (rowObj.hasOwnProperty('left')) {
	          border.left = rowObj.left;
	        }
	      }
	      if (col == range.to.col) {
	        add++;
	        if (rowObj.hasOwnProperty('right')) {
	          border.right = rowObj.right;
	        }
	      }
	      if (add > 0) {
	        this.setCellMeta(row, col, 'borders', border);
	        insertBorderIntoSettings(border);
	      }
	    }
	  }
	};
	var createClassName = function(row, col) {
	  return 'border_row' + row + 'col' + col;
	};
	var createDefaultCustomBorder = function() {
	  return {
	    width: 1,
	    color: '#000'
	  };
	};
	var createSingleEmptyBorder = function() {
	  return {hide: true};
	};
	var createDefaultHtBorder = function() {
	  return {
	    width: 1,
	    color: '#000',
	    cornerVisible: false
	  };
	};
	var createEmptyBorders = function(row, col) {
	  return {
	    className: createClassName(row, col),
	    border: createDefaultHtBorder(),
	    row: row,
	    col: col,
	    top: createSingleEmptyBorder(),
	    right: createSingleEmptyBorder(),
	    bottom: createSingleEmptyBorder(),
	    left: createSingleEmptyBorder()
	  };
	};
	var extendDefaultBorder = function(defaultBorder, customBorder) {
	  if (customBorder.hasOwnProperty('border')) {
	    defaultBorder.border = customBorder.border;
	  }
	  if (customBorder.hasOwnProperty('top')) {
	    defaultBorder.top = customBorder.top;
	  }
	  if (customBorder.hasOwnProperty('right')) {
	    defaultBorder.right = customBorder.right;
	  }
	  if (customBorder.hasOwnProperty('bottom')) {
	    defaultBorder.bottom = customBorder.bottom;
	  }
	  if (customBorder.hasOwnProperty('left')) {
	    defaultBorder.left = customBorder.left;
	  }
	  return defaultBorder;
	};
	var removeBordersFromDom = function(borderClassName) {
	  var borders = document.querySelectorAll('.' + borderClassName);
	  for (var i = 0; i < borders.length; i++) {
	    if (borders[i]) {
	      if (borders[i].nodeName != 'TD') {
	        var parent = borders[i].parentNode;
	        if (parent.parentNode) {
	          parent.parentNode.removeChild(parent);
	        }
	      }
	    }
	  }
	};
	var removeAllBorders = function(row, col) {
	  var borderClassName = createClassName(row, col);
	  removeBordersFromDom(borderClassName);
	  this.removeCellMeta(row, col, 'borders');
	};
	var setBorder = function(row, col, place, remove) {
	  var bordersMeta = this.getCellMeta(row, col).borders;
	  if (!bordersMeta || bordersMeta.border == undefined) {
	    bordersMeta = createEmptyBorders(row, col);
	  }
	  if (remove) {
	    bordersMeta[place] = createSingleEmptyBorder();
	  } else {
	    bordersMeta[place] = createDefaultCustomBorder();
	  }
	  this.setCellMeta(row, col, 'borders', bordersMeta);
	  var borderClassName = createClassName(row, col);
	  removeBordersFromDom(borderClassName);
	  insertBorderIntoSettings(bordersMeta);
	  this.render();
	};
	var prepareBorder = function(range, place, remove) {
	  if (range.from.row == range.to.row && range.from.col == range.to.col) {
	    if (place == 'noBorders') {
	      removeAllBorders.call(this, range.from.row, range.from.col);
	    } else {
	      setBorder.call(this, range.from.row, range.from.col, place, remove);
	    }
	  } else {
	    switch (place) {
	      case 'noBorders':
	        for (var column = range.from.col; column <= range.to.col; column++) {
	          for (var row = range.from.row; row <= range.to.row; row++) {
	            removeAllBorders.call(this, row, column);
	          }
	        }
	        break;
	      case 'top':
	        for (var topCol = range.from.col; topCol <= range.to.col; topCol++) {
	          setBorder.call(this, range.from.row, topCol, place, remove);
	        }
	        break;
	      case 'right':
	        for (var rowRight = range.from.row; rowRight <= range.to.row; rowRight++) {
	          setBorder.call(this, rowRight, range.to.col, place);
	        }
	        break;
	      case 'bottom':
	        for (var bottomCol = range.from.col; bottomCol <= range.to.col; bottomCol++) {
	          setBorder.call(this, range.to.row, bottomCol, place);
	        }
	        break;
	      case 'left':
	        for (var rowLeft = range.from.row; rowLeft <= range.to.row; rowLeft++) {
	          setBorder.call(this, rowLeft, range.from.col, place);
	        }
	        break;
	    }
	  }
	};
	var checkSelectionBorders = function(hot, direction) {
	  var atLeastOneHasBorder = false;
	  hot.getSelectedRange().forAll(function(r, c) {
	    var metaBorders = hot.getCellMeta(r, c).borders;
	    if (metaBorders) {
	      if (direction) {
	        if (!metaBorders[direction].hasOwnProperty('hide')) {
	          atLeastOneHasBorder = true;
	          return false;
	        }
	      } else {
	        atLeastOneHasBorder = true;
	        return false;
	      }
	    }
	  });
	  return atLeastOneHasBorder;
	};
	var markSelected = function(label) {
	  return '<span class="selected">' + String.fromCharCode(10003) + '</span>' + label;
	};
	var addBordersOptionsToContextMenu = function(defaultOptions) {
	  if (!this.getSettings().customBorders) {
	    return;
	  }
	  defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR);
	  defaultOptions.items.push({
	    key: 'borders',
	    name: 'Borders',
	    submenu: {items: [{
	        key: 'borders:top',
	        name: function() {
	          var label = 'Top';
	          var hasBorder = checkSelectionBorders(this, 'top');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'top');
	          prepareBorder.call(this, this.getSelectedRange(), 'top', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:right',
	        name: function() {
	          var label = 'Right';
	          var hasBorder = checkSelectionBorders(this, 'right');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'right');
	          prepareBorder.call(this, this.getSelectedRange(), 'right', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:bottom',
	        name: function() {
	          var label = 'Bottom';
	          var hasBorder = checkSelectionBorders(this, 'bottom');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'bottom');
	          prepareBorder.call(this, this.getSelectedRange(), 'bottom', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:left',
	        name: function() {
	          var label = 'Left';
	          var hasBorder = checkSelectionBorders(this, 'left');
	          if (hasBorder) {
	            label = markSelected(label);
	          }
	          return label;
	        },
	        callback: function() {
	          var hasBorder = checkSelectionBorders(this, 'left');
	          prepareBorder.call(this, this.getSelectedRange(), 'left', hasBorder);
	        },
	        disabled: false
	      }, {
	        key: 'borders:no_borders',
	        name: 'Remove border(s)',
	        callback: function() {
	          prepareBorder.call(this, this.getSelectedRange(), 'noBorders');
	        },
	        disabled: function() {
	          return !checkSelectionBorders(this);
	        }
	      }]}
	  });
	};
	Handsontable.hooks.add('beforeInit', init);
	Handsontable.hooks.add('afterContextMenuDefaultOptions', addBordersOptionsToContextMenu);
	Handsontable.hooks.add('afterInit', function() {
	  var customBorders = this.getSettings().customBorders;
	  if (customBorders) {
	    for (var i = 0; i < customBorders.length; i++) {
	      if (customBorders[i].range) {
	        prepareBorderFromCustomAddedRange.call(this, customBorders[i]);
	      } else {
	        prepareBorderFromCustomAdded.call(this, customBorders[i].row, customBorders[i].col, customBorders[i]);
	      }
	    }
	    this.render();
	    this.view.wt.draw(true);
	  }
	});
	Handsontable.CustomBorders = CustomBorders;

	//# 
	},{"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/selection":18,"plugins":57}],75:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  DragToScroll: {get: function() {
	      return DragToScroll;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	Handsontable.plugins.DragToScroll = DragToScroll;
	function DragToScroll() {
	  this.boundaries = null;
	  this.callback = null;
	}
	DragToScroll.prototype.setBoundaries = function(boundaries) {
	  this.boundaries = boundaries;
	};
	DragToScroll.prototype.setCallback = function(callback) {
	  this.callback = callback;
	};
	DragToScroll.prototype.check = function(x, y) {
	  var diffX = 0;
	  var diffY = 0;
	  if (y < this.boundaries.top) {
	    diffY = y - this.boundaries.top;
	  } else if (y > this.boundaries.bottom) {
	    diffY = y - this.boundaries.bottom;
	  }
	  if (x < this.boundaries.left) {
	    diffX = x - this.boundaries.left;
	  } else if (x > this.boundaries.right) {
	    diffX = x - this.boundaries.right;
	  }
	  this.callback(diffX, diffY);
	};
	var dragToScroll;
	var instance;
	var setupListening = function(instance) {
	  instance.dragToScrollListening = false;
	  var scrollHandler = instance.view.wt.wtTable.holder;
	  dragToScroll = new DragToScroll();
	  if (scrollHandler === window) {
	    return;
	  } else {
	    dragToScroll.setBoundaries(scrollHandler.getBoundingClientRect());
	  }
	  dragToScroll.setCallback(function(scrollX, scrollY) {
	    if (scrollX < 0) {
	      scrollHandler.scrollLeft -= 50;
	    } else if (scrollX > 0) {
	      scrollHandler.scrollLeft += 50;
	    }
	    if (scrollY < 0) {
	      scrollHandler.scrollTop -= 20;
	    } else if (scrollY > 0) {
	      scrollHandler.scrollTop += 20;
	    }
	  });
	  instance.dragToScrollListening = true;
	};
	Handsontable.hooks.add('afterInit', function() {
	  var instance = this;
	  var eventManager = eventManagerObject(this);
	  eventManager.addEventListener(document, 'mouseup', function() {
	    instance.dragToScrollListening = false;
	  });
	  eventManager.addEventListener(document, 'mousemove', function(event) {
	    if (instance.dragToScrollListening) {
	      dragToScroll.check(event.clientX, event.clientY);
	    }
	  });
	});
	Handsontable.hooks.add('afterDestroy', function() {
	  eventManagerObject(this).clear();
	});
	Handsontable.hooks.add('afterOnCellMouseDown', function() {
	  setupListening(this);
	});
	Handsontable.hooks.add('afterOnCellCornerMouseDown', function() {
	  setupListening(this);
	});
	Handsontable.plugins.DragToScroll = DragToScroll;

	//# 
	},{"eventManager":41,"plugins":57}],76:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualColumnFreeze: {get: function() {
	      return ManualColumnFreeze;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_plugins__;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var ManualColumnFreeze = function ManualColumnFreeze(hotInstance) {
	  $traceurRuntime.superConstructor($ManualColumnFreeze).call(this, hotInstance);
	};
	var $ManualColumnFreeze = ManualColumnFreeze;
	($traceurRuntime.createClass)(ManualColumnFreeze, {
	  isEnabled: function() {
	    return !!this.hot.getSettings().manualColumnFreeze;
	  },
	  enablePlugin: function() {
	    var $__2 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.addHook('modifyCol', (function(col) {
	      return $__2.onModifyCol(col);
	    }));
	    this.addHook('afterContextMenuDefaultOptions', (function(defaultOptions) {
	      return $__2.addContextMenuEntry(defaultOptions);
	    }));
	    $traceurRuntime.superGet(this, $ManualColumnFreeze.prototype, "enablePlugin").call(this);
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ManualColumnFreeze.prototype, "disablePlugin").call(this);
	  },
	  init: function() {
	    $traceurRuntime.superGet(this, $ManualColumnFreeze.prototype, "init").call(this);
	    if (typeof this.hot.manualColumnPositionsPluginUsages === 'undefined') {
	      this.hot.manualColumnPositionsPluginUsages = ['manualColumnFreeze'];
	    } else {
	      this.hot.manualColumnPositionsPluginUsages.push('manualColumnFreeze');
	    }
	    this.fixedColumnsCount = this.hot.getSettings().fixedColumnsLeft;
	  },
	  onModifyCol: function(column) {
	    if (this.hot.manualColumnPositionsPluginUsages.length > 1) {
	      return column;
	    }
	    return this.getModifiedColumnIndex(column);
	  },
	  getModifiedColumnIndex: function(column) {
	    return this.hot.manualColumnPositions[column];
	  },
	  addContextMenuEntry: function(defaultOptions) {
	    var _this = this;
	    defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR, {
	      key: 'freeze_column',
	      name: function() {
	        var selectedColumn = _this.hot.getSelected()[1];
	        if (selectedColumn > _this.fixedColumnsCount - 1) {
	          return 'Freeze this column';
	        } else {
	          return 'Unfreeze this column';
	        }
	      },
	      disabled: function() {
	        var selection = _this.hot.getSelected();
	        return selection[1] !== selection[3];
	      },
	      callback: function() {
	        var selectedColumn = _this.hot.getSelected()[1];
	        if (selectedColumn > _this.fixedColumnsCount - 1) {
	          _this.freezeColumn(selectedColumn);
	        } else {
	          _this.unfreezeColumn(selectedColumn);
	        }
	      }
	    });
	  },
	  freezeColumn: function(column) {
	    if (column <= this.fixedColumnsCount - 1) {
	      return;
	    }
	    var modifiedColumn = this.getModifiedColumnIndex(column) || column;
	    this.checkPositionData(modifiedColumn);
	    this.modifyColumnOrder(modifiedColumn, column, null, 'freeze');
	    this.addFixedColumn();
	    this.hot.view.wt.wtOverlays.leftOverlay.refresh();
	    this.hot.view.wt.wtOverlays.adjustElementsSize();
	  },
	  unfreezeColumn: function(column) {
	    if (column > this.fixedColumnsCount - 1) {
	      return;
	    }
	    var returnCol = this.getBestColumnReturnPosition(column);
	    var modifiedColumn = this.getModifiedColumnIndex(column) || column;
	    this.checkPositionData(modifiedColumn);
	    this.modifyColumnOrder(modifiedColumn, column, returnCol, 'unfreeze');
	    this.removeFixedColumn();
	    this.hot.view.wt.wtOverlays.leftOverlay.refresh();
	    this.hot.view.wt.wtOverlays.adjustElementsSize();
	  },
	  addFixedColumn: function() {
	    this.hot.updateSettings({fixedColumnsLeft: this.fixedColumnsCount + 1});
	    this.fixedColumnsCount++;
	  },
	  removeFixedColumn: function() {
	    this.hot.updateSettings({fixedColumnsLeft: this.fixedColumnsCount - 1});
	    this.fixedColumnsCount--;
	  },
	  checkPositionData: function(column) {
	    if (!this.hot.manualColumnPositions || this.hot.manualColumnPositions.length === 0) {
	      if (!this.hot.manualColumnPositions) {
	        this.hot.manualColumnPositions = [];
	      }
	    }
	    if (column) {
	      if (!this.hot.manualColumnPositions[column]) {
	        this.createPositionData(column + 1);
	      }
	    } else {
	      this.createPositionData(this.hot.countCols());
	    }
	  },
	  createPositionData: function(length) {
	    if (this.hot.manualColumnPositions.length < length) {
	      for (var i = this.hot.manualColumnPositions.length; i < length; i++) {
	        this.hot.manualColumnPositions[i] = i;
	      }
	    }
	  },
	  modifyColumnOrder: function(column, actualColumn, returnColumn, action) {
	    if (returnColumn == null) {
	      returnColumn = column;
	    }
	    if (action === 'freeze') {
	      this.hot.manualColumnPositions.splice(this.fixedColumnsCount, 0, this.hot.manualColumnPositions.splice(actualColumn, 1)[0]);
	    } else if (action === 'unfreeze') {
	      this.hot.manualColumnPositions.splice(returnColumn, 0, this.hot.manualColumnPositions.splice(actualColumn, 1)[0]);
	    }
	  },
	  getBestColumnReturnPosition: function(column) {
	    var i = this.fixedColumnsCount;
	    var j = this.getModifiedColumnIndex(i);
	    var initialCol = this.getModifiedColumnIndex(column);
	    while (j < initialCol) {
	      i++;
	      j = this.getModifiedColumnIndex(i);
	    }
	    return i - 1;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('manualColumnFreeze', ManualColumnFreeze);

	//# 
	},{"_base":58,"plugins":57}],77:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualColumnMove: {get: function() {
	      return ManualColumnMove;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass,
	    removeClass = $__0.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__2.pageX,
	    pageY = $__2.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	function ManualColumnMove() {
	  var startCol,
	      endCol,
	      startX,
	      startOffset,
	      currentCol,
	      instance,
	      currentTH,
	      handle = document.createElement('DIV'),
	      guide = document.createElement('DIV'),
	      eventManager = eventManagerObject(this);
	  handle.className = 'manualColumnMover';
	  guide.className = 'manualColumnMoverGuide';
	  var saveManualColumnPositions = function() {
	    var instance = this;
	    Handsontable.hooks.run(instance, 'persistentStateSave', 'manualColumnPositions', instance.manualColumnPositions);
	  };
	  var loadManualColumnPositions = function() {
	    var instance = this;
	    var storedState = {};
	    Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualColumnPositions', storedState);
	    return storedState.value;
	  };
	  function setupHandlePosition(TH) {
	    instance = this;
	    currentTH = TH;
	    var col = this.view.wt.wtTable.getCoords(TH).col;
	    if (col >= 0) {
	      currentCol = col;
	      var box = currentTH.getBoundingClientRect();
	      startOffset = box.left;
	      handle.style.top = box.top + 'px';
	      handle.style.left = startOffset + 'px';
	      instance.rootElement.appendChild(handle);
	    }
	  }
	  function refreshHandlePosition(TH, delta) {
	    var box = TH.getBoundingClientRect();
	    var handleWidth = 6;
	    if (delta > 0) {
	      handle.style.left = (box.left + box.width - handleWidth) + 'px';
	    } else {
	      handle.style.left = box.left + 'px';
	    }
	  }
	  function setupGuidePosition() {
	    var instance = this;
	    addClass(handle, 'active');
	    addClass(guide, 'active');
	    var box = currentTH.getBoundingClientRect();
	    guide.style.width = box.width + 'px';
	    guide.style.height = instance.view.maximumVisibleElementHeight(0) + 'px';
	    guide.style.top = handle.style.top;
	    guide.style.left = startOffset + 'px';
	    instance.rootElement.appendChild(guide);
	  }
	  function refreshGuidePosition(diff) {
	    guide.style.left = startOffset + diff + 'px';
	  }
	  function hideHandleAndGuide() {
	    removeClass(handle, 'active');
	    removeClass(guide, 'active');
	  }
	  var checkColumnHeader = function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'THEAD') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return checkColumnHeader(element);
	      }
	    }
	    return false;
	  };
	  var getTHFromTargetElement = function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  };
	  var bindEvents = function() {
	    var instance = this;
	    var pressed;
	    eventManager.addEventListener(instance.rootElement, 'mouseover', function(e) {
	      if (checkColumnHeader(e.target)) {
	        var th = getTHFromTargetElement(e.target);
	        if (th) {
	          if (pressed) {
	            var col = instance.view.wt.wtTable.getCoords(th).col;
	            if (col >= 0) {
	              endCol = col;
	              refreshHandlePosition(e.target, endCol - startCol);
	            }
	          } else {
	            setupHandlePosition.call(instance, th);
	          }
	        }
	      }
	    });
	    eventManager.addEventListener(instance.rootElement, 'mousedown', function(e) {
	      if (hasClass(e.target, 'manualColumnMover')) {
	        startX = pageX(e);
	        setupGuidePosition.call(instance);
	        pressed = instance;
	        startCol = currentCol;
	        endCol = currentCol;
	      }
	    });
	    eventManager.addEventListener(window, 'mousemove', function(e) {
	      if (pressed) {
	        refreshGuidePosition(pageX(e) - startX);
	      }
	    });
	    eventManager.addEventListener(window, 'mouseup', function(e) {
	      if (pressed) {
	        hideHandleAndGuide();
	        pressed = false;
	        createPositionData(instance.manualColumnPositions, instance.countCols());
	        instance.manualColumnPositions.splice(endCol, 0, instance.manualColumnPositions.splice(startCol, 1)[0]);
	        Handsontable.hooks.run(instance, 'beforeColumnMove', startCol, endCol);
	        instance.forceFullRender = true;
	        instance.view.render();
	        saveManualColumnPositions.call(instance);
	        Handsontable.hooks.run(instance, 'afterColumnMove', startCol, endCol);
	        setupHandlePosition.call(instance, currentTH);
	      }
	    });
	    instance.addHook('afterDestroy', unbindEvents);
	  };
	  var unbindEvents = function() {
	    eventManager.clear();
	  };
	  var createPositionData = function(positionArr, len) {
	    if (positionArr.length < len) {
	      for (var i = positionArr.length; i < len; i++) {
	        positionArr[i] = i;
	      }
	    }
	  };
	  this.beforeInit = function() {
	    this.manualColumnPositions = [];
	  };
	  this.init = function(source) {
	    var instance = this;
	    var manualColMoveEnabled = !!(this.getSettings().manualColumnMove);
	    if (manualColMoveEnabled) {
	      var initialManualColumnPositions = this.getSettings().manualColumnMove;
	      var loadedManualColumnPositions = loadManualColumnPositions.call(instance);
	      if (typeof loadedManualColumnPositions != 'undefined') {
	        this.manualColumnPositions = loadedManualColumnPositions;
	      } else if (Array.isArray(initialManualColumnPositions)) {
	        this.manualColumnPositions = initialManualColumnPositions;
	      } else {
	        this.manualColumnPositions = [];
	      }
	      if (source === 'afterInit' || source === 'afterUpdateSettings' && eventManager.context.eventListeners.length === 0) {
	        if (typeof instance.manualColumnPositionsPluginUsages === 'undefined') {
	          instance.manualColumnPositionsPluginUsages = ['manualColumnMove'];
	        } else {
	          instance.manualColumnPositionsPluginUsages.push('manualColumnMove');
	        }
	        bindEvents.call(this);
	        if (this.manualColumnPositions.length > 0) {
	          this.forceFullRender = true;
	          this.render();
	        }
	      }
	    } else {
	      var pluginUsagesIndex = instance.manualColumnPositionsPluginUsages ? instance.manualColumnPositionsPluginUsages.indexOf('manualColumnMove') : -1;
	      if (pluginUsagesIndex > -1) {
	        unbindEvents.call(this);
	        this.manualColumnPositions = [];
	        instance.manualColumnPositionsPluginUsages[pluginUsagesIndex] = void 0;
	      }
	    }
	  };
	  this.modifyCol = function(col) {
	    if (this.getSettings().manualColumnMove) {
	      if (typeof this.manualColumnPositions[col] === 'undefined') {
	        createPositionData(this.manualColumnPositions, col + 1);
	      }
	      return this.manualColumnPositions[col];
	    }
	    return col;
	  };
	  this.afterRemoveCol = function(index, amount) {
	    if (!this.getSettings().manualColumnMove) {
	      return;
	    }
	    var rmindx,
	        colpos = this.manualColumnPositions;
	    rmindx = colpos.splice(index, amount);
	    colpos = colpos.map(function(colpos) {
	      var i,
	          newpos = colpos;
	      for (i = 0; i < rmindx.length; i++) {
	        if (colpos > rmindx[i]) {
	          newpos--;
	        }
	      }
	      return newpos;
	    });
	    this.manualColumnPositions = colpos;
	  };
	  this.afterCreateCol = function(index, amount) {
	    if (!this.getSettings().manualColumnMove) {
	      return;
	    }
	    var colpos = this.manualColumnPositions;
	    if (!colpos.length) {
	      return;
	    }
	    var addindx = [];
	    for (var i = 0; i < amount; i++) {
	      addindx.push(index + i);
	    }
	    if (index >= colpos.length) {
	      colpos.concat(addindx);
	    } else {
	      colpos = colpos.map(function(colpos) {
	        return (colpos >= index) ? (colpos + amount) : colpos;
	      });
	      colpos.splice.apply(colpos, [index, 0].concat(addindx));
	    }
	    this.manualColumnPositions = colpos;
	  };
	}
	var htManualColumnMove = new ManualColumnMove();
	Handsontable.hooks.add('beforeInit', htManualColumnMove.beforeInit);
	Handsontable.hooks.add('afterInit', function() {
	  htManualColumnMove.init.call(this, 'afterInit');
	});
	Handsontable.hooks.add('afterUpdateSettings', function() {
	  htManualColumnMove.init.call(this, 'afterUpdateSettings');
	});
	Handsontable.hooks.add('modifyCol', htManualColumnMove.modifyCol);
	Handsontable.hooks.add('afterRemoveCol', htManualColumnMove.afterRemoveCol);
	Handsontable.hooks.add('afterCreateCol', htManualColumnMove.afterCreateCol);
	Handsontable.hooks.register('beforeColumnMove');
	Handsontable.hooks.register('afterColumnMove');

	//# 
	},{"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"plugins":57}],78:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualColumnResize: {get: function() {
	      return ManualColumnResize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base_46_js__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var BasePlugin = ($___46__46__47__95_base_46_js__ = require("_base.js"), $___46__46__47__95_base_46_js__ && $___46__46__47__95_base_46_js__.__esModule && $___46__46__47__95_base_46_js__ || {default: $___46__46__47__95_base_46_js__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__1.addClass,
	    hasClass = $__1.hasClass,
	    removeClass = $__1.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__3 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__3.pageX,
	    pageY = $__3.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var ManualColumnResize = function ManualColumnResize(hotInstance) {
	  $traceurRuntime.superConstructor($ManualColumnResize).call(this, hotInstance);
	  this.currentTH = null;
	  this.currentCol = null;
	  this.currentWidth = null;
	  this.newSize = null;
	  this.startY = null;
	  this.startWidth = null;
	  this.startOffset = null;
	  this.handle = document.createElement('DIV');
	  this.guide = document.createElement('DIV');
	  this.eventManager = eventManagerObject(this);
	  this.pressed = null;
	  this.dblclick = 0;
	  this.autoresizeTimeout = null;
	  this.manualColumnWidths = [];
	  addClass(this.handle, 'manualColumnResizer');
	  addClass(this.guide, 'manualColumnResizerGuide');
	};
	var $ManualColumnResize = ManualColumnResize;
	($traceurRuntime.createClass)(ManualColumnResize, {
	  isEnabled: function() {
	    return this.hot.getSettings().manualColumnResize;
	  },
	  enablePlugin: function() {
	    var $__5 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.manualColumnWidths = [];
	    var initialColumnWidth = this.hot.getSettings().manualColumnResize;
	    var loadedManualColumnWidths = this.loadManualColumnWidths();
	    this.addHook('modifyColWidth', (function(width, col) {
	      return $__5.onModifyColWidth(width, col);
	    }));
	    if (typeof loadedManualColumnWidths != 'undefined') {
	      this.manualColumnWidths = loadedManualColumnWidths;
	    } else if (Array.isArray(initialColumnWidth)) {
	      this.manualColumnWidths = initialColumnWidth;
	    } else {
	      this.manualColumnWidths = [];
	    }
	    Handsontable.hooks.register('beforeColumnResize');
	    Handsontable.hooks.register('afterColumnResize');
	    this.bindEvents();
	    $traceurRuntime.superGet(this, $ManualColumnResize.prototype, "enablePlugin").call(this);
	  },
	  updatePlugin: function() {
	    var initialColumnWidth = this.hot.getSettings().manualColumnResize;
	    if (Array.isArray(initialColumnWidth)) {
	      this.manualColumnWidths = initialColumnWidth;
	    } else {
	      this.manualColumnWidths = [];
	    }
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ManualColumnResize.prototype, "disablePlugin").call(this);
	  },
	  saveManualColumnWidths: function() {
	    this.hot.runHooks('persistentStateSave', 'manualColumnWidths', this.manualColumnWidths);
	  },
	  loadManualColumnWidths: function() {
	    var storedState = {};
	    this.hot.runHooks('persistentStateLoad', 'manualColumnWidths', storedState);
	    return storedState.value;
	  },
	  setupHandlePosition: function(TH) {
	    this.currentTH = TH;
	    var col = this.hot.view.wt.wtTable.getCoords(TH).col;
	    if (col >= 0) {
	      var box = this.currentTH.getBoundingClientRect();
	      this.currentCol = col;
	      this.startOffset = box.left - 6;
	      this.startWidth = parseInt(box.width, 10);
	      this.handle.style.top = box.top + 'px';
	      this.handle.style.left = this.startOffset + this.startWidth + 'px';
	      this.hot.rootElement.appendChild(this.handle);
	    }
	  },
	  refreshHandlePosition: function() {
	    this.handle.style.left = this.startOffset + this.currentWidth + 'px';
	  },
	  setupGuidePosition: function() {
	    addClass(this.handle, 'active');
	    addClass(this.guide, 'active');
	    this.guide.style.top = this.handle.style.top;
	    this.guide.style.left = this.handle.style.left;
	    this.guide.style.height = this.hot.view.maximumVisibleElementHeight(0) + 'px';
	    this.hot.rootElement.appendChild(this.guide);
	  },
	  refreshGuidePosition: function() {
	    this.guide.style.left = this.handle.style.left;
	  },
	  hideHandleAndGuide: function() {
	    removeClass(this.handle, 'active');
	    removeClass(this.guide, 'active');
	  },
	  checkIfColumnHeader: function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'THEAD') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return this.checkIfColumnHeader(element);
	      }
	    }
	    return false;
	  },
	  getTHFromTargetElement: function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return this.getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  },
	  onMouseOver: function(event) {
	    if (this.checkIfColumnHeader(event.target)) {
	      var th = this.getTHFromTargetElement(event.target);
	      if (!th) {
	        return;
	      }
	      var colspan = th.getAttribute('colspan');
	      if (th && (colspan === null || colspan === 1)) {
	        if (!this.pressed) {
	          this.setupHandlePosition(th);
	        }
	      }
	    }
	  },
	  afterMouseDownTimeout: function() {
	    if (this.dblclick >= 2) {
	      var hookNewSize = this.hot.runHooks('beforeColumnResize', this.currentCol, this.newSize, true);
	      if (hookNewSize !== void 0) {
	        this.newSize = hookNewSize;
	      }
	      this.setManualSize(this.currentCol, this.newSize);
	      this.hot.forceFullRender = true;
	      this.hot.view.render();
	      this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      this.hot.runHooks('afterColumnResize', this.currentCol, this.newSize, true);
	    }
	    this.dblclick = 0;
	    this.autoresizeTimeout = null;
	  },
	  onMouseDown: function(event) {
	    var $__5 = this;
	    if (hasClass(event.target, 'manualColumnResizer')) {
	      this.setupGuidePosition();
	      this.pressed = this.hot;
	      if (this.autoresizeTimeout === null) {
	        this.autoresizeTimeout = setTimeout((function() {
	          return $__5.afterMouseDownTimeout();
	        }), 500);
	        this.hot._registerTimeout(this.autoresizeTimeout);
	      }
	      this.dblclick++;
	      this.startX = pageX(event);
	      this.newSize = this.startWidth;
	    }
	  },
	  onMouseMove: function(event) {
	    if (this.pressed) {
	      this.currentWidth = this.startWidth + (pageX(event) - this.startX);
	      this.newSize = this.setManualSize(this.currentCol, this.currentWidth);
	      this.refreshHandlePosition();
	      this.refreshGuidePosition();
	    }
	  },
	  onMouseUp: function(event) {
	    if (this.pressed) {
	      this.hideHandleAndGuide();
	      this.pressed = false;
	      if (this.newSize != this.startWidth) {
	        this.hot.runHooks('beforeColumnResize', this.currentCol, this.newSize);
	        this.hot.forceFullRender = true;
	        this.hot.view.render();
	        this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        this.saveManualColumnWidths();
	        this.hot.runHooks('afterColumnResize', this.currentCol, this.newSize);
	      }
	      this.setupHandlePosition(this.currentTH);
	    }
	  },
	  bindEvents: function() {
	    var $__5 = this;
	    this.eventManager.addEventListener(this.hot.rootElement, 'mouseover', (function(e) {
	      return $__5.onMouseOver(e);
	    }));
	    this.eventManager.addEventListener(this.hot.rootElement, 'mousedown', (function(e) {
	      return $__5.onMouseDown(e);
	    }));
	    this.eventManager.addEventListener(window, 'mousemove', (function(e) {
	      return $__5.onMouseMove(e);
	    }));
	    this.eventManager.addEventListener(window, 'mouseup', (function(e) {
	      return $__5.onMouseUp(e);
	    }));
	  },
	  setManualSize: function(column, width) {
	    width = Math.max(width, 20);
	    column = this.hot.runHooks('modifyCol', column);
	    this.manualColumnWidths[column] = width;
	    return width;
	  },
	  onModifyColWidth: function(width, column) {
	    if (this.enabled) {
	      column = this.hot.runHooks('modifyCol', column);
	      if (this.hot.getSettings().manualColumnResize && this.manualColumnWidths[column]) {
	        return this.manualColumnWidths[column];
	      }
	    }
	    return width;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('manualColumnResize', ManualColumnResize);

	//# 
	},{"_base.js":58,"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"plugins":57}],79:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualRowMove: {get: function() {
	      return ManualRowMove;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass,
	    removeClass = $__0.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__2 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__2.pageX,
	    pageY = $__2.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	function ManualRowMove() {
	  var startRow,
	      endRow,
	      startY,
	      startOffset,
	      currentRow,
	      currentTH,
	      handle = document.createElement('DIV'),
	      guide = document.createElement('DIV'),
	      eventManager = eventManagerObject(this);
	  handle.className = 'manualRowMover';
	  guide.className = 'manualRowMoverGuide';
	  var saveManualRowPositions = function() {
	    var instance = this;
	    Handsontable.hooks.run(instance, 'persistentStateSave', 'manualRowPositions', instance.manualRowPositions);
	  };
	  var loadManualRowPositions = function() {
	    var instance = this,
	        storedState = {};
	    Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualRowPositions', storedState);
	    return storedState.value;
	  };
	  function setupHandlePosition(TH) {
	    var instance = this;
	    currentTH = TH;
	    var row = this.view.wt.wtTable.getCoords(TH).row;
	    if (row >= 0) {
	      currentRow = row;
	      var box = currentTH.getBoundingClientRect();
	      startOffset = box.top;
	      handle.style.top = startOffset + 'px';
	      handle.style.left = box.left + 'px';
	      instance.rootElement.appendChild(handle);
	    }
	  }
	  function refreshHandlePosition(TH, delta) {
	    var box = TH.getBoundingClientRect();
	    var handleHeight = 6;
	    if (delta > 0) {
	      handle.style.top = (box.top + box.height - handleHeight) + 'px';
	    } else {
	      handle.style.top = box.top + 'px';
	    }
	  }
	  function setupGuidePosition() {
	    var instance = this;
	    addClass(handle, 'active');
	    addClass(guide, 'active');
	    var box = currentTH.getBoundingClientRect();
	    guide.style.width = instance.view.maximumVisibleElementWidth(0) + 'px';
	    guide.style.height = box.height + 'px';
	    guide.style.top = startOffset + 'px';
	    guide.style.left = handle.style.left;
	    instance.rootElement.appendChild(guide);
	  }
	  function refreshGuidePosition(diff) {
	    guide.style.top = startOffset + diff + 'px';
	  }
	  function hideHandleAndGuide() {
	    removeClass(handle, 'active');
	    removeClass(guide, 'active');
	  }
	  var checkRowHeader = function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'TBODY') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return checkRowHeader(element);
	      }
	    }
	    return false;
	  };
	  var getTHFromTargetElement = function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  };
	  var bindEvents = function() {
	    var instance = this;
	    var pressed;
	    eventManager.addEventListener(instance.rootElement, 'mouseover', function(e) {
	      if (checkRowHeader(e.target)) {
	        var th = getTHFromTargetElement(e.target);
	        if (th) {
	          if (pressed) {
	            endRow = instance.view.wt.wtTable.getCoords(th).row;
	            refreshHandlePosition(th, endRow - startRow);
	          } else {
	            setupHandlePosition.call(instance, th);
	          }
	        }
	      }
	    });
	    eventManager.addEventListener(instance.rootElement, 'mousedown', function(e) {
	      if (hasClass(e.target, 'manualRowMover')) {
	        startY = pageY(e);
	        setupGuidePosition.call(instance);
	        pressed = instance;
	        startRow = currentRow;
	        endRow = currentRow;
	      }
	    });
	    eventManager.addEventListener(window, 'mousemove', function(e) {
	      if (pressed) {
	        refreshGuidePosition(pageY(e) - startY);
	      }
	    });
	    eventManager.addEventListener(window, 'mouseup', function(e) {
	      if (pressed) {
	        hideHandleAndGuide();
	        pressed = false;
	        createPositionData(instance.manualRowPositions, instance.countRows());
	        instance.manualRowPositions.splice(endRow, 0, instance.manualRowPositions.splice(startRow, 1)[0]);
	        Handsontable.hooks.run(instance, 'beforeRowMove', startRow, endRow);
	        instance.forceFullRender = true;
	        instance.view.render();
	        saveManualRowPositions.call(instance);
	        Handsontable.hooks.run(instance, 'afterRowMove', startRow, endRow);
	        setupHandlePosition.call(instance, currentTH);
	      }
	    });
	    instance.addHook('afterDestroy', unbindEvents);
	  };
	  var unbindEvents = function() {
	    eventManager.clear();
	  };
	  var createPositionData = function(positionArr, len) {
	    if (positionArr.length < len) {
	      for (var i = positionArr.length; i < len; i++) {
	        positionArr[i] = i;
	      }
	    }
	  };
	  this.beforeInit = function() {
	    this.manualRowPositions = [];
	  };
	  this.init = function(source) {
	    var instance = this;
	    var manualRowMoveEnabled = !!(instance.getSettings().manualRowMove);
	    if (manualRowMoveEnabled) {
	      var initialManualRowPositions = instance.getSettings().manualRowMove;
	      var loadedManualRowPostions = loadManualRowPositions.call(instance);
	      if (typeof instance.manualRowPositionsPluginUsages === 'undefined') {
	        instance.manualRowPositionsPluginUsages = ['manualColumnMove'];
	      } else {
	        instance.manualRowPositionsPluginUsages.push('manualColumnMove');
	      }
	      if (typeof loadedManualRowPostions != 'undefined') {
	        this.manualRowPositions = loadedManualRowPostions;
	      } else if (Array.isArray(initialManualRowPositions)) {
	        this.manualRowPositions = initialManualRowPositions;
	      } else {
	        this.manualRowPositions = [];
	      }
	      if (source === 'afterInit' || source === 'afterUpdateSettings' && eventManager.context.eventListeners.length === 0) {
	        bindEvents.call(this);
	        if (this.manualRowPositions.length > 0) {
	          instance.forceFullRender = true;
	          instance.render();
	        }
	      }
	    } else {
	      var pluginUsagesIndex = instance.manualRowPositionsPluginUsages ? instance.manualRowPositionsPluginUsages.indexOf('manualColumnMove') : -1;
	      if (pluginUsagesIndex > -1) {
	        unbindEvents.call(this);
	        instance.manualRowPositions = [];
	        instance.manualRowPositionsPluginUsages[pluginUsagesIndex] = void 0;
	      }
	    }
	  };
	  this.modifyRow = function(row) {
	    var instance = this;
	    if (instance.getSettings().manualRowMove) {
	      if (typeof instance.manualRowPositions[row] === 'undefined') {
	        createPositionData(this.manualRowPositions, row + 1);
	      }
	      return instance.manualRowPositions[row];
	    }
	    return row;
	  };
	}
	var htManualRowMove = new ManualRowMove();
	Handsontable.hooks.add('beforeInit', htManualRowMove.beforeInit);
	Handsontable.hooks.add('afterInit', function() {
	  htManualRowMove.init.call(this, 'afterInit');
	});
	Handsontable.hooks.add('afterUpdateSettings', function() {
	  htManualRowMove.init.call(this, 'afterUpdateSettings');
	});
	Handsontable.hooks.add('modifyRow', htManualRowMove.modifyRow);
	Handsontable.hooks.register('beforeRowMove');
	Handsontable.hooks.register('afterRowMove');

	//# 
	},{"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"plugins":57}],80:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ManualRowResize: {get: function() {
	      return ManualRowResize;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__95_base_46_js__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_plugins__;
	var BasePlugin = ($___46__46__47__95_base_46_js__ = require("_base.js"), $___46__46__47__95_base_46_js__ && $___46__46__47__95_base_46_js__.__esModule && $___46__46__47__95_base_46_js__ || {default: $___46__46__47__95_base_46_js__}).default;
	var $__1 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__1.addClass,
	    hasClass = $__1.hasClass,
	    removeClass = $__1.removeClass;
	var eventManagerObject = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).eventManager;
	var $__3 = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}),
	    pageX = $__3.pageX,
	    pageY = $__3.pageY;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var ManualRowResize = function ManualRowResize(hotInstance) {
	  $traceurRuntime.superConstructor($ManualRowResize).call(this, hotInstance);
	  this.currentTH = null;
	  this.currentRow = null;
	  this.currentHeight = null;
	  this.newSize = null;
	  this.startY = null;
	  this.startHeight = null;
	  this.startOffset = null;
	  this.handle = document.createElement('DIV');
	  this.guide = document.createElement('DIV');
	  this.eventManager = eventManagerObject(this);
	  this.pressed = null;
	  this.dblclick = 0;
	  this.autoresizeTimeout = null;
	  this.manualRowHeights = [];
	  addClass(this.handle, 'manualRowResizer');
	  addClass(this.guide, 'manualRowResizerGuide');
	};
	var $ManualRowResize = ManualRowResize;
	($traceurRuntime.createClass)(ManualRowResize, {
	  isEnabled: function() {
	    return this.hot.getSettings().manualRowResize;
	  },
	  enablePlugin: function() {
	    var $__5 = this;
	    if (this.enabled) {
	      return;
	    }
	    this.manualRowHeights = [];
	    var initialRowHeights = this.hot.getSettings().manualRowResize;
	    var loadedManualRowHeights = this.loadManualRowHeights();
	    if (typeof loadedManualRowHeights != 'undefined') {
	      this.manualRowHeights = loadedManualRowHeights;
	    } else if (Array.isArray(initialRowHeights)) {
	      this.manualRowHeights = initialRowHeights;
	    } else {
	      this.manualRowHeights = [];
	    }
	    this.addHook('modifyRowHeight', (function(height, row) {
	      return $__5.onModifyRowHeight(height, row);
	    }));
	    Handsontable.hooks.register('beforeRowResize');
	    Handsontable.hooks.register('afterRowResize');
	    this.bindEvents();
	    $traceurRuntime.superGet(this, $ManualRowResize.prototype, "enablePlugin").call(this);
	  },
	  updatePlugin: function() {
	    var initialRowHeights = this.hot.getSettings().manualRowResize;
	    if (Array.isArray(initialRowHeights)) {
	      this.manualRowHeights = initialRowHeights;
	    } else {
	      this.manualRowHeights = [];
	    }
	  },
	  disablePlugin: function() {
	    $traceurRuntime.superGet(this, $ManualRowResize.prototype, "disablePlugin").call(this);
	  },
	  saveManualRowHeights: function() {
	    this.hot.runHooks('persistentStateSave', 'manualRowHeights', this.manualRowHeights);
	  },
	  loadManualRowHeights: function() {
	    var storedState = {};
	    this.hot.runHooks('persistentStateLoad', 'manualRowHeights', storedState);
	    return storedState.value;
	  },
	  setupHandlePosition: function(TH) {
	    this.currentTH = TH;
	    var row = this.hot.view.wt.wtTable.getCoords(TH).row;
	    if (row >= 0) {
	      var box = this.currentTH.getBoundingClientRect();
	      this.currentRow = row;
	      this.startOffset = box.top - 6;
	      this.startHeight = parseInt(box.height, 10);
	      this.handle.style.left = box.left + 'px';
	      this.handle.style.top = this.startOffset + this.startHeight + 'px';
	      this.hot.rootElement.appendChild(this.handle);
	    }
	  },
	  refreshHandlePosition: function() {
	    this.handle.style.top = this.startOffset + this.currentHeight + 'px';
	  },
	  setupGuidePosition: function() {
	    addClass(this.handle, 'active');
	    addClass(this.guide, 'active');
	    this.guide.style.top = this.handle.style.top;
	    this.guide.style.left = this.handle.style.left;
	    this.guide.style.width = this.hot.view.maximumVisibleElementWidth(0) + 'px';
	    this.hot.rootElement.appendChild(this.guide);
	  },
	  refreshGuidePosition: function() {
	    this.guide.style.top = this.handle.style.top;
	  },
	  hideHandleAndGuide: function() {
	    removeClass(this.handle, 'active');
	    removeClass(this.guide, 'active');
	  },
	  checkIfRowHeader: function(element) {
	    if (element.tagName != 'BODY') {
	      if (element.parentNode.tagName == 'TBODY') {
	        return true;
	      } else {
	        element = element.parentNode;
	        return this.checkIfRowHeader(element);
	      }
	    }
	    return false;
	  },
	  getTHFromTargetElement: function(element) {
	    if (element.tagName != 'TABLE') {
	      if (element.tagName == 'TH') {
	        return element;
	      } else {
	        return this.getTHFromTargetElement(element.parentNode);
	      }
	    }
	    return null;
	  },
	  onMouseOver: function(event) {
	    if (this.checkIfRowHeader(event.target)) {
	      var th = this.getTHFromTargetElement(event.target);
	      if (th) {
	        if (!this.pressed) {
	          this.setupHandlePosition(th);
	        }
	      }
	    }
	  },
	  afterMouseDownTimeout: function() {
	    if (this.dblclick >= 2) {
	      var hookNewSize = this.hot.runHooks('beforeRowResize', this.currentRow, this.newSize, true);
	      if (hookNewSize !== void 0) {
	        this.newSize = hookNewSize;
	      }
	      this.setManualSize(this.currentRow, this.newSize);
	      this.hot.forceFullRender = true;
	      this.hot.view.render();
	      this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      this.hot.runHooks('afterRowResize', this.currentRow, this.newSize, true);
	    }
	    this.dblclick = 0;
	    this.autoresizeTimeout = null;
	  },
	  onMouseDown: function(event) {
	    var $__5 = this;
	    if (hasClass(event.target, 'manualRowResizer')) {
	      this.setupGuidePosition();
	      this.pressed = this.hot;
	      if (this.autoresizeTimeout == null) {
	        this.autoresizeTimeout = setTimeout((function() {
	          return $__5.afterMouseDownTimeout();
	        }), 500);
	        this.hot._registerTimeout(this.autoresizeTimeout);
	      }
	      this.dblclick++;
	      this.startY = pageY(event);
	      this.newSize = this.startHeight;
	    }
	  },
	  onMouseMove: function(event) {
	    if (this.pressed) {
	      this.currentHeight = this.startHeight + (pageY(event) - this.startY);
	      this.newSize = this.setManualSize(this.currentRow, this.currentHeight);
	      this.refreshHandlePosition();
	      this.refreshGuidePosition();
	    }
	  },
	  onMouseUp: function(event) {
	    if (this.pressed) {
	      this.hideHandleAndGuide();
	      this.pressed = false;
	      if (this.newSize != this.startHeight) {
	        this.hot.runHooks('beforeRowResize', this.currentRow, this.newSize);
	        this.hot.forceFullRender = true;
	        this.hot.view.render();
	        this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	        this.saveManualRowHeights();
	        this.hot.runHooks('afterRowResize', this.currentRow, this.newSize);
	      }
	      this.setupHandlePosition(this.currentTH);
	    }
	  },
	  bindEvents: function() {
	    var $__5 = this;
	    this.eventManager.addEventListener(this.hot.rootElement, 'mouseover', (function(e) {
	      return $__5.onMouseOver(e);
	    }));
	    this.eventManager.addEventListener(this.hot.rootElement, 'mousedown', (function(e) {
	      return $__5.onMouseDown(e);
	    }));
	    this.eventManager.addEventListener(window, 'mousemove', (function(e) {
	      return $__5.onMouseMove(e);
	    }));
	    this.eventManager.addEventListener(window, 'mouseup', (function(e) {
	      return $__5.onMouseUp(e);
	    }));
	  },
	  setManualSize: function(row, height) {
	    row = this.hot.runHooks('modifyRow', row);
	    this.manualRowHeights[row] = height;
	    return height;
	  },
	  onModifyRowHeight: function(height, row) {
	    if (this.enabled) {
	      var autoRowSizePlugin = this.hot.getPlugin('autoRowSize');
	      var autoRowHeightResult = autoRowSizePlugin ? autoRowSizePlugin.heights[row] : null;
	      row = this.hot.runHooks('modifyRow', row);
	      var manualRowHeight = this.manualRowHeights[row];
	      if (manualRowHeight !== void 0 && (manualRowHeight === autoRowHeightResult || manualRowHeight > (height || 0))) {
	        return manualRowHeight;
	      }
	    }
	    return height;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('manualRowResize', ManualRowResize);

	//# 
	},{"_base.js":58,"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"plugins":57}],81:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MergeCells: {get: function() {
	      return MergeCells;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_plugins__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__,
	    $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var stopImmediatePropagation = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	var WalkontableCellCoords = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableCellRange = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ = require("3rdparty/walkontable/src/cell/range"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_range__}).WalkontableCellRange;
	var WalkontableTable = ($___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__ = require("3rdparty/walkontable/src/table"), $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__ && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__.__esModule && $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__ || {default: $___46__46__47__46__46__47_3rdparty_47_walkontable_47_src_47_table__}).WalkontableTable;
	;
	function CellInfoCollection() {
	  var collection = [];
	  collection.getInfo = function(row, col) {
	    for (var i = 0,
	        ilen = this.length; i < ilen; i++) {
	      if (this[i].row <= row && this[i].row + this[i].rowspan - 1 >= row && this[i].col <= col && this[i].col + this[i].colspan - 1 >= col) {
	        return this[i];
	      }
	    }
	  };
	  collection.setInfo = function(info) {
	    for (var i = 0,
	        ilen = this.length; i < ilen; i++) {
	      if (this[i].row === info.row && this[i].col === info.col) {
	        this[i] = info;
	        return;
	      }
	    }
	    this.push(info);
	  };
	  collection.removeInfo = function(row, col) {
	    for (var i = 0,
	        ilen = this.length; i < ilen; i++) {
	      if (this[i].row === row && this[i].col === col) {
	        this.splice(i, 1);
	        break;
	      }
	    }
	  };
	  return collection;
	}
	function MergeCells(mergeCellsSetting) {
	  this.mergedCellInfoCollection = new CellInfoCollection();
	  if (Array.isArray(mergeCellsSetting)) {
	    for (var i = 0,
	        ilen = mergeCellsSetting.length; i < ilen; i++) {
	      this.mergedCellInfoCollection.setInfo(mergeCellsSetting[i]);
	    }
	  }
	}
	MergeCells.prototype.canMergeRange = function(cellRange) {
	  return !cellRange.isSingle();
	};
	MergeCells.prototype.mergeRange = function(cellRange) {
	  if (!this.canMergeRange(cellRange)) {
	    return;
	  }
	  var topLeft = cellRange.getTopLeftCorner();
	  var bottomRight = cellRange.getBottomRightCorner();
	  var mergeParent = {};
	  mergeParent.row = topLeft.row;
	  mergeParent.col = topLeft.col;
	  mergeParent.rowspan = bottomRight.row - topLeft.row + 1;
	  mergeParent.colspan = bottomRight.col - topLeft.col + 1;
	  this.mergedCellInfoCollection.setInfo(mergeParent);
	};
	MergeCells.prototype.mergeOrUnmergeSelection = function(cellRange) {
	  var info = this.mergedCellInfoCollection.getInfo(cellRange.from.row, cellRange.from.col);
	  if (info) {
	    this.unmergeSelection(cellRange.from);
	  } else {
	    this.mergeSelection(cellRange);
	  }
	};
	MergeCells.prototype.mergeSelection = function(cellRange) {
	  this.mergeRange(cellRange);
	};
	MergeCells.prototype.unmergeSelection = function(cellRange) {
	  var info = this.mergedCellInfoCollection.getInfo(cellRange.row, cellRange.col);
	  this.mergedCellInfoCollection.removeInfo(info.row, info.col);
	};
	MergeCells.prototype.applySpanProperties = function(TD, row, col) {
	  var info = this.mergedCellInfoCollection.getInfo(row, col);
	  if (info) {
	    if (info.row === row && info.col === col) {
	      TD.setAttribute('rowspan', info.rowspan);
	      TD.setAttribute('colspan', info.colspan);
	    } else {
	      TD.removeAttribute('rowspan');
	      TD.removeAttribute('colspan');
	      TD.style.display = 'none';
	    }
	  } else {
	    TD.removeAttribute('rowspan');
	    TD.removeAttribute('colspan');
	  }
	};
	MergeCells.prototype.modifyTransform = function(hook, currentSelectedRange, delta) {
	  var sameRowspan = function(merged, coords) {
	    if (coords.row >= merged.row && coords.row <= (merged.row + merged.rowspan - 1)) {
	      return true;
	    }
	    return false;
	  },
	      sameColspan = function(merged, coords) {
	        if (coords.col >= merged.col && coords.col <= (merged.col + merged.colspan - 1)) {
	          return true;
	        }
	        return false;
	      },
	      getNextPosition = function(newDelta) {
	        return new WalkontableCellCoords(currentSelectedRange.to.row + newDelta.row, currentSelectedRange.to.col + newDelta.col);
	      };
	  var newDelta = {
	    row: delta.row,
	    col: delta.col
	  };
	  if (hook == 'modifyTransformStart') {
	    if (!this.lastDesiredCoords) {
	      this.lastDesiredCoords = new WalkontableCellCoords(null, null);
	    }
	    var currentPosition = new WalkontableCellCoords(currentSelectedRange.highlight.row, currentSelectedRange.highlight.col),
	        mergedParent = this.mergedCellInfoCollection.getInfo(currentPosition.row, currentPosition.col),
	        currentRangeContainsMerge;
	    for (var i = 0,
	        mergesLength = this.mergedCellInfoCollection.length; i < mergesLength; i++) {
	      var range = this.mergedCellInfoCollection[i];
	      range = new WalkontableCellCoords(range.row + range.rowspan - 1, range.col + range.colspan - 1);
	      if (currentSelectedRange.includes(range)) {
	        currentRangeContainsMerge = true;
	        break;
	      }
	    }
	    if (mergedParent) {
	      var mergeTopLeft = new WalkontableCellCoords(mergedParent.row, mergedParent.col),
	          mergeBottomRight = new WalkontableCellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1),
	          mergeRange = new WalkontableCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);
	      if (!mergeRange.includes(this.lastDesiredCoords)) {
	        this.lastDesiredCoords = new WalkontableCellCoords(null, null);
	      }
	      newDelta.row = this.lastDesiredCoords.row ? this.lastDesiredCoords.row - currentPosition.row : newDelta.row;
	      newDelta.col = this.lastDesiredCoords.col ? this.lastDesiredCoords.col - currentPosition.col : newDelta.col;
	      if (delta.row > 0) {
	        newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;
	      } else if (delta.row < 0) {
	        newDelta.row = currentPosition.row - mergedParent.row + delta.row;
	      }
	      if (delta.col > 0) {
	        newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;
	      } else if (delta.col < 0) {
	        newDelta.col = currentPosition.col - mergedParent.col + delta.col;
	      }
	    }
	    var nextPosition = new WalkontableCellCoords(currentSelectedRange.highlight.row + newDelta.row, currentSelectedRange.highlight.col + newDelta.col),
	        nextParentIsMerged = this.mergedCellInfoCollection.getInfo(nextPosition.row, nextPosition.col);
	    if (nextParentIsMerged) {
	      this.lastDesiredCoords = nextPosition;
	      newDelta = {
	        row: nextParentIsMerged.row - currentPosition.row,
	        col: nextParentIsMerged.col - currentPosition.col
	      };
	    }
	  } else if (hook == 'modifyTransformEnd') {
	    for (var i = 0,
	        mergesLength = this.mergedCellInfoCollection.length; i < mergesLength; i++) {
	      var currentMerge = this.mergedCellInfoCollection[i],
	          mergeTopLeft = new WalkontableCellCoords(currentMerge.row, currentMerge.col),
	          mergeBottomRight = new WalkontableCellCoords(currentMerge.row + currentMerge.rowspan - 1, currentMerge.col + currentMerge.colspan - 1),
	          mergedRange = new WalkontableCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight),
	          sharedBorders = currentSelectedRange.getBordersSharedWith(mergedRange);
	      if (mergedRange.isEqual(currentSelectedRange)) {
	        currentSelectedRange.setDirection('NW-SE');
	      } else if (sharedBorders.length > 0) {
	        var mergeHighlighted = (currentSelectedRange.highlight.isEqual(mergedRange.from));
	        if (sharedBorders.indexOf('top') > -1) {
	          if (currentSelectedRange.to.isSouthEastOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('NW-SE');
	          } else if (currentSelectedRange.to.isSouthWestOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('NE-SW');
	          }
	        } else if (sharedBorders.indexOf('bottom') > -1) {
	          if (currentSelectedRange.to.isNorthEastOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('SW-NE');
	          } else if (currentSelectedRange.to.isNorthWestOf(mergedRange.from) && mergeHighlighted) {
	            currentSelectedRange.setDirection('SE-NW');
	          }
	        }
	      }
	      var nextPosition = getNextPosition(newDelta),
	          withinRowspan = sameRowspan(currentMerge, nextPosition),
	          withinColspan = sameColspan(currentMerge, nextPosition);
	      if (currentSelectedRange.includesRange(mergedRange) && (mergedRange.includes(nextPosition) || withinRowspan || withinColspan)) {
	        if (withinRowspan) {
	          if (newDelta.row < 0) {
	            newDelta.row -= currentMerge.rowspan - 1;
	          } else if (newDelta.row > 0) {
	            newDelta.row += currentMerge.rowspan - 1;
	          }
	        }
	        if (withinColspan) {
	          if (newDelta.col < 0) {
	            newDelta.col -= currentMerge.colspan - 1;
	          } else if (newDelta.col > 0) {
	            newDelta.col += currentMerge.colspan - 1;
	          }
	        }
	      }
	    }
	  }
	  if (newDelta.row !== 0) {
	    delta.row = newDelta.row;
	  }
	  if (newDelta.col !== 0) {
	    delta.col = newDelta.col;
	  }
	};
	MergeCells.prototype.shiftCollection = function(direction, index, count) {
	  var shiftVector = [0, 0];
	  switch (direction) {
	    case 'right':
	      shiftVector[0] += 1;
	      break;
	    case 'left':
	      shiftVector[0] -= 1;
	      break;
	    case 'down':
	      shiftVector[1] += 1;
	      break;
	    case 'up':
	      shiftVector[1] -= 1;
	      break;
	  }
	  for (var i = 0; i < this.mergedCellInfoCollection.length; i++) {
	    var currentMerge = this.mergedCellInfoCollection[i];
	    if (direction === 'right' || direction === 'left') {
	      if (index <= currentMerge.col) {
	        currentMerge.col += shiftVector[0];
	      }
	    } else {
	      if (index <= currentMerge.row) {
	        currentMerge.row += shiftVector[1];
	      }
	    }
	  }
	};
	var beforeInit = function() {
	  var instance = this;
	  var mergeCellsSetting = instance.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    if (!instance.mergeCells) {
	      instance.mergeCells = new MergeCells(mergeCellsSetting);
	    }
	  }
	};
	var afterInit = function() {
	  var instance = this;
	  if (instance.mergeCells) {
	    instance.view.wt.wtTable.getCell = function(coords) {
	      if (instance.getSettings().mergeCells) {
	        var mergeParent = instance.mergeCells.mergedCellInfoCollection.getInfo(coords.row, coords.col);
	        if (mergeParent) {
	          coords = mergeParent;
	        }
	      }
	      return WalkontableTable.prototype.getCell.call(this, coords);
	    };
	  }
	};
	var afterUpdateSettings = function() {
	  var instance = this;
	  var mergeCellsSetting = instance.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    if (instance.mergeCells) {
	      instance.mergeCells.mergedCellInfoCollection = new CellInfoCollection();
	      if (Array.isArray(mergeCellsSetting)) {
	        for (var i = 0,
	            ilen = mergeCellsSetting.length; i < ilen; i++) {
	          instance.mergeCells.mergedCellInfoCollection.setInfo(mergeCellsSetting[i]);
	        }
	      }
	    } else {
	      instance.mergeCells = new MergeCells(mergeCellsSetting);
	    }
	  } else {
	    if (instance.mergeCells) {
	      instance.mergeCells.mergedCellInfoCollection = new CellInfoCollection();
	    }
	  }
	};
	var onBeforeKeyDown = function(event) {
	  if (!this.mergeCells) {
	    return;
	  }
	  var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	  if (ctrlDown) {
	    if (event.keyCode === 77) {
	      this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange());
	      this.render();
	      stopImmediatePropagation(event);
	    }
	  }
	};
	var addMergeActionsToContextMenu = function(defaultOptions) {
	  if (!this.getSettings().mergeCells) {
	    return;
	  }
	  defaultOptions.items.push(Handsontable.plugins.ContextMenu.SEPARATOR);
	  defaultOptions.items.push({
	    key: 'mergeCells',
	    name: function() {
	      var sel = this.getSelected();
	      var info = this.mergeCells.mergedCellInfoCollection.getInfo(sel[0], sel[1]);
	      if (info) {
	        return 'Unmerge cells';
	      } else {
	        return 'Merge cells';
	      }
	    },
	    callback: function() {
	      this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange());
	      this.render();
	    },
	    disabled: function() {
	      return false;
	    }
	  });
	};
	var afterRenderer = function(TD, row, col, prop, value, cellProperties) {
	  if (this.mergeCells) {
	    this.mergeCells.applySpanProperties(TD, row, col);
	  }
	};
	var modifyTransformFactory = function(hook) {
	  return function(delta) {
	    var mergeCellsSetting = this.getSettings().mergeCells;
	    if (mergeCellsSetting) {
	      var currentSelectedRange = this.getSelectedRange();
	      this.mergeCells.modifyTransform(hook, currentSelectedRange, delta);
	      if (hook === 'modifyTransformEnd') {
	        var totalRows = this.countRows();
	        var totalCols = this.countCols();
	        if (currentSelectedRange.from.row < 0) {
	          currentSelectedRange.from.row = 0;
	        } else if (currentSelectedRange.from.row > 0 && currentSelectedRange.from.row >= totalRows) {
	          currentSelectedRange.from.row = currentSelectedRange.from - 1;
	        }
	        if (currentSelectedRange.from.col < 0) {
	          currentSelectedRange.from.col = 0;
	        } else if (currentSelectedRange.from.col > 0 && currentSelectedRange.from.col >= totalCols) {
	          currentSelectedRange.from.col = totalCols - 1;
	        }
	      }
	    }
	  };
	};
	var beforeSetRangeEnd = function(coords) {
	  this.lastDesiredCoords = null;
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var selRange = this.getSelectedRange();
	    selRange.highlight = new WalkontableCellCoords(selRange.highlight.row, selRange.highlight.col);
	    selRange.to = coords;
	    var rangeExpanded = false;
	    do {
	      rangeExpanded = false;
	      for (var i = 0,
	          ilen = this.mergeCells.mergedCellInfoCollection.length; i < ilen; i++) {
	        var cellInfo = this.mergeCells.mergedCellInfoCollection[i];
	        var mergedCellTopLeft = new WalkontableCellCoords(cellInfo.row, cellInfo.col);
	        var mergedCellBottomRight = new WalkontableCellCoords(cellInfo.row + cellInfo.rowspan - 1, cellInfo.col + cellInfo.colspan - 1);
	        var mergedCellRange = new WalkontableCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);
	        if (selRange.expandByRange(mergedCellRange)) {
	          coords.row = selRange.to.row;
	          coords.col = selRange.to.col;
	          rangeExpanded = true;
	        }
	      }
	    } while (rangeExpanded);
	  }
	};
	var beforeDrawAreaBorders = function(corners, className) {
	  if (className && className == 'area') {
	    var mergeCellsSetting = this.getSettings().mergeCells;
	    if (mergeCellsSetting) {
	      var selRange = this.getSelectedRange();
	      var startRange = new WalkontableCellRange(selRange.from, selRange.from, selRange.from);
	      var stopRange = new WalkontableCellRange(selRange.to, selRange.to, selRange.to);
	      for (var i = 0,
	          ilen = this.mergeCells.mergedCellInfoCollection.length; i < ilen; i++) {
	        var cellInfo = this.mergeCells.mergedCellInfoCollection[i];
	        var mergedCellTopLeft = new WalkontableCellCoords(cellInfo.row, cellInfo.col);
	        var mergedCellBottomRight = new WalkontableCellCoords(cellInfo.row + cellInfo.rowspan - 1, cellInfo.col + cellInfo.colspan - 1);
	        var mergedCellRange = new WalkontableCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);
	        if (startRange.expandByRange(mergedCellRange)) {
	          corners[0] = startRange.from.row;
	          corners[1] = startRange.from.col;
	        }
	        if (stopRange.expandByRange(mergedCellRange)) {
	          corners[2] = stopRange.from.row;
	          corners[3] = stopRange.from.col;
	        }
	      }
	    }
	  }
	};
	var afterGetCellMeta = function(row, col, cellProperties) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(row, col);
	    if (mergeParent && (mergeParent.row != row || mergeParent.col != col)) {
	      cellProperties.copyable = false;
	    }
	  }
	};
	var afterViewportRowCalculatorOverride = function(calc) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var colCount = this.countCols();
	    var mergeParent;
	    for (var c = 0; c < colCount; c++) {
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(calc.startRow, c);
	      if (mergeParent) {
	        if (mergeParent.row < calc.startRow) {
	          calc.startRow = mergeParent.row;
	          return afterViewportRowCalculatorOverride.call(this, calc);
	        }
	      }
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(calc.endRow, c);
	      if (mergeParent) {
	        var mergeEnd = mergeParent.row + mergeParent.rowspan - 1;
	        if (mergeEnd > calc.endRow) {
	          calc.endRow = mergeEnd;
	          return afterViewportRowCalculatorOverride.call(this, calc);
	        }
	      }
	    }
	  }
	};
	var afterViewportColumnCalculatorOverride = function(calc) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (mergeCellsSetting) {
	    var rowCount = this.countRows();
	    var mergeParent;
	    for (var r = 0; r < rowCount; r++) {
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(r, calc.startColumn);
	      if (mergeParent) {
	        if (mergeParent.col < calc.startColumn) {
	          calc.startColumn = mergeParent.col;
	          return afterViewportColumnCalculatorOverride.call(this, calc);
	        }
	      }
	      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(r, calc.endColumn);
	      if (mergeParent) {
	        var mergeEnd = mergeParent.col + mergeParent.colspan - 1;
	        if (mergeEnd > calc.endColumn) {
	          calc.endColumn = mergeEnd;
	          return afterViewportColumnCalculatorOverride.call(this, calc);
	        }
	      }
	    }
	  }
	};
	var isMultipleSelection = function(isMultiple) {
	  if (isMultiple && this.mergeCells) {
	    var mergedCells = this.mergeCells.mergedCellInfoCollection,
	        selectionRange = this.getSelectedRange();
	    for (var group in mergedCells) {
	      if (selectionRange.highlight.row == mergedCells[group].row && selectionRange.highlight.col == mergedCells[group].col && selectionRange.to.row == mergedCells[group].row + mergedCells[group].rowspan - 1 && selectionRange.to.col == mergedCells[group].col + mergedCells[group].colspan - 1) {
	        return false;
	      }
	    }
	  }
	  return isMultiple;
	};
	function afterAutofillApplyValues(select, drag) {
	  var mergeCellsSetting = this.getSettings().mergeCells;
	  if (!mergeCellsSetting || this.selection.isMultiple()) {
	    return;
	  }
	  var info = this.mergeCells.mergedCellInfoCollection.getInfo(select[0], select[1]);
	  if (info) {
	    select[0] = info.row;
	    select[1] = info.col;
	    select[2] = info.row + info.rowspan - 1;
	    select[3] = info.col + info.colspan - 1;
	  }
	}
	function onAfterCreateCol(col, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('right', col, count);
	  }
	}
	function onAfterRemoveCol(col, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('left', col, count);
	  }
	}
	function onAfterCreateRow(row, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('down', row, count);
	  }
	}
	function onAfterRemoveRow(row, count) {
	  if (this.mergeCells) {
	    this.mergeCells.shiftCollection('up', row, count);
	  }
	}
	Handsontable.hooks.add('beforeInit', beforeInit);
	Handsontable.hooks.add('afterInit', afterInit);
	Handsontable.hooks.add('afterUpdateSettings', afterUpdateSettings);
	Handsontable.hooks.add('beforeKeyDown', onBeforeKeyDown);
	Handsontable.hooks.add('modifyTransformStart', modifyTransformFactory('modifyTransformStart'));
	Handsontable.hooks.add('modifyTransformEnd', modifyTransformFactory('modifyTransformEnd'));
	Handsontable.hooks.add('beforeSetRangeEnd', beforeSetRangeEnd);
	Handsontable.hooks.add('beforeDrawBorders', beforeDrawAreaBorders);
	Handsontable.hooks.add('afterIsMultipleSelection', isMultipleSelection);
	Handsontable.hooks.add('afterRenderer', afterRenderer);
	Handsontable.hooks.add('afterContextMenuDefaultOptions', addMergeActionsToContextMenu);
	Handsontable.hooks.add('afterGetCellMeta', afterGetCellMeta);
	Handsontable.hooks.add('afterViewportRowCalculatorOverride', afterViewportRowCalculatorOverride);
	Handsontable.hooks.add('afterViewportColumnCalculatorOverride', afterViewportColumnCalculatorOverride);
	Handsontable.hooks.add('afterAutofillApplyValues', afterAutofillApplyValues);
	Handsontable.hooks.add('afterCreateCol', onAfterCreateCol);
	Handsontable.hooks.add('afterRemoveCol', onAfterRemoveCol);
	Handsontable.hooks.add('afterCreateRow', onAfterCreateRow);
	Handsontable.hooks.add('afterRemoveRow', onAfterRemoveRow);
	Handsontable.MergeCells = MergeCells;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/table":20,"helpers/dom/event":46,"plugins":57}],82:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  MultipleSelectionHandles: {get: function() {
	      return MultipleSelectionHandles;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_eventManager__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    getWindowScrollTop = $__0.getWindowScrollTop,
	    hasClass = $__0.hasClass,
	    getWindowScrollLeft = $__0.getWindowScrollLeft;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var EventManager = ($___46__46__47__46__46__47_eventManager__ = require("eventManager"), $___46__46__47__46__46__47_eventManager__ && $___46__46__47__46__46__47_eventManager__.__esModule && $___46__46__47__46__46__47_eventManager__ || {default: $___46__46__47__46__46__47_eventManager__}).EventManager;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var MultipleSelectionHandles = function MultipleSelectionHandles(hotInstance) {
	  $traceurRuntime.superConstructor($MultipleSelectionHandles).call(this, hotInstance);
	  this.dragged = [];
	  this.eventManager = null;
	  this.lastSetCell = null;
	};
	var $MultipleSelectionHandles = MultipleSelectionHandles;
	($traceurRuntime.createClass)(MultipleSelectionHandles, {
	  isEnabled: function() {
	    return Handsontable.mobileBrowser;
	  },
	  enablePlugin: function() {
	    if (this.enabled) {
	      return;
	    }
	    if (!this.eventManager) {
	      this.eventManager = new EventManager(this);
	    }
	    this.registerListeners();
	    $traceurRuntime.superGet(this, $MultipleSelectionHandles.prototype, "enablePlugin").call(this);
	  },
	  registerListeners: function() {
	    var _this = this;
	    function removeFromDragged(query) {
	      if (_this.dragged.length === 1) {
	        _this.dragged.splice(0, _this.dragged.length);
	        return true;
	      }
	      var entryPosition = _this.dragged.indexOf(query);
	      if (entryPosition == -1) {
	        return false;
	      } else if (entryPosition === 0) {
	        _this.dragged = _this.dragged.slice(0, 1);
	      } else if (entryPosition == 1) {
	        _this.dragged = _this.dragged.slice(-1);
	      }
	    }
	    this.eventManager.addEventListener(this.hot.rootElement, 'touchstart', function(event) {
	      var selectedRange;
	      if (hasClass(event.target, 'topLeftSelectionHandle-HitArea')) {
	        selectedRange = _this.hot.getSelectedRange();
	        _this.dragged.push('topLeft');
	        _this.touchStartRange = {
	          width: selectedRange.getWidth(),
	          height: selectedRange.getHeight(),
	          direction: selectedRange.getDirection()
	        };
	        event.preventDefault();
	        return false;
	      } else if (hasClass(event.target, 'bottomRightSelectionHandle-HitArea')) {
	        selectedRange = _this.hot.getSelectedRange();
	        _this.dragged.push('bottomRight');
	        _this.touchStartRange = {
	          width: selectedRange.getWidth(),
	          height: selectedRange.getHeight(),
	          direction: selectedRange.getDirection()
	        };
	        event.preventDefault();
	        return false;
	      }
	    });
	    this.eventManager.addEventListener(this.hot.rootElement, 'touchend', function(event) {
	      if (hasClass(event.target, 'topLeftSelectionHandle-HitArea')) {
	        removeFromDragged.call(_this, 'topLeft');
	        _this.touchStartRange = void 0;
	        event.preventDefault();
	        return false;
	      } else if (hasClass(event.target, 'bottomRightSelectionHandle-HitArea')) {
	        removeFromDragged.call(_this, 'bottomRight');
	        _this.touchStartRange = void 0;
	        event.preventDefault();
	        return false;
	      }
	    });
	    this.eventManager.addEventListener(this.hot.rootElement, 'touchmove', function(event) {
	      var scrollTop = getWindowScrollTop(),
	          scrollLeft = getWindowScrollLeft(),
	          endTarget,
	          targetCoords,
	          selectedRange,
	          rangeWidth,
	          rangeHeight,
	          rangeDirection,
	          newRangeCoords;
	      if (_this.dragged.length === 0) {
	        return;
	      }
	      endTarget = document.elementFromPoint(event.touches[0].screenX - scrollLeft, event.touches[0].screenY - scrollTop);
	      if (!endTarget || endTarget === _this.lastSetCell) {
	        return;
	      }
	      if (endTarget.nodeName == 'TD' || endTarget.nodeName == 'TH') {
	        targetCoords = _this.hot.getCoords(endTarget);
	        if (targetCoords.col == -1) {
	          targetCoords.col = 0;
	        }
	        selectedRange = _this.hot.getSelectedRange();
	        rangeWidth = selectedRange.getWidth();
	        rangeHeight = selectedRange.getHeight();
	        rangeDirection = selectedRange.getDirection();
	        if (rangeWidth == 1 && rangeHeight == 1) {
	          _this.hot.selection.setRangeEnd(targetCoords);
	        }
	        newRangeCoords = _this.getCurrentRangeCoords(selectedRange, targetCoords, _this.touchStartRange.direction, rangeDirection, _this.dragged[0]);
	        if (newRangeCoords.start !== null) {
	          _this.hot.selection.setRangeStart(newRangeCoords.start);
	        }
	        _this.hot.selection.setRangeEnd(newRangeCoords.end);
	        _this.lastSetCell = endTarget;
	      }
	      event.preventDefault();
	    });
	  },
	  getCurrentRangeCoords: function(selectedRange, currentTouch, touchStartDirection, currentDirection, draggedHandle) {
	    var topLeftCorner = selectedRange.getTopLeftCorner(),
	        bottomRightCorner = selectedRange.getBottomRightCorner(),
	        bottomLeftCorner = selectedRange.getBottomLeftCorner(),
	        topRightCorner = selectedRange.getTopRightCorner();
	    var newCoords = {
	      start: null,
	      end: null
	    };
	    switch (touchStartDirection) {
	      case 'NE-SW':
	        switch (currentDirection) {
	          case 'NE-SW':
	          case 'NW-SE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, selectedRange.highlight.col),
	                end: new WalkontableCellCoords(bottomLeftCorner.row, currentTouch.col)
	              };
	            } else {
	              newCoords = {
	                start: new WalkontableCellCoords(selectedRange.highlight.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col)
	              };
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'bottomRight') {
	              newCoords = {
	                start: new WalkontableCellCoords(bottomRightCorner.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col)
	              };
	            }
	            break;
	        }
	        break;
	      case 'NW-SE':
	        switch (currentDirection) {
	          case 'NE-SW':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: bottomLeftCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'NW-SE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: bottomRightCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: topLeftCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'SW-NE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: currentTouch,
	                end: topRightCorner
	              };
	            } else {
	              newCoords.end = currentTouch;
	            }
	            break;
	        }
	        break;
	      case 'SW-NE':
	        switch (currentDirection) {
	          case 'NW-SE':
	            if (draggedHandle == 'bottomRight') {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col),
	                end: new WalkontableCellCoords(bottomLeftCorner.row, currentTouch.col)
	              };
	            } else {
	              newCoords = {
	                start: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, bottomRightCorner.col)
	              };
	            }
	            break;
	          case 'SW-NE':
	            if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: new WalkontableCellCoords(selectedRange.highlight.row, currentTouch.col),
	                end: new WalkontableCellCoords(currentTouch.row, bottomRightCorner.col)
	              };
	            } else {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col),
	                end: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col)
	              };
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'bottomRight') {
	              newCoords = {
	                start: new WalkontableCellCoords(currentTouch.row, topRightCorner.col),
	                end: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col)
	              };
	            } else if (draggedHandle == 'topLeft') {
	              newCoords = {
	                start: bottomLeftCorner,
	                end: currentTouch
	              };
	            }
	            break;
	        }
	        break;
	      case 'SE-NW':
	        switch (currentDirection) {
	          case 'NW-SE':
	          case 'NE-SW':
	          case 'SW-NE':
	            if (draggedHandle == 'topLeft') {
	              newCoords.end = currentTouch;
	            }
	            break;
	          case 'SE-NW':
	            if (draggedHandle == 'topLeft') {
	              newCoords.end = currentTouch;
	            } else {
	              newCoords = {
	                start: currentTouch,
	                end: topLeftCorner
	              };
	            }
	            break;
	        }
	        break;
	    }
	    return newCoords;
	  },
	  isDragged: function() {
	    return this.dragged.length > 0;
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('multipleSelectionHandles', MultipleSelectionHandles);

	//# 
	},{"_base":58,"eventManager":41,"helpers/dom/element":45,"plugins":57}],83:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  ObserveChanges: {get: function() {
	      return ObserveChanges;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_plugins__,
	    $__jsonpatch__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var jsonpatch = ($__jsonpatch__ = require("jsonpatch"), $__jsonpatch__ && $__jsonpatch__.__esModule && $__jsonpatch__ || {default: $__jsonpatch__}).default;
	;
	function ObserveChanges() {}
	Handsontable.hooks.add('afterLoadData', init);
	Handsontable.hooks.add('afterUpdateSettings', init);
	Handsontable.hooks.register('afterChangesObserved');
	function init() {
	  var instance = this;
	  var pluginEnabled = instance.getSettings().observeChanges;
	  if (pluginEnabled) {
	    if (instance.observer) {
	      destroy.call(instance);
	    }
	    createObserver.call(instance);
	    bindEvents.call(instance);
	  } else if (!pluginEnabled) {
	    destroy.call(instance);
	  }
	}
	function createObserver() {
	  var instance = this;
	  instance.observeChangesActive = true;
	  instance.pauseObservingChanges = function() {
	    instance.observeChangesActive = false;
	  };
	  instance.resumeObservingChanges = function() {
	    instance.observeChangesActive = true;
	  };
	  instance.observedData = instance.getSourceData();
	  instance.observer = jsonpatch.observe(instance.observedData, function(patches) {
	    if (instance.observeChangesActive) {
	      runHookForOperation.call(instance, patches);
	      instance.render();
	    }
	    instance.runHooks('afterChangesObserved');
	  });
	}
	function runHookForOperation(rawPatches) {
	  var instance = this;
	  var patches = cleanPatches(rawPatches);
	  for (var i = 0,
	      len = patches.length; i < len; i++) {
	    var patch = patches[i];
	    var parsedPath = parsePath(patch.path);
	    switch (patch.op) {
	      case 'add':
	        if (isNaN(parsedPath.col)) {
	          instance.runHooks('afterCreateRow', parsedPath.row);
	        } else {
	          instance.runHooks('afterCreateCol', parsedPath.col);
	        }
	        break;
	      case 'remove':
	        if (isNaN(parsedPath.col)) {
	          instance.runHooks('afterRemoveRow', parsedPath.row, 1);
	        } else {
	          instance.runHooks('afterRemoveCol', parsedPath.col, 1);
	        }
	        break;
	      case 'replace':
	        instance.runHooks('afterChange', [parsedPath.row, parsedPath.col, null, patch.value], 'external');
	        break;
	    }
	  }
	  function cleanPatches(rawPatches) {
	    var patches;
	    patches = removeLengthRelatedPatches(rawPatches);
	    patches = removeMultipleAddOrRemoveColPatches(patches);
	    return patches;
	  }
	  function removeMultipleAddOrRemoveColPatches(rawPatches) {
	    var newOrRemovedColumns = [];
	    return rawPatches.filter(function(patch) {
	      var parsedPath = parsePath(patch.path);
	      if (['add', 'remove'].indexOf(patch.op) != -1 && !isNaN(parsedPath.col)) {
	        if (newOrRemovedColumns.indexOf(parsedPath.col) != -1) {
	          return false;
	        } else {
	          newOrRemovedColumns.push(parsedPath.col);
	        }
	      }
	      return true;
	    });
	  }
	  function removeLengthRelatedPatches(rawPatches) {
	    return rawPatches.filter(function(patch) {
	      return !/[/]length/ig.test(patch.path);
	    });
	  }
	  function parsePath(path) {
	    var match = path.match(/^\/(\d+)\/?(.*)?$/);
	    return {
	      row: parseInt(match[1], 10),
	      col: /^\d*$/.test(match[2]) ? parseInt(match[2], 10) : match[2]
	    };
	  }
	}
	function destroy() {
	  var instance = this;
	  if (instance.observer) {
	    destroyObserver.call(instance);
	    unbindEvents.call(instance);
	  }
	}
	function destroyObserver() {
	  var instance = this;
	  jsonpatch.unobserve(instance.observedData, instance.observer);
	  delete instance.observedData;
	  delete instance.observeChangesActive;
	  delete instance.pauseObservingChanges;
	  delete instance.resumeObservingChanges;
	}
	function bindEvents() {
	  var instance = this;
	  instance.addHook('afterDestroy', destroy);
	  instance.addHook('afterCreateRow', afterTableAlter);
	  instance.addHook('afterRemoveRow', afterTableAlter);
	  instance.addHook('afterCreateCol', afterTableAlter);
	  instance.addHook('afterRemoveCol', afterTableAlter);
	  instance.addHook('afterChange', function(changes, source) {
	    if (source != 'loadData') {
	      afterTableAlter.call(this);
	    }
	  });
	}
	function unbindEvents() {
	  var instance = this;
	  instance.removeHook('afterDestroy', destroy);
	  instance.removeHook('afterCreateRow', afterTableAlter);
	  instance.removeHook('afterRemoveRow', afterTableAlter);
	  instance.removeHook('afterCreateCol', afterTableAlter);
	  instance.removeHook('afterRemoveCol', afterTableAlter);
	  instance.removeHook('afterChange', afterTableAlter);
	}
	function afterTableAlter() {
	  var instance = this;
	  instance.pauseObservingChanges();
	  instance.addHookOnce('afterChangesObserved', function() {
	    instance.resumeObservingChanges();
	  });
	}

	//# 
	},{"jsonpatch":"jsonpatch","plugins":57}],84:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  HandsontablePersistentState: {get: function() {
	      return HandsontablePersistentState;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_plugins__;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	;
	function Storage(prefix) {
	  var savedKeys;
	  var saveSavedKeys = function() {
	    window.localStorage[prefix + '__' + 'persistentStateKeys'] = JSON.stringify(savedKeys);
	  };
	  var loadSavedKeys = function() {
	    var keysJSON = window.localStorage[prefix + '__' + 'persistentStateKeys'];
	    var keys = typeof keysJSON == 'string' ? JSON.parse(keysJSON) : void 0;
	    savedKeys = keys ? keys : [];
	  };
	  var clearSavedKeys = function() {
	    savedKeys = [];
	    saveSavedKeys();
	  };
	  loadSavedKeys();
	  this.saveValue = function(key, value) {
	    window.localStorage[prefix + '_' + key] = JSON.stringify(value);
	    if (savedKeys.indexOf(key) == -1) {
	      savedKeys.push(key);
	      saveSavedKeys();
	    }
	  };
	  this.loadValue = function(key, defaultValue) {
	    key = typeof key === 'undefined' ? defaultValue : key;
	    var value = window.localStorage[prefix + '_' + key];
	    return typeof value == 'undefined' ? void 0 : JSON.parse(value);
	  };
	  this.reset = function(key) {
	    window.localStorage.removeItem(prefix + '_' + key);
	  };
	  this.resetAll = function() {
	    for (var index = 0; index < savedKeys.length; index++) {
	      window.localStorage.removeItem(prefix + '_' + savedKeys[index]);
	    }
	    clearSavedKeys();
	  };
	}
	function HandsontablePersistentState() {
	  var plugin = this;
	  this.init = function() {
	    var instance = this,
	        pluginSettings = instance.getSettings().persistentState;
	    plugin.enabled = !!(pluginSettings);
	    if (!plugin.enabled) {
	      removeHooks.call(instance);
	      return;
	    }
	    if (!instance.storage) {
	      instance.storage = new Storage(instance.rootElement.id);
	    }
	    instance.resetState = plugin.resetValue;
	    addHooks.call(instance);
	  };
	  this.saveValue = function(key, value) {
	    var instance = this;
	    instance.storage.saveValue(key, value);
	  };
	  this.loadValue = function(key, saveTo) {
	    var instance = this;
	    saveTo.value = instance.storage.loadValue(key);
	  };
	  this.resetValue = function(key) {
	    var instance = this;
	    if (typeof key === 'undefined') {
	      instance.storage.resetAll();
	    } else {
	      instance.storage.reset(key);
	    }
	  };
	  var hooks = {
	    persistentStateSave: plugin.saveValue,
	    persistentStateLoad: plugin.loadValue,
	    persistentStateReset: plugin.resetValue
	  };
	  for (var hookName in hooks) {
	    if (hooks.hasOwnProperty(hookName)) {
	      Handsontable.hooks.register(hookName);
	    }
	  }
	  function addHooks() {
	    var instance = this;
	    for (var hookName in hooks) {
	      if (hooks.hasOwnProperty(hookName)) {
	        instance.addHook(hookName, hooks[hookName]);
	      }
	    }
	  }
	  function removeHooks() {
	    var instance = this;
	    for (var hookName in hooks) {
	      if (hooks.hasOwnProperty(hookName)) {
	        instance.removeHook(hookName, hooks[hookName]);
	      }
	    }
	  }
	}
	var htPersistentState = new HandsontablePersistentState();
	Handsontable.hooks.add('beforeInit', htPersistentState.init);
	Handsontable.hooks.add('afterUpdateSettings', htPersistentState.init);

	//# 
	},{"plugins":57}],85:[function(require,module,exports){
	"use strict";
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__46__46__47_renderers__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    removeClass = $__0.removeClass;
	var $__1 = ($___46__46__47__46__46__47_renderers__ = require("renderers"), $___46__46__47__46__46__47_renderers__ && $___46__46__47__46__46__47_renderers__.__esModule && $___46__46__47__46__46__47_renderers__ || {default: $___46__46__47__46__46__47_renderers__}),
	    registerRenderer = $__1.registerRenderer,
	    getRenderer = $__1.getRenderer;
	Handsontable.Search = function Search(instance) {
	  this.query = function(queryStr, callback, queryMethod) {
	    var rowCount = instance.countRows();
	    var colCount = instance.countCols();
	    var queryResult = [];
	    if (!callback) {
	      callback = Handsontable.Search.global.getDefaultCallback();
	    }
	    if (!queryMethod) {
	      queryMethod = Handsontable.Search.global.getDefaultQueryMethod();
	    }
	    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
	      for (var colIndex = 0; colIndex < colCount; colIndex++) {
	        var cellData = instance.getDataAtCell(rowIndex, colIndex);
	        var cellProperties = instance.getCellMeta(rowIndex, colIndex);
	        var cellCallback = cellProperties.search.callback || callback;
	        var cellQueryMethod = cellProperties.search.queryMethod || queryMethod;
	        var testResult = cellQueryMethod(queryStr, cellData);
	        if (testResult) {
	          var singleResult = {
	            row: rowIndex,
	            col: colIndex,
	            data: cellData
	          };
	          queryResult.push(singleResult);
	        }
	        if (cellCallback) {
	          cellCallback(instance, rowIndex, colIndex, cellData, testResult);
	        }
	      }
	    }
	    return queryResult;
	  };
	};
	Handsontable.Search.DEFAULT_CALLBACK = function(instance, row, col, data, testResult) {
	  instance.getCellMeta(row, col).isSearchResult = testResult;
	};
	Handsontable.Search.DEFAULT_QUERY_METHOD = function(query, value) {
	  if (typeof query == 'undefined' || query == null || !query.toLowerCase || query.length === 0) {
	    return false;
	  }
	  if (typeof value == 'undefined' || value == null) {
	    return false;
	  }
	  return value.toString().toLowerCase().indexOf(query.toLowerCase()) != -1;
	};
	Handsontable.Search.DEFAULT_SEARCH_RESULT_CLASS = 'htSearchResult';
	Handsontable.Search.global = (function() {
	  var defaultCallback = Handsontable.Search.DEFAULT_CALLBACK;
	  var defaultQueryMethod = Handsontable.Search.DEFAULT_QUERY_METHOD;
	  var defaultSearchResultClass = Handsontable.Search.DEFAULT_SEARCH_RESULT_CLASS;
	  return {
	    getDefaultCallback: function() {
	      return defaultCallback;
	    },
	    setDefaultCallback: function(newDefaultCallback) {
	      defaultCallback = newDefaultCallback;
	    },
	    getDefaultQueryMethod: function() {
	      return defaultQueryMethod;
	    },
	    setDefaultQueryMethod: function(newDefaultQueryMethod) {
	      defaultQueryMethod = newDefaultQueryMethod;
	    },
	    getDefaultSearchResultClass: function() {
	      return defaultSearchResultClass;
	    },
	    setDefaultSearchResultClass: function(newSearchResultClass) {
	      defaultSearchResultClass = newSearchResultClass;
	    }
	  };
	})();
	Handsontable.SearchCellDecorator = function(instance, TD, row, col, prop, value, cellProperties) {
	  var searchResultClass = (cellProperties.search !== null && typeof cellProperties.search == 'object' && cellProperties.search.searchResultClass) || Handsontable.Search.global.getDefaultSearchResultClass();
	  if (cellProperties.isSearchResult) {
	    addClass(TD, searchResultClass);
	  } else {
	    removeClass(TD, searchResultClass);
	  }
	};
	var originalBaseRenderer = getRenderer('base');
	registerRenderer('base', function(instance, TD, row, col, prop, value, cellProperties) {
	  originalBaseRenderer.apply(this, arguments);
	  Handsontable.SearchCellDecorator.apply(this, arguments);
	});
	function init() {
	  var instance = this;
	  var pluginEnabled = !!instance.getSettings().search;
	  if (pluginEnabled) {
	    instance.search = new Handsontable.Search(instance);
	  } else {
	    delete instance.search;
	  }
	}
	Handsontable.hooks.add('afterInit', init);
	Handsontable.hooks.add('afterUpdateSettings', init);

	//# 
	},{"helpers/dom/element":45,"renderers":88}],86:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  TouchScroll: {get: function() {
	      return TouchScroll;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47__46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47__95_base__,
	    $___46__46__47__46__46__47_plugins__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47__46__46__47_helpers_47_dom_47_element__ && $___46__46__47__46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    removeClass = $__0.removeClass;
	var BasePlugin = ($___46__46__47__95_base__ = require("_base"), $___46__46__47__95_base__ && $___46__46__47__95_base__.__esModule && $___46__46__47__95_base__ || {default: $___46__46__47__95_base__}).default;
	var registerPlugin = ($___46__46__47__46__46__47_plugins__ = require("plugins"), $___46__46__47__46__46__47_plugins__ && $___46__46__47__46__46__47_plugins__.__esModule && $___46__46__47__46__46__47_plugins__ || {default: $___46__46__47__46__46__47_plugins__}).registerPlugin;
	var TouchScroll = function TouchScroll(hotInstance) {
	  var $__3 = this;
	  $traceurRuntime.superConstructor($TouchScroll).call(this, hotInstance);
	  this.hot.addHook('afterInit', (function() {
	    return $__3.afterInit();
	  }));
	  this.hot.addHook('afterUpdateSettings', (function() {
	    return $__3.onAfterUpdateSettings();
	  }));
	  this.scrollbars = [];
	  this.clones = [];
	};
	var $TouchScroll = TouchScroll;
	($traceurRuntime.createClass)(TouchScroll, {
	  afterInit: function() {
	    this.registerEvents();
	    this.onAfterUpdateSettings();
	  },
	  onAfterUpdateSettings: function() {
	    var _this = this;
	    this.hot.addHookOnce('afterRender', function() {
	      var wtOverlays = _this.hot.view.wt.wtOverlays;
	      _this.scrollbars = [];
	      _this.scrollbars.push(wtOverlays.topOverlay);
	      if (wtOverlays.bottomOverlay.clone) {
	        _this.scrollbars.push(wtOverlays.bottomOverlay);
	      }
	      _this.scrollbars.push(wtOverlays.leftOverlay);
	      if (wtOverlays.topLeftCornerOverlay) {
	        _this.scrollbars.push(wtOverlays.topLeftCornerOverlay);
	      }
	      if (wtOverlays.bottomLeftCornerOverlay && wtOverlays.bottomLeftCornerOverlay.clone) {
	        _this.scrollbars.push(wtOverlays.bottomLeftCornerOverlay);
	      }
	      _this.clones = [];
	      if (wtOverlays.topOverlay.needFullRender) {
	        _this.clones.push(wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.bottomOverlay.needFullRender) {
	        _this.clones.push(wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.leftOverlay.needFullRender) {
	        _this.clones.push(wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.topLeftCornerOverlay) {
	        _this.clones.push(wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (wtOverlays.bottomLeftCornerOverlay && wtOverlays.bottomLeftCornerOverlay.clone) {
	        _this.clones.push(wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      }
	    });
	  },
	  registerEvents: function() {
	    var $__3 = this;
	    this.hot.addHook('beforeTouchScroll', (function() {
	      return $__3.onBeforeTouchScroll();
	    }));
	    this.hot.addHook('afterMomentumScroll', (function() {
	      return $__3.onAfterMomentumScroll();
	    }));
	  },
	  onBeforeTouchScroll: function() {
	    Handsontable.freezeOverlays = true;
	    for (var i = 0,
	        cloneCount = this.clones.length; i < cloneCount; i++) {
	      addClass(this.clones[i], 'hide-tween');
	    }
	  },
	  onAfterMomentumScroll: function() {
	    Handsontable.freezeOverlays = false;
	    var _that = this;
	    for (var i = 0,
	        cloneCount = this.clones.length; i < cloneCount; i++) {
	      removeClass(this.clones[i], 'hide-tween');
	    }
	    for (var i$__5 = 0,
	        cloneCount$__6 = this.clones.length; i$__5 < cloneCount$__6; i$__5++) {
	      addClass(this.clones[i$__5], 'show-tween');
	    }
	    setTimeout(function() {
	      for (var i = 0,
	          cloneCount = _that.clones.length; i < cloneCount; i++) {
	        removeClass(_that.clones[i], 'show-tween');
	      }
	    }, 400);
	    for (var i$__7 = 0,
	        cloneCount$__8 = this.scrollbars.length; i$__7 < cloneCount$__8; i$__7++) {
	      this.scrollbars[i$__7].refresh();
	      this.scrollbars[i$__7].resetFixedPosition();
	    }
	    this.hot.view.wt.wtOverlays.syncScrollWithMaster();
	  }
	}, {}, BasePlugin);
	;
	registerPlugin('touchScroll', TouchScroll);

	//# 
	},{"_base":58,"helpers/dom/element":45,"plugins":57}],87:[function(require,module,exports){
	"use strict";
	var $___46__46__47__46__46__47_helpers_47_object__,
	    $___46__46__47__46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47__46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47__46__46__47_helpers_47_object__ && $___46__46__47__46__46__47_helpers_47_object__.__esModule && $___46__46__47__46__46__47_helpers_47_object__ || {default: $___46__46__47__46__46__47_helpers_47_object__}),
	    inherit = $__0.inherit,
	    deepClone = $__0.deepClone;
	var stopImmediatePropagation = ($___46__46__47__46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47__46__46__47_helpers_47_dom_47_event__ && $___46__46__47__46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47__46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47__46__46__47_helpers_47_dom_47_event__}).stopImmediatePropagation;
	Handsontable.UndoRedo = function(instance) {
	  var plugin = this;
	  this.instance = instance;
	  this.doneActions = [];
	  this.undoneActions = [];
	  this.ignoreNewActions = false;
	  instance.addHook('afterChange', function(changes, origin) {
	    if (changes) {
	      var action = new Handsontable.UndoRedo.ChangeAction(changes);
	      plugin.done(action);
	    }
	  });
	  instance.addHook('afterCreateRow', function(index, amount, createdAutomatically) {
	    if (createdAutomatically) {
	      return;
	    }
	    var action = new Handsontable.UndoRedo.CreateRowAction(index, amount);
	    plugin.done(action);
	  });
	  instance.addHook('beforeRemoveRow', function(index, amount) {
	    var originalData = plugin.instance.getSourceData();
	    index = (originalData.length + index) % originalData.length;
	    var removedData = originalData.slice(index, index + amount);
	    var action = new Handsontable.UndoRedo.RemoveRowAction(index, removedData);
	    plugin.done(action);
	  });
	  instance.addHook('afterCreateCol', function(index, amount, createdAutomatically) {
	    if (createdAutomatically) {
	      return;
	    }
	    var action = new Handsontable.UndoRedo.CreateColumnAction(index, amount);
	    plugin.done(action);
	  });
	  instance.addHook('beforeRemoveCol', function(index, amount) {
	    var originalData = plugin.instance.getSourceData();
	    index = (plugin.instance.countCols() + index) % plugin.instance.countCols();
	    var removedData = [];
	    for (var i = 0,
	        len = originalData.length; i < len; i++) {
	      removedData[i] = originalData[i].slice(index, index + amount);
	    }
	    var headers;
	    if (Array.isArray(instance.getSettings().colHeaders)) {
	      headers = instance.getSettings().colHeaders.slice(index, index + removedData.length);
	    }
	    var action = new Handsontable.UndoRedo.RemoveColumnAction(index, removedData, headers);
	    plugin.done(action);
	  });
	  instance.addHook('beforeCellAlignment', function(stateBefore, range, type, alignment) {
	    var action = new Handsontable.UndoRedo.CellAlignmentAction(stateBefore, range, type, alignment);
	    plugin.done(action);
	  });
	};
	Handsontable.UndoRedo.prototype.done = function(action) {
	  if (!this.ignoreNewActions) {
	    this.doneActions.push(action);
	    this.undoneActions.length = 0;
	  }
	};
	Handsontable.UndoRedo.prototype.undo = function() {
	  if (this.isUndoAvailable()) {
	    var action = this.doneActions.pop();
	    this.ignoreNewActions = true;
	    var that = this;
	    action.undo(this.instance, function() {
	      that.ignoreNewActions = false;
	      that.undoneActions.push(action);
	    });
	  }
	};
	Handsontable.UndoRedo.prototype.redo = function() {
	  if (this.isRedoAvailable()) {
	    var action = this.undoneActions.pop();
	    this.ignoreNewActions = true;
	    var that = this;
	    action.redo(this.instance, function() {
	      that.ignoreNewActions = false;
	      that.doneActions.push(action);
	    });
	  }
	};
	Handsontable.UndoRedo.prototype.isUndoAvailable = function() {
	  return this.doneActions.length > 0;
	};
	Handsontable.UndoRedo.prototype.isRedoAvailable = function() {
	  return this.undoneActions.length > 0;
	};
	Handsontable.UndoRedo.prototype.clear = function() {
	  this.doneActions.length = 0;
	  this.undoneActions.length = 0;
	};
	Handsontable.UndoRedo.Action = function() {};
	Handsontable.UndoRedo.Action.prototype.undo = function() {};
	Handsontable.UndoRedo.Action.prototype.redo = function() {};
	Handsontable.UndoRedo.ChangeAction = function(changes) {
	  this.changes = changes;
	};
	inherit(Handsontable.UndoRedo.ChangeAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.ChangeAction.prototype.undo = function(instance, undoneCallback) {
	  var data = deepClone(this.changes),
	      emptyRowsAtTheEnd = instance.countEmptyRows(true),
	      emptyColsAtTheEnd = instance.countEmptyCols(true);
	  for (var i = 0,
	      len = data.length; i < len; i++) {
	    data[i].splice(3, 1);
	  }
	  instance.addHookOnce('afterChange', undoneCallback);
	  instance.setDataAtRowProp(data, null, null, 'undo');
	  for (var i = 0,
	      len = data.length; i < len; i++) {
	    if (instance.getSettings().minSpareRows && data[i][0] + 1 + instance.getSettings().minSpareRows === instance.countRows() && emptyRowsAtTheEnd == instance.getSettings().minSpareRows) {
	      instance.alter('remove_row', parseInt(data[i][0] + 1, 10), instance.getSettings().minSpareRows);
	      instance.undoRedo.doneActions.pop();
	    }
	    if (instance.getSettings().minSpareCols && data[i][1] + 1 + instance.getSettings().minSpareCols === instance.countCols() && emptyColsAtTheEnd == instance.getSettings().minSpareCols) {
	      instance.alter('remove_col', parseInt(data[i][1] + 1, 10), instance.getSettings().minSpareCols);
	      instance.undoRedo.doneActions.pop();
	    }
	  }
	};
	Handsontable.UndoRedo.ChangeAction.prototype.redo = function(instance, onFinishCallback) {
	  var data = deepClone(this.changes);
	  for (var i = 0,
	      len = data.length; i < len; i++) {
	    data[i].splice(2, 1);
	  }
	  instance.addHookOnce('afterChange', onFinishCallback);
	  instance.setDataAtRowProp(data, null, null, 'redo');
	};
	Handsontable.UndoRedo.CreateRowAction = function(index, amount) {
	  this.index = index;
	  this.amount = amount;
	};
	inherit(Handsontable.UndoRedo.CreateRowAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.CreateRowAction.prototype.undo = function(instance, undoneCallback) {
	  var rowCount = instance.countRows(),
	      minSpareRows = instance.getSettings().minSpareRows;
	  if (this.index >= rowCount && this.index - minSpareRows < rowCount) {
	    this.index -= minSpareRows;
	  }
	  instance.addHookOnce('afterRemoveRow', undoneCallback);
	  instance.alter('remove_row', this.index, this.amount);
	};
	Handsontable.UndoRedo.CreateRowAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterCreateRow', redoneCallback);
	  instance.alter('insert_row', this.index + 1, this.amount);
	};
	Handsontable.UndoRedo.RemoveRowAction = function(index, data) {
	  this.index = index;
	  this.data = data;
	};
	inherit(Handsontable.UndoRedo.RemoveRowAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.RemoveRowAction.prototype.undo = function(instance, undoneCallback) {
	  var spliceArgs = [this.index, 0];
	  Array.prototype.push.apply(spliceArgs, this.data);
	  Array.prototype.splice.apply(instance.getSourceData(), spliceArgs);
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.RemoveRowAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterRemoveRow', redoneCallback);
	  instance.alter('remove_row', this.index, this.data.length);
	};
	Handsontable.UndoRedo.CreateColumnAction = function(index, amount) {
	  this.index = index;
	  this.amount = amount;
	};
	inherit(Handsontable.UndoRedo.CreateColumnAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.CreateColumnAction.prototype.undo = function(instance, undoneCallback) {
	  instance.addHookOnce('afterRemoveCol', undoneCallback);
	  instance.alter('remove_col', this.index, this.amount);
	};
	Handsontable.UndoRedo.CreateColumnAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterCreateCol', redoneCallback);
	  instance.alter('insert_col', this.index + 1, this.amount);
	};
	Handsontable.UndoRedo.CellAlignmentAction = function(stateBefore, range, type, alignment) {
	  this.stateBefore = stateBefore;
	  this.range = range;
	  this.type = type;
	  this.alignment = alignment;
	};
	Handsontable.UndoRedo.CellAlignmentAction.prototype.undo = function(instance, undoneCallback) {
	  if (!instance.getPlugin('contextMenu').isEnabled()) {
	    return;
	  }
	  for (var row = this.range.from.row; row <= this.range.to.row; row++) {
	    for (var col = this.range.from.col; col <= this.range.to.col; col++) {
	      instance.setCellMeta(row, col, 'className', this.stateBefore[row][col] || ' htLeft');
	    }
	  }
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.CellAlignmentAction.prototype.redo = function(instance, undoneCallback) {
	  if (!instance.getPlugin('contextMenu').isEnabled()) {
	    return;
	  }
	  instance.selectCell(this.range.from.row, this.range.from.col, this.range.to.row, this.range.to.col);
	  instance.getPlugin('contextMenu').executeCommand('alignment:' + this.alignment.replace('ht', '').toLowerCase());
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.RemoveColumnAction = function(index, data, headers) {
	  this.index = index;
	  this.data = data;
	  this.amount = this.data[0].length;
	  this.headers = headers;
	};
	inherit(Handsontable.UndoRedo.RemoveColumnAction, Handsontable.UndoRedo.Action);
	Handsontable.UndoRedo.RemoveColumnAction.prototype.undo = function(instance, undoneCallback) {
	  var row,
	      spliceArgs;
	  for (var i = 0,
	      len = instance.getSourceData().length; i < len; i++) {
	    row = instance.getSourceDataAtRow(i);
	    spliceArgs = [this.index, 0];
	    Array.prototype.push.apply(spliceArgs, this.data[i]);
	    Array.prototype.splice.apply(row, spliceArgs);
	  }
	  if (typeof this.headers != 'undefined') {
	    spliceArgs = [this.index, 0];
	    Array.prototype.push.apply(spliceArgs, this.headers);
	    Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArgs);
	  }
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	Handsontable.UndoRedo.RemoveColumnAction.prototype.redo = function(instance, redoneCallback) {
	  instance.addHookOnce('afterRemoveCol', redoneCallback);
	  instance.alter('remove_col', this.index, this.amount);
	};
	function init() {
	  var instance = this;
	  var pluginEnabled = typeof instance.getSettings().undo == 'undefined' || instance.getSettings().undo;
	  if (pluginEnabled) {
	    if (!instance.undoRedo) {
	      instance.undoRedo = new Handsontable.UndoRedo(instance);
	      exposeUndoRedoMethods(instance);
	      instance.addHook('beforeKeyDown', onBeforeKeyDown);
	      instance.addHook('afterChange', onAfterChange);
	    }
	  } else {
	    if (instance.undoRedo) {
	      delete instance.undoRedo;
	      removeExposedUndoRedoMethods(instance);
	      instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	      instance.removeHook('afterChange', onAfterChange);
	    }
	  }
	}
	function onBeforeKeyDown(event) {
	  var instance = this;
	  var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	  if (ctrlDown) {
	    if (event.keyCode === 89 || (event.shiftKey && event.keyCode === 90)) {
	      instance.undoRedo.redo();
	      stopImmediatePropagation(event);
	    } else if (event.keyCode === 90) {
	      instance.undoRedo.undo();
	      stopImmediatePropagation(event);
	    }
	  }
	}
	function onAfterChange(changes, source) {
	  var instance = this;
	  if (source == 'loadData') {
	    return instance.undoRedo.clear();
	  }
	}
	function exposeUndoRedoMethods(instance) {
	  instance.undo = function() {
	    return instance.undoRedo.undo();
	  };
	  instance.redo = function() {
	    return instance.undoRedo.redo();
	  };
	  instance.isUndoAvailable = function() {
	    return instance.undoRedo.isUndoAvailable();
	  };
	  instance.isRedoAvailable = function() {
	    return instance.undoRedo.isRedoAvailable();
	  };
	  instance.clearUndo = function() {
	    return instance.undoRedo.clear();
	  };
	}
	function removeExposedUndoRedoMethods(instance) {
	  delete instance.undo;
	  delete instance.redo;
	  delete instance.isUndoAvailable;
	  delete instance.isRedoAvailable;
	  delete instance.clearUndo;
	}
	Handsontable.hooks.add('afterInit', init);
	Handsontable.hooks.add('afterUpdateSettings', init);

	//# 
	},{"helpers/dom/event":46,"helpers/object":50}],88:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  registerRenderer: {get: function() {
	      return registerRenderer;
	    }},
	  getRenderer: {get: function() {
	      return getRenderer;
	    }},
	  hasRenderer: {get: function() {
	      return hasRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_string__;
	var toUpperCaseFirst = ($__helpers_47_string__ = require("helpers/string"), $__helpers_47_string__ && $__helpers_47_string__.__esModule && $__helpers_47_string__ || {default: $__helpers_47_string__}).toUpperCaseFirst;
	var registeredRenderers = {};
	Handsontable.renderers = Handsontable.renderers || {};
	Handsontable.renderers.registerRenderer = registerRenderer;
	Handsontable.renderers.getRenderer = getRenderer;
	function registerRenderer(rendererName, rendererFunction) {
	  var registerName;
	  registeredRenderers[rendererName] = rendererFunction;
	  registerName = toUpperCaseFirst(rendererName) + 'Renderer';
	  Handsontable.renderers[registerName] = rendererFunction;
	  Handsontable[registerName] = rendererFunction;
	}
	function getRenderer(rendererName) {
	  if (typeof rendererName == 'function') {
	    return rendererName;
	  }
	  if (typeof rendererName != 'string') {
	    throw Error('Only strings and functions can be passed as "renderer" parameter');
	  }
	  if (!(rendererName in registeredRenderers)) {
	    throw Error('No editor registered under name "' + rendererName + '"');
	  }
	  return registeredRenderers[rendererName];
	}
	function hasRenderer(rendererName) {
	  return rendererName in registeredRenderers;
	}
	;

	//# 
	},{"helpers/string":52}],89:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  cellDecorator: {get: function() {
	      return cellDecorator;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    removeClass = $__0.removeClass;
	var registerRenderer = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}).registerRenderer;
	;
	registerRenderer('base', cellDecorator);
	Handsontable.renderers.cellDecorator = cellDecorator;
	function cellDecorator(instance, TD, row, col, prop, value, cellProperties) {
	  if (cellProperties.className) {
	    if (TD.className) {
	      TD.className = TD.className + ' ' + cellProperties.className;
	    } else {
	      TD.className = cellProperties.className;
	    }
	  }
	  if (cellProperties.readOnly) {
	    addClass(TD, cellProperties.readOnlyCellClassName);
	  }
	  if (cellProperties.valid === false && cellProperties.invalidCellClassName) {
	    addClass(TD, cellProperties.invalidCellClassName);
	  } else {
	    removeClass(TD, cellProperties.invalidCellClassName);
	  }
	  if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {
	    addClass(TD, cellProperties.noWordWrapClassName);
	  }
	  if (!value && cellProperties.placeholder) {
	    addClass(TD, cellProperties.placeholderCellClassName);
	  }
	}

	//# 
	},{"helpers/dom/element":45,"renderers":88}],90:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  autocompleteRenderer: {get: function() {
	      return autocompleteRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_renderers__,
	    $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass,
	    empty = $__0.empty;
	var eventManagerObject = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).eventManager;
	var $__2 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__2.getRenderer,
	    registerRenderer = $__2.registerRenderer;
	var WalkontableCellCoords = ($___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $___46__46__47_3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var clonableWRAPPER = document.createElement('DIV');
	clonableWRAPPER.className = 'htAutocompleteWrapper';
	var clonableARROW = document.createElement('DIV');
	clonableARROW.className = 'htAutocompleteArrow';
	clonableARROW.appendChild(document.createTextNode(String.fromCharCode(9660)));
	var wrapTdContentWithWrapper = function(TD, WRAPPER) {
	  WRAPPER.innerHTML = TD.innerHTML;
	  empty(TD);
	  TD.appendChild(WRAPPER);
	};
	function autocompleteRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  var WRAPPER = clonableWRAPPER.cloneNode(true);
	  var ARROW = clonableARROW.cloneNode(true);
	  getRenderer('text')(instance, TD, row, col, prop, value, cellProperties);
	  TD.appendChild(ARROW);
	  addClass(TD, 'htAutocomplete');
	  if (!TD.firstChild) {
	    TD.appendChild(document.createTextNode(String.fromCharCode(160)));
	  }
	  if (!instance.acArrowListener) {
	    var eventManager = eventManagerObject(instance);
	    instance.acArrowListener = function(event) {
	      if (hasClass(event.target, 'htAutocompleteArrow')) {
	        instance.view.wt.getSetting('onCellDblClick', null, new WalkontableCellCoords(row, col), TD);
	      }
	    };
	    eventManager.addEventListener(instance.rootElement, 'mousedown', instance.acArrowListener);
	    instance.addHookOnce('afterDestroy', function() {
	      eventManager.destroy();
	    });
	  }
	}
	;
	registerRenderer('autocomplete', autocompleteRenderer);

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"eventManager":41,"helpers/dom/element":45,"renderers":88}],91:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  checkboxRenderer: {get: function() {
	      return checkboxRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_string__,
	    $___46__46__47_eventManager__,
	    $___46__46__47_renderers__,
	    $___46__46__47_helpers_47_unicode__,
	    $___46__46__47_helpers_47_dom_47_event__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    empty = $__0.empty,
	    addClass = $__0.addClass,
	    hasClass = $__0.hasClass;
	var equalsIgnoreCase = ($___46__46__47_helpers_47_string__ = require("helpers/string"), $___46__46__47_helpers_47_string__ && $___46__46__47_helpers_47_string__.__esModule && $___46__46__47_helpers_47_string__ || {default: $___46__46__47_helpers_47_string__}).equalsIgnoreCase;
	var EventManager = ($___46__46__47_eventManager__ = require("eventManager"), $___46__46__47_eventManager__ && $___46__46__47_eventManager__.__esModule && $___46__46__47_eventManager__ || {default: $___46__46__47_eventManager__}).EventManager;
	var $__3 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__3.getRenderer,
	    registerRenderer = $__3.registerRenderer;
	var KEY_CODES = ($___46__46__47_helpers_47_unicode__ = require("helpers/unicode"), $___46__46__47_helpers_47_unicode__ && $___46__46__47_helpers_47_unicode__.__esModule && $___46__46__47_helpers_47_unicode__ || {default: $___46__46__47_helpers_47_unicode__}).KEY_CODES;
	var $__5 = ($___46__46__47_helpers_47_dom_47_event__ = require("helpers/dom/event"), $___46__46__47_helpers_47_dom_47_event__ && $___46__46__47_helpers_47_dom_47_event__.__esModule && $___46__46__47_helpers_47_dom_47_event__ || {default: $___46__46__47_helpers_47_dom_47_event__}),
	    stopPropagation = $__5.stopPropagation,
	    stopImmediatePropagation = $__5.stopImmediatePropagation,
	    isImmediatePropagationStopped = $__5.isImmediatePropagationStopped;
	var isListeningKeyDownEvent = new WeakMap();
	var BAD_VALUE_CLASS = 'htBadValue';
	function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  var eventManager = new EventManager(instance);
	  var input = createInput();
	  var labelOptions = cellProperties.label;
	  var badValue = false;
	  if (typeof cellProperties.checkedTemplate === 'undefined') {
	    cellProperties.checkedTemplate = true;
	  }
	  if (typeof cellProperties.uncheckedTemplate === 'undefined') {
	    cellProperties.uncheckedTemplate = false;
	  }
	  empty(TD);
	  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {
	    input.checked = true;
	  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {
	    input.checked = false;
	  } else if (value === null) {
	    addClass(input, 'noValue');
	  } else {
	    input.style.display = 'none';
	    addClass(input, BAD_VALUE_CLASS);
	    badValue = true;
	  }
	  if (!badValue && labelOptions) {
	    var labelText = '';
	    if (labelOptions.value) {
	      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;
	    } else if (labelOptions.property) {
	      labelText = instance.getDataAtRowProp(row, labelOptions.property);
	    }
	    var label = createLabel(labelText);
	    if (labelOptions.position === 'before') {
	      label.appendChild(input);
	    } else {
	      label.insertBefore(input, label.firstChild);
	    }
	    input = label;
	  }
	  TD.appendChild(input);
	  if (badValue) {
	    TD.appendChild(document.createTextNode('#bad-value#'));
	  }
	  if (cellProperties.readOnly) {
	    eventManager.addEventListener(input, 'click', preventDefault);
	  } else {
	    eventManager.addEventListener(input, 'mousedown', stopPropagation);
	    eventManager.addEventListener(input, 'mouseup', stopPropagation);
	    eventManager.addEventListener(input, 'change', (function(event) {
	      instance.setDataAtRowProp(row, prop, event.target.checked ? cellProperties.checkedTemplate : cellProperties.uncheckedTemplate);
	    }));
	  }
	  if (!isListeningKeyDownEvent.has(instance)) {
	    isListeningKeyDownEvent.set(instance, true);
	    instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  }
	  function onBeforeKeyDown(event) {
	    var allowedKeys = [KEY_CODES.SPACE, KEY_CODES.ENTER, KEY_CODES.DELETE, KEY_CODES.BACKSPACE];
	    if (allowedKeys.indexOf(event.keyCode) !== -1 && !isImmediatePropagationStopped(event)) {
	      eachSelectedCheckboxCell(function() {
	        stopImmediatePropagation(event);
	        event.preventDefault();
	      });
	    }
	    if (event.keyCode == KEY_CODES.SPACE || event.keyCode == KEY_CODES.ENTER) {
	      toggleSelected();
	    }
	    if (event.keyCode == KEY_CODES.DELETE || event.keyCode == KEY_CODES.BACKSPACE) {
	      toggleSelected(false);
	    }
	  }
	  function toggleSelected() {
	    var checked = arguments[0] !== (void 0) ? arguments[0] : null;
	    eachSelectedCheckboxCell(function(checkboxes) {
	      for (var i = 0,
	          len = checkboxes.length; i < len; i++) {
	        if (hasClass(checkboxes[i], BAD_VALUE_CLASS) && checked === null) {
	          return;
	        }
	        toggleCheckbox(checkboxes[i], checked);
	      }
	    });
	  }
	  function toggleCheckbox(checkbox) {
	    var checked = arguments[1] !== (void 0) ? arguments[1] : null;
	    if (checked === null) {
	      checkbox.checked = !checkbox.checked;
	    } else {
	      checkbox.checked = checked;
	    }
	    eventManager.fireEvent(checkbox, 'change');
	  }
	  function eachSelectedCheckboxCell(callback) {
	    var selRange = instance.getSelectedRange();
	    var topLeft = selRange.getTopLeftCorner();
	    var bottomRight = selRange.getBottomRightCorner();
	    for (var row = topLeft.row; row <= bottomRight.row; row++) {
	      for (var col = topLeft.col; col <= bottomRight.col; col++) {
	        var cell = instance.getCell(row, col);
	        var cellProperties$__6 = instance.getCellMeta(row, col);
	        var checkboxes = cell.querySelectorAll('input[type=checkbox]');
	        if (checkboxes.length > 0 && !cellProperties$__6.readOnly) {
	          callback(checkboxes);
	        }
	      }
	    }
	  }
	}
	;
	registerRenderer('checkbox', checkboxRenderer);
	function createInput() {
	  var input = document.createElement('input');
	  input.className = 'htCheckboxRendererInput';
	  input.type = 'checkbox';
	  input.setAttribute('autocomplete', 'off');
	  return input.cloneNode(false);
	}
	function createLabel(text) {
	  var label = document.createElement('label');
	  label.className = 'htCheckboxRendererLabel';
	  label.appendChild(document.createTextNode(text));
	  return label.cloneNode(true);
	}
	function preventDefault(event) {
	  event.preventDefault();
	}

	//# 
	},{"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46,"helpers/string":52,"helpers/unicode":53,"renderers":88}],92:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  htmlRenderer: {get: function() {
	      return htmlRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__;
	var fastInnerHTML = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).fastInnerHTML;
	var $__1 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__1.getRenderer,
	    registerRenderer = $__1.registerRenderer;
	function htmlRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  getRenderer('base').apply(this, arguments);
	  fastInnerHTML(TD, value);
	}
	;
	registerRenderer('html', htmlRenderer);

	//# 
	},{"helpers/dom/element":45,"renderers":88}],93:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  numericRenderer: {get: function() {
	      return numericRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $__numeral__,
	    $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__,
	    $___46__46__47_helpers_47_number__;
	var numeral = ($__numeral__ = require("numeral"), $__numeral__ && $__numeral__.__esModule && $__numeral__ || {default: $__numeral__}).default;
	var addClass = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).addClass;
	var $__2 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__2.getRenderer,
	    registerRenderer = $__2.registerRenderer;
	var isNumeric = ($___46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47_helpers_47_number__ && $___46__46__47_helpers_47_number__.__esModule && $___46__46__47_helpers_47_number__ || {default: $___46__46__47_helpers_47_number__}).isNumeric;
	function numericRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  if (isNumeric(value)) {
	    if (typeof cellProperties.language !== 'undefined') {
	      numeral.language(cellProperties.language);
	    }
	    value = numeral(value).format(cellProperties.format || '0');
	    addClass(TD, 'htNumeric');
	  }
	  getRenderer('text')(instance, TD, row, col, prop, value, cellProperties);
	}
	;
	registerRenderer('numeric', numericRenderer);

	//# 
	},{"helpers/dom/element":45,"helpers/number":49,"numeral":"numeral","renderers":88}],94:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  passwordRenderer: {get: function() {
	      return passwordRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_renderers__;
	var fastInnerHTML = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}).fastInnerHTML;
	var $__1 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__1.getRenderer,
	    registerRenderer = $__1.registerRenderer;
	function passwordRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  getRenderer('text').apply(this, arguments);
	  value = TD.innerHTML;
	  var hash;
	  var hashLength = cellProperties.hashLength || value.length;
	  var hashSymbol = cellProperties.hashSymbol || '*';
	  for (hash = ''; hash.split(hashSymbol).length - 1 < hashLength; hash += hashSymbol) {}
	  fastInnerHTML(TD, hash);
	}
	;
	registerRenderer('password', passwordRenderer);

	//# 
	},{"helpers/dom/element":45,"renderers":88}],95:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  textRenderer: {get: function() {
	      return textRenderer;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_mixed__,
	    $___46__46__47_renderers__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    empty = $__0.empty,
	    fastInnerText = $__0.fastInnerText;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var $__2 = ($___46__46__47_renderers__ = require("renderers"), $___46__46__47_renderers__ && $___46__46__47_renderers__.__esModule && $___46__46__47_renderers__ || {default: $___46__46__47_renderers__}),
	    getRenderer = $__2.getRenderer,
	    registerRenderer = $__2.registerRenderer;
	function textRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  getRenderer('base').apply(this, arguments);
	  if (!value && cellProperties.placeholder) {
	    value = cellProperties.placeholder;
	  }
	  var escaped = stringify(value);
	  if (!instance.getSettings().trimWhitespace) {
	    escaped = escaped.replace(/ /g, String.fromCharCode(160));
	  }
	  if (cellProperties.rendererTemplate) {
	    empty(TD);
	    var TEMPLATE = document.createElement('TEMPLATE');
	    TEMPLATE.setAttribute('bind', '{{}}');
	    TEMPLATE.innerHTML = cellProperties.rendererTemplate;
	    HTMLTemplateElement.decorate(TEMPLATE);
	    TEMPLATE.model = instance.getSourceDataAtRow(row);
	    TD.appendChild(TEMPLATE);
	  } else {
	    fastInnerText(TD, escaped);
	  }
	}
	;
	registerRenderer('text', textRenderer);

	//# 
	},{"helpers/dom/element":45,"helpers/mixed":48,"renderers":88}],96:[function(require,module,exports){
	"use strict";
	(function(global) {
	  'use strict';
	  if (global.$traceurRuntime) {
	    return;
	  }
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $Object.defineProperties;
	  var $defineProperty = $Object.defineProperty;
	  var $freeze = $Object.freeze;
	  var $getOwnPropertyDescriptor = $Object.getOwnPropertyDescriptor;
	  var $getOwnPropertyNames = $Object.getOwnPropertyNames;
	  var $keys = $Object.keys;
	  var $hasOwnProperty = $Object.prototype.hasOwnProperty;
	  var $preventExtensions = Object.preventExtensions;
	  var $seal = Object.seal;
	  var $isExtensible = Object.isExtensible;
	  function nonEnum(value) {
	    return {
	      configurable: true,
	      enumerable: false,
	      value: value,
	      writable: true
	    };
	  }
	  var method = nonEnum;
	  var counter = 0;
	  function newUniqueString() {
	    return '__$' + Math.floor(Math.random() * 1e9) + '$' + ++counter + '$__';
	  }
	  var symbolInternalProperty = newUniqueString();
	  var symbolDescriptionProperty = newUniqueString();
	  var symbolDataProperty = newUniqueString();
	  var symbolValues = $create(null);
	  var privateNames = $create(null);
	  function isPrivateName(s) {
	    return privateNames[s];
	  }
	  function createPrivateName() {
	    var s = newUniqueString();
	    privateNames[s] = true;
	    return s;
	  }
	  function isShimSymbol(symbol) {
	    return typeof symbol === 'object' && symbol instanceof SymbolValue;
	  }
	  function typeOf(v) {
	    if (isShimSymbol(v))
	      return 'symbol';
	    return typeof v;
	  }
	  function Symbol(description) {
	    var value = new SymbolValue(description);
	    if (!(this instanceof Symbol))
	      return value;
	    throw new TypeError('Symbol cannot be new\'ed');
	  }
	  $defineProperty(Symbol.prototype, 'constructor', nonEnum(Symbol));
	  $defineProperty(Symbol.prototype, 'toString', method(function() {
	    var symbolValue = this[symbolDataProperty];
	    if (!getOption('symbols'))
	      return symbolValue[symbolInternalProperty];
	    if (!symbolValue)
	      throw TypeError('Conversion from symbol to string');
	    var desc = symbolValue[symbolDescriptionProperty];
	    if (desc === undefined)
	      desc = '';
	    return 'Symbol(' + desc + ')';
	  }));
	  $defineProperty(Symbol.prototype, 'valueOf', method(function() {
	    var symbolValue = this[symbolDataProperty];
	    if (!symbolValue)
	      throw TypeError('Conversion from symbol to string');
	    if (!getOption('symbols'))
	      return symbolValue[symbolInternalProperty];
	    return symbolValue;
	  }));
	  function SymbolValue(description) {
	    var key = newUniqueString();
	    $defineProperty(this, symbolDataProperty, {value: this});
	    $defineProperty(this, symbolInternalProperty, {value: key});
	    $defineProperty(this, symbolDescriptionProperty, {value: description});
	    freeze(this);
	    symbolValues[key] = this;
	  }
	  $defineProperty(SymbolValue.prototype, 'constructor', nonEnum(Symbol));
	  $defineProperty(SymbolValue.prototype, 'toString', {
	    value: Symbol.prototype.toString,
	    enumerable: false
	  });
	  $defineProperty(SymbolValue.prototype, 'valueOf', {
	    value: Symbol.prototype.valueOf,
	    enumerable: false
	  });
	  var hashProperty = createPrivateName();
	  var hashPropertyDescriptor = {value: undefined};
	  var hashObjectProperties = {
	    hash: {value: undefined},
	    self: {value: undefined}
	  };
	  var hashCounter = 0;
	  function getOwnHashObject(object) {
	    var hashObject = object[hashProperty];
	    if (hashObject && hashObject.self === object)
	      return hashObject;
	    if ($isExtensible(object)) {
	      hashObjectProperties.hash.value = hashCounter++;
	      hashObjectProperties.self.value = object;
	      hashPropertyDescriptor.value = $create(null, hashObjectProperties);
	      $defineProperty(object, hashProperty, hashPropertyDescriptor);
	      return hashPropertyDescriptor.value;
	    }
	    return undefined;
	  }
	  function freeze(object) {
	    getOwnHashObject(object);
	    return $freeze.apply(this, arguments);
	  }
	  function preventExtensions(object) {
	    getOwnHashObject(object);
	    return $preventExtensions.apply(this, arguments);
	  }
	  function seal(object) {
	    getOwnHashObject(object);
	    return $seal.apply(this, arguments);
	  }
	  freeze(SymbolValue.prototype);
	  function isSymbolString(s) {
	    return symbolValues[s] || privateNames[s];
	  }
	  function toProperty(name) {
	    if (isShimSymbol(name))
	      return name[symbolInternalProperty];
	    return name;
	  }
	  function removeSymbolKeys(array) {
	    var rv = [];
	    for (var i = 0; i < array.length; i++) {
	      if (!isSymbolString(array[i])) {
	        rv.push(array[i]);
	      }
	    }
	    return rv;
	  }
	  function getOwnPropertyNames(object) {
	    return removeSymbolKeys($getOwnPropertyNames(object));
	  }
	  function keys(object) {
	    return removeSymbolKeys($keys(object));
	  }
	  function getOwnPropertySymbols(object) {
	    var rv = [];
	    var names = $getOwnPropertyNames(object);
	    for (var i = 0; i < names.length; i++) {
	      var symbol = symbolValues[names[i]];
	      if (symbol) {
	        rv.push(symbol);
	      }
	    }
	    return rv;
	  }
	  function getOwnPropertyDescriptor(object, name) {
	    return $getOwnPropertyDescriptor(object, toProperty(name));
	  }
	  function hasOwnProperty(name) {
	    return $hasOwnProperty.call(this, toProperty(name));
	  }
	  function getOption(name) {
	    return global.traceur && global.traceur.options[name];
	  }
	  function defineProperty(object, name, descriptor) {
	    if (isShimSymbol(name)) {
	      name = name[symbolInternalProperty];
	    }
	    $defineProperty(object, name, descriptor);
	    return object;
	  }
	  function polyfillObject(Object) {
	    $defineProperty(Object, 'defineProperty', {value: defineProperty});
	    $defineProperty(Object, 'getOwnPropertyNames', {value: getOwnPropertyNames});
	    $defineProperty(Object, 'getOwnPropertyDescriptor', {value: getOwnPropertyDescriptor});
	    $defineProperty(Object.prototype, 'hasOwnProperty', {value: hasOwnProperty});
	    $defineProperty(Object, 'freeze', {value: freeze});
	    $defineProperty(Object, 'preventExtensions', {value: preventExtensions});
	    $defineProperty(Object, 'seal', {value: seal});
	    $defineProperty(Object, 'keys', {value: keys});
	  }
	  function exportStar(object) {
	    for (var i = 1; i < arguments.length; i++) {
	      var names = $getOwnPropertyNames(arguments[i]);
	      for (var j = 0; j < names.length; j++) {
	        var name = names[j];
	        if (isSymbolString(name))
	          continue;
	        (function(mod, name) {
	          $defineProperty(object, name, {
	            get: function() {
	              return mod[name];
	            },
	            enumerable: true
	          });
	        })(arguments[i], names[j]);
	      }
	    }
	    return object;
	  }
	  function isObject(x) {
	    return x != null && (typeof x === 'object' || typeof x === 'function');
	  }
	  function toObject(x) {
	    if (x == null)
	      throw $TypeError();
	    return $Object(x);
	  }
	  function checkObjectCoercible(argument) {
	    if (argument == null) {
	      throw new TypeError('Value cannot be converted to an Object');
	    }
	    return argument;
	  }
	  function polyfillSymbol(global, Symbol) {
	    if (!global.Symbol) {
	      global.Symbol = Symbol;
	      Object.getOwnPropertySymbols = getOwnPropertySymbols;
	    }
	    if (!global.Symbol.iterator) {
	      global.Symbol.iterator = Symbol('Symbol.iterator');
	    }
	  }
	  function setupGlobals(global) {
	    polyfillSymbol(global, Symbol);
	    global.Reflect = global.Reflect || {};
	    global.Reflect.global = global.Reflect.global || global;
	    polyfillObject(global.Object);
	  }
	  setupGlobals(global);
	  global.$traceurRuntime = {
	    checkObjectCoercible: checkObjectCoercible,
	    createPrivateName: createPrivateName,
	    defineProperties: $defineProperties,
	    defineProperty: $defineProperty,
	    exportStar: exportStar,
	    getOwnHashObject: getOwnHashObject,
	    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	    getOwnPropertyNames: $getOwnPropertyNames,
	    isObject: isObject,
	    isPrivateName: isPrivateName,
	    isSymbolString: isSymbolString,
	    keys: $keys,
	    setupGlobals: setupGlobals,
	    toObject: toObject,
	    toProperty: toProperty,
	    typeof: typeOf
	  };
	})(window);
	(function() {
	  'use strict';
	  var $toProperty = $traceurRuntime.toProperty;
	  function spread() {
	    var rv = [],
	        j = 0,
	        iterResult;
	    for (var i = 0; i < arguments.length; i++) {
	      var valueToSpread = $traceurRuntime.checkObjectCoercible(arguments[i]);
	      if (typeof valueToSpread[$toProperty(Symbol.iterator)] !== 'function') {
	        throw new TypeError('Cannot spread non-iterable object.');
	      }
	      var iter = valueToSpread[$toProperty(Symbol.iterator)]();
	      while (!(iterResult = iter.next()).done) {
	        rv[j++] = iterResult.value;
	      }
	    }
	    return rv;
	  }
	  $traceurRuntime.spread = spread;
	})();
	(function() {
	  'use strict';
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $getOwnPropertyDescriptor = $traceurRuntime.getOwnPropertyDescriptor;
	  var $getPrototypeOf = Object.getPrototypeOf;
	  var $toProperty = $traceurRuntime.toProperty;
	  var $__0 = Object,
	      getOwnPropertyNames = $__0.getOwnPropertyNames,
	      getOwnPropertySymbols = $__0.getOwnPropertySymbols;
	  function superDescriptor(homeObject, name) {
	    var proto = $getPrototypeOf(homeObject);
	    do {
	      var result = $getOwnPropertyDescriptor(proto, name);
	      if (result)
	        return result;
	      proto = $getPrototypeOf(proto);
	    } while (proto);
	    return undefined;
	  }
	  function superConstructor(ctor) {
	    return ctor.__proto__;
	  }
	  function superCall(self, homeObject, name, args) {
	    return superGet(self, homeObject, name).apply(self, args);
	  }
	  function superGet(self, homeObject, name) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor) {
	      if (!descriptor.get)
	        return descriptor.value;
	      return descriptor.get.call(self);
	    }
	    return undefined;
	  }
	  function superSet(self, homeObject, name, value) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor && descriptor.set) {
	      descriptor.set.call(self, value);
	      return value;
	    }
	    throw $TypeError(("super has no setter '" + name + "'."));
	  }
	  function getDescriptors(object) {
	    var descriptors = {};
	    var names = getOwnPropertyNames(object);
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      descriptors[name] = $getOwnPropertyDescriptor(object, name);
	    }
	    var symbols = getOwnPropertySymbols(object);
	    for (var i = 0; i < symbols.length; i++) {
	      var symbol = symbols[i];
	      descriptors[$toProperty(symbol)] = $getOwnPropertyDescriptor(object, $toProperty(symbol));
	    }
	    return descriptors;
	  }
	  function createClass(ctor, object, staticObject, superClass) {
	    $defineProperty(object, 'constructor', {
	      value: ctor,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	    if (arguments.length > 3) {
	      if (typeof superClass === 'function')
	        ctor.__proto__ = superClass;
	      ctor.prototype = $create(getProtoParent(superClass), getDescriptors(object));
	    } else {
	      ctor.prototype = object;
	    }
	    $defineProperty(ctor, 'prototype', {
	      configurable: false,
	      writable: false
	    });
	    return $defineProperties(ctor, getDescriptors(staticObject));
	  }
	  function getProtoParent(superClass) {
	    if (typeof superClass === 'function') {
	      var prototype = superClass.prototype;
	      if ($Object(prototype) === prototype || prototype === null)
	        return superClass.prototype;
	      throw new $TypeError('super prototype must be an Object or null');
	    }
	    if (superClass === null)
	      return null;
	    throw new $TypeError(("Super expression must either be null or a function, not " + typeof superClass + "."));
	  }
	  function defaultSuperCall(self, homeObject, args) {
	    if ($getPrototypeOf(homeObject) !== null)
	      superCall(self, homeObject, 'constructor', args);
	  }
	  $traceurRuntime.createClass = createClass;
	  $traceurRuntime.defaultSuperCall = defaultSuperCall;
	  $traceurRuntime.superCall = superCall;
	  $traceurRuntime.superConstructor = superConstructor;
	  $traceurRuntime.superGet = superGet;
	  $traceurRuntime.superSet = superSet;
	})();

	//# 
	},{}],97:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  TableView: {get: function() {
	      return TableView;
	    }},
	  __esModule: {value: true}
	});
	var $__helpers_47_dom_47_element__,
	    $__eventManager__,
	    $__helpers_47_dom_47_event__,
	    $__3rdparty_47_walkontable_47_src_47_cell_47_coords__,
	    $__3rdparty_47_walkontable_47_src_47_selection__,
	    $__3rdparty_47_walkontable_47_src_47_core__;
	var $__0 = ($__helpers_47_dom_47_element__ = require("helpers/dom/element"), $__helpers_47_dom_47_element__ && $__helpers_47_dom_47_element__.__esModule && $__helpers_47_dom_47_element__ || {default: $__helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    empty = $__0.empty,
	    fastInnerHTML = $__0.fastInnerHTML,
	    fastInnerText = $__0.fastInnerText,
	    getScrollbarWidth = $__0.getScrollbarWidth,
	    hasClass = $__0.hasClass,
	    isChildOf = $__0.isChildOf,
	    isInput = $__0.isInput,
	    isOutsideInput = $__0.isOutsideInput;
	var eventManagerObject = ($__eventManager__ = require("eventManager"), $__eventManager__ && $__eventManager__.__esModule && $__eventManager__ || {default: $__eventManager__}).eventManager;
	var $__2 = ($__helpers_47_dom_47_event__ = require("helpers/dom/event"), $__helpers_47_dom_47_event__ && $__helpers_47_dom_47_event__.__esModule && $__helpers_47_dom_47_event__ || {default: $__helpers_47_dom_47_event__}),
	    stopPropagation = $__2.stopPropagation,
	    isImmediatePropagationStopped = $__2.isImmediatePropagationStopped;
	var WalkontableCellCoords = ($__3rdparty_47_walkontable_47_src_47_cell_47_coords__ = require("3rdparty/walkontable/src/cell/coords"), $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__.__esModule && $__3rdparty_47_walkontable_47_src_47_cell_47_coords__ || {default: $__3rdparty_47_walkontable_47_src_47_cell_47_coords__}).WalkontableCellCoords;
	var WalkontableSelection = ($__3rdparty_47_walkontable_47_src_47_selection__ = require("3rdparty/walkontable/src/selection"), $__3rdparty_47_walkontable_47_src_47_selection__ && $__3rdparty_47_walkontable_47_src_47_selection__.__esModule && $__3rdparty_47_walkontable_47_src_47_selection__ || {default: $__3rdparty_47_walkontable_47_src_47_selection__}).WalkontableSelection;
	var Walkontable = ($__3rdparty_47_walkontable_47_src_47_core__ = require("3rdparty/walkontable/src/core"), $__3rdparty_47_walkontable_47_src_47_core__ && $__3rdparty_47_walkontable_47_src_47_core__.__esModule && $__3rdparty_47_walkontable_47_src_47_core__ || {default: $__3rdparty_47_walkontable_47_src_47_core__}).Walkontable;
	Handsontable.TableView = TableView;
	function TableView(instance) {
	  var that = this;
	  this.eventManager = eventManagerObject(instance);
	  this.instance = instance;
	  this.settings = instance.getSettings();
	  this.selectionMouseDown = false;
	  var originalStyle = instance.rootElement.getAttribute('style');
	  if (originalStyle) {
	    instance.rootElement.setAttribute('data-originalstyle', originalStyle);
	  }
	  addClass(instance.rootElement, 'handsontable');
	  var table = document.createElement('TABLE');
	  addClass(table, 'htCore');
	  if (instance.getSettings().tableClassName) {
	    addClass(table, instance.getSettings().tableClassName);
	  }
	  this.THEAD = document.createElement('THEAD');
	  table.appendChild(this.THEAD);
	  this.TBODY = document.createElement('TBODY');
	  table.appendChild(this.TBODY);
	  instance.table = table;
	  instance.container.insertBefore(table, instance.container.firstChild);
	  this.eventManager.addEventListener(instance.rootElement, 'mousedown', function(event) {
	    this.selectionMouseDown = true;
	    if (!that.isTextSelectionAllowed(event.target)) {
	      clearTextSelection();
	      event.preventDefault();
	      window.focus();
	    }
	  });
	  this.eventManager.addEventListener(instance.rootElement, 'mouseup', function(event) {
	    this.selectionMouseDown = false;
	  });
	  this.eventManager.addEventListener(instance.rootElement, 'mousemove', function(event) {
	    if (this.selectionMouseDown && !that.isTextSelectionAllowed(event.target)) {
	      clearTextSelection();
	      event.preventDefault();
	    }
	  });
	  this.eventManager.addEventListener(document.documentElement, 'keyup', function(event) {
	    if (instance.selection.isInProgress() && !event.shiftKey) {
	      instance.selection.finish();
	    }
	  });
	  var isMouseDown;
	  this.isMouseDown = function() {
	    return isMouseDown;
	  };
	  this.eventManager.addEventListener(document.documentElement, 'mouseup', function(event) {
	    if (instance.selection.isInProgress() && event.which === 1) {
	      instance.selection.finish();
	    }
	    isMouseDown = false;
	    if (isOutsideInput(document.activeElement)) {
	      instance.unlisten();
	    }
	  });
	  this.eventManager.addEventListener(document.documentElement, 'mousedown', function(event) {
	    var next = event.target;
	    var eventX = event.x || event.clientX;
	    var eventY = event.y || event.clientY;
	    if (isMouseDown || !instance.rootElement) {
	      return;
	    }
	    if (next === instance.view.wt.wtTable.holder) {
	      var scrollbarWidth = getScrollbarWidth();
	      if (document.elementFromPoint(eventX + scrollbarWidth, eventY) !== instance.view.wt.wtTable.holder || document.elementFromPoint(eventX, eventY + scrollbarWidth) !== instance.view.wt.wtTable.holder) {
	        return;
	      }
	    } else {
	      while (next !== document.documentElement) {
	        if (next === null) {
	          if (event.isTargetWebComponent) {
	            break;
	          }
	          return;
	        }
	        if (next === instance.rootElement) {
	          return;
	        }
	        next = next.parentNode;
	      }
	    }
	    if (that.settings.outsideClickDeselects) {
	      instance.deselectCell();
	    } else {
	      instance.destroyEditor();
	    }
	  });
	  this.eventManager.addEventListener(table, 'selectstart', function(event) {
	    if (that.settings.fragmentSelection || isInput(event.target)) {
	      return;
	    }
	    event.preventDefault();
	  });
	  var clearTextSelection = function() {
	    if (window.getSelection) {
	      if (window.getSelection().empty) {
	        window.getSelection().empty();
	      } else if (window.getSelection().removeAllRanges) {
	        window.getSelection().removeAllRanges();
	      }
	    } else if (document.selection) {
	      document.selection.empty();
	    }
	  };
	  var selections = [new WalkontableSelection({
	    className: 'current',
	    border: {
	      width: 2,
	      color: '#5292F7',
	      cornerVisible: function() {
	        return that.settings.fillHandle && !that.isCellEdited() && !instance.selection.isMultiple();
	      },
	      multipleSelectionHandlesVisible: function() {
	        return !that.isCellEdited() && !instance.selection.isMultiple();
	      }
	    }
	  }), new WalkontableSelection({
	    className: 'area',
	    border: {
	      width: 1,
	      color: '#89AFF9',
	      cornerVisible: function() {
	        return that.settings.fillHandle && !that.isCellEdited() && instance.selection.isMultiple();
	      },
	      multipleSelectionHandlesVisible: function() {
	        return !that.isCellEdited() && instance.selection.isMultiple();
	      }
	    }
	  }), new WalkontableSelection({
	    className: 'highlight',
	    highlightRowClassName: that.settings.currentRowClassName,
	    highlightColumnClassName: that.settings.currentColClassName
	  }), new WalkontableSelection({
	    className: 'fill',
	    border: {
	      width: 1,
	      color: 'red'
	    }
	  })];
	  selections.current = selections[0];
	  selections.area = selections[1];
	  selections.highlight = selections[2];
	  selections.fill = selections[3];
	  var walkontableConfig = {
	    debug: function() {
	      return that.settings.debug;
	    },
	    externalRowCalculator: this.instance.getPlugin('autoRowSize') && this.instance.getPlugin('autoRowSize').isEnabled(),
	    table: table,
	    stretchH: this.settings.stretchH,
	    data: instance.getDataAtCell,
	    totalRows: (function() {
	      return instance.countRows();
	    }),
	    totalColumns: (function() {
	      return instance.countCols();
	    }),
	    fixedColumnsLeft: function() {
	      return that.settings.fixedColumnsLeft;
	    },
	    fixedRowsTop: function() {
	      return that.settings.fixedRowsTop;
	    },
	    fixedRowsBottom: function() {
	      return that.settings.fixedRowsBottom;
	    },
	    minSpareRows: function() {
	      return that.settings.minSpareRows;
	    },
	    renderAllRows: that.settings.renderAllRows,
	    rowHeaders: function() {
	      var headerRenderers = [];
	      if (instance.hasRowHeaders()) {
	        headerRenderers.push(function(row, TH) {
	          that.appendRowHeader(row, TH);
	        });
	      }
	      Handsontable.hooks.run(instance, 'afterGetRowHeaderRenderers', headerRenderers);
	      return headerRenderers;
	    },
	    columnHeaders: function() {
	      var headerRenderers = [];
	      if (instance.hasColHeaders()) {
	        headerRenderers.push(function(column, TH) {
	          that.appendColHeader(column, TH);
	        });
	      }
	      Handsontable.hooks.run(instance, 'afterGetColumnHeaderRenderers', headerRenderers);
	      return headerRenderers;
	    },
	    columnWidth: instance.getColWidth,
	    rowHeight: instance.getRowHeight,
	    cellRenderer: function(row, col, TD) {
	      var prop = that.instance.colToProp(col),
	          cellProperties = that.instance.getCellMeta(row, col),
	          renderer = that.instance.getCellRenderer(cellProperties);
	      var value = that.instance.getDataAtRowProp(row, prop);
	      renderer(that.instance, TD, row, col, prop, value, cellProperties);
	      Handsontable.hooks.run(that.instance, 'afterRenderer', TD, row, col, prop, value, cellProperties);
	    },
	    selections: selections,
	    hideBorderOnMouseDownOver: function() {
	      return that.settings.fragmentSelection;
	    },
	    onCellMouseDown: function(event, coords, TD, wt) {
	      var colspanOffset;
	      var TR = TD.parentNode;
	      var THEAD = TR.parentNode;
	      var headerLevel;
	      var headerColspan;
	      instance.listen();
	      that.activeWt = wt;
	      isMouseDown = true;
	      Handsontable.hooks.run(instance, 'beforeOnCellMouseDown', event, coords, TD);
	      instance.selection.setSelectedHeaders(false, false);
	      if (!isImmediatePropagationStopped(event)) {
	        if (event.button === 2 && instance.selection.inInSelection(coords)) {
	          var nothing = 1;
	        } else if (event.shiftKey) {
	          if (coords.row >= 0 && coords.col >= 0) {
	            instance.selection.setRangeEnd(coords);
	          }
	        } else {
	          if ((coords.row < 0 || coords.col < 0) && (coords.row >= 0 || coords.col >= 0)) {
	            if (coords.row < 0) {
	              headerLevel = THEAD.childNodes.length - Array.prototype.indexOf.call(THEAD.childNodes, TR) - 1;
	              headerColspan = instance.getHeaderColspan(coords.col, headerLevel);
	              instance.selection.setSelectedHeaders(false, true);
	              instance.selectCell(0, coords.col, instance.countRows() - 1, coords.col + Math.max(0, headerColspan - 1));
	            }
	            if (coords.col < 0) {
	              instance.selection.setSelectedHeaders(true, false);
	              instance.selectCell(coords.row, 0, coords.row, instance.countCols() - 1);
	            }
	          } else {
	            coords.row = coords.row < 0 ? 0 : coords.row;
	            coords.col = coords.col < 0 ? 0 : coords.col;
	            instance.selection.setRangeStart(coords);
	          }
	        }
	        Handsontable.hooks.run(instance, 'afterOnCellMouseDown', event, coords, TD);
	        that.activeWt = that.wt;
	      }
	    },
	    onCellMouseOver: function(event, coords, TD, wt) {
	      that.activeWt = wt;
	      if (coords.row >= 0 && coords.col >= 0) {
	        if (isMouseDown) {
	          instance.selection.setRangeEnd(coords);
	        }
	      } else {
	        if (isMouseDown) {
	          if (coords.row < 0) {
	            if (instance.selection.selectedHeader.cols) {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(instance.countRows() - 1, coords.col));
	              instance.selection.setSelectedHeaders(false, true);
	            } else {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(coords.row, coords.col));
	            }
	          }
	          if (coords.col < 0) {
	            if (instance.selection.selectedHeader.rows) {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(coords.row, instance.countCols() - 1));
	              instance.selection.setSelectedHeaders(true, false);
	            } else {
	              instance.selection.setRangeEnd(new WalkontableCellCoords(coords.row, coords.col));
	            }
	          }
	        }
	      }
	      Handsontable.hooks.run(instance, 'afterOnCellMouseOver', event, coords, TD);
	      that.activeWt = that.wt;
	    },
	    onCellCornerMouseDown: function(event) {
	      event.preventDefault();
	      Handsontable.hooks.run(instance, 'afterOnCellCornerMouseDown', event);
	    },
	    beforeDraw: function(force) {
	      that.beforeRender(force);
	    },
	    onDraw: function(force) {
	      that.onDraw(force);
	    },
	    onScrollVertically: function() {
	      instance.runHooks('afterScrollVertically');
	    },
	    onScrollHorizontally: function() {
	      instance.runHooks('afterScrollHorizontally');
	    },
	    onBeforeDrawBorders: function(corners, borderClassName) {
	      instance.runHooks('beforeDrawBorders', corners, borderClassName);
	    },
	    onBeforeTouchScroll: function() {
	      instance.runHooks('beforeTouchScroll');
	    },
	    onAfterMomentumScroll: function() {
	      instance.runHooks('afterMomentumScroll');
	    },
	    viewportRowCalculatorOverride: function(calc) {
	      var rows = instance.countRows();
	      var viewportOffset = that.settings.viewportRowRenderingOffset;
	      if (viewportOffset === 'auto' && that.settings.fixedRowsTop) {
	        viewportOffset = 10;
	      }
	      if (typeof viewportOffset === 'number') {
	        calc.startRow = Math.max(calc.startRow - viewportOffset, 0);
	        calc.endRow = Math.min(calc.endRow + viewportOffset, rows - 1);
	      }
	      if (viewportOffset === 'auto') {
	        var center = calc.startRow + calc.endRow - calc.startRow;
	        var offset = Math.ceil(center / rows * 12);
	        calc.startRow = Math.max(calc.startRow - offset, 0);
	        calc.endRow = Math.min(calc.endRow + offset, rows - 1);
	      }
	      instance.runHooks('afterViewportRowCalculatorOverride', calc);
	    },
	    viewportColumnCalculatorOverride: function(calc) {
	      var cols = instance.countCols();
	      var viewportOffset = that.settings.viewportColumnRenderingOffset;
	      if (viewportOffset === 'auto' && that.settings.fixedColumnsLeft) {
	        viewportOffset = 10;
	      }
	      if (typeof viewportOffset === 'number') {
	        calc.startColumn = Math.max(calc.startColumn - viewportOffset, 0);
	        calc.endColumn = Math.min(calc.endColumn + viewportOffset, cols - 1);
	      }
	      if (viewportOffset === 'auto') {
	        var center = calc.startColumn + calc.endColumn - calc.startColumn;
	        var offset = Math.ceil(center / cols * 12);
	        calc.startRow = Math.max(calc.startColumn - offset, 0);
	        calc.endColumn = Math.min(calc.endColumn + offset, cols - 1);
	      }
	      instance.runHooks('afterViewportColumnCalculatorOverride', calc);
	    }
	  };
	  Handsontable.hooks.run(instance, 'beforeInitWalkontable', walkontableConfig);
	  this.wt = new Walkontable(walkontableConfig);
	  this.activeWt = this.wt;
	  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'mousedown', function(event) {
	    if (event.target === that.wt.wtTable.spreader && event.which === 3) {
	      stopPropagation(event);
	    }
	  });
	  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'contextmenu', function(event) {
	    if (event.target === that.wt.wtTable.spreader && event.which === 3) {
	      stopPropagation(event);
	    }
	  });
	  this.eventManager.addEventListener(document.documentElement, 'click', function() {
	    if (that.settings.observeDOMVisibility) {
	      if (that.wt.drawInterrupted) {
	        that.instance.forceFullRender = true;
	        that.render();
	      }
	    }
	  });
	}
	TableView.prototype.isTextSelectionAllowed = function(el) {
	  if (isInput(el)) {
	    return true;
	  }
	  var isChildOfTableBody = isChildOf(el, this.instance.view.wt.wtTable.spreader);
	  if (this.settings.fragmentSelection === true && isChildOfTableBody) {
	    return true;
	  }
	  if (this.settings.fragmentSelection === 'cell' && this.isSelectedOnlyCell() && isChildOfTableBody) {
	    return true;
	  }
	  return false;
	};
	TableView.prototype.isSelectedOnlyCell = function() {
	  var $__6 = this.instance.getSelected() || [],
	      row = $__6[0],
	      col = $__6[1],
	      rowEnd = $__6[2],
	      colEnd = $__6[3];
	  return row !== void 0 && row === rowEnd && col === colEnd;
	};
	TableView.prototype.isCellEdited = function() {
	  var activeEditor = this.instance.getActiveEditor();
	  return activeEditor && activeEditor.isOpened();
	};
	TableView.prototype.beforeRender = function(force) {
	  if (force) {
	    Handsontable.hooks.run(this.instance, 'beforeRender', this.instance.forceFullRender);
	  }
	};
	TableView.prototype.onDraw = function(force) {
	  if (force) {
	    Handsontable.hooks.run(this.instance, 'afterRender', this.instance.forceFullRender);
	  }
	};
	TableView.prototype.render = function() {
	  this.wt.draw(!this.instance.forceFullRender);
	  this.instance.forceFullRender = false;
	  this.instance.renderCall = false;
	};
	TableView.prototype.getCellAtCoords = function(coords, topmost) {
	  var td = this.wt.getCell(coords, topmost);
	  if (td < 0) {
	    return null;
	  } else {
	    return td;
	  }
	};
	TableView.prototype.scrollViewport = function(coords) {
	  this.wt.scrollViewport(coords);
	};
	TableView.prototype.appendRowHeader = function(row, TH) {
	  if (TH.firstChild) {
	    var container = TH.firstChild;
	    if (!hasClass(container, 'relative')) {
	      empty(TH);
	      this.appendRowHeader(row, TH);
	      return;
	    }
	    this.updateCellHeader(container.querySelector('.rowHeader'), row, this.instance.getRowHeader);
	  } else {
	    var div = document.createElement('div');
	    var span = document.createElement('span');
	    div.className = 'relative';
	    span.className = 'rowHeader';
	    this.updateCellHeader(span, row, this.instance.getRowHeader);
	    div.appendChild(span);
	    TH.appendChild(div);
	  }
	  Handsontable.hooks.run(this.instance, 'afterGetRowHeader', row, TH);
	};
	TableView.prototype.appendColHeader = function(col, TH) {
	  if (TH.firstChild) {
	    var container = TH.firstChild;
	    if (hasClass(container, 'relative')) {
	      this.updateCellHeader(container.querySelector('.colHeader'), col, this.instance.getColHeader);
	    } else {
	      empty(TH);
	      this.appendColHeader(col, TH);
	    }
	  } else {
	    var div = document.createElement('div');
	    var span = document.createElement('span');
	    div.className = 'relative';
	    span.className = 'colHeader';
	    this.updateCellHeader(span, col, this.instance.getColHeader);
	    div.appendChild(span);
	    TH.appendChild(div);
	  }
	  Handsontable.hooks.run(this.instance, 'afterGetColHeader', col, TH);
	};
	TableView.prototype.updateCellHeader = function(element, index, content) {
	  if (index > -1) {
	    fastInnerHTML(element, content(index));
	  } else {
	    fastInnerText(element, String.fromCharCode(160));
	    addClass(element, 'cornerHeader');
	  }
	};
	TableView.prototype.maximumVisibleElementWidth = function(leftOffset) {
	  var workspaceWidth = this.wt.wtViewport.getWorkspaceWidth();
	  var maxWidth = workspaceWidth - leftOffset;
	  return maxWidth > 0 ? maxWidth : 0;
	};
	TableView.prototype.maximumVisibleElementHeight = function(topOffset) {
	  var workspaceHeight = this.wt.wtViewport.getWorkspaceHeight();
	  var maxHeight = workspaceHeight - topOffset;
	  return maxHeight > 0 ? maxHeight : 0;
	};
	TableView.prototype.mainViewIsActive = function() {
	  return this.wt === this.activeWt;
	};
	TableView.prototype.destroy = function() {
	  this.wt.destroy();
	  this.eventManager.destroy();
	};
	;

	//# 
	},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/core":7,"3rdparty/walkontable/src/selection":18,"eventManager":41,"helpers/dom/element":45,"helpers/dom/event":46}],98:[function(require,module,exports){
	"use strict";
	Object.defineProperties(exports, {
	  GhostTable: {get: function() {
	      return GhostTable;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_number__,
	    $___46__46__47_helpers_47_mixed__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var arrayEach = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).arrayEach;
	var objectEach = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).objectEach;
	var rangeEach = ($___46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47_helpers_47_number__ && $___46__46__47_helpers_47_number__.__esModule && $___46__46__47_helpers_47_number__ || {default: $___46__46__47_helpers_47_number__}).rangeEach;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var GhostTable = function GhostTable(hotInstance) {
	  this.hot = hotInstance;
	  this.container = null;
	  this.injected = false;
	  this.rows = [];
	  this.columns = [];
	  this.samples = null;
	};
	($traceurRuntime.createClass)(GhostTable, {
	  addRow: function(row, samples) {
	    if (this.columns.length) {
	      throw new Error('Doesn\'t support multi-dimensional table');
	    }
	    if (!this.rows.length) {
	      this.container = this.createContainer(this.hot.rootElement.className);
	    }
	    var rowObject = {row: row};
	    this.rows.push(rowObject);
	    this.samples = samples;
	    this.table = this.createTable(this.hot.table.className);
	    this.table.colGroup.appendChild(this.createColGroupsCol());
	    this.table.tr.appendChild(this.createRow(row));
	    this.container.container.appendChild(this.table.fragment);
	    rowObject.table = this.table.table;
	  },
	  addColumn: function(column, samples) {
	    if (this.rows.length) {
	      throw new Error('Doesn\'t support multi-dimensional table');
	    }
	    if (!this.columns.length) {
	      this.container = this.createContainer(this.hot.rootElement.className);
	    }
	    var columnObject = {col: column};
	    this.columns.push(columnObject);
	    this.samples = samples;
	    this.table = this.createTable(this.hot.table.className);
	    if (this.hot.getColHeader(column) !== null) {
	      this.hot.view.appendColHeader(column, this.table.th);
	    }
	    this.table.tBody.appendChild(this.createCol(column));
	    this.container.container.appendChild(this.table.fragment);
	    columnObject.table = this.table.table;
	  },
	  getHeights: function(callback) {
	    if (!this.injected) {
	      this.injectTable();
	    }
	    arrayEach(this.rows, (function(row) {
	      callback(row.row, outerHeight(row.table) - 1);
	    }));
	  },
	  getWidths: function(callback) {
	    if (!this.injected) {
	      this.injectTable();
	    }
	    arrayEach(this.columns, (function(column) {
	      callback(column.col, outerWidth(column.table));
	    }));
	  },
	  createColGroupsCol: function() {
	    var $__5 = this;
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    fragment.appendChild(this.createColElement(-1));
	    this.samples.forEach((function(sample) {
	      arrayEach(sample.strings, (function(string) {
	        fragment.appendChild($__5.createColElement(string.col));
	      }));
	    }));
	    return fragment;
	  },
	  createRow: function(row) {
	    var $__5 = this;
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    var th = d.createElement('th');
	    if (this.hot.getRowHeader(row) !== null) {
	      this.hot.view.appendRowHeader(row, th);
	    }
	    fragment.appendChild(th);
	    this.samples.forEach((function(sample) {
	      arrayEach(sample.strings, (function(string) {
	        var column = string.col;
	        var cellProperties = $__5.hot.getCellMeta(row, column);
	        cellProperties.col = column;
	        cellProperties.row = row;
	        var renderer = $__5.hot.getCellRenderer(cellProperties);
	        var td = d.createElement('td');
	        renderer($__5.hot, td, row, column, $__5.hot.colToProp(column), string.value, cellProperties);
	        fragment.appendChild(td);
	      }));
	    }));
	    return fragment;
	  },
	  createCol: function(column) {
	    var $__5 = this;
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    this.samples.forEach((function(sample) {
	      arrayEach(sample.strings, (function(string) {
	        var row = string.row;
	        var cellProperties = $__5.hot.getCellMeta(row, column);
	        cellProperties.col = column;
	        cellProperties.row = row;
	        var renderer = $__5.hot.getCellRenderer(cellProperties);
	        var td = d.createElement('td');
	        var tr = d.createElement('tr');
	        renderer($__5.hot, td, row, column, $__5.hot.colToProp(row), string.value, cellProperties);
	        tr.appendChild(td);
	        fragment.appendChild(tr);
	      }));
	    }));
	    return fragment;
	  },
	  clean: function() {
	    this.rows.length = 0;
	    this.columns.length = 0;
	    if (this.samples) {
	      this.samples.clear();
	    }
	    this.samples = null;
	    this.removeTable();
	  },
	  injectTable: function() {
	    var parent = arguments[0] !== (void 0) ? arguments[0] : null;
	    if (!this.injected) {
	      (parent || this.hot.rootElement).appendChild(this.container.fragment);
	      this.injected = true;
	    }
	  },
	  removeTable: function() {
	    if (this.injected && this.container.container.parentNode) {
	      this.container.container.parentNode.removeChild(this.container.container);
	      this.container = null;
	      this.injected = false;
	    }
	  },
	  createColElement: function(column) {
	    var d = document;
	    var col = d.createElement('col');
	    col.style.width = this.hot.view.wt.wtTable.getStretchedColumnWidth(column) + 'px';
	    return col;
	  },
	  createTable: function() {
	    var className = arguments[0] !== (void 0) ? arguments[0] : '';
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    var table = d.createElement('table');
	    var tHead = d.createElement('thead');
	    var tBody = d.createElement('tbody');
	    var colGroup = d.createElement('colgroup');
	    var tr = d.createElement('tr');
	    var th = d.createElement('th');
	    if (this.isVertical()) {
	      table.appendChild(colGroup);
	    }
	    if (this.isHorizontal()) {
	      tr.appendChild(th);
	      tHead.appendChild(tr);
	      table.style.tableLayout = 'auto';
	      table.style.width = 'auto';
	    }
	    table.appendChild(tHead);
	    if (this.isVertical()) {
	      tBody.appendChild(tr);
	    }
	    table.appendChild(tBody);
	    addClass(table, className);
	    fragment.appendChild(table);
	    return {
	      fragment: fragment,
	      table: table,
	      tHead: tHead,
	      tBody: tBody,
	      colGroup: colGroup,
	      tr: tr,
	      th: th
	    };
	  },
	  createContainer: function() {
	    var className = arguments[0] !== (void 0) ? arguments[0] : '';
	    var d = document;
	    var fragment = d.createDocumentFragment();
	    var container = d.createElement('div');
	    className = 'htGhostTable htAutoSize ' + className.trim();
	    addClass(container, className);
	    fragment.appendChild(container);
	    return {
	      fragment: fragment,
	      container: container
	    };
	  },
	  isVertical: function() {
	    return this.rows.length && !this.columns.length ? true : false;
	  },
	  isHorizontal: function() {
	    return this.columns.length && !this.rows.length ? true : false;
	  }
	}, {});
	;
	Handsontable.utils = Handsontable.utils || {};
	Handsontable.utils.GhostTable = GhostTable;

	//# 
	},{"helpers/array":42,"helpers/dom/element":45,"helpers/mixed":48,"helpers/number":49,"helpers/object":50}],99:[function(require,module,exports){
	"use strict";
	var $__7;
	Object.defineProperties(exports, {
	  SamplesGenerator: {get: function() {
	      return SamplesGenerator;
	    }},
	  __esModule: {value: true}
	});
	var $___46__46__47_helpers_47_dom_47_element__,
	    $___46__46__47_helpers_47_array__,
	    $___46__46__47_helpers_47_object__,
	    $___46__46__47_helpers_47_number__,
	    $___46__46__47_helpers_47_mixed__;
	var $__0 = ($___46__46__47_helpers_47_dom_47_element__ = require("helpers/dom/element"), $___46__46__47_helpers_47_dom_47_element__ && $___46__46__47_helpers_47_dom_47_element__.__esModule && $___46__46__47_helpers_47_dom_47_element__ || {default: $___46__46__47_helpers_47_dom_47_element__}),
	    addClass = $__0.addClass,
	    outerHeight = $__0.outerHeight,
	    outerWidth = $__0.outerWidth;
	var arrayEach = ($___46__46__47_helpers_47_array__ = require("helpers/array"), $___46__46__47_helpers_47_array__ && $___46__46__47_helpers_47_array__.__esModule && $___46__46__47_helpers_47_array__ || {default: $___46__46__47_helpers_47_array__}).arrayEach;
	var objectEach = ($___46__46__47_helpers_47_object__ = require("helpers/object"), $___46__46__47_helpers_47_object__ && $___46__46__47_helpers_47_object__.__esModule && $___46__46__47_helpers_47_object__ || {default: $___46__46__47_helpers_47_object__}).objectEach;
	var rangeEach = ($___46__46__47_helpers_47_number__ = require("helpers/number"), $___46__46__47_helpers_47_number__ && $___46__46__47_helpers_47_number__.__esModule && $___46__46__47_helpers_47_number__ || {default: $___46__46__47_helpers_47_number__}).rangeEach;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	var SamplesGenerator = function SamplesGenerator(dataFactory) {
	  this.samples = null;
	  this.dataFactory = dataFactory;
	};
	var $SamplesGenerator = SamplesGenerator;
	($traceurRuntime.createClass)(SamplesGenerator, ($__7 = {}, Object.defineProperty($__7, "generateRowSamples", {
	  value: function(rowRange, colRange) {
	    return this.generateSamples('row', colRange, rowRange);
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__7, "generateColumnSamples", {
	  value: function(colRange, rowRange) {
	    return this.generateSamples('col', rowRange, colRange);
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__7, "generateSamples", {
	  value: function(type, range, specifierRange) {
	    var $__5 = this;
	    var samples = new Map();
	    if (typeof specifierRange === 'number') {
	      specifierRange = {
	        from: specifierRange,
	        to: specifierRange
	      };
	    }
	    rangeEach(specifierRange.from, specifierRange.to, (function(index) {
	      var sample = $__5.generateSample(type, range, index);
	      samples.set(index, sample);
	    }));
	    return samples;
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), Object.defineProperty($__7, "generateSample", {
	  value: function(type, range, specifierValue) {
	    var $__5 = this;
	    var samples = new Map();
	    rangeEach(range.from, range.to, (function(index) {
	      var $__7;
	      var value;
	      if (type === 'row') {
	        value = $__5.dataFactory(specifierValue, index);
	      } else if (type === 'col') {
	        value = $__5.dataFactory(index, specifierValue);
	      } else {
	        throw new Error('Unsupported sample type');
	      }
	      if (!Array.isArray(value)) {
	        value = stringify(value);
	      }
	      var len = value.length;
	      if (!samples.has(len)) {
	        samples.set(len, {
	          needed: $SamplesGenerator.SAMPLE_COUNT,
	          strings: []
	        });
	      }
	      var sample = samples.get(len);
	      if (sample.needed) {
	        var computedKey = type === 'row' ? 'col' : 'row';
	        sample.strings.push(($__7 = {}, Object.defineProperty($__7, "value", {
	          value: value,
	          configurable: true,
	          enumerable: true,
	          writable: true
	        }), Object.defineProperty($__7, computedKey, {
	          value: index,
	          configurable: true,
	          enumerable: true,
	          writable: true
	        }), $__7));
	        sample.needed--;
	      }
	    }));
	    return samples;
	  },
	  configurable: true,
	  enumerable: true,
	  writable: true
	}), $__7), {get SAMPLE_COUNT() {
	    return 3;
	  }});
	;
	Handsontable.utils = Handsontable.utils || {};
	Handsontable.utils.SamplesGenerator = SamplesGenerator;

	//# 
	},{"helpers/array":42,"helpers/dom/element":45,"helpers/mixed":48,"helpers/number":49,"helpers/object":50}],100:[function(require,module,exports){
	"use strict";
	var $___46__46__47_helpers_47_mixed__;
	var stringify = ($___46__46__47_helpers_47_mixed__ = require("helpers/mixed"), $___46__46__47_helpers_47_mixed__ && $___46__46__47_helpers_47_mixed__.__esModule && $___46__46__47_helpers_47_mixed__ || {default: $___46__46__47_helpers_47_mixed__}).stringify;
	Handsontable.AutocompleteValidator = function(value, callback) {
	  if (this.strict && this.source) {
	    if (typeof this.source === 'function') {
	      this.source(value, process(value, callback));
	    } else {
	      process(value, callback)(this.source);
	    }
	  } else {
	    callback(true);
	  }
	};
	function process(value, callback) {
	  var originalVal = value;
	  var lowercaseVal = typeof originalVal === 'string' ? originalVal.toLowerCase() : null;
	  return function(source) {
	    var found = false;
	    for (var s = 0,
	        slen = source.length; s < slen; s++) {
	      if (originalVal === source[s]) {
	        found = true;
	        break;
	      } else if (lowercaseVal === stringify(source[s]).toLowerCase()) {
	        found = true;
	        break;
	      }
	    }
	    callback(found);
	  };
	}

	//# 
	},{"helpers/mixed":48}],101:[function(require,module,exports){
	"use strict";
	var $__moment__,
	    $___46__46__47_editors__;
	var moment = ($__moment__ = require("moment"), $__moment__ && $__moment__.__esModule && $__moment__ || {default: $__moment__}).default;
	var getEditor = ($___46__46__47_editors__ = require("editors"), $___46__46__47_editors__ && $___46__46__47_editors__.__esModule && $___46__46__47_editors__ || {default: $___46__46__47_editors__}).getEditor;
	Handsontable.DateValidator = function(value, callback) {
	  var valid = true;
	  var dateEditor = getEditor('date', this.instance);
	  if (value === null) {
	    value = '';
	  }
	  var isValidDate = moment(new Date(value)).isValid();
	  var isValidFormat = moment(value, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();
	  if (!isValidDate) {
	    valid = false;
	  }
	  if (!isValidDate && isValidFormat) {
	    valid = true;
	  }
	  if (isValidDate && !isValidFormat) {
	    if (this.correctFormat === true) {
	      var correctedValue = correctFormat(value, this.dateFormat);
	      this.instance.setDataAtCell(this.row, this.col, correctedValue, 'dateValidator');
	      valid = true;
	    } else {
	      valid = false;
	    }
	  }
	  callback(valid);
	};
	var correctFormat = function correctFormat(value, dateFormat) {
	  var date = moment(new Date(value));
	  var year = date.format('YYYY');
	  var yearNow = moment().format('YYYY');
	  if (year.substr(0, 2) !== yearNow.substr(0, 2)) {
	    if (!value.match(new RegExp(year))) {
	      date.year(year.replace(year.substr(0, 2), yearNow.substr(0, 2)));
	    }
	  } else if (year.length > 4) {
	    date.year((date.year() + '').substr(0, 4));
	  }
	  return date.format(dateFormat);
	};

	//# 
	},{"editors":29,"moment":"moment"}],102:[function(require,module,exports){
	"use strict";
	Handsontable.NumericValidator = function(value, callback) {
	  if (value === null) {
	    value = '';
	  }
	  callback(/^-?\d*(\.|\,)?\d*$/.test(value));
	};

	//# 
	},{}],"SheetClip":[function(require,module,exports){
	"use strict";
	(function(global) {
	  "use strict";
	  function countQuotes(str) {
	    return str.split('"').length - 1;
	  }
	  var SheetClip = {
	    parse: function(str) {
	      var r,
	          rLen,
	          rows,
	          arr = [],
	          a = 0,
	          c,
	          cLen,
	          multiline,
	          last;
	      rows = str.split('\n');
	      if (rows.length > 1 && rows[rows.length - 1] === '') {
	        rows.pop();
	      }
	      for (r = 0, rLen = rows.length; r < rLen; r += 1) {
	        rows[r] = rows[r].split('\t');
	        for (c = 0, cLen = rows[r].length; c < cLen; c += 1) {
	          if (!arr[a]) {
	            arr[a] = [];
	          }
	          if (multiline && c === 0) {
	            last = arr[a].length - 1;
	            arr[a][last] = arr[a][last] + '\n' + rows[r][0];
	            if (multiline && (countQuotes(rows[r][0]) & 1)) {
	              multiline = false;
	              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/""/g, '"');
	            }
	          } else {
	            if (c === cLen - 1 && rows[r][c].indexOf('"') === 0 && (countQuotes(rows[r][c]) & 1)) {
	              arr[a].push(rows[r][c].substring(1).replace(/""/g, '"'));
	              multiline = true;
	            } else {
	              arr[a].push(rows[r][c].replace(/""/g, '"'));
	              multiline = false;
	            }
	          }
	        }
	        if (!multiline) {
	          a += 1;
	        }
	      }
	      return arr;
	    },
	    stringify: function(arr) {
	      var r,
	          rLen,
	          c,
	          cLen,
	          str = '',
	          val;
	      for (r = 0, rLen = arr.length; r < rLen; r += 1) {
	        cLen = arr[r].length;
	        for (c = 0; c < cLen; c += 1) {
	          if (c > 0) {
	            str += '\t';
	          }
	          val = arr[r][c];
	          if (typeof val === 'string') {
	            if (val.indexOf('\n') > -1) {
	              str += '"' + val.replace(/"/g, '""') + '"';
	            } else {
	              str += val;
	            }
	          } else if (val === null || val === void 0) {
	            str += '';
	          } else {
	            str += val;
	          }
	        }
	        str += '\n';
	      }
	      return str;
	    }
	  };
	  if (typeof exports !== 'undefined') {
	    exports.parse = SheetClip.parse;
	    exports.stringify = SheetClip.stringify;
	  } else {
	    global.SheetClip = SheetClip;
	  }
	}(window));

	//# 
	},{}],"autoResize":[function(require,module,exports){
	"use strict";
	function autoResize() {
	  var defaults = {
	    minHeight: 200,
	    maxHeight: 300,
	    minWidth: 100,
	    maxWidth: 300
	  },
	      el,
	      body = document.body,
	      text = document.createTextNode(''),
	      span = document.createElement('SPAN'),
	      observe = function(element, event, handler) {
	        if (window.attachEvent) {
	          element.attachEvent('on' + event, handler);
	        } else {
	          element.addEventListener(event, handler, false);
	        }
	      },
	      unObserve = function(element, event, handler) {
	        if (window.removeEventListener) {
	          element.removeEventListener(event, handler, false);
	        } else {
	          element.detachEvent('on' + event, handler);
	        }
	      },
	      resize = function(newChar) {
	        var width,
	            scrollHeight;
	        if (!newChar) {
	          newChar = "";
	        } else if (!/^[a-zA-Z \.,\\\/\|0-9]$/.test(newChar)) {
	          newChar = ".";
	        }
	        if (text.textContent !== void 0) {
	          text.textContent = el.value + newChar;
	        } else {
	          text.data = el.value + newChar;
	        }
	        span.style.fontSize = Handsontable.Dom.getComputedStyle(el).fontSize;
	        span.style.fontFamily = Handsontable.Dom.getComputedStyle(el).fontFamily;
	        span.style.whiteSpace = "pre";
	        body.appendChild(span);
	        width = span.clientWidth + 2;
	        body.removeChild(span);
	        el.style.height = defaults.minHeight + 'px';
	        if (defaults.minWidth > width) {
	          el.style.width = defaults.minWidth + 'px';
	        } else if (width > defaults.maxWidth) {
	          el.style.width = defaults.maxWidth + 'px';
	        } else {
	          el.style.width = width + 'px';
	        }
	        scrollHeight = el.scrollHeight ? el.scrollHeight - 1 : 0;
	        if (defaults.minHeight > scrollHeight) {
	          el.style.height = defaults.minHeight + 'px';
	        } else if (defaults.maxHeight < scrollHeight) {
	          el.style.height = defaults.maxHeight + 'px';
	          el.style.overflowY = 'visible';
	        } else {
	          el.style.height = scrollHeight + 'px';
	        }
	      },
	      delayedResize = function() {
	        window.setTimeout(resize, 0);
	      },
	      extendDefaults = function(config) {
	        if (config && config.minHeight) {
	          if (config.minHeight == 'inherit') {
	            defaults.minHeight = el.clientHeight;
	          } else {
	            var minHeight = parseInt(config.minHeight);
	            if (!isNaN(minHeight)) {
	              defaults.minHeight = minHeight;
	            }
	          }
	        }
	        if (config && config.maxHeight) {
	          if (config.maxHeight == 'inherit') {
	            defaults.maxHeight = el.clientHeight;
	          } else {
	            var maxHeight = parseInt(config.maxHeight);
	            if (!isNaN(maxHeight)) {
	              defaults.maxHeight = maxHeight;
	            }
	          }
	        }
	        if (config && config.minWidth) {
	          if (config.minWidth == 'inherit') {
	            defaults.minWidth = el.clientWidth;
	          } else {
	            var minWidth = parseInt(config.minWidth);
	            if (!isNaN(minWidth)) {
	              defaults.minWidth = minWidth;
	            }
	          }
	        }
	        if (config && config.maxWidth) {
	          if (config.maxWidth == 'inherit') {
	            defaults.maxWidth = el.clientWidth;
	          } else {
	            var maxWidth = parseInt(config.maxWidth);
	            if (!isNaN(maxWidth)) {
	              defaults.maxWidth = maxWidth;
	            }
	          }
	        }
	        if (!span.firstChild) {
	          span.className = "autoResize";
	          span.style.display = 'inline-block';
	          span.appendChild(text);
	        }
	      },
	      init = function(el_, config, doObserve) {
	        el = el_;
	        extendDefaults(config);
	        if (el.nodeName == 'TEXTAREA') {
	          el.style.resize = 'none';
	          el.style.overflowY = '';
	          el.style.height = defaults.minHeight + 'px';
	          el.style.minWidth = defaults.minWidth + 'px';
	          el.style.maxWidth = defaults.maxWidth + 'px';
	          el.style.overflowY = 'hidden';
	        }
	        if (doObserve) {
	          observe(el, 'change', resize);
	          observe(el, 'cut', delayedResize);
	          observe(el, 'paste', delayedResize);
	          observe(el, 'drop', delayedResize);
	          observe(el, 'keydown', delayedResize);
	        }
	        resize();
	      };
	  return {
	    init: function(el_, config, doObserve) {
	      init(el_, config, doObserve);
	    },
	    unObserve: function() {
	      unObserve(el, 'change', resize);
	      unObserve(el, 'cut', delayedResize);
	      unObserve(el, 'paste', delayedResize);
	      unObserve(el, 'drop', delayedResize);
	      unObserve(el, 'keydown', delayedResize);
	    },
	    resize: resize
	  };
	}
	if (typeof exports !== 'undefined') {
	  module.exports = autoResize;
	}

	//# 
	},{}],"copyPaste":[function(require,module,exports){
	"use strict";
	var instance;
	function copyPaste() {
	  if (!instance) {
	    instance = new CopyPasteClass();
	  } else if (instance.hasBeenDestroyed()) {
	    instance.init();
	  }
	  instance.refCounter++;
	  return instance;
	}
	if (typeof exports !== 'undefined') {
	  module.exports = copyPaste;
	}
	function CopyPasteClass() {
	  this.refCounter = 0;
	  this.init();
	}
	CopyPasteClass.prototype.init = function() {
	  var style,
	      parent;
	  this.copyCallbacks = [];
	  this.cutCallbacks = [];
	  this.pasteCallbacks = [];
	  parent = document.body;
	  if (document.getElementById('CopyPasteDiv')) {
	    this.elDiv = document.getElementById('CopyPasteDiv');
	    this.elTextarea = this.elDiv.firstChild;
	  } else {
	    this.elDiv = document.createElement('div');
	    this.elDiv.id = 'CopyPasteDiv';
	    style = this.elDiv.style;
	    style.position = 'fixed';
	    style.top = '-10000px';
	    style.left = '-10000px';
	    parent.appendChild(this.elDiv);
	    this.elTextarea = document.createElement('textarea');
	    this.elTextarea.className = 'copyPaste';
	    this.elTextarea.onpaste = function(event) {
	      var clipboardContents,
	          temp;
	      if ('WebkitAppearance' in document.documentElement.style) {
	        clipboardContents = event.clipboardData.getData("Text");
	        if (navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1) {
	          temp = clipboardContents.split('\n');
	          if (temp[temp.length - 1] === '') {
	            temp.pop();
	          }
	          clipboardContents = temp.join('\n');
	        }
	        this.value = clipboardContents;
	        return false;
	      }
	    };
	    style = this.elTextarea.style;
	    style.width = '10000px';
	    style.height = '10000px';
	    style.overflow = 'hidden';
	    this.elDiv.appendChild(this.elTextarea);
	    if (typeof style.opacity !== 'undefined') {
	      style.opacity = 0;
	    }
	  }
	  this.onKeyDownRef = this.onKeyDown.bind(this);
	  document.documentElement.addEventListener('keydown', this.onKeyDownRef, false);
	};
	CopyPasteClass.prototype.onKeyDown = function(event) {
	  var _this = this,
	      isCtrlDown = false;
	  function isActiveElementEditable() {
	    var element = document.activeElement;
	    if (element.shadowRoot && element.shadowRoot.activeElement) {
	      element = element.shadowRoot.activeElement;
	    }
	    return ['INPUT', 'SELECT', 'TEXTAREA'].indexOf(element.nodeName) > -1 || element.contentEditable === 'true';
	  }
	  if (event.metaKey) {
	    isCtrlDown = true;
	  } else if (event.ctrlKey && navigator.userAgent.indexOf('Mac') === -1) {
	    isCtrlDown = true;
	  }
	  if (isCtrlDown) {
	    if (document.activeElement !== this.elTextarea && (this.getSelectionText() !== '' || isActiveElementEditable())) {
	      return;
	    }
	    this.selectNodeText(this.elTextarea);
	    setTimeout(function() {
	      if (document.activeElement !== _this.elTextarea) {
	        _this.selectNodeText(_this.elTextarea);
	      }
	    }, 0);
	  }
	  if (isCtrlDown && (event.keyCode === 67 || event.keyCode === 86 || event.keyCode === 88)) {
	    if (event.keyCode === 88) {
	      setTimeout(function() {
	        _this.triggerCut(event);
	      }, 0);
	    } else if (event.keyCode === 86) {
	      setTimeout(function() {
	        _this.triggerPaste(event);
	      }, 0);
	    }
	  }
	};
	CopyPasteClass.prototype.selectNodeText = function(element) {
	  if (element) {
	    element.select();
	  }
	};
	CopyPasteClass.prototype.getSelectionText = function() {
	  var text = '';
	  if (window.getSelection) {
	    text = window.getSelection().toString();
	  } else if (document.selection && document.selection.type !== 'Control') {
	    text = document.selection.createRange().text;
	  }
	  return text;
	};
	CopyPasteClass.prototype.copyable = function(string) {
	  if (typeof string !== 'string' && string.toString === void 0) {
	    throw new Error('copyable requires string parameter');
	  }
	  this.elTextarea.value = string;
	  this.selectNodeText(this.elTextarea);
	};
	CopyPasteClass.prototype.onCut = function(callback) {
	  this.cutCallbacks.push(callback);
	};
	CopyPasteClass.prototype.onPaste = function(callback) {
	  this.pasteCallbacks.push(callback);
	};
	CopyPasteClass.prototype.removeCallback = function(callback) {
	  var i,
	      len;
	  for (i = 0, len = this.copyCallbacks.length; i < len; i++) {
	    if (this.copyCallbacks[i] === callback) {
	      this.copyCallbacks.splice(i, 1);
	      return true;
	    }
	  }
	  for (i = 0, len = this.cutCallbacks.length; i < len; i++) {
	    if (this.cutCallbacks[i] === callback) {
	      this.cutCallbacks.splice(i, 1);
	      return true;
	    }
	  }
	  for (i = 0, len = this.pasteCallbacks.length; i < len; i++) {
	    if (this.pasteCallbacks[i] === callback) {
	      this.pasteCallbacks.splice(i, 1);
	      return true;
	    }
	  }
	  return false;
	};
	CopyPasteClass.prototype.triggerCut = function(event) {
	  var _this = this;
	  if (_this.cutCallbacks) {
	    setTimeout(function() {
	      for (var i = 0,
	          len = _this.cutCallbacks.length; i < len; i++) {
	        _this.cutCallbacks[i](event);
	      }
	    }, 50);
	  }
	};
	CopyPasteClass.prototype.triggerPaste = function(event, string) {
	  var _this = this;
	  if (_this.pasteCallbacks) {
	    setTimeout(function() {
	      var val = string || _this.elTextarea.value;
	      for (var i = 0,
	          len = _this.pasteCallbacks.length; i < len; i++) {
	        _this.pasteCallbacks[i](val, event);
	      }
	    }, 50);
	  }
	};
	CopyPasteClass.prototype.destroy = function() {
	  if (!this.hasBeenDestroyed() && --this.refCounter === 0) {
	    if (this.elDiv && this.elDiv.parentNode) {
	      this.elDiv.parentNode.removeChild(this.elDiv);
	      this.elDiv = null;
	      this.elTextarea = null;
	    }
	    document.documentElement.removeEventListener('keydown', this.onKeyDownRef);
	    this.onKeyDownRef = null;
	  }
	};
	CopyPasteClass.prototype.hasBeenDestroyed = function() {
	  return !this.refCounter;
	};

	//# 
	},{}],"es6collections":[function(require,module,exports){
	"use strict";
	(function(exports) {
	  'use strict';
	  var i;
	  var defineProperty = Object.defineProperty,
	      is = function(a, b) {
	        return isNaN(a) ? isNaN(b) : a === b;
	      };
	  if (typeof WeakMap == 'undefined') {
	    exports.WeakMap = createCollection({
	      'delete': sharedDelete,
	      clear: sharedClear,
	      get: sharedGet,
	      has: mapHas,
	      set: sharedSet
	    }, true);
	  }
	  if (typeof Map == 'undefined') {
	    exports.Map = createCollection({
	      'delete': sharedDelete,
	      has: mapHas,
	      get: sharedGet,
	      set: sharedSet,
	      keys: sharedKeys,
	      values: sharedValues,
	      entries: mapEntries,
	      forEach: sharedForEach,
	      clear: sharedClear
	    });
	  }
	  if (typeof Set == 'undefined') {
	    exports.Set = createCollection({
	      has: setHas,
	      add: sharedAdd,
	      'delete': sharedDelete,
	      clear: sharedClear,
	      keys: sharedValues,
	      values: sharedValues,
	      entries: setEntries,
	      forEach: sharedForEach
	    });
	  }
	  if (typeof WeakSet == 'undefined') {
	    exports.WeakSet = createCollection({
	      'delete': sharedDelete,
	      add: sharedAdd,
	      clear: sharedClear,
	      has: setHas
	    }, true);
	  }
	  function createCollection(proto, objectOnly) {
	    function Collection(a) {
	      if (!this || this.constructor !== Collection)
	        return new Collection(a);
	      this._keys = [];
	      this._values = [];
	      this._itp = [];
	      this.objectOnly = objectOnly;
	      if (a)
	        init.call(this, a);
	    }
	    if (!objectOnly) {
	      defineProperty(proto, 'size', {get: sharedSize});
	    }
	    proto.constructor = Collection;
	    Collection.prototype = proto;
	    return Collection;
	  }
	  function init(a) {
	    var i;
	    if (this.add)
	      a.forEach(this.add, this);
	    else
	      a.forEach(function(a) {
	        this.set(a[0], a[1]);
	      }, this);
	  }
	  function sharedDelete(key) {
	    if (this.has(key)) {
	      this._keys.splice(i, 1);
	      this._values.splice(i, 1);
	      this._itp.forEach(function(p) {
	        if (i < p[0])
	          p[0]--;
	      });
	    }
	    return -1 < i;
	  }
	  ;
	  function sharedGet(key) {
	    return this.has(key) ? this._values[i] : undefined;
	  }
	  function has(list, key) {
	    if (this.objectOnly && key !== Object(key))
	      throw new TypeError("Invalid value used as weak collection key");
	    if (key != key || key === 0)
	      for (i = list.length; i-- && !is(list[i], key); ) {}
	    else
	      i = list.indexOf(key);
	    return -1 < i;
	  }
	  function setHas(value) {
	    return has.call(this, this._values, value);
	  }
	  function mapHas(value) {
	    return has.call(this, this._keys, value);
	  }
	  function sharedSet(key, value) {
	    this.has(key) ? this._values[i] = value : this._values[this._keys.push(key) - 1] = value;
	    return this;
	  }
	  function sharedAdd(value) {
	    if (!this.has(value))
	      this._values.push(value);
	    return this;
	  }
	  function sharedClear() {
	    this._values.length = 0;
	  }
	  function sharedKeys() {
	    return sharedIterator(this._itp, this._keys);
	  }
	  function sharedValues() {
	    return sharedIterator(this._itp, this._values);
	  }
	  function mapEntries() {
	    return sharedIterator(this._itp, this._keys, this._values);
	  }
	  function setEntries() {
	    return sharedIterator(this._itp, this._values, this._values);
	  }
	  function sharedIterator(itp, array, array2) {
	    var p = [0],
	        done = false;
	    itp.push(p);
	    return {next: function() {
	        var v,
	            k = p[0];
	        if (!done && k < array.length) {
	          v = array2 ? [array[k], array2[k]] : array[k];
	          p[0]++;
	        } else {
	          done = true;
	          itp.splice(itp.indexOf(p), 1);
	        }
	        return {
	          done: done,
	          value: v
	        };
	      }};
	  }
	  function sharedSize() {
	    return this._values.length;
	  }
	  function sharedForEach(callback, context) {
	    var it = this.entries();
	    for (; ; ) {
	      var r = it.next();
	      if (r.done)
	        break;
	      callback.call(context, r.value[1], r.value[0], this);
	    }
	  }
	})(typeof exports != 'undefined' && typeof global != 'undefined' ? global : window);

	//# 
	},{}],"jsonpatch":[function(require,module,exports){
	"use strict";
	var jsonpatch;
	(function(jsonpatch) {
	  var objOps = {
	    add: function(obj, key) {
	      obj[key] = this.value;
	      return true;
	    },
	    remove: function(obj, key) {
	      delete obj[key];
	      return true;
	    },
	    replace: function(obj, key) {
	      obj[key] = this.value;
	      return true;
	    },
	    move: function(obj, key, tree) {
	      var temp = {
	        op: "_get",
	        path: this.from
	      };
	      apply(tree, [temp]);
	      apply(tree, [{
	        op: "remove",
	        path: this.from
	      }]);
	      apply(tree, [{
	        op: "add",
	        path: this.path,
	        value: temp.value
	      }]);
	      return true;
	    },
	    copy: function(obj, key, tree) {
	      var temp = {
	        op: "_get",
	        path: this.from
	      };
	      apply(tree, [temp]);
	      apply(tree, [{
	        op: "add",
	        path: this.path,
	        value: temp.value
	      }]);
	      return true;
	    },
	    test: function(obj, key) {
	      return (JSON.stringify(obj[key]) === JSON.stringify(this.value));
	    },
	    _get: function(obj, key) {
	      this.value = obj[key];
	    }
	  };
	  var arrOps = {
	    add: function(arr, i) {
	      arr.splice(i, 0, this.value);
	      return true;
	    },
	    remove: function(arr, i) {
	      arr.splice(i, 1);
	      return true;
	    },
	    replace: function(arr, i) {
	      arr[i] = this.value;
	      return true;
	    },
	    move: objOps.move,
	    copy: objOps.copy,
	    test: objOps.test,
	    _get: objOps._get
	  };
	  var observeOps = {
	    add: function(patches, path) {
	      var patch = {
	        op: "add",
	        path: path + escapePathComponent(this.name),
	        value: this.object[this.name]
	      };
	      patches.push(patch);
	    },
	    'delete': function(patches, path) {
	      var patch = {
	        op: "remove",
	        path: path + escapePathComponent(this.name)
	      };
	      patches.push(patch);
	    },
	    update: function(patches, path) {
	      var patch = {
	        op: "replace",
	        path: path + escapePathComponent(this.name),
	        value: this.object[this.name]
	      };
	      patches.push(patch);
	    }
	  };
	  function escapePathComponent(str) {
	    if (str.indexOf('/') === -1 && str.indexOf('~') === -1) {
	      return str;
	    }
	    return str.replace(/~/g, '~0').replace(/\//g, '~1');
	  }
	  function _getPathRecursive(root, obj) {
	    var found;
	    for (var key in root) {
	      if (root.hasOwnProperty(key)) {
	        if (root[key] === obj) {
	          return escapePathComponent(key) + '/';
	        } else if (typeof root[key] === 'object') {
	          found = _getPathRecursive(root[key], obj);
	          if (found != '') {
	            return escapePathComponent(key) + '/' + found;
	          }
	        }
	      }
	    }
	    return '';
	  }
	  function getPath(root, obj) {
	    if (root === obj) {
	      return '/';
	    }
	    var path = _getPathRecursive(root, obj);
	    if (path === '') {
	      throw new Error("Object not found in root");
	    }
	    return '/' + path;
	  }
	  var beforeDict = [];
	  jsonpatch.intervals;
	  var Mirror = (function() {
	    function Mirror(obj) {
	      this.observers = [];
	      this.obj = obj;
	    }
	    return Mirror;
	  })();
	  var ObserverInfo = (function() {
	    function ObserverInfo(callback, observer) {
	      this.callback = callback;
	      this.observer = observer;
	    }
	    return ObserverInfo;
	  })();
	  function getMirror(obj) {
	    for (var i = 0,
	        ilen = beforeDict.length; i < ilen; i++) {
	      if (beforeDict[i].obj === obj) {
	        return beforeDict[i];
	      }
	    }
	  }
	  function removeMirror(obj) {
	    for (var i = 0,
	        ilen = beforeDict.length; i < ilen; i++) {
	      if (beforeDict[i] === obj) {
	        beforeDict.splice(i, 1);
	      }
	    }
	  }
	  function getObserverFromMirror(mirror, callback) {
	    for (var j = 0,
	        jlen = mirror.observers.length; j < jlen; j++) {
	      if (mirror.observers[j].callback === callback) {
	        return mirror.observers[j].observer;
	      }
	    }
	  }
	  function removeObserverFromMirror(mirror, observer) {
	    for (var j = 0,
	        jlen = mirror.observers.length; j < jlen; j++) {
	      if (mirror.observers[j].observer === observer) {
	        mirror.observers.splice(j, 1);
	        if (!mirror.observers.length) {
	          removeMirror(mirror);
	        }
	        return;
	      }
	    }
	  }
	  function unobserve(root, observer) {
	    generate(observer);
	    if (Object.observe) {
	      _unobserve(observer, root);
	    } else {
	      clearTimeout(observer.next);
	    }
	    var mirror = getMirror(root);
	    removeObserverFromMirror(mirror, observer);
	  }
	  jsonpatch.unobserve = unobserve;
	  function observe(obj, callback) {
	    var patches = [];
	    var root = obj;
	    var observer;
	    var mirror = getMirror(obj);
	    if (!mirror) {
	      mirror = new Mirror(obj);
	      beforeDict.push(mirror);
	    } else {
	      observer = getObserverFromMirror(mirror, callback);
	    }
	    if (observer) {
	      return observer;
	    }
	    if (Object.observe) {
	      observer = function(arr) {
	        _unobserve(observer, obj);
	        _observe(observer, obj);
	        var a = 0,
	            alen = arr.length;
	        while (a < alen) {
	          if (!(arr[a].name === 'length' && _isArray(arr[a].object)) && !(arr[a].name === '__Jasmine_been_here_before__')) {
	            var type = arr[a].type;
	            switch (type) {
	              case 'new':
	                type = 'add';
	                break;
	              case 'deleted':
	                type = 'delete';
	                break;
	              case 'updated':
	                type = 'update';
	                break;
	            }
	            observeOps[type].call(arr[a], patches, getPath(root, arr[a].object));
	          }
	          a++;
	        }
	        if (patches) {
	          if (callback) {
	            callback(patches);
	          }
	        }
	        observer.patches = patches;
	        patches = [];
	      };
	    } else {
	      observer = {};
	      mirror.value = JSON.parse(JSON.stringify(obj));
	      if (callback) {
	        observer.callback = callback;
	        observer.next = null;
	        var intervals = this.intervals || [100, 1000, 10000, 60000];
	        var currentInterval = 0;
	        var dirtyCheck = function() {
	          generate(observer);
	        };
	        var fastCheck = function() {
	          clearTimeout(observer.next);
	          observer.next = setTimeout(function() {
	            dirtyCheck();
	            currentInterval = 0;
	            observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	          }, 0);
	        };
	        var slowCheck = function() {
	          dirtyCheck();
	          if (currentInterval == intervals.length) {
	            currentInterval = intervals.length - 1;
	          }
	          observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	        };
	        if (typeof window !== 'undefined') {
	          if (window.addEventListener) {
	            window.addEventListener('mousedown', fastCheck);
	            window.addEventListener('mouseup', fastCheck);
	            window.addEventListener('keydown', fastCheck);
	          } else {
	            window.attachEvent('onmousedown', fastCheck);
	            window.attachEvent('onmouseup', fastCheck);
	            window.attachEvent('onkeydown', fastCheck);
	          }
	        }
	        observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	      }
	    }
	    observer.patches = patches;
	    observer.object = obj;
	    mirror.observers.push(new ObserverInfo(callback, observer));
	    return _observe(observer, obj);
	  }
	  jsonpatch.observe = observe;
	  function _observe(observer, obj) {
	    if (Object.observe) {
	      Object.observe(obj, observer);
	      for (var key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          var v = obj[key];
	          if (v && typeof(v) === "object") {
	            _observe(observer, v);
	          }
	        }
	      }
	    }
	    return observer;
	  }
	  function _unobserve(observer, obj) {
	    if (Object.observe) {
	      Object.unobserve(obj, observer);
	      for (var key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          var v = obj[key];
	          if (v && typeof(v) === "object") {
	            _unobserve(observer, v);
	          }
	        }
	      }
	    }
	    return observer;
	  }
	  function generate(observer) {
	    if (Object.observe) {
	      Object.deliverChangeRecords(observer);
	    } else {
	      var mirror;
	      for (var i = 0,
	          ilen = beforeDict.length; i < ilen; i++) {
	        if (beforeDict[i].obj === observer.object) {
	          mirror = beforeDict[i];
	          break;
	        }
	      }
	      if (mirror) {
	        _generate(mirror.value, observer.object, observer.patches, "");
	      }
	    }
	    var temp = observer.patches;
	    if (temp.length > 0) {
	      observer.patches = [];
	      if (observer.callback) {
	        observer.callback(temp);
	      }
	    }
	    return temp;
	  }
	  jsonpatch.generate = generate;
	  var _objectKeys;
	  if (Object.keys) {
	    _objectKeys = Object.keys;
	  } else {
	    _objectKeys = function(obj) {
	      var keys = [];
	      for (var o in obj) {
	        if (obj.hasOwnProperty(o)) {
	          keys.push(o);
	        }
	      }
	      return keys;
	    };
	  }
	  function _generate(mirror, obj, patches, path) {
	    var newKeys = _objectKeys(obj);
	    var oldKeys = _objectKeys(mirror);
	    var changed = false;
	    var deleted = false;
	    for (var t = oldKeys.length - 1; t >= 0; t--) {
	      var key = oldKeys[t];
	      var oldVal = mirror[key];
	      if (obj.hasOwnProperty(key)) {
	        var newVal = obj[key];
	        if (oldVal instanceof Object) {
	          _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key));
	        } else {
	          if (oldVal != newVal) {
	            changed = true;
	            patches.push({
	              op: "replace",
	              path: path + "/" + escapePathComponent(key),
	              value: newVal
	            });
	            mirror[key] = newVal;
	          }
	        }
	      } else {
	        patches.push({
	          op: "remove",
	          path: path + "/" + escapePathComponent(key)
	        });
	        delete mirror[key];
	        deleted = true;
	      }
	    }
	    if (!deleted && newKeys.length == oldKeys.length) {
	      return;
	    }
	    for (var t = 0; t < newKeys.length; t++) {
	      var key = newKeys[t];
	      if (!mirror.hasOwnProperty(key)) {
	        patches.push({
	          op: "add",
	          path: path + "/" + escapePathComponent(key),
	          value: obj[key]
	        });
	        mirror[key] = JSON.parse(JSON.stringify(obj[key]));
	      }
	    }
	  }
	  var _isArray;
	  if (Array.isArray) {
	    _isArray = Array.isArray;
	  } else {
	    _isArray = function(obj) {
	      return obj.push && typeof obj.length === 'number';
	    };
	  }
	  function apply(tree, patches) {
	    var result = false,
	        p = 0,
	        plen = patches.length,
	        patch;
	    while (p < plen) {
	      patch = patches[p];
	      var keys = patch.path.split('/');
	      var obj = tree;
	      var t = 1;
	      var len = keys.length;
	      while (true) {
	        if (_isArray(obj)) {
	          var index = parseInt(keys[t], 10);
	          t++;
	          if (t >= len) {
	            result = arrOps[patch.op].call(patch, obj, index, tree);
	            break;
	          }
	          obj = obj[index];
	        } else {
	          var key = keys[t];
	          if (key.indexOf('~') != -1) {
	            key = key.replace(/~1/g, '/').replace(/~0/g, '~');
	          }
	          t++;
	          if (t >= len) {
	            result = objOps[patch.op].call(patch, obj, key, tree);
	            break;
	          }
	          obj = obj[key];
	        }
	      }
	      p++;
	    }
	    return result;
	  }
	  jsonpatch.apply = apply;
	})(jsonpatch || (jsonpatch = {}));
	if (typeof exports !== "undefined") {
	  exports.apply = jsonpatch.apply;
	  exports.observe = jsonpatch.observe;
	  exports.unobserve = jsonpatch.unobserve;
	  exports.generate = jsonpatch.generate;
	}

	//# 
	},{}],"moment":[function(require,module,exports){
	//! moment.js
	//! version : 2.10.6
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	(function (global, factory) {
	    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';

	    var hookCallback;

	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            m._isValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated;

	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	        }
	        return m._isValid;
	    }

	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    var momentProperties = utils_hooks__hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (typeof from._isAMomentObject !== 'undefined') {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (typeof from._i !== 'undefined') {
	            to._i = from._i;
	        }
	        if (typeof from._f !== 'undefined') {
	            to._f = from._f;
	        }
	        if (typeof from._l !== 'undefined') {
	            to._l = from._l;
	        }
	        if (typeof from._strict !== 'undefined') {
	            to._strict = from._strict;
	        }
	        if (typeof from._tzm !== 'undefined') {
	            to._tzm = from._tzm;
	        }
	        if (typeof from._isUTC !== 'undefined') {
	            to._isUTC = from._isUTC;
	        }
	        if (typeof from._offset !== 'undefined') {
	            to._offset = from._offset;
	        }
	        if (typeof from._pf !== 'undefined') {
	            to._pf = getParsingFlags(from);
	        }
	        if (typeof from._locale !== 'undefined') {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (typeof val !== 'undefined') {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }

	    function absFloor (number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function Locale() {
	    }

	    var locales = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && typeof module !== 'undefined' &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                require('./locale/' + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (typeof values === 'undefined') {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale (name, values) {
	        if (values !== null) {
	            values.abbr = name;
	            locales[name] = locales[name] || new Locale();
	            locales[name].set(values);

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    var aliases = {};

	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }

	    function get_set__get (mom, unit) {
	        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
	    }

	    function get_set__set (mom, unit, value) {
	        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }

	    // MOMENTS

	    function getSet (units, value) {
	        var unit;
	        if (typeof units === 'object') {
	            for (unit in units) {
	                this.set(unit, units[unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (typeof this[units] === 'function') {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '';
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

	    var regexes = {};

	    function isFunction (sth) {
	        // https://github.com/moment/moment/issues/2325
	        return typeof sth === 'function' &&
	            Object.prototype.toString.call(sth) === '[object Function]';
	    }


	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PARSING

	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  matchWord);
	    addRegexToken('MMMM', matchWord);

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m) {
	        return this._months[m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m) {
	        return this._monthsShort[m.month()];
	    }

	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth (mom, value) {
	        var dayOfMonth;

	        // TODO: Move this out of here!
	        if (typeof value === 'string') {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (typeof value !== 'number') {
	                return mom;
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }

	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }

	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (firstTime) {
	                warn(msg + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    utils_hooks__hooks.suppressDeprecationWarnings = false;

	    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
	        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
	        ['YYYY-DDD', /\d{4}-\d{3}/]
	    ];

	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
	        ['HH:mm', /(T| )\d\d:\d\d/],
	        ['HH', /(T| )\d\d/]
	    ];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = from_string__isoRegex.exec(string);

	        if (match) {
	            getParsingFlags(config).iso = true;
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(string)) {
	                    config._f = isoDates[i][0];
	                    break;
	                }
	            }
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(string)) {
	                    // match[6] should be 'T' or space
	                    config._f += (match[6] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (string.match(matchOffset)) {
	                config._f += 'Z';
	            }
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'moment construction falls back to js Date. This is ' +
	        'discouraged and will be removed in upcoming major ' +
	        'release. Please refer to ' +
	        'https://github.com/moment/moment/issues/1407 for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor doesn't accept years < 1970
	        if (y < 1970) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	        if (y < 1970) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PARSING

	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    // HOOKS

	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', false);

	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PARSING

	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // firstDayOfWeek       0 = sun, 6 = sat
	    //                      the day of the week that starts the week
	    //                      (usually sunday or monday)
	    // firstDayOfWeekOfYear 0 = sun, 6 = sat
	    //                      the first week is the week that contains the first
	    //                      of this day of the week
	    //                      (eg. ISO weeks use thursday (4))
	    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
	        var end = firstDayOfWeekOfYear - firstDayOfWeek,
	            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
	            adjustedMoment;


	        if (daysToDayOfWeek > end) {
	            daysToDayOfWeek -= 7;
	        }

	        if (daysToDayOfWeek < end - 7) {
	            daysToDayOfWeek += 7;
	        }

	        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
	        return {
	            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
	            year: adjustedMoment.year()
	        };
	    }

	    // LOCALES

	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };

	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PARSING

	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
	        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
	        if (d < firstDayOfWeek) {
	            d += 7;
	        }

	        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

	        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

	        return {
	            year: dayOfYear > 0 ? year : year - 1,
	            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
	        };
	    }

	    // MOMENTS

	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        var now = new Date();
	        if (config._useUTC) {
	            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
	        }
	        return [now.getFullYear(), now.getMonth(), now.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < dow) {
	                    ++week;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }

	    utils_hooks__hooks.ISO_8601 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }

	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (getParsingFlags(config).bigHour === true &&
	                config._a[HOUR] <= 12 &&
	                config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }


	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

	        configFromArray(config);
	    }

	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || locale_locales__getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else {
	            configFromInput(config);
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date();
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};

	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
	         function () {
	             var other = local__createLocal.apply(null, arguments);
	             return other < this ? this : other;
	         }
	     );

	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            return other > this ? this : other;
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = locale_locales__getLocale();

	        this._bubble();
	    }

	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }

	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z',  matchOffset);
	    addRegexToken('ZZ', matchOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(string) {
	        var matches = ((string || '').match(matchOffset) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(+res._d + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }

	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(input);
	            }
	            if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            this.utcOffset(offsetFromString(this._i));
	        }
	        return this;
	    }

	    function hasAlignedHourOffset (input) {
	        input = input ? local__createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted () {
	        if (typeof this._isDSTShifted !== 'undefined') {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal () {
	        return !this._isUTC;
	    }

	    function isUtcOffset () {
	        return this._isUTC;
	    }

	    function isUtc () {
	        return this._isUTC && this._offset === 0;
	    }

	    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])        * sign,
	                h  : toInt(match[HOUR])        * sign,
	                m  : toInt(match[MINUTE])      * sign,
	                s  : toInt(match[SECOND])      * sign,
	                ms : toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = create__isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                d : parseIso(match[4], sign),
	                h : parseIso(match[5], sign),
	                m : parseIso(match[6], sign),
	                s : parseIso(match[7], sign),
	                w : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    create__createDuration.fn = Duration.prototype;

	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = duration._days,
	            months = duration._months;
	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');

	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            diff = this.diff(sod, 'days', true),
	            format = diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
	    }

	    function clone () {
	        return new Moment(this);
	    }

	    function isAfter (input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this > +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return inputMs < +this.clone().startOf(units);
	        }
	    }

	    function isBefore (input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this < +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return +this.clone().endOf(units) < inputMs;
	        }
	    }

	    function isBetween (from, to, units) {
	        return this.isAfter(from, units) && this.isBefore(to, units);
	    }

	    function isSame (input, units) {
	        var inputMs;
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this === +input;
	        } else {
	            inputMs = +local__createLocal(input);
	            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
	        }
	    }

	    function diff (input, units, asFloat) {
	        var that = cloneWithOffset(input, this),
	            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
	            delta, output;

	        units = normalizeUnits(units);

	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        return -(wholeMonthDiff + adjust);
	    }

	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if ('function' === typeof Date.prototype.toISOString) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }

	    function format (inputString) {
	        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
	        return this.localeData().postformat(output);
	    }

	    function from (time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }

	    function to (time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }

	    function locale (key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData () {
	        return this._locale;
	    }

	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	        }

	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }

	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }

	        return this;
	    }

	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }

	    function to_type__valueOf () {
	        return +this._d - ((this._offset || 0) * 60000);
	    }

	    function unix () {
	        return Math.floor(+this / 1000);
	    }

	    function toDate () {
	        return this._offset ? new Date(+this) : this._d;
	    }

	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }

	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PARSING

	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function weeksInYear(year, dow, doy) {
	        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
	    }

	    // MOMENTS

	    function getSetWeekYear (input) {
	        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
	        return input == null ? year : this.add((input - year), 'y');
	    }

	    function getSetISOWeekYear (input) {
	        var year = weekOfYear(this, 1, 4).year;
	        return input == null ? year : this.add((input - year), 'y');
	    }

	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    addFormatToken('Q', 0, 0, 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PARSING

	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PARSING

	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   matchWord);
	    addRegexToken('ddd',  matchWord);
	    addRegexToken('dddd', matchWord);

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
	        var weekday = config._locale.weekdaysParse(input);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    // LOCALES

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m) {
	        return this._weekdays[m.day()];
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return this._weekdaysShort[m.day()];
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return this._weekdaysMin[m.day()];
	    }

	    function localeWeekdaysParse (weekdayName) {
	        var i, mom, regex;

	        this._weekdaysParse = this._weekdaysParse || [];

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            if (!this._weekdaysParse[i]) {
	                mom = local__createLocal([2000, 1]).day(i);
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek (input) {
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek (input) {
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek (input) {
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, function () {
	        return this.hours() % 12 || 12;
	    });

	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PARSING

	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });

	    // LOCALES

	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }


	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PARSING

	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PARSING

	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });


	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PARSING

	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var momentPrototype__proto = Moment.prototype;

	    momentPrototype__proto.add          = add_subtract__add;
	    momentPrototype__proto.calendar     = moment_calendar__calendar;
	    momentPrototype__proto.clone        = clone;
	    momentPrototype__proto.diff         = diff;
	    momentPrototype__proto.endOf        = endOf;
	    momentPrototype__proto.format       = format;
	    momentPrototype__proto.from         = from;
	    momentPrototype__proto.fromNow      = fromNow;
	    momentPrototype__proto.to           = to;
	    momentPrototype__proto.toNow        = toNow;
	    momentPrototype__proto.get          = getSet;
	    momentPrototype__proto.invalidAt    = invalidAt;
	    momentPrototype__proto.isAfter      = isAfter;
	    momentPrototype__proto.isBefore     = isBefore;
	    momentPrototype__proto.isBetween    = isBetween;
	    momentPrototype__proto.isSame       = isSame;
	    momentPrototype__proto.isValid      = moment_valid__isValid;
	    momentPrototype__proto.lang         = lang;
	    momentPrototype__proto.locale       = locale;
	    momentPrototype__proto.localeData   = localeData;
	    momentPrototype__proto.max          = prototypeMax;
	    momentPrototype__proto.min          = prototypeMin;
	    momentPrototype__proto.parsingFlags = parsingFlags;
	    momentPrototype__proto.set          = getSet;
	    momentPrototype__proto.startOf      = startOf;
	    momentPrototype__proto.subtract     = add_subtract__subtract;
	    momentPrototype__proto.toArray      = toArray;
	    momentPrototype__proto.toObject     = toObject;
	    momentPrototype__proto.toDate       = toDate;
	    momentPrototype__proto.toISOString  = moment_format__toISOString;
	    momentPrototype__proto.toJSON       = moment_format__toISOString;
	    momentPrototype__proto.toString     = toString;
	    momentPrototype__proto.unix         = unix;
	    momentPrototype__proto.valueOf      = to_type__valueOf;

	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;

	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;

	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;

	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;

	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

	    var momentPrototype = momentPrototype__proto;

	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }

	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }

	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };

	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key];
	        return typeof output === 'function' ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate () {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;

	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }

	    function preParsePostFormat (string) {
	        return string;
	    }

	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };

	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (typeof output === 'function') ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }

	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
	    }

	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (typeof prop === 'function') {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }

	    var prototype__proto = Locale.prototype;

	    prototype__proto._calendar       = defaultCalendar;
	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto._longDateFormat = defaultLongDateFormat;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto._invalidDate    = defaultInvalidDate;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto._ordinal        = defaultOrdinal;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto._ordinalParse   = defaultOrdinalParse;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto._relativeTime   = defaultRelativeTime;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;

	    // Month
	    prototype__proto.months       =        localeMonths;
	    prototype__proto._months      = defaultLocaleMonths;
	    prototype__proto.monthsShort  =        localeMonthsShort;
	    prototype__proto._monthsShort = defaultLocaleMonthsShort;
	    prototype__proto.monthsParse  =        localeMonthsParse;

	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto._week = defaultLocaleWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto._weekdays      = defaultLocaleWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
	    prototype__proto.meridiem = localeMeridiem;

	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function list (format, index, field, count, setter) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return lists__get(format, index, field, setter);
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < count; i++) {
	            out[i] = lists__get(format, i, field, setter);
	        }
	        return out;
	    }

	    function lists__listMonths (format, index) {
	        return list(format, index, 'months', 12, 'month');
	    }

	    function lists__listMonthsShort (format, index) {
	        return list(format, index, 'monthsShort', 12, 'month');
	    }

	    function lists__listWeekdays (format, index) {
	        return list(format, index, 'weekdays', 7, 'day');
	    }

	    function lists__listWeekdaysShort (format, index) {
	        return list(format, index, 'weekdaysShort', 7, 'day');
	    }

	    function lists__listWeekdaysMin (format, index) {
	        return list(format, index, 'weekdaysMin', 7, 'day');
	    }

	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

	    var mathAbs = Math.abs;

	    function duration_abs__abs () {
	        var data           = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);

	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);

	        return this;
	    }

	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }

	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;

	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;

	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days   = days;
	        data.months = months;
	        data.years  = years;

	        return this;
	    }

	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');

	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }

	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');

	    function weeks () {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));

	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes === 1          && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   === 1          && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    === 1          && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  === 1          && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   === 1          && ['y']           || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }

	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var iso_string__abs = Math.abs;

	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;


	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }

	    var duration_prototype__proto = Duration.prototype;

	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;

	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;

	    // Side effect imports

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports


	    utils_hooks__hooks.version = '2.10.6';

	    setHookCallback(local__createLocal);

	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

	    var _moment = utils_hooks__hooks;

	    return _moment;

	}));
	},{}],"numeral":[function(require,module,exports){
	"use strict";
	(function() {
	  var numeral,
	      VERSION = '1.5.3',
	      languages = {},
	      currentLanguage = 'en',
	      zeroFormat = null,
	      defaultFormat = '0,0',
	      hasModule = (typeof module !== 'undefined' && module.exports);
	  function Numeral(number) {
	    this._value = number;
	  }
	  function toFixed(value, precision, roundingFunction, optionals) {
	    var power = Math.pow(10, precision),
	        optionalsRegExp,
	        output;
	    output = (roundingFunction(value * power) / power).toFixed(precision);
	    if (optionals) {
	      optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
	      output = output.replace(optionalsRegExp, '');
	    }
	    return output;
	  }
	  function formatNumeral(n, format, roundingFunction) {
	    var output;
	    if (format.indexOf('$') > -1) {
	      output = formatCurrency(n, format, roundingFunction);
	    } else if (format.indexOf('%') > -1) {
	      output = formatPercentage(n, format, roundingFunction);
	    } else if (format.indexOf(':') > -1) {
	      output = formatTime(n, format);
	    } else {
	      output = formatNumber(n._value, format, roundingFunction);
	    }
	    return output;
	  }
	  function unformatNumeral(n, string) {
	    var stringOriginal = string,
	        thousandRegExp,
	        millionRegExp,
	        billionRegExp,
	        trillionRegExp,
	        suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
	        bytesMultiplier = false,
	        power;
	    if (string.indexOf(':') > -1) {
	      n._value = unformatTime(string);
	    } else {
	      if (string === zeroFormat) {
	        n._value = 0;
	      } else {
	        if (languages[currentLanguage].delimiters.decimal !== '.') {
	          string = string.replace(/\./g, '').replace(languages[currentLanguage].delimiters.decimal, '.');
	        }
	        thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	        for (power = 0; power <= suffixes.length; power++) {
	          bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;
	          if (bytesMultiplier) {
	            break;
	          }
	        }
	        n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2) ? 1 : -1) * Number(string.replace(/[^0-9\.]+/g, ''));
	        n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
	      }
	    }
	    return n._value;
	  }
	  function formatCurrency(n, format, roundingFunction) {
	    var symbolIndex = format.indexOf('$'),
	        openParenIndex = format.indexOf('('),
	        minusSignIndex = format.indexOf('-'),
	        space = '',
	        spliceIndex,
	        output;
	    if (format.indexOf(' $') > -1) {
	      space = ' ';
	      format = format.replace(' $', '');
	    } else if (format.indexOf('$ ') > -1) {
	      space = ' ';
	      format = format.replace('$ ', '');
	    } else {
	      format = format.replace('$', '');
	    }
	    output = formatNumber(n._value, format, roundingFunction);
	    if (symbolIndex <= 1) {
	      if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
	        output = output.split('');
	        spliceIndex = 1;
	        if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
	          spliceIndex = 0;
	        }
	        output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
	        output = output.join('');
	      } else {
	        output = languages[currentLanguage].currency.symbol + space + output;
	      }
	    } else {
	      if (output.indexOf(')') > -1) {
	        output = output.split('');
	        output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
	        output = output.join('');
	      } else {
	        output = output + space + languages[currentLanguage].currency.symbol;
	      }
	    }
	    return output;
	  }
	  function formatPercentage(n, format, roundingFunction) {
	    var space = '',
	        output,
	        value = n._value * 100;
	    if (format.indexOf(' %') > -1) {
	      space = ' ';
	      format = format.replace(' %', '');
	    } else {
	      format = format.replace('%', '');
	    }
	    output = formatNumber(value, format, roundingFunction);
	    if (output.indexOf(')') > -1) {
	      output = output.split('');
	      output.splice(-1, 0, space + '%');
	      output = output.join('');
	    } else {
	      output = output + space + '%';
	    }
	    return output;
	  }
	  function formatTime(n) {
	    var hours = Math.floor(n._value / 60 / 60),
	        minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),
	        seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
	    return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
	  }
	  function unformatTime(string) {
	    var timeArray = string.split(':'),
	        seconds = 0;
	    if (timeArray.length === 3) {
	      seconds = seconds + (Number(timeArray[0]) * 60 * 60);
	      seconds = seconds + (Number(timeArray[1]) * 60);
	      seconds = seconds + Number(timeArray[2]);
	    } else if (timeArray.length === 2) {
	      seconds = seconds + (Number(timeArray[0]) * 60);
	      seconds = seconds + Number(timeArray[1]);
	    }
	    return Number(seconds);
	  }
	  function formatNumber(value, format, roundingFunction) {
	    var negP = false,
	        signed = false,
	        optDec = false,
	        abbr = '',
	        abbrK = false,
	        abbrM = false,
	        abbrB = false,
	        abbrT = false,
	        abbrForce = false,
	        bytes = '',
	        ord = '',
	        abs = Math.abs(value),
	        suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
	        min,
	        max,
	        power,
	        w,
	        precision,
	        thousands,
	        d = '',
	        neg = false;
	    if (value === 0 && zeroFormat !== null) {
	      return zeroFormat;
	    } else {
	      if (format.indexOf('(') > -1) {
	        negP = true;
	        format = format.slice(1, -1);
	      } else if (format.indexOf('+') > -1) {
	        signed = true;
	        format = format.replace(/\+/g, '');
	      }
	      if (format.indexOf('a') > -1) {
	        abbrK = format.indexOf('aK') >= 0;
	        abbrM = format.indexOf('aM') >= 0;
	        abbrB = format.indexOf('aB') >= 0;
	        abbrT = format.indexOf('aT') >= 0;
	        abbrForce = abbrK || abbrM || abbrB || abbrT;
	        if (format.indexOf(' a') > -1) {
	          abbr = ' ';
	          format = format.replace(' a', '');
	        } else {
	          format = format.replace('a', '');
	        }
	        if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
	          abbr = abbr + languages[currentLanguage].abbreviations.trillion;
	          value = value / Math.pow(10, 12);
	        } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
	          abbr = abbr + languages[currentLanguage].abbreviations.billion;
	          value = value / Math.pow(10, 9);
	        } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
	          abbr = abbr + languages[currentLanguage].abbreviations.million;
	          value = value / Math.pow(10, 6);
	        } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
	          abbr = abbr + languages[currentLanguage].abbreviations.thousand;
	          value = value / Math.pow(10, 3);
	        }
	      }
	      if (format.indexOf('b') > -1) {
	        if (format.indexOf(' b') > -1) {
	          bytes = ' ';
	          format = format.replace(' b', '');
	        } else {
	          format = format.replace('b', '');
	        }
	        for (power = 0; power <= suffixes.length; power++) {
	          min = Math.pow(1024, power);
	          max = Math.pow(1024, power + 1);
	          if (value >= min && value < max) {
	            bytes = bytes + suffixes[power];
	            if (min > 0) {
	              value = value / min;
	            }
	            break;
	          }
	        }
	      }
	      if (format.indexOf('o') > -1) {
	        if (format.indexOf(' o') > -1) {
	          ord = ' ';
	          format = format.replace(' o', '');
	        } else {
	          format = format.replace('o', '');
	        }
	        ord = ord + languages[currentLanguage].ordinal(value);
	      }
	      if (format.indexOf('[.]') > -1) {
	        optDec = true;
	        format = format.replace('[.]', '.');
	      }
	      w = value.toString().split('.')[0];
	      precision = format.split('.')[1];
	      thousands = format.indexOf(',');
	      if (precision) {
	        if (precision.indexOf('[') > -1) {
	          precision = precision.replace(']', '');
	          precision = precision.split('[');
	          d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
	        } else {
	          d = toFixed(value, precision.length, roundingFunction);
	        }
	        w = d.split('.')[0];
	        if (d.split('.')[1].length) {
	          d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
	        } else {
	          d = '';
	        }
	        if (optDec && Number(d.slice(1)) === 0) {
	          d = '';
	        }
	      } else {
	        w = toFixed(value, null, roundingFunction);
	      }
	      if (w.indexOf('-') > -1) {
	        w = w.slice(1);
	        neg = true;
	      }
	      if (thousands > -1) {
	        w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
	      }
	      if (format.indexOf('.') === 0) {
	        w = '';
	      }
	      return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
	    }
	  }
	  numeral = function(input) {
	    if (numeral.isNumeral(input)) {
	      input = input.value();
	    } else if (input === 0 || typeof input === 'undefined') {
	      input = 0;
	    } else if (!Number(input)) {
	      input = numeral.fn.unformat(input);
	    }
	    return new Numeral(Number(input));
	  };
	  numeral.version = VERSION;
	  numeral.isNumeral = function(obj) {
	    return obj instanceof Numeral;
	  };
	  numeral.language = function(key, values) {
	    if (!key) {
	      return currentLanguage;
	    }
	    if (key && !values) {
	      if (!languages[key]) {
	        throw new Error('Unknown language : ' + key);
	      }
	      currentLanguage = key;
	    }
	    if (values || !languages[key]) {
	      loadLanguage(key, values);
	    }
	    return numeral;
	  };
	  numeral.languageData = function(key) {
	    if (!key) {
	      return languages[currentLanguage];
	    }
	    if (!languages[key]) {
	      throw new Error('Unknown language : ' + key);
	    }
	    return languages[key];
	  };
	  numeral.language('en', {
	    delimiters: {
	      thousands: ',',
	      decimal: '.'
	    },
	    abbreviations: {
	      thousand: 'k',
	      million: 'm',
	      billion: 'b',
	      trillion: 't'
	    },
	    ordinal: function(number) {
	      var b = number % 10;
	      return (~~(number % 100 / 10) === 1) ? 'th' : (b === 1) ? 'st' : (b === 2) ? 'nd' : (b === 3) ? 'rd' : 'th';
	    },
	    currency: {symbol: '$'}
	  });
	  numeral.zeroFormat = function(format) {
	    zeroFormat = typeof(format) === 'string' ? format : null;
	  };
	  numeral.defaultFormat = function(format) {
	    defaultFormat = typeof(format) === 'string' ? format : '0.0';
	  };
	  numeral.validate = function(val, culture) {
	    var _decimalSep,
	        _thousandSep,
	        _currSymbol,
	        _valArray,
	        _abbrObj,
	        _thousandRegEx,
	        languageData,
	        temp;
	    if (typeof val !== 'string') {
	      val += '';
	      if (console.warn) {
	        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
	      }
	    }
	    val = val.trim();
	    if (val === '') {
	      return false;
	    }
	    val = val.replace(/^[+-]?/, '');
	    try {
	      languageData = numeral.languageData(culture);
	    } catch (e) {
	      languageData = numeral.languageData(numeral.language());
	    }
	    _currSymbol = languageData.currency.symbol;
	    _abbrObj = languageData.abbreviations;
	    _decimalSep = languageData.delimiters.decimal;
	    if (languageData.delimiters.thousands === '.') {
	      _thousandSep = '\\.';
	    } else {
	      _thousandSep = languageData.delimiters.thousands;
	    }
	    temp = val.match(/^[^\d\.\,]+/);
	    if (temp !== null) {
	      val = val.substr(1);
	      if (temp[0] !== _currSymbol) {
	        return false;
	      }
	    }
	    temp = val.match(/[^\d]+$/);
	    if (temp !== null) {
	      val = val.slice(0, -1);
	      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
	        return false;
	      }
	    }
	    if (!!val.match(/^\d+$/)) {
	      return true;
	    }
	    _thousandRegEx = new RegExp(_thousandSep + '{2}');
	    if (!val.match(/[^\d.,]/g)) {
	      _valArray = val.split(_decimalSep);
	      if (_valArray.length > 2) {
	        return false;
	      } else {
	        if (_valArray.length < 2) {
	          return (!!_valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
	        } else {
	          if (_valArray[0] === '') {
	            return (!_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/));
	          } else if (_valArray[0].length === 1) {
	            return (!!_valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/));
	          } else {
	            return (!!_valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/));
	          }
	        }
	      }
	    }
	    return false;
	  };
	  function loadLanguage(key, values) {
	    languages[key] = values;
	  }
	  if ('function' !== typeof Array.prototype.reduce) {
	    Array.prototype.reduce = function(callback, opt_initialValue) {
	      'use strict';
	      if (null === this || 'undefined' === typeof this) {
	        throw new TypeError('Array.prototype.reduce called on null or undefined');
	      }
	      if ('function' !== typeof callback) {
	        throw new TypeError(callback + ' is not a function');
	      }
	      var index,
	          value,
	          length = this.length >>> 0,
	          isValueSet = false;
	      if (1 < arguments.length) {
	        value = opt_initialValue;
	        isValueSet = true;
	      }
	      for (index = 0; length > index; ++index) {
	        if (this.hasOwnProperty(index)) {
	          if (isValueSet) {
	            value = callback(value, this[index], index, this);
	          } else {
	            value = this[index];
	            isValueSet = true;
	          }
	        }
	      }
	      if (!isValueSet) {
	        throw new TypeError('Reduce of empty array with no initial value');
	      }
	      return value;
	    };
	  }
	  function multiplier(x) {
	    var parts = x.toString().split('.');
	    if (parts.length < 2) {
	      return 1;
	    }
	    return Math.pow(10, parts[1].length);
	  }
	  function correctionFactor() {
	    var args = Array.prototype.slice.call(arguments);
	    return args.reduce(function(prev, next) {
	      var mp = multiplier(prev),
	          mn = multiplier(next);
	      return mp > mn ? mp : mn;
	    }, -Infinity);
	  }
	  numeral.fn = Numeral.prototype = {
	    clone: function() {
	      return numeral(this);
	    },
	    format: function(inputString, roundingFunction) {
	      return formatNumeral(this, inputString ? inputString : defaultFormat, (roundingFunction !== undefined) ? roundingFunction : Math.round);
	    },
	    unformat: function(inputString) {
	      if (Object.prototype.toString.call(inputString) === '[object Number]') {
	        return inputString;
	      }
	      return unformatNumeral(this, inputString ? inputString : defaultFormat);
	    },
	    value: function() {
	      return this._value;
	    },
	    valueOf: function() {
	      return this._value;
	    },
	    set: function(value) {
	      this._value = Number(value);
	      return this;
	    },
	    add: function(value) {
	      var corrFactor = correctionFactor.call(null, this._value, value);
	      function cback(accum, curr, currI, O) {
	        return accum + corrFactor * curr;
	      }
	      this._value = [this._value, value].reduce(cback, 0) / corrFactor;
	      return this;
	    },
	    subtract: function(value) {
	      var corrFactor = correctionFactor.call(null, this._value, value);
	      function cback(accum, curr, currI, O) {
	        return accum - corrFactor * curr;
	      }
	      this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
	      return this;
	    },
	    multiply: function(value) {
	      function cback(accum, curr, currI, O) {
	        var corrFactor = correctionFactor(accum, curr);
	        return (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
	      }
	      this._value = [this._value, value].reduce(cback, 1);
	      return this;
	    },
	    divide: function(value) {
	      function cback(accum, curr, currI, O) {
	        var corrFactor = correctionFactor(accum, curr);
	        return (accum * corrFactor) / (curr * corrFactor);
	      }
	      this._value = [this._value, value].reduce(cback);
	      return this;
	    },
	    difference: function(value) {
	      return Math.abs(numeral(this._value).subtract(value).value());
	    }
	  };
	  if (hasModule) {
	    module.exports = numeral;
	  }
	  if (typeof ender === 'undefined') {
	    this['numeral'] = numeral;
	  }
	  if (typeof define === 'function' && define.amd) {
	    define([], function() {
	      return numeral;
	    });
	  }
	}).call(window);

	//# 
	},{}],"pikaday":[function(require,module,exports){
	/*!
	 * Pikaday
	 *
	 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
	 */

	(function (root, factory)
	{
	    'use strict';

	    var moment;
	    if (typeof exports === 'object') {
	        // CommonJS module
	        // Load moment.js as an optional dependency
	        try { moment = require('moment'); } catch (e) {}
	        module.exports = factory(moment);
	    } else if (typeof define === 'function' && define.amd) {
	        // AMD. Register as an anonymous module.
	        define(function (req)
	        {
	            // Load moment.js as an optional dependency
	            var id = 'moment';
	            try { moment = req(id); } catch (e) {}
	            return factory(moment);
	        });
	    } else {
	        root.Pikaday = factory(root.moment);
	    }
	}(this, function (moment)
	{
	    'use strict';

	    /**
	     * feature detection and helper functions
	     */
	    var hasMoment = typeof moment === 'function',

	    hasEventListeners = !!window.addEventListener,

	    document = window.document,

	    sto = window.setTimeout,

	    addEvent = function(el, e, callback, capture)
	    {
	        if (hasEventListeners) {
	            el.addEventListener(e, callback, !!capture);
	        } else {
	            el.attachEvent('on' + e, callback);
	        }
	    },

	    removeEvent = function(el, e, callback, capture)
	    {
	        if (hasEventListeners) {
	            el.removeEventListener(e, callback, !!capture);
	        } else {
	            el.detachEvent('on' + e, callback);
	        }
	    },

	    fireEvent = function(el, eventName, data)
	    {
	        var ev;

	        if (document.createEvent) {
	            ev = document.createEvent('HTMLEvents');
	            ev.initEvent(eventName, true, false);
	            ev = extend(ev, data);
	            el.dispatchEvent(ev);
	        } else if (document.createEventObject) {
	            ev = document.createEventObject();
	            ev = extend(ev, data);
	            el.fireEvent('on' + eventName, ev);
	        }
	    },

	    trim = function(str)
	    {
	        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
	    },

	    hasClass = function(el, cn)
	    {
	        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
	    },

	    addClass = function(el, cn)
	    {
	        if (!hasClass(el, cn)) {
	            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
	        }
	    },

	    removeClass = function(el, cn)
	    {
	        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
	    },

	    isArray = function(obj)
	    {
	        return (/Array/).test(Object.prototype.toString.call(obj));
	    },

	    isDate = function(obj)
	    {
	        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
	    },

	    isWeekend = function(date)
	    {
	        var day = date.getDay();
	        return day === 0 || day === 6;
	    },

	    isLeapYear = function(year)
	    {
	        // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
	        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	    },

	    getDaysInMonth = function(year, month)
	    {
	        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	    },

	    setToStartOfDay = function(date)
	    {
	        if (isDate(date)) date.setHours(0,0,0,0);
	    },

	    compareDates = function(a,b)
	    {
	        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
	        return a.getTime() === b.getTime();
	    },

	    extend = function(to, from, overwrite)
	    {
	        var prop, hasProp;
	        for (prop in from) {
	            hasProp = to[prop] !== undefined;
	            if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
	                if (isDate(from[prop])) {
	                    if (overwrite) {
	                        to[prop] = new Date(from[prop].getTime());
	                    }
	                }
	                else if (isArray(from[prop])) {
	                    if (overwrite) {
	                        to[prop] = from[prop].slice(0);
	                    }
	                } else {
	                    to[prop] = extend({}, from[prop], overwrite);
	                }
	            } else if (overwrite || !hasProp) {
	                to[prop] = from[prop];
	            }
	        }
	        return to;
	    },

	    adjustCalendar = function(calendar) {
	        if (calendar.month < 0) {
	            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
	            calendar.month += 12;
	        }
	        if (calendar.month > 11) {
	            calendar.year += Math.floor(Math.abs(calendar.month)/12);
	            calendar.month -= 12;
	        }
	        return calendar;
	    },

	    /**
	     * defaults and localisation
	     */
	    defaults = {

	        // bind the picker to a form field
	        field: null,

	        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
	        bound: undefined,

	        // position of the datepicker, relative to the field (default to bottom & left)
	        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
	        position: 'bottom left',

	        // automatically fit in the viewport even if it means repositioning from the position option
	        reposition: true,

	        // the default output format for `.toString()` and `field` value
	        format: 'YYYY-MM-DD',

	        // the initial date to view when first opened
	        defaultDate: null,

	        // make the `defaultDate` the initial selected value
	        setDefaultDate: false,

	        // first day of week (0: Sunday, 1: Monday etc)
	        firstDay: 0,

	        // the minimum/earliest date that can be selected
	        minDate: null,
	        // the maximum/latest date that can be selected
	        maxDate: null,

	        // number of years either side, or array of upper/lower range
	        yearRange: 10,

	        // show week numbers at head of row
	        showWeekNumber: false,

	        // used internally (don't config outside)
	        minYear: 0,
	        maxYear: 9999,
	        minMonth: undefined,
	        maxMonth: undefined,

	        startRange: null,
	        endRange: null,

	        isRTL: false,

	        // Additional text to append to the year in the calendar title
	        yearSuffix: '',

	        // Render the month after year in the calendar title
	        showMonthAfterYear: false,

	        // how many months are visible
	        numberOfMonths: 1,

	        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
	        // only used for the first display or when a selected date is not visible
	        mainCalendar: 'left',

	        // Specify a DOM element to render the calendar in
	        container: undefined,

	        // internationalization
	        i18n: {
	            previousMonth : 'Previous Month',
	            nextMonth     : 'Next Month',
	            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
	            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
	        },

	        // Theme Classname
	        theme: null,

	        // callback function
	        onSelect: null,
	        onOpen: null,
	        onClose: null,
	        onDraw: null
	    },


	    /**
	     * templating functions to abstract HTML rendering
	     */
	    renderDayName = function(opts, day, abbr)
	    {
	        day += opts.firstDay;
	        while (day >= 7) {
	            day -= 7;
	        }
	        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
	    },

	    renderDay = function(opts)
	    {
	        if (opts.isEmpty) {
	            return '<td class="is-empty"></td>';
	        }
	        var arr = [];
	        if (opts.isDisabled) {
	            arr.push('is-disabled');
	        }
	        if (opts.isToday) {
	            arr.push('is-today');
	        }
	        if (opts.isSelected) {
	            arr.push('is-selected');
	        }
	        if (opts.isInRange) {
	            arr.push('is-inrange');
	        }
	        if (opts.isStartRange) {
	            arr.push('is-startrange');
	        }
	        if (opts.isEndRange) {
	            arr.push('is-endrange');
	        }
	        return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '">' +
	                 '<button class="pika-button pika-day" type="button" ' +
	                    'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
	                        opts.day +
	                 '</button>' +
	               '</td>';
	    },

	    renderWeek = function (d, m, y) {
	        // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
	        var onejan = new Date(y, 0, 1),
	            weekNum = Math.ceil((((new Date(y, m, d) - onejan) / 86400000) + onejan.getDay()+1)/7);
	        return '<td class="pika-week">' + weekNum + '</td>';
	    },

	    renderRow = function(days, isRTL)
	    {
	        return '<tr>' + (isRTL ? days.reverse() : days).join('') + '</tr>';
	    },

	    renderBody = function(rows)
	    {
	        return '<tbody>' + rows.join('') + '</tbody>';
	    },

	    renderHead = function(opts)
	    {
	        var i, arr = [];
	        if (opts.showWeekNumber) {
	            arr.push('<th></th>');
	        }
	        for (i = 0; i < 7; i++) {
	            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
	        }
	        return '<thead>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</thead>';
	    },

	    renderTitle = function(instance, c, year, month, refYear)
	    {
	        var i, j, arr,
	            opts = instance._o,
	            isMinYear = year === opts.minYear,
	            isMaxYear = year === opts.maxYear,
	            html = '<div class="pika-title">',
	            monthHtml,
	            yearHtml,
	            prev = true,
	            next = true;

	        for (arr = [], i = 0; i < 12; i++) {
	            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
	                (i === month ? ' selected': '') +
	                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? 'disabled' : '') + '>' +
	                opts.i18n.months[i] + '</option>');
	        }
	        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

	        if (isArray(opts.yearRange)) {
	            i = opts.yearRange[0];
	            j = opts.yearRange[1] + 1;
	        } else {
	            i = year - opts.yearRange;
	            j = 1 + year + opts.yearRange;
	        }

	        for (arr = []; i < j && i <= opts.maxYear; i++) {
	            if (i >= opts.minYear) {
	                arr.push('<option value="' + i + '"' + (i === year ? ' selected': '') + '>' + (i) + '</option>');
	            }
	        }
	        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

	        if (opts.showMonthAfterYear) {
	            html += yearHtml + monthHtml;
	        } else {
	            html += monthHtml + yearHtml;
	        }

	        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
	            prev = false;
	        }

	        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
	            next = false;
	        }

	        if (c === 0) {
	            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
	        }
	        if (c === (instance._o.numberOfMonths - 1) ) {
	            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
	        }

	        return html += '</div>';
	    },

	    renderTable = function(opts, data)
	    {
	        return '<table cellpadding="0" cellspacing="0" class="pika-table">' + renderHead(opts) + renderBody(data) + '</table>';
	    },


	    /**
	     * Pikaday constructor
	     */
	    Pikaday = function(options)
	    {
	        var self = this,
	            opts = self.config(options);

	        self._onMouseDown = function(e)
	        {
	            if (!self._v) {
	                return;
	            }
	            e = e || window.event;
	            var target = e.target || e.srcElement;
	            if (!target) {
	                return;
	            }

	            if (!hasClass(target, 'is-disabled')) {
	                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty')) {
	                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
	                    if (opts.bound) {
	                        sto(function() {
	                            self.hide();
	                            if (opts.field) {
	                                opts.field.blur();
	                            }
	                        }, 100);
	                    }
	                }
	                else if (hasClass(target, 'pika-prev')) {
	                    self.prevMonth();
	                }
	                else if (hasClass(target, 'pika-next')) {
	                    self.nextMonth();
	                }
	            }
	            if (!hasClass(target, 'pika-select')) {
	                // if this is touch event prevent mouse events emulation
	                if (e.preventDefault) {
	                    e.preventDefault();
	                } else {
	                    e.returnValue = false;
	                    return false;
	                }
	            } else {
	                self._c = true;
	            }
	        };

	        self._onChange = function(e)
	        {
	            e = e || window.event;
	            var target = e.target || e.srcElement;
	            if (!target) {
	                return;
	            }
	            if (hasClass(target, 'pika-select-month')) {
	                self.gotoMonth(target.value);
	            }
	            else if (hasClass(target, 'pika-select-year')) {
	                self.gotoYear(target.value);
	            }
	        };

	        self._onInputChange = function(e)
	        {
	            var date;

	            if (e.firedBy === self) {
	                return;
	            }
	            if (hasMoment) {
	                date = moment(opts.field.value, opts.format);
	                date = (date && date.isValid()) ? date.toDate() : null;
	            }
	            else {
	                date = new Date(Date.parse(opts.field.value));
	            }
	            if (isDate(date)) {
	              self.setDate(date);
	            }
	            if (!self._v) {
	                self.show();
	            }
	        };

	        self._onInputFocus = function()
	        {
	            self.show();
	        };

	        self._onInputClick = function()
	        {
	            self.show();
	        };

	        self._onInputBlur = function()
	        {
	            // IE allows pika div to gain focus; catch blur the input field
	            var pEl = document.activeElement;
	            do {
	                if (hasClass(pEl, 'pika-single')) {
	                    return;
	                }
	            }
	            while ((pEl = pEl.parentNode));

	            if (!self._c) {
	                self._b = sto(function() {
	                    self.hide();
	                }, 50);
	            }
	            self._c = false;
	        };

	        self._onClick = function(e)
	        {
	            e = e || window.event;
	            var target = e.target || e.srcElement,
	                pEl = target;
	            if (!target) {
	                return;
	            }
	            if (!hasEventListeners && hasClass(target, 'pika-select')) {
	                if (!target.onchange) {
	                    target.setAttribute('onchange', 'return;');
	                    addEvent(target, 'change', self._onChange);
	                }
	            }
	            do {
	                if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
	                    return;
	                }
	            }
	            while ((pEl = pEl.parentNode));
	            if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
	                self.hide();
	            }
	        };

	        self.el = document.createElement('div');
	        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

	        addEvent(self.el, 'mousedown', self._onMouseDown, true);
	        addEvent(self.el, 'touchend', self._onMouseDown, true);
	        addEvent(self.el, 'change', self._onChange);

	        if (opts.field) {
	            if (opts.container) {
	                opts.container.appendChild(self.el);
	            } else if (opts.bound) {
	                document.body.appendChild(self.el);
	            } else {
	                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
	            }
	            addEvent(opts.field, 'change', self._onInputChange);

	            if (!opts.defaultDate) {
	                if (hasMoment && opts.field.value) {
	                    opts.defaultDate = moment(opts.field.value, opts.format).toDate();
	                } else {
	                    opts.defaultDate = new Date(Date.parse(opts.field.value));
	                }
	                opts.setDefaultDate = true;
	            }
	        }

	        var defDate = opts.defaultDate;

	        if (isDate(defDate)) {
	            if (opts.setDefaultDate) {
	                self.setDate(defDate, true);
	            } else {
	                self.gotoDate(defDate);
	            }
	        } else {
	            self.gotoDate(new Date());
	        }

	        if (opts.bound) {
	            this.hide();
	            self.el.className += ' is-bound';
	            addEvent(opts.trigger, 'click', self._onInputClick);
	            addEvent(opts.trigger, 'focus', self._onInputFocus);
	            addEvent(opts.trigger, 'blur', self._onInputBlur);
	        } else {
	            this.show();
	        }
	    };


	    /**
	     * public Pikaday API
	     */
	    Pikaday.prototype = {


	        /**
	         * configure functionality
	         */
	        config: function(options)
	        {
	            if (!this._o) {
	                this._o = extend({}, defaults, true);
	            }

	            var opts = extend(this._o, options, true);

	            opts.isRTL = !!opts.isRTL;

	            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

	            opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;

	            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

	            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

	            opts.disableWeekends = !!opts.disableWeekends;

	            opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;

	            var nom = parseInt(opts.numberOfMonths, 10) || 1;
	            opts.numberOfMonths = nom > 4 ? 4 : nom;

	            if (!isDate(opts.minDate)) {
	                opts.minDate = false;
	            }
	            if (!isDate(opts.maxDate)) {
	                opts.maxDate = false;
	            }
	            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
	                opts.maxDate = opts.minDate = false;
	            }
	            if (opts.minDate) {
	                this.setMinDate(opts.minDate);
	            }
	            if (opts.maxDate) {
	                this.setMaxDate(opts.maxDate);
	            }

	            if (isArray(opts.yearRange)) {
	                var fallback = new Date().getFullYear() - 10;
	                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
	                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
	            } else {
	                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
	                if (opts.yearRange > 100) {
	                    opts.yearRange = 100;
	                }
	            }

	            return opts;
	        },

	        /**
	         * return a formatted string of the current selection (using Moment.js if available)
	         */
	        toString: function(format)
	        {
	            return !isDate(this._d) ? '' : hasMoment ? moment(this._d).format(format || this._o.format) : this._d.toDateString();
	        },

	        /**
	         * return a Moment.js object of the current selection (if available)
	         */
	        getMoment: function()
	        {
	            return hasMoment ? moment(this._d) : null;
	        },

	        /**
	         * set the current selection from a Moment.js object (if available)
	         */
	        setMoment: function(date, preventOnSelect)
	        {
	            if (hasMoment && moment.isMoment(date)) {
	                this.setDate(date.toDate(), preventOnSelect);
	            }
	        },

	        /**
	         * return a Date object of the current selection
	         */
	        getDate: function()
	        {
	            return isDate(this._d) ? new Date(this._d.getTime()) : null;
	        },

	        /**
	         * set the current selection
	         */
	        setDate: function(date, preventOnSelect)
	        {
	            if (!date) {
	                this._d = null;

	                if (this._o.field) {
	                    this._o.field.value = '';
	                    fireEvent(this._o.field, 'change', { firedBy: this });
	                }

	                return this.draw();
	            }
	            if (typeof date === 'string') {
	                date = new Date(Date.parse(date));
	            }
	            if (!isDate(date)) {
	                return;
	            }

	            var min = this._o.minDate,
	                max = this._o.maxDate;

	            if (isDate(min) && date < min) {
	                date = min;
	            } else if (isDate(max) && date > max) {
	                date = max;
	            }

	            this._d = new Date(date.getTime());
	            setToStartOfDay(this._d);
	            this.gotoDate(this._d);

	            if (this._o.field) {
	                this._o.field.value = this.toString();
	                fireEvent(this._o.field, 'change', { firedBy: this });
	            }
	            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
	                this._o.onSelect.call(this, this.getDate());
	            }
	        },

	        /**
	         * change view to a specific date
	         */
	        gotoDate: function(date)
	        {
	            var newCalendar = true;

	            if (!isDate(date)) {
	                return;
	            }

	            if (this.calendars) {
	                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
	                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
	                    visibleDate = date.getTime();
	                // get the end of the month
	                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
	                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
	                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
	            }

	            if (newCalendar) {
	                this.calendars = [{
	                    month: date.getMonth(),
	                    year: date.getFullYear()
	                }];
	                if (this._o.mainCalendar === 'right') {
	                    this.calendars[0].month += 1 - this._o.numberOfMonths;
	                }
	            }

	            this.adjustCalendars();
	        },

	        adjustCalendars: function() {
	            this.calendars[0] = adjustCalendar(this.calendars[0]);
	            for (var c = 1; c < this._o.numberOfMonths; c++) {
	                this.calendars[c] = adjustCalendar({
	                    month: this.calendars[0].month + c,
	                    year: this.calendars[0].year
	                });
	            }
	            this.draw();
	        },

	        gotoToday: function()
	        {
	            this.gotoDate(new Date());
	        },

	        /**
	         * change view to a specific month (zero-index, e.g. 0: January)
	         */
	        gotoMonth: function(month)
	        {
	            if (!isNaN(month)) {
	                this.calendars[0].month = parseInt(month, 10);
	                this.adjustCalendars();
	            }
	        },

	        nextMonth: function()
	        {
	            this.calendars[0].month++;
	            this.adjustCalendars();
	        },

	        prevMonth: function()
	        {
	            this.calendars[0].month--;
	            this.adjustCalendars();
	        },

	        /**
	         * change view to a specific full year (e.g. "2012")
	         */
	        gotoYear: function(year)
	        {
	            if (!isNaN(year)) {
	                this.calendars[0].year = parseInt(year, 10);
	                this.adjustCalendars();
	            }
	        },

	        /**
	         * change the minDate
	         */
	        setMinDate: function(value)
	        {
	            setToStartOfDay(value);
	            this._o.minDate = value;
	            this._o.minYear  = value.getFullYear();
	            this._o.minMonth = value.getMonth();
	            this.draw();
	        },

	        /**
	         * change the maxDate
	         */
	        setMaxDate: function(value)
	        {
	            setToStartOfDay(value);
	            this._o.maxDate = value;
	            this._o.maxYear = value.getFullYear();
	            this._o.maxMonth = value.getMonth();
	            this.draw();
	        },

	        setStartRange: function(value)
	        {
	            this._o.startRange = value;
	        },

	        setEndRange: function(value)
	        {
	            this._o.endRange = value;
	        },

	        /**
	         * refresh the HTML
	         */
	        draw: function(force)
	        {
	            if (!this._v && !force) {
	                return;
	            }
	            var opts = this._o,
	                minYear = opts.minYear,
	                maxYear = opts.maxYear,
	                minMonth = opts.minMonth,
	                maxMonth = opts.maxMonth,
	                html = '';

	            if (this._y <= minYear) {
	                this._y = minYear;
	                if (!isNaN(minMonth) && this._m < minMonth) {
	                    this._m = minMonth;
	                }
	            }
	            if (this._y >= maxYear) {
	                this._y = maxYear;
	                if (!isNaN(maxMonth) && this._m > maxMonth) {
	                    this._m = maxMonth;
	                }
	            }

	            for (var c = 0; c < opts.numberOfMonths; c++) {
	                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year) + this.render(this.calendars[c].year, this.calendars[c].month) + '</div>';
	            }

	            this.el.innerHTML = html;

	            if (opts.bound) {
	                if(opts.field.type !== 'hidden') {
	                    sto(function() {
	                        opts.trigger.focus();
	                    }, 1);
	                }
	            }

	            if (typeof this._o.onDraw === 'function') {
	                var self = this;
	                sto(function() {
	                    self._o.onDraw.call(self);
	                }, 0);
	            }
	        },

	        adjustPosition: function()
	        {
	            var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect;

	            if (this._o.container) return;

	            this.el.style.position = 'absolute';

	            field = this._o.trigger;
	            pEl = field;
	            width = this.el.offsetWidth;
	            height = this.el.offsetHeight;
	            viewportWidth = window.innerWidth || document.documentElement.clientWidth;
	            viewportHeight = window.innerHeight || document.documentElement.clientHeight;
	            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;

	            if (typeof field.getBoundingClientRect === 'function') {
	                clientRect = field.getBoundingClientRect();
	                left = clientRect.left + window.pageXOffset;
	                top = clientRect.bottom + window.pageYOffset;
	            } else {
	                left = pEl.offsetLeft;
	                top  = pEl.offsetTop + pEl.offsetHeight;
	                while((pEl = pEl.offsetParent)) {
	                    left += pEl.offsetLeft;
	                    top  += pEl.offsetTop;
	                }
	            }

	            // default position is bottom & left
	            if ((this._o.reposition && left + width > viewportWidth) ||
	                (
	                    this._o.position.indexOf('right') > -1 &&
	                    left - width + field.offsetWidth > 0
	                )
	            ) {
	                left = left - width + field.offsetWidth;
	            }
	            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
	                (
	                    this._o.position.indexOf('top') > -1 &&
	                    top - height - field.offsetHeight > 0
	                )
	            ) {
	                top = top - height - field.offsetHeight;
	            }

	            this.el.style.left = left + 'px';
	            this.el.style.top = top + 'px';
	        },

	        /**
	         * render HTML for a particular month
	         */
	        render: function(year, month)
	        {
	            var opts   = this._o,
	                now    = new Date(),
	                days   = getDaysInMonth(year, month),
	                before = new Date(year, month, 1).getDay(),
	                data   = [],
	                row    = [];
	            setToStartOfDay(now);
	            if (opts.firstDay > 0) {
	                before -= opts.firstDay;
	                if (before < 0) {
	                    before += 7;
	                }
	            }
	            var cells = days + before,
	                after = cells;
	            while(after > 7) {
	                after -= 7;
	            }
	            cells += 7 - after;
	            for (var i = 0, r = 0; i < cells; i++)
	            {
	                var day = new Date(year, month, 1 + (i - before)),
	                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
	                    isToday = compareDates(day, now),
	                    isEmpty = i < before || i >= (days + before),
	                    isStartRange = opts.startRange && compareDates(opts.startRange, day),
	                    isEndRange = opts.endRange && compareDates(opts.endRange, day),
	                    isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
	                    isDisabled = (opts.minDate && day < opts.minDate) ||
	                                 (opts.maxDate && day > opts.maxDate) ||
	                                 (opts.disableWeekends && isWeekend(day)) ||
	                                 (opts.disableDayFn && opts.disableDayFn(day)),
	                    dayConfig = {
	                        day: 1 + (i - before),
	                        month: month,
	                        year: year,
	                        isSelected: isSelected,
	                        isToday: isToday,
	                        isDisabled: isDisabled,
	                        isEmpty: isEmpty,
	                        isStartRange: isStartRange,
	                        isEndRange: isEndRange,
	                        isInRange: isInRange
	                    };

	                row.push(renderDay(dayConfig));

	                if (++r === 7) {
	                    if (opts.showWeekNumber) {
	                        row.unshift(renderWeek(i - before, month, year));
	                    }
	                    data.push(renderRow(row, opts.isRTL));
	                    row = [];
	                    r = 0;
	                }
	            }
	            return renderTable(opts, data);
	        },

	        isVisible: function()
	        {
	            return this._v;
	        },

	        show: function()
	        {
	            if (!this._v) {
	                removeClass(this.el, 'is-hidden');
	                this._v = true;
	                this.draw();
	                if (this._o.bound) {
	                    addEvent(document, 'click', this._onClick);
	                    this.adjustPosition();
	                }
	                if (typeof this._o.onOpen === 'function') {
	                    this._o.onOpen.call(this);
	                }
	            }
	        },

	        hide: function()
	        {
	            var v = this._v;
	            if (v !== false) {
	                if (this._o.bound) {
	                    removeEvent(document, 'click', this._onClick);
	                }
	                this.el.style.position = 'static'; // reset
	                this.el.style.left = 'auto';
	                this.el.style.top = 'auto';
	                addClass(this.el, 'is-hidden');
	                this._v = false;
	                if (v !== undefined && typeof this._o.onClose === 'function') {
	                    this._o.onClose.call(this);
	                }
	            }
	        },

	        /**
	         * GAME OVER
	         */
	        destroy: function()
	        {
	            this.hide();
	            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
	            removeEvent(this.el, 'touchend', this._onMouseDown, true);
	            removeEvent(this.el, 'change', this._onChange);
	            if (this._o.field) {
	                removeEvent(this._o.field, 'change', this._onInputChange);
	                if (this._o.bound) {
	                    removeEvent(this._o.trigger, 'click', this._onInputClick);
	                    removeEvent(this._o.trigger, 'focus', this._onInputFocus);
	                    removeEvent(this._o.trigger, 'blur', this._onInputBlur);
	                }
	            }
	            if (this.el.parentNode) {
	                this.el.parentNode.removeChild(this.el);
	            }
	        }

	    };

	    return Pikaday;

	}));

	},{"moment":"moment"}],"zeroclipboard":[function(require,module,exports){
	/*!
	 * ZeroClipboard
	 * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.
	 * Copyright (c) 2009-2014 Jon Rohan, James M. Greene
	 * Licensed MIT
	 * http://zeroclipboard.org/
	 * v2.2.0
	 */
	(function(window, undefined) {
	  "use strict";
	  /**
	 * Store references to critically important global functions that may be
	 * overridden on certain web pages.
	 */
	  var _window = window, _document = _window.document, _navigator = _window.navigator, _setTimeout = _window.setTimeout, _clearTimeout = _window.clearTimeout, _setInterval = _window.setInterval, _clearInterval = _window.clearInterval, _getComputedStyle = _window.getComputedStyle, _encodeURIComponent = _window.encodeURIComponent, _ActiveXObject = _window.ActiveXObject, _Error = _window.Error, _parseInt = _window.Number.parseInt || _window.parseInt, _parseFloat = _window.Number.parseFloat || _window.parseFloat, _isNaN = _window.Number.isNaN || _window.isNaN, _now = _window.Date.now, _keys = _window.Object.keys, _defineProperty = _window.Object.defineProperty, _hasOwn = _window.Object.prototype.hasOwnProperty, _slice = _window.Array.prototype.slice, _unwrap = function() {
	    var unwrapper = function(el) {
	      return el;
	    };
	    if (typeof _window.wrap === "function" && typeof _window.unwrap === "function") {
	      try {
	        var div = _document.createElement("div");
	        var unwrappedDiv = _window.unwrap(div);
	        if (div.nodeType === 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) {
	          unwrapper = _window.unwrap;
	        }
	      } catch (e) {}
	    }
	    return unwrapper;
	  }();
	  /**
	 * Convert an `arguments` object into an Array.
	 *
	 * @returns The arguments as an Array
	 * @private
	 */
	  var _args = function(argumentsObj) {
	    return _slice.call(argumentsObj, 0);
	  };
	  /**
	 * Shallow-copy the owned, enumerable properties of one object over to another, similar to jQuery's `$.extend`.
	 *
	 * @returns The target object, augmented
	 * @private
	 */
	  var _extend = function() {
	    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};
	    for (i = 1, len = args.length; i < len; i++) {
	      if ((arg = args[i]) != null) {
	        for (prop in arg) {
	          if (_hasOwn.call(arg, prop)) {
	            src = target[prop];
	            copy = arg[prop];
	            if (target !== copy && copy !== undefined) {
	              target[prop] = copy;
	            }
	          }
	        }
	      }
	    }
	    return target;
	  };
	  /**
	 * Return a deep copy of the source object or array.
	 *
	 * @returns Object or Array
	 * @private
	 */
	  var _deepCopy = function(source) {
	    var copy, i, len, prop;
	    if (typeof source !== "object" || source == null || typeof source.nodeType === "number") {
	      copy = source;
	    } else if (typeof source.length === "number") {
	      copy = [];
	      for (i = 0, len = source.length; i < len; i++) {
	        if (_hasOwn.call(source, i)) {
	          copy[i] = _deepCopy(source[i]);
	        }
	      }
	    } else {
	      copy = {};
	      for (prop in source) {
	        if (_hasOwn.call(source, prop)) {
	          copy[prop] = _deepCopy(source[prop]);
	        }
	      }
	    }
	    return copy;
	  };
	  /**
	 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.
	 * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to
	 * be kept.
	 *
	 * @returns A new filtered object.
	 * @private
	 */
	  var _pick = function(obj, keys) {
	    var newObj = {};
	    for (var i = 0, len = keys.length; i < len; i++) {
	      if (keys[i] in obj) {
	        newObj[keys[i]] = obj[keys[i]];
	      }
	    }
	    return newObj;
	  };
	  /**
	 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.
	 * The inverse of `_pick`.
	 *
	 * @returns A new filtered object.
	 * @private
	 */
	  var _omit = function(obj, keys) {
	    var newObj = {};
	    for (var prop in obj) {
	      if (keys.indexOf(prop) === -1) {
	        newObj[prop] = obj[prop];
	      }
	    }
	    return newObj;
	  };
	  /**
	 * Remove all owned, enumerable properties from an object.
	 *
	 * @returns The original object without its owned, enumerable properties.
	 * @private
	 */
	  var _deleteOwnProperties = function(obj) {
	    if (obj) {
	      for (var prop in obj) {
	        if (_hasOwn.call(obj, prop)) {
	          delete obj[prop];
	        }
	      }
	    }
	    return obj;
	  };
	  /**
	 * Determine if an element is contained within another element.
	 *
	 * @returns Boolean
	 * @private
	 */
	  var _containedBy = function(el, ancestorEl) {
	    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {
	      do {
	        if (el === ancestorEl) {
	          return true;
	        }
	        el = el.parentNode;
	      } while (el);
	    }
	    return false;
	  };
	  /**
	 * Get the URL path's parent directory.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getDirPathOfUrl = function(url) {
	    var dir;
	    if (typeof url === "string" && url) {
	      dir = url.split("#")[0].split("?")[0];
	      dir = url.slice(0, url.lastIndexOf("/") + 1);
	    }
	    return dir;
	  };
	  /**
	 * Get the current script's URL by throwing an `Error` and analyzing it.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getCurrentScriptUrlFromErrorStack = function(stack) {
	    var url, matches;
	    if (typeof stack === "string" && stack) {
	      matches = stack.match(/^(?:|[^:@]*@|.+\)@(?=http[s]?|file)|.+?\s+(?: at |@)(?:[^:\(]+ )*[\(]?)((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
	      if (matches && matches[1]) {
	        url = matches[1];
	      } else {
	        matches = stack.match(/\)@((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
	        if (matches && matches[1]) {
	          url = matches[1];
	        }
	      }
	    }
	    return url;
	  };
	  /**
	 * Get the current script's URL by throwing an `Error` and analyzing it.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getCurrentScriptUrlFromError = function() {
	    var url, err;
	    try {
	      throw new _Error();
	    } catch (e) {
	      err = e;
	    }
	    if (err) {
	      url = err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack);
	    }
	    return url;
	  };
	  /**
	 * Get the current script's URL.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getCurrentScriptUrl = function() {
	    var jsPath, scripts, i;
	    if (_document.currentScript && (jsPath = _document.currentScript.src)) {
	      return jsPath;
	    }
	    scripts = _document.getElementsByTagName("script");
	    if (scripts.length === 1) {
	      return scripts[0].src || undefined;
	    }
	    if ("readyState" in scripts[0]) {
	      for (i = scripts.length; i--; ) {
	        if (scripts[i].readyState === "interactive" && (jsPath = scripts[i].src)) {
	          return jsPath;
	        }
	      }
	    }
	    if (_document.readyState === "loading" && (jsPath = scripts[scripts.length - 1].src)) {
	      return jsPath;
	    }
	    if (jsPath = _getCurrentScriptUrlFromError()) {
	      return jsPath;
	    }
	    return undefined;
	  };
	  /**
	 * Get the unanimous parent directory of ALL script tags.
	 * If any script tags are either (a) inline or (b) from differing parent
	 * directories, this method must return `undefined`.
	 *
	 * @returns String or `undefined`
	 * @private
	 */
	  var _getUnanimousScriptParentDir = function() {
	    var i, jsDir, jsPath, scripts = _document.getElementsByTagName("script");
	    for (i = scripts.length; i--; ) {
	      if (!(jsPath = scripts[i].src)) {
	        jsDir = null;
	        break;
	      }
	      jsPath = _getDirPathOfUrl(jsPath);
	      if (jsDir == null) {
	        jsDir = jsPath;
	      } else if (jsDir !== jsPath) {
	        jsDir = null;
	        break;
	      }
	    }
	    return jsDir || undefined;
	  };
	  /**
	 * Get the presumed location of the "ZeroClipboard.swf" file, based on the location
	 * of the executing JavaScript file (e.g. "ZeroClipboard.js", etc.).
	 *
	 * @returns String
	 * @private
	 */
	  var _getDefaultSwfPath = function() {
	    var jsDir = _getDirPathOfUrl(_getCurrentScriptUrl()) || _getUnanimousScriptParentDir() || "";
	    return jsDir + "ZeroClipboard.swf";
	  };
	  /**
	 * Keep track of if the page is framed (in an `iframe`). This can never change.
	 * @private
	 */
	  var _pageIsFramed = function() {
	    return window.opener == null && (!!window.top && window != window.top || !!window.parent && window != window.parent);
	  }();
	  /**
	 * Keep track of the state of the Flash object.
	 * @private
	 */
	  var _flashState = {
	    bridge: null,
	    version: "0.0.0",
	    pluginType: "unknown",
	    disabled: null,
	    outdated: null,
	    sandboxed: null,
	    unavailable: null,
	    degraded: null,
	    deactivated: null,
	    overdue: null,
	    ready: null
	  };
	  /**
	 * The minimum Flash Player version required to use ZeroClipboard completely.
	 * @readonly
	 * @private
	 */
	  var _minimumFlashVersion = "11.0.0";
	  /**
	 * The ZeroClipboard library version number, as reported by Flash, at the time the SWF was compiled.
	 */
	  var _zcSwfVersion;
	  /**
	 * Keep track of all event listener registrations.
	 * @private
	 */
	  var _handlers = {};
	  /**
	 * Keep track of the currently activated element.
	 * @private
	 */
	  var _currentElement;
	  /**
	 * Keep track of the element that was activated when a `copy` process started.
	 * @private
	 */
	  var _copyTarget;
	  /**
	 * Keep track of data for the pending clipboard transaction.
	 * @private
	 */
	  var _clipData = {};
	  /**
	 * Keep track of data formats for the pending clipboard transaction.
	 * @private
	 */
	  var _clipDataFormatMap = null;
	  /**
	 * Keep track of the Flash availability check timeout.
	 * @private
	 */
	  var _flashCheckTimeout = 0;
	  /**
	 * Keep track of SWF network errors interval polling.
	 * @private
	 */
	  var _swfFallbackCheckInterval = 0;
	  /**
	 * The `message` store for events
	 * @private
	 */
	  var _eventMessages = {
	    ready: "Flash communication is established",
	    error: {
	      "flash-disabled": "Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.",
	      "flash-outdated": "Flash is too outdated to support ZeroClipboard",
	      "flash-sandboxed": "Attempting to run Flash in a sandboxed iframe, which is impossible",
	      "flash-unavailable": "Flash is unable to communicate bidirectionally with JavaScript",
	      "flash-degraded": "Flash is unable to preserve data fidelity when communicating with JavaScript",
	      "flash-deactivated": "Flash is too outdated for your browser and/or is configured as click-to-activate.\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.",
	      "flash-overdue": "Flash communication was established but NOT within the acceptable time limit",
	      "version-mismatch": "ZeroClipboard JS version number does not match ZeroClipboard SWF version number",
	      "clipboard-error": "At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard",
	      "config-mismatch": "ZeroClipboard configuration does not match Flash's reality",
	      "swf-not-found": "The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity"
	    }
	  };
	  /**
	 * The `name`s of `error` events that can only occur is Flash has at least
	 * been able to load the SWF successfully.
	 * @private
	 */
	  var _errorsThatOnlyOccurAfterFlashLoads = [ "flash-unavailable", "flash-degraded", "flash-overdue", "version-mismatch", "config-mismatch", "clipboard-error" ];
	  /**
	 * The `name`s of `error` events that should likely result in the `_flashState`
	 * variable's property values being updated.
	 * @private
	 */
	  var _flashStateErrorNames = [ "flash-disabled", "flash-outdated", "flash-sandboxed", "flash-unavailable", "flash-degraded", "flash-deactivated", "flash-overdue" ];
	  /**
	 * A RegExp to match the `name` property of `error` events related to Flash.
	 * @private
	 */
	  var _flashStateErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.map(function(errorName) {
	    return errorName.replace(/^flash-/, "");
	  }).join("|") + ")$");
	  /**
	 * A RegExp to match the `name` property of `error` events related to Flash,
	 * which is enabled.
	 * @private
	 */
	  var _flashStateEnabledErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.slice(1).map(function(errorName) {
	    return errorName.replace(/^flash-/, "");
	  }).join("|") + ")$");
	  /**
	 * ZeroClipboard configuration defaults for the Core module.
	 * @private
	 */
	  var _globalConfig = {
	    swfPath: _getDefaultSwfPath(),
	    trustedDomains: window.location.host ? [ window.location.host ] : [],
	    cacheBust: true,
	    forceEnhancedClipboard: false,
	    flashLoadTimeout: 3e4,
	    autoActivate: true,
	    bubbleEvents: true,
	    containerId: "global-zeroclipboard-html-bridge",
	    containerClass: "global-zeroclipboard-container",
	    swfObjectId: "global-zeroclipboard-flash-bridge",
	    hoverClass: "zeroclipboard-is-hover",
	    activeClass: "zeroclipboard-is-active",
	    forceHandCursor: false,
	    title: null,
	    zIndex: 999999999
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.config`.
	 * @private
	 */
	  var _config = function(options) {
	    if (typeof options === "object" && options !== null) {
	      for (var prop in options) {
	        if (_hasOwn.call(options, prop)) {
	          if (/^(?:forceHandCursor|title|zIndex|bubbleEvents)$/.test(prop)) {
	            _globalConfig[prop] = options[prop];
	          } else if (_flashState.bridge == null) {
	            if (prop === "containerId" || prop === "swfObjectId") {
	              if (_isValidHtml4Id(options[prop])) {
	                _globalConfig[prop] = options[prop];
	              } else {
	                throw new Error("The specified `" + prop + "` value is not valid as an HTML4 Element ID");
	              }
	            } else {
	              _globalConfig[prop] = options[prop];
	            }
	          }
	        }
	      }
	    }
	    if (typeof options === "string" && options) {
	      if (_hasOwn.call(_globalConfig, options)) {
	        return _globalConfig[options];
	      }
	      return;
	    }
	    return _deepCopy(_globalConfig);
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.state`.
	 * @private
	 */
	  var _state = function() {
	    _detectSandbox();
	    return {
	      browser: _pick(_navigator, [ "userAgent", "platform", "appName" ]),
	      flash: _omit(_flashState, [ "bridge" ]),
	      zeroclipboard: {
	        version: ZeroClipboard.version,
	        config: ZeroClipboard.config()
	      }
	    };
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.isFlashUnusable`.
	 * @private
	 */
	  var _isFlashUnusable = function() {
	    return !!(_flashState.disabled || _flashState.outdated || _flashState.sandboxed || _flashState.unavailable || _flashState.degraded || _flashState.deactivated);
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.on`.
	 * @private
	 */
	  var _on = function(eventType, listener) {
	    var i, len, events, added = {};
	    if (typeof eventType === "string" && eventType) {
	      events = eventType.toLowerCase().split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          ZeroClipboard.on(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].replace(/^on/, "");
	        added[eventType] = true;
	        if (!_handlers[eventType]) {
	          _handlers[eventType] = [];
	        }
	        _handlers[eventType].push(listener);
	      }
	      if (added.ready && _flashState.ready) {
	        ZeroClipboard.emit({
	          type: "ready"
	        });
	      }
	      if (added.error) {
	        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
	          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")] === true) {
	            ZeroClipboard.emit({
	              type: "error",
	              name: _flashStateErrorNames[i]
	            });
	            break;
	          }
	        }
	        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
	          ZeroClipboard.emit({
	            type: "error",
	            name: "version-mismatch",
	            jsVersion: ZeroClipboard.version,
	            swfVersion: _zcSwfVersion
	          });
	        }
	      }
	    }
	    return ZeroClipboard;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.off`.
	 * @private
	 */
	  var _off = function(eventType, listener) {
	    var i, len, foundIndex, events, perEventHandlers;
	    if (arguments.length === 0) {
	      events = _keys(_handlers);
	    } else if (typeof eventType === "string" && eventType) {
	      events = eventType.split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          ZeroClipboard.off(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].toLowerCase().replace(/^on/, "");
	        perEventHandlers = _handlers[eventType];
	        if (perEventHandlers && perEventHandlers.length) {
	          if (listener) {
	            foundIndex = perEventHandlers.indexOf(listener);
	            while (foundIndex !== -1) {
	              perEventHandlers.splice(foundIndex, 1);
	              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
	            }
	          } else {
	            perEventHandlers.length = 0;
	          }
	        }
	      }
	    }
	    return ZeroClipboard;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.handlers`.
	 * @private
	 */
	  var _listeners = function(eventType) {
	    var copy;
	    if (typeof eventType === "string" && eventType) {
	      copy = _deepCopy(_handlers[eventType]) || null;
	    } else {
	      copy = _deepCopy(_handlers);
	    }
	    return copy;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.emit`.
	 * @private
	 */
	  var _emit = function(event) {
	    var eventCopy, returnVal, tmp;
	    event = _createEvent(event);
	    if (!event) {
	      return;
	    }
	    if (_preprocessEvent(event)) {
	      return;
	    }
	    if (event.type === "ready" && _flashState.overdue === true) {
	      return ZeroClipboard.emit({
	        type: "error",
	        name: "flash-overdue"
	      });
	    }
	    eventCopy = _extend({}, event);
	    _dispatchCallbacks.call(this, eventCopy);
	    if (event.type === "copy") {
	      tmp = _mapClipDataToFlash(_clipData);
	      returnVal = tmp.data;
	      _clipDataFormatMap = tmp.formatMap;
	    }
	    return returnVal;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.create`.
	 * @private
	 */
	  var _create = function() {
	    var previousState = _flashState.sandboxed;
	    _detectSandbox();
	    if (typeof _flashState.ready !== "boolean") {
	      _flashState.ready = false;
	    }
	    if (_flashState.sandboxed !== previousState && _flashState.sandboxed === true) {
	      _flashState.ready = false;
	      ZeroClipboard.emit({
	        type: "error",
	        name: "flash-sandboxed"
	      });
	    } else if (!ZeroClipboard.isFlashUnusable() && _flashState.bridge === null) {
	      var maxWait = _globalConfig.flashLoadTimeout;
	      if (typeof maxWait === "number" && maxWait >= 0) {
	        _flashCheckTimeout = _setTimeout(function() {
	          if (typeof _flashState.deactivated !== "boolean") {
	            _flashState.deactivated = true;
	          }
	          if (_flashState.deactivated === true) {
	            ZeroClipboard.emit({
	              type: "error",
	              name: "flash-deactivated"
	            });
	          }
	        }, maxWait);
	      }
	      _flashState.overdue = false;
	      _embedSwf();
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.destroy`.
	 * @private
	 */
	  var _destroy = function() {
	    ZeroClipboard.clearData();
	    ZeroClipboard.blur();
	    ZeroClipboard.emit("destroy");
	    _unembedSwf();
	    ZeroClipboard.off();
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.setData`.
	 * @private
	 */
	  var _setData = function(format, data) {
	    var dataObj;
	    if (typeof format === "object" && format && typeof data === "undefined") {
	      dataObj = format;
	      ZeroClipboard.clearData();
	    } else if (typeof format === "string" && format) {
	      dataObj = {};
	      dataObj[format] = data;
	    } else {
	      return;
	    }
	    for (var dataFormat in dataObj) {
	      if (typeof dataFormat === "string" && dataFormat && _hasOwn.call(dataObj, dataFormat) && typeof dataObj[dataFormat] === "string" && dataObj[dataFormat]) {
	        _clipData[dataFormat] = dataObj[dataFormat];
	      }
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.clearData`.
	 * @private
	 */
	  var _clearData = function(format) {
	    if (typeof format === "undefined") {
	      _deleteOwnProperties(_clipData);
	      _clipDataFormatMap = null;
	    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
	      delete _clipData[format];
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.getData`.
	 * @private
	 */
	  var _getData = function(format) {
	    if (typeof format === "undefined") {
	      return _deepCopy(_clipData);
	    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
	      return _clipData[format];
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.focus`/`ZeroClipboard.activate`.
	 * @private
	 */
	  var _focus = function(element) {
	    if (!(element && element.nodeType === 1)) {
	      return;
	    }
	    if (_currentElement) {
	      _removeClass(_currentElement, _globalConfig.activeClass);
	      if (_currentElement !== element) {
	        _removeClass(_currentElement, _globalConfig.hoverClass);
	      }
	    }
	    _currentElement = element;
	    _addClass(element, _globalConfig.hoverClass);
	    var newTitle = element.getAttribute("title") || _globalConfig.title;
	    if (typeof newTitle === "string" && newTitle) {
	      var htmlBridge = _getHtmlBridge(_flashState.bridge);
	      if (htmlBridge) {
	        htmlBridge.setAttribute("title", newTitle);
	      }
	    }
	    var useHandCursor = _globalConfig.forceHandCursor === true || _getStyle(element, "cursor") === "pointer";
	    _setHandCursor(useHandCursor);
	    _reposition();
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.blur`/`ZeroClipboard.deactivate`.
	 * @private
	 */
	  var _blur = function() {
	    var htmlBridge = _getHtmlBridge(_flashState.bridge);
	    if (htmlBridge) {
	      htmlBridge.removeAttribute("title");
	      htmlBridge.style.left = "0px";
	      htmlBridge.style.top = "-9999px";
	      htmlBridge.style.width = "1px";
	      htmlBridge.style.height = "1px";
	    }
	    if (_currentElement) {
	      _removeClass(_currentElement, _globalConfig.hoverClass);
	      _removeClass(_currentElement, _globalConfig.activeClass);
	      _currentElement = null;
	    }
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.activeElement`.
	 * @private
	 */
	  var _activeElement = function() {
	    return _currentElement || null;
	  };
	  /**
	 * Check if a value is a valid HTML4 `ID` or `Name` token.
	 * @private
	 */
	  var _isValidHtml4Id = function(id) {
	    return typeof id === "string" && id && /^[A-Za-z][A-Za-z0-9_:\-\.]*$/.test(id);
	  };
	  /**
	 * Create or update an `event` object, based on the `eventType`.
	 * @private
	 */
	  var _createEvent = function(event) {
	    var eventType;
	    if (typeof event === "string" && event) {
	      eventType = event;
	      event = {};
	    } else if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
	      eventType = event.type;
	    }
	    if (!eventType) {
	      return;
	    }
	    eventType = eventType.toLowerCase();
	    if (!event.target && (/^(copy|aftercopy|_click)$/.test(eventType) || eventType === "error" && event.name === "clipboard-error")) {
	      event.target = _copyTarget;
	    }
	    _extend(event, {
	      type: eventType,
	      target: event.target || _currentElement || null,
	      relatedTarget: event.relatedTarget || null,
	      currentTarget: _flashState && _flashState.bridge || null,
	      timeStamp: event.timeStamp || _now() || null
	    });
	    var msg = _eventMessages[event.type];
	    if (event.type === "error" && event.name && msg) {
	      msg = msg[event.name];
	    }
	    if (msg) {
	      event.message = msg;
	    }
	    if (event.type === "ready") {
	      _extend(event, {
	        target: null,
	        version: _flashState.version
	      });
	    }
	    if (event.type === "error") {
	      if (_flashStateErrorNameMatchingRegex.test(event.name)) {
	        _extend(event, {
	          target: null,
	          minimumVersion: _minimumFlashVersion
	        });
	      }
	      if (_flashStateEnabledErrorNameMatchingRegex.test(event.name)) {
	        _extend(event, {
	          version: _flashState.version
	        });
	      }
	    }
	    if (event.type === "copy") {
	      event.clipboardData = {
	        setData: ZeroClipboard.setData,
	        clearData: ZeroClipboard.clearData
	      };
	    }
	    if (event.type === "aftercopy") {
	      event = _mapClipResultsFromFlash(event, _clipDataFormatMap);
	    }
	    if (event.target && !event.relatedTarget) {
	      event.relatedTarget = _getRelatedTarget(event.target);
	    }
	    return _addMouseData(event);
	  };
	  /**
	 * Get a relatedTarget from the target's `data-clipboard-target` attribute
	 * @private
	 */
	  var _getRelatedTarget = function(targetEl) {
	    var relatedTargetId = targetEl && targetEl.getAttribute && targetEl.getAttribute("data-clipboard-target");
	    return relatedTargetId ? _document.getElementById(relatedTargetId) : null;
	  };
	  /**
	 * Add element and position data to `MouseEvent` instances
	 * @private
	 */
	  var _addMouseData = function(event) {
	    if (event && /^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
	      var srcElement = event.target;
	      var fromElement = event.type === "_mouseover" && event.relatedTarget ? event.relatedTarget : undefined;
	      var toElement = event.type === "_mouseout" && event.relatedTarget ? event.relatedTarget : undefined;
	      var pos = _getElementPosition(srcElement);
	      var screenLeft = _window.screenLeft || _window.screenX || 0;
	      var screenTop = _window.screenTop || _window.screenY || 0;
	      var scrollLeft = _document.body.scrollLeft + _document.documentElement.scrollLeft;
	      var scrollTop = _document.body.scrollTop + _document.documentElement.scrollTop;
	      var pageX = pos.left + (typeof event._stageX === "number" ? event._stageX : 0);
	      var pageY = pos.top + (typeof event._stageY === "number" ? event._stageY : 0);
	      var clientX = pageX - scrollLeft;
	      var clientY = pageY - scrollTop;
	      var screenX = screenLeft + clientX;
	      var screenY = screenTop + clientY;
	      var moveX = typeof event.movementX === "number" ? event.movementX : 0;
	      var moveY = typeof event.movementY === "number" ? event.movementY : 0;
	      delete event._stageX;
	      delete event._stageY;
	      _extend(event, {
	        srcElement: srcElement,
	        fromElement: fromElement,
	        toElement: toElement,
	        screenX: screenX,
	        screenY: screenY,
	        pageX: pageX,
	        pageY: pageY,
	        clientX: clientX,
	        clientY: clientY,
	        x: clientX,
	        y: clientY,
	        movementX: moveX,
	        movementY: moveY,
	        offsetX: 0,
	        offsetY: 0,
	        layerX: 0,
	        layerY: 0
	      });
	    }
	    return event;
	  };
	  /**
	 * Determine if an event's registered handlers should be execute synchronously or asynchronously.
	 *
	 * @returns {boolean}
	 * @private
	 */
	  var _shouldPerformAsync = function(event) {
	    var eventType = event && typeof event.type === "string" && event.type || "";
	    return !/^(?:(?:before)?copy|destroy)$/.test(eventType);
	  };
	  /**
	 * Control if a callback should be executed asynchronously or not.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _dispatchCallback = function(func, context, args, async) {
	    if (async) {
	      _setTimeout(function() {
	        func.apply(context, args);
	      }, 0);
	    } else {
	      func.apply(context, args);
	    }
	  };
	  /**
	 * Handle the actual dispatching of events to client instances.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _dispatchCallbacks = function(event) {
	    if (!(typeof event === "object" && event && event.type)) {
	      return;
	    }
	    var async = _shouldPerformAsync(event);
	    var wildcardTypeHandlers = _handlers["*"] || [];
	    var specificTypeHandlers = _handlers[event.type] || [];
	    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
	    if (handlers && handlers.length) {
	      var i, len, func, context, eventCopy, originalContext = this;
	      for (i = 0, len = handlers.length; i < len; i++) {
	        func = handlers[i];
	        context = originalContext;
	        if (typeof func === "string" && typeof _window[func] === "function") {
	          func = _window[func];
	        }
	        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
	          context = func;
	          func = func.handleEvent;
	        }
	        if (typeof func === "function") {
	          eventCopy = _extend({}, event);
	          _dispatchCallback(func, context, [ eventCopy ], async);
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * Check an `error` event's `name` property to see if Flash has
	 * already loaded, which rules out possible `iframe` sandboxing.
	 * @private
	 */
	  var _getSandboxStatusFromErrorEvent = function(event) {
	    var isSandboxed = null;
	    if (_pageIsFramed === false || event && event.type === "error" && event.name && _errorsThatOnlyOccurAfterFlashLoads.indexOf(event.name) !== -1) {
	      isSandboxed = false;
	    }
	    return isSandboxed;
	  };
	  /**
	 * Preprocess any special behaviors, reactions, or state changes after receiving this event.
	 * Executes only once per event emitted, NOT once per client.
	 * @private
	 */
	  var _preprocessEvent = function(event) {
	    var element = event.target || _currentElement || null;
	    var sourceIsSwf = event._source === "swf";
	    delete event._source;
	    switch (event.type) {
	     case "error":
	      var isSandboxed = event.name === "flash-sandboxed" || _getSandboxStatusFromErrorEvent(event);
	      if (typeof isSandboxed === "boolean") {
	        _flashState.sandboxed = isSandboxed;
	      }
	      if (_flashStateErrorNames.indexOf(event.name) !== -1) {
	        _extend(_flashState, {
	          disabled: event.name === "flash-disabled",
	          outdated: event.name === "flash-outdated",
	          unavailable: event.name === "flash-unavailable",
	          degraded: event.name === "flash-degraded",
	          deactivated: event.name === "flash-deactivated",
	          overdue: event.name === "flash-overdue",
	          ready: false
	        });
	      } else if (event.name === "version-mismatch") {
	        _zcSwfVersion = event.swfVersion;
	        _extend(_flashState, {
	          disabled: false,
	          outdated: false,
	          unavailable: false,
	          degraded: false,
	          deactivated: false,
	          overdue: false,
	          ready: false
	        });
	      }
	      _clearTimeoutsAndPolling();
	      break;

	     case "ready":
	      _zcSwfVersion = event.swfVersion;
	      var wasDeactivated = _flashState.deactivated === true;
	      _extend(_flashState, {
	        disabled: false,
	        outdated: false,
	        sandboxed: false,
	        unavailable: false,
	        degraded: false,
	        deactivated: false,
	        overdue: wasDeactivated,
	        ready: !wasDeactivated
	      });
	      _clearTimeoutsAndPolling();
	      break;

	     case "beforecopy":
	      _copyTarget = element;
	      break;

	     case "copy":
	      var textContent, htmlContent, targetEl = event.relatedTarget;
	      if (!(_clipData["text/html"] || _clipData["text/plain"]) && targetEl && (htmlContent = targetEl.value || targetEl.outerHTML || targetEl.innerHTML) && (textContent = targetEl.value || targetEl.textContent || targetEl.innerText)) {
	        event.clipboardData.clearData();
	        event.clipboardData.setData("text/plain", textContent);
	        if (htmlContent !== textContent) {
	          event.clipboardData.setData("text/html", htmlContent);
	        }
	      } else if (!_clipData["text/plain"] && event.target && (textContent = event.target.getAttribute("data-clipboard-text"))) {
	        event.clipboardData.clearData();
	        event.clipboardData.setData("text/plain", textContent);
	      }
	      break;

	     case "aftercopy":
	      _queueEmitClipboardErrors(event);
	      ZeroClipboard.clearData();
	      if (element && element !== _safeActiveElement() && element.focus) {
	        element.focus();
	      }
	      break;

	     case "_mouseover":
	      ZeroClipboard.focus(element);
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
	          _fireMouseEvent(_extend({}, event, {
	            type: "mouseenter",
	            bubbles: false,
	            cancelable: false
	          }));
	        }
	        _fireMouseEvent(_extend({}, event, {
	          type: "mouseover"
	        }));
	      }
	      break;

	     case "_mouseout":
	      ZeroClipboard.blur();
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
	          _fireMouseEvent(_extend({}, event, {
	            type: "mouseleave",
	            bubbles: false,
	            cancelable: false
	          }));
	        }
	        _fireMouseEvent(_extend({}, event, {
	          type: "mouseout"
	        }));
	      }
	      break;

	     case "_mousedown":
	      _addClass(element, _globalConfig.activeClass);
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;

	     case "_mouseup":
	      _removeClass(element, _globalConfig.activeClass);
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;

	     case "_click":
	      _copyTarget = null;
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;

	     case "_mousemove":
	      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
	        _fireMouseEvent(_extend({}, event, {
	          type: event.type.slice(1)
	        }));
	      }
	      break;
	    }
	    if (/^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
	      return true;
	    }
	  };
	  /**
	 * Check an "aftercopy" event for clipboard errors and emit a corresponding "error" event.
	 * @private
	 */
	  var _queueEmitClipboardErrors = function(aftercopyEvent) {
	    if (aftercopyEvent.errors && aftercopyEvent.errors.length > 0) {
	      var errorEvent = _deepCopy(aftercopyEvent);
	      _extend(errorEvent, {
	        type: "error",
	        name: "clipboard-error"
	      });
	      delete errorEvent.success;
	      _setTimeout(function() {
	        ZeroClipboard.emit(errorEvent);
	      }, 0);
	    }
	  };
	  /**
	 * Dispatch a synthetic MouseEvent.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _fireMouseEvent = function(event) {
	    if (!(event && typeof event.type === "string" && event)) {
	      return;
	    }
	    var e, target = event.target || null, doc = target && target.ownerDocument || _document, defaults = {
	      view: doc.defaultView || _window,
	      canBubble: true,
	      cancelable: true,
	      detail: event.type === "click" ? 1 : 0,
	      button: typeof event.which === "number" ? event.which - 1 : typeof event.button === "number" ? event.button : doc.createEvent ? 0 : 1
	    }, args = _extend(defaults, event);
	    if (!target) {
	      return;
	    }
	    if (doc.createEvent && target.dispatchEvent) {
	      args = [ args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget ];
	      e = doc.createEvent("MouseEvents");
	      if (e.initMouseEvent) {
	        e.initMouseEvent.apply(e, args);
	        e._source = "js";
	        target.dispatchEvent(e);
	      }
	    }
	  };
	  /**
	 * Continuously poll the DOM until either:
	 *  (a) the fallback content becomes visible, or
	 *  (b) we receive an event from SWF (handled elsewhere)
	 *
	 * IMPORTANT:
	 * This is NOT a necessary check but it can result in significantly faster
	 * detection of bad `swfPath` configuration and/or network/server issues [in
	 * supported browsers] than waiting for the entire `flashLoadTimeout` duration
	 * to elapse before detecting that the SWF cannot be loaded. The detection
	 * duration can be anywhere from 10-30 times faster [in supported browsers] by
	 * using this approach.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _watchForSwfFallbackContent = function() {
	    var maxWait = _globalConfig.flashLoadTimeout;
	    if (typeof maxWait === "number" && maxWait >= 0) {
	      var pollWait = Math.min(1e3, maxWait / 10);
	      var fallbackContentId = _globalConfig.swfObjectId + "_fallbackContent";
	      _swfFallbackCheckInterval = _setInterval(function() {
	        var el = _document.getElementById(fallbackContentId);
	        if (_isElementVisible(el)) {
	          _clearTimeoutsAndPolling();
	          _flashState.deactivated = null;
	          ZeroClipboard.emit({
	            type: "error",
	            name: "swf-not-found"
	          });
	        }
	      }, pollWait);
	    }
	  };
	  /**
	 * Create the HTML bridge element to embed the Flash object into.
	 * @private
	 */
	  var _createHtmlBridge = function() {
	    var container = _document.createElement("div");
	    container.id = _globalConfig.containerId;
	    container.className = _globalConfig.containerClass;
	    container.style.position = "absolute";
	    container.style.left = "0px";
	    container.style.top = "-9999px";
	    container.style.width = "1px";
	    container.style.height = "1px";
	    container.style.zIndex = "" + _getSafeZIndex(_globalConfig.zIndex);
	    return container;
	  };
	  /**
	 * Get the HTML element container that wraps the Flash bridge object/element.
	 * @private
	 */
	  var _getHtmlBridge = function(flashBridge) {
	    var htmlBridge = flashBridge && flashBridge.parentNode;
	    while (htmlBridge && htmlBridge.nodeName === "OBJECT" && htmlBridge.parentNode) {
	      htmlBridge = htmlBridge.parentNode;
	    }
	    return htmlBridge || null;
	  };
	  /**
	 * Create the SWF object.
	 *
	 * @returns The SWF object reference.
	 * @private
	 */
	  var _embedSwf = function() {
	    var len, flashBridge = _flashState.bridge, container = _getHtmlBridge(flashBridge);
	    if (!flashBridge) {
	      var allowScriptAccess = _determineScriptAccess(_window.location.host, _globalConfig);
	      var allowNetworking = allowScriptAccess === "never" ? "none" : "all";
	      var flashvars = _vars(_extend({
	        jsVersion: ZeroClipboard.version
	      }, _globalConfig));
	      var swfUrl = _globalConfig.swfPath + _cacheBust(_globalConfig.swfPath, _globalConfig);
	      container = _createHtmlBridge();
	      var divToBeReplaced = _document.createElement("div");
	      container.appendChild(divToBeReplaced);
	      _document.body.appendChild(container);
	      var tmpDiv = _document.createElement("div");
	      var usingActiveX = _flashState.pluginType === "activex";
	      tmpDiv.innerHTML = '<object id="' + _globalConfig.swfObjectId + '" name="' + _globalConfig.swfObjectId + '" ' + 'width="100%" height="100%" ' + (usingActiveX ? 'classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"' : 'type="application/x-shockwave-flash" data="' + swfUrl + '"') + ">" + (usingActiveX ? '<param name="movie" value="' + swfUrl + '"/>' : "") + '<param name="allowScriptAccess" value="' + allowScriptAccess + '"/>' + '<param name="allowNetworking" value="' + allowNetworking + '"/>' + '<param name="menu" value="false"/>' + '<param name="wmode" value="transparent"/>' + '<param name="flashvars" value="' + flashvars + '"/>' + '<div id="' + _globalConfig.swfObjectId + '_fallbackContent">&nbsp;</div>' + "</object>";
	      flashBridge = tmpDiv.firstChild;
	      tmpDiv = null;
	      _unwrap(flashBridge).ZeroClipboard = ZeroClipboard;
	      container.replaceChild(flashBridge, divToBeReplaced);
	      _watchForSwfFallbackContent();
	    }
	    if (!flashBridge) {
	      flashBridge = _document[_globalConfig.swfObjectId];
	      if (flashBridge && (len = flashBridge.length)) {
	        flashBridge = flashBridge[len - 1];
	      }
	      if (!flashBridge && container) {
	        flashBridge = container.firstChild;
	      }
	    }
	    _flashState.bridge = flashBridge || null;
	    return flashBridge;
	  };
	  /**
	 * Destroy the SWF object.
	 * @private
	 */
	  var _unembedSwf = function() {
	    var flashBridge = _flashState.bridge;
	    if (flashBridge) {
	      var htmlBridge = _getHtmlBridge(flashBridge);
	      if (htmlBridge) {
	        if (_flashState.pluginType === "activex" && "readyState" in flashBridge) {
	          flashBridge.style.display = "none";
	          (function removeSwfFromIE() {
	            if (flashBridge.readyState === 4) {
	              for (var prop in flashBridge) {
	                if (typeof flashBridge[prop] === "function") {
	                  flashBridge[prop] = null;
	                }
	              }
	              if (flashBridge.parentNode) {
	                flashBridge.parentNode.removeChild(flashBridge);
	              }
	              if (htmlBridge.parentNode) {
	                htmlBridge.parentNode.removeChild(htmlBridge);
	              }
	            } else {
	              _setTimeout(removeSwfFromIE, 10);
	            }
	          })();
	        } else {
	          if (flashBridge.parentNode) {
	            flashBridge.parentNode.removeChild(flashBridge);
	          }
	          if (htmlBridge.parentNode) {
	            htmlBridge.parentNode.removeChild(htmlBridge);
	          }
	        }
	      }
	      _clearTimeoutsAndPolling();
	      _flashState.ready = null;
	      _flashState.bridge = null;
	      _flashState.deactivated = null;
	      _zcSwfVersion = undefined;
	    }
	  };
	  /**
	 * Map the data format names of the "clipData" to Flash-friendly names.
	 *
	 * @returns A new transformed object.
	 * @private
	 */
	  var _mapClipDataToFlash = function(clipData) {
	    var newClipData = {}, formatMap = {};
	    if (!(typeof clipData === "object" && clipData)) {
	      return;
	    }
	    for (var dataFormat in clipData) {
	      if (dataFormat && _hasOwn.call(clipData, dataFormat) && typeof clipData[dataFormat] === "string" && clipData[dataFormat]) {
	        switch (dataFormat.toLowerCase()) {
	         case "text/plain":
	         case "text":
	         case "air:text":
	         case "flash:text":
	          newClipData.text = clipData[dataFormat];
	          formatMap.text = dataFormat;
	          break;

	         case "text/html":
	         case "html":
	         case "air:html":
	         case "flash:html":
	          newClipData.html = clipData[dataFormat];
	          formatMap.html = dataFormat;
	          break;

	         case "application/rtf":
	         case "text/rtf":
	         case "rtf":
	         case "richtext":
	         case "air:rtf":
	         case "flash:rtf":
	          newClipData.rtf = clipData[dataFormat];
	          formatMap.rtf = dataFormat;
	          break;

	         default:
	          break;
	        }
	      }
	    }
	    return {
	      data: newClipData,
	      formatMap: formatMap
	    };
	  };
	  /**
	 * Map the data format names from Flash-friendly names back to their original "clipData" names (via a format mapping).
	 *
	 * @returns A new transformed object.
	 * @private
	 */
	  var _mapClipResultsFromFlash = function(clipResults, formatMap) {
	    if (!(typeof clipResults === "object" && clipResults && typeof formatMap === "object" && formatMap)) {
	      return clipResults;
	    }
	    var newResults = {};
	    for (var prop in clipResults) {
	      if (_hasOwn.call(clipResults, prop)) {
	        if (prop === "errors") {
	          newResults[prop] = clipResults[prop] ? clipResults[prop].slice() : [];
	          for (var i = 0, len = newResults[prop].length; i < len; i++) {
	            newResults[prop][i].format = formatMap[newResults[prop][i].format];
	          }
	        } else if (prop !== "success" && prop !== "data") {
	          newResults[prop] = clipResults[prop];
	        } else {
	          newResults[prop] = {};
	          var tmpHash = clipResults[prop];
	          for (var dataFormat in tmpHash) {
	            if (dataFormat && _hasOwn.call(tmpHash, dataFormat) && _hasOwn.call(formatMap, dataFormat)) {
	              newResults[prop][formatMap[dataFormat]] = tmpHash[dataFormat];
	            }
	          }
	        }
	      }
	    }
	    return newResults;
	  };
	  /**
	 * Will look at a path, and will create a "?noCache={time}" or "&noCache={time}"
	 * query param string to return. Does NOT append that string to the original path.
	 * This is useful because ExternalInterface often breaks when a Flash SWF is cached.
	 *
	 * @returns The `noCache` query param with necessary "?"/"&" prefix.
	 * @private
	 */
	  var _cacheBust = function(path, options) {
	    var cacheBust = options == null || options && options.cacheBust === true;
	    if (cacheBust) {
	      return (path.indexOf("?") === -1 ? "?" : "&") + "noCache=" + _now();
	    } else {
	      return "";
	    }
	  };
	  /**
	 * Creates a query string for the FlashVars param.
	 * Does NOT include the cache-busting query param.
	 *
	 * @returns FlashVars query string
	 * @private
	 */
	  var _vars = function(options) {
	    var i, len, domain, domains, str = "", trustedOriginsExpanded = [];
	    if (options.trustedDomains) {
	      if (typeof options.trustedDomains === "string") {
	        domains = [ options.trustedDomains ];
	      } else if (typeof options.trustedDomains === "object" && "length" in options.trustedDomains) {
	        domains = options.trustedDomains;
	      }
	    }
	    if (domains && domains.length) {
	      for (i = 0, len = domains.length; i < len; i++) {
	        if (_hasOwn.call(domains, i) && domains[i] && typeof domains[i] === "string") {
	          domain = _extractDomain(domains[i]);
	          if (!domain) {
	            continue;
	          }
	          if (domain === "*") {
	            trustedOriginsExpanded.length = 0;
	            trustedOriginsExpanded.push(domain);
	            break;
	          }
	          trustedOriginsExpanded.push.apply(trustedOriginsExpanded, [ domain, "//" + domain, _window.location.protocol + "//" + domain ]);
	        }
	      }
	    }
	    if (trustedOriginsExpanded.length) {
	      str += "trustedOrigins=" + _encodeURIComponent(trustedOriginsExpanded.join(","));
	    }
	    if (options.forceEnhancedClipboard === true) {
	      str += (str ? "&" : "") + "forceEnhancedClipboard=true";
	    }
	    if (typeof options.swfObjectId === "string" && options.swfObjectId) {
	      str += (str ? "&" : "") + "swfObjectId=" + _encodeURIComponent(options.swfObjectId);
	    }
	    if (typeof options.jsVersion === "string" && options.jsVersion) {
	      str += (str ? "&" : "") + "jsVersion=" + _encodeURIComponent(options.jsVersion);
	    }
	    return str;
	  };
	  /**
	 * Extract the domain (e.g. "github.com") from an origin (e.g. "https://github.com") or
	 * URL (e.g. "https://github.com/zeroclipboard/zeroclipboard/").
	 *
	 * @returns the domain
	 * @private
	 */
	  var _extractDomain = function(originOrUrl) {
	    if (originOrUrl == null || originOrUrl === "") {
	      return null;
	    }
	    originOrUrl = originOrUrl.replace(/^\s+|\s+$/g, "");
	    if (originOrUrl === "") {
	      return null;
	    }
	    var protocolIndex = originOrUrl.indexOf("//");
	    originOrUrl = protocolIndex === -1 ? originOrUrl : originOrUrl.slice(protocolIndex + 2);
	    var pathIndex = originOrUrl.indexOf("/");
	    originOrUrl = pathIndex === -1 ? originOrUrl : protocolIndex === -1 || pathIndex === 0 ? null : originOrUrl.slice(0, pathIndex);
	    if (originOrUrl && originOrUrl.slice(-4).toLowerCase() === ".swf") {
	      return null;
	    }
	    return originOrUrl || null;
	  };
	  /**
	 * Set `allowScriptAccess` based on `trustedDomains` and `window.location.host` vs. `swfPath`.
	 *
	 * @returns The appropriate script access level.
	 * @private
	 */
	  var _determineScriptAccess = function() {
	    var _extractAllDomains = function(origins) {
	      var i, len, tmp, resultsArray = [];
	      if (typeof origins === "string") {
	        origins = [ origins ];
	      }
	      if (!(typeof origins === "object" && origins && typeof origins.length === "number")) {
	        return resultsArray;
	      }
	      for (i = 0, len = origins.length; i < len; i++) {
	        if (_hasOwn.call(origins, i) && (tmp = _extractDomain(origins[i]))) {
	          if (tmp === "*") {
	            resultsArray.length = 0;
	            resultsArray.push("*");
	            break;
	          }
	          if (resultsArray.indexOf(tmp) === -1) {
	            resultsArray.push(tmp);
	          }
	        }
	      }
	      return resultsArray;
	    };
	    return function(currentDomain, configOptions) {
	      var swfDomain = _extractDomain(configOptions.swfPath);
	      if (swfDomain === null) {
	        swfDomain = currentDomain;
	      }
	      var trustedDomains = _extractAllDomains(configOptions.trustedDomains);
	      var len = trustedDomains.length;
	      if (len > 0) {
	        if (len === 1 && trustedDomains[0] === "*") {
	          return "always";
	        }
	        if (trustedDomains.indexOf(currentDomain) !== -1) {
	          if (len === 1 && currentDomain === swfDomain) {
	            return "sameDomain";
	          }
	          return "always";
	        }
	      }
	      return "never";
	    };
	  }();
	  /**
	 * Get the currently active/focused DOM element.
	 *
	 * @returns the currently active/focused element, or `null`
	 * @private
	 */
	  var _safeActiveElement = function() {
	    try {
	      return _document.activeElement;
	    } catch (err) {
	      return null;
	    }
	  };
	  /**
	 * Add a class to an element, if it doesn't already have it.
	 *
	 * @returns The element, with its new class added.
	 * @private
	 */
	  var _addClass = function(element, value) {
	    var c, cl, className, classNames = [];
	    if (typeof value === "string" && value) {
	      classNames = value.split(/\s+/);
	    }
	    if (element && element.nodeType === 1 && classNames.length > 0) {
	      if (element.classList) {
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          element.classList.add(classNames[c]);
	        }
	      } else if (element.hasOwnProperty("className")) {
	        className = " " + element.className + " ";
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          if (className.indexOf(" " + classNames[c] + " ") === -1) {
	            className += classNames[c] + " ";
	          }
	        }
	        element.className = className.replace(/^\s+|\s+$/g, "");
	      }
	    }
	    return element;
	  };
	  /**
	 * Remove a class from an element, if it has it.
	 *
	 * @returns The element, with its class removed.
	 * @private
	 */
	  var _removeClass = function(element, value) {
	    var c, cl, className, classNames = [];
	    if (typeof value === "string" && value) {
	      classNames = value.split(/\s+/);
	    }
	    if (element && element.nodeType === 1 && classNames.length > 0) {
	      if (element.classList && element.classList.length > 0) {
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          element.classList.remove(classNames[c]);
	        }
	      } else if (element.className) {
	        className = (" " + element.className + " ").replace(/[\r\n\t]/g, " ");
	        for (c = 0, cl = classNames.length; c < cl; c++) {
	          className = className.replace(" " + classNames[c] + " ", " ");
	        }
	        element.className = className.replace(/^\s+|\s+$/g, "");
	      }
	    }
	    return element;
	  };
	  /**
	 * Attempt to interpret the element's CSS styling. If `prop` is `"cursor"`,
	 * then we assume that it should be a hand ("pointer") cursor if the element
	 * is an anchor element ("a" tag).
	 *
	 * @returns The computed style property.
	 * @private
	 */
	  var _getStyle = function(el, prop) {
	    var value = _getComputedStyle(el, null).getPropertyValue(prop);
	    if (prop === "cursor") {
	      if (!value || value === "auto") {
	        if (el.nodeName === "A") {
	          return "pointer";
	        }
	      }
	    }
	    return value;
	  };
	  /**
	 * Get the absolutely positioned coordinates of a DOM element.
	 *
	 * @returns Object containing the element's position, width, and height.
	 * @private
	 */
	  var _getElementPosition = function(el) {
	    var pos = {
	      left: 0,
	      top: 0,
	      width: 0,
	      height: 0
	    };
	    if (el.getBoundingClientRect) {
	      var elRect = el.getBoundingClientRect();
	      var pageXOffset = _window.pageXOffset;
	      var pageYOffset = _window.pageYOffset;
	      var leftBorderWidth = _document.documentElement.clientLeft || 0;
	      var topBorderWidth = _document.documentElement.clientTop || 0;
	      var leftBodyOffset = 0;
	      var topBodyOffset = 0;
	      if (_getStyle(_document.body, "position") === "relative") {
	        var bodyRect = _document.body.getBoundingClientRect();
	        var htmlRect = _document.documentElement.getBoundingClientRect();
	        leftBodyOffset = bodyRect.left - htmlRect.left || 0;
	        topBodyOffset = bodyRect.top - htmlRect.top || 0;
	      }
	      pos.left = elRect.left + pageXOffset - leftBorderWidth - leftBodyOffset;
	      pos.top = elRect.top + pageYOffset - topBorderWidth - topBodyOffset;
	      pos.width = "width" in elRect ? elRect.width : elRect.right - elRect.left;
	      pos.height = "height" in elRect ? elRect.height : elRect.bottom - elRect.top;
	    }
	    return pos;
	  };
	  /**
	 * Determine is an element is visible somewhere within the document (page).
	 *
	 * @returns Boolean
	 * @private
	 */
	  var _isElementVisible = function(el) {
	    if (!el) {
	      return false;
	    }
	    var styles = _getComputedStyle(el, null);
	    var hasCssHeight = _parseFloat(styles.height) > 0;
	    var hasCssWidth = _parseFloat(styles.width) > 0;
	    var hasCssTop = _parseFloat(styles.top) >= 0;
	    var hasCssLeft = _parseFloat(styles.left) >= 0;
	    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;
	    var rect = cssKnows ? null : _getElementPosition(el);
	    var isVisible = styles.display !== "none" && styles.visibility !== "collapse" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));
	    return isVisible;
	  };
	  /**
	 * Clear all existing timeouts and interval polling delegates.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _clearTimeoutsAndPolling = function() {
	    _clearTimeout(_flashCheckTimeout);
	    _flashCheckTimeout = 0;
	    _clearInterval(_swfFallbackCheckInterval);
	    _swfFallbackCheckInterval = 0;
	  };
	  /**
	 * Reposition the Flash object to cover the currently activated element.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _reposition = function() {
	    var htmlBridge;
	    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {
	      var pos = _getElementPosition(_currentElement);
	      _extend(htmlBridge.style, {
	        width: pos.width + "px",
	        height: pos.height + "px",
	        top: pos.top + "px",
	        left: pos.left + "px",
	        zIndex: "" + _getSafeZIndex(_globalConfig.zIndex)
	      });
	    }
	  };
	  /**
	 * Sends a signal to the Flash object to display the hand cursor if `true`.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _setHandCursor = function(enabled) {
	    if (_flashState.ready === true) {
	      if (_flashState.bridge && typeof _flashState.bridge.setHandCursor === "function") {
	        _flashState.bridge.setHandCursor(enabled);
	      } else {
	        _flashState.ready = false;
	      }
	    }
	  };
	  /**
	 * Get a safe value for `zIndex`
	 *
	 * @returns an integer, or "auto"
	 * @private
	 */
	  var _getSafeZIndex = function(val) {
	    if (/^(?:auto|inherit)$/.test(val)) {
	      return val;
	    }
	    var zIndex;
	    if (typeof val === "number" && !_isNaN(val)) {
	      zIndex = val;
	    } else if (typeof val === "string") {
	      zIndex = _getSafeZIndex(_parseInt(val, 10));
	    }
	    return typeof zIndex === "number" ? zIndex : "auto";
	  };
	  /**
	 * Attempt to detect if ZeroClipboard is executing inside of a sandboxed iframe.
	 * If it is, Flash Player cannot be used, so ZeroClipboard is dead in the water.
	 *
	 * @see {@link http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Dec/0002.html}
	 * @see {@link https://github.com/zeroclipboard/zeroclipboard/issues/511}
	 * @see {@link http://zeroclipboard.org/test-iframes.html}
	 *
	 * @returns `true` (is sandboxed), `false` (is not sandboxed), or `null` (uncertain) 
	 * @private
	 */
	  var _detectSandbox = function(doNotReassessFlashSupport) {
	    var effectiveScriptOrigin, frame, frameError, previousState = _flashState.sandboxed, isSandboxed = null;
	    doNotReassessFlashSupport = doNotReassessFlashSupport === true;
	    if (_pageIsFramed === false) {
	      isSandboxed = false;
	    } else {
	      try {
	        frame = window.frameElement || null;
	      } catch (e) {
	        frameError = {
	          name: e.name,
	          message: e.message
	        };
	      }
	      if (frame && frame.nodeType === 1 && frame.nodeName === "IFRAME") {
	        try {
	          isSandboxed = frame.hasAttribute("sandbox");
	        } catch (e) {
	          isSandboxed = null;
	        }
	      } else {
	        try {
	          effectiveScriptOrigin = document.domain || null;
	        } catch (e) {
	          effectiveScriptOrigin = null;
	        }
	        if (effectiveScriptOrigin === null || frameError && frameError.name === "SecurityError" && /(^|[\s\(\[@])sandbox(es|ed|ing|[\s\.,!\)\]@]|$)/.test(frameError.message.toLowerCase())) {
	          isSandboxed = true;
	        }
	      }
	    }
	    _flashState.sandboxed = isSandboxed;
	    if (previousState !== isSandboxed && !doNotReassessFlashSupport) {
	      _detectFlashSupport(_ActiveXObject);
	    }
	    return isSandboxed;
	  };
	  /**
	 * Detect the Flash Player status, version, and plugin type.
	 *
	 * @see {@link https://code.google.com/p/doctype-mirror/wiki/ArticleDetectFlash#The_code}
	 * @see {@link http://stackoverflow.com/questions/12866060/detecting-pepper-ppapi-flash-with-javascript}
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _detectFlashSupport = function(ActiveXObject) {
	    var plugin, ax, mimeType, hasFlash = false, isActiveX = false, isPPAPI = false, flashVersion = "";
	    /**
	   * Derived from Apple's suggested sniffer.
	   * @param {String} desc e.g. "Shockwave Flash 7.0 r61"
	   * @returns {String} "7.0.61"
	   * @private
	   */
	    function parseFlashVersion(desc) {
	      var matches = desc.match(/[\d]+/g);
	      matches.length = 3;
	      return matches.join(".");
	    }
	    function isPepperFlash(flashPlayerFileName) {
	      return !!flashPlayerFileName && (flashPlayerFileName = flashPlayerFileName.toLowerCase()) && (/^(pepflashplayer\.dll|libpepflashplayer\.so|pepperflashplayer\.plugin)$/.test(flashPlayerFileName) || flashPlayerFileName.slice(-13) === "chrome.plugin");
	    }
	    function inspectPlugin(plugin) {
	      if (plugin) {
	        hasFlash = true;
	        if (plugin.version) {
	          flashVersion = parseFlashVersion(plugin.version);
	        }
	        if (!flashVersion && plugin.description) {
	          flashVersion = parseFlashVersion(plugin.description);
	        }
	        if (plugin.filename) {
	          isPPAPI = isPepperFlash(plugin.filename);
	        }
	      }
	    }
	    if (_navigator.plugins && _navigator.plugins.length) {
	      plugin = _navigator.plugins["Shockwave Flash"];
	      inspectPlugin(plugin);
	      if (_navigator.plugins["Shockwave Flash 2.0"]) {
	        hasFlash = true;
	        flashVersion = "2.0.0.11";
	      }
	    } else if (_navigator.mimeTypes && _navigator.mimeTypes.length) {
	      mimeType = _navigator.mimeTypes["application/x-shockwave-flash"];
	      plugin = mimeType && mimeType.enabledPlugin;
	      inspectPlugin(plugin);
	    } else if (typeof ActiveXObject !== "undefined") {
	      isActiveX = true;
	      try {
	        ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
	        hasFlash = true;
	        flashVersion = parseFlashVersion(ax.GetVariable("$version"));
	      } catch (e1) {
	        try {
	          ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
	          hasFlash = true;
	          flashVersion = "6.0.21";
	        } catch (e2) {
	          try {
	            ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
	            hasFlash = true;
	            flashVersion = parseFlashVersion(ax.GetVariable("$version"));
	          } catch (e3) {
	            isActiveX = false;
	          }
	        }
	      }
	    }
	    _flashState.disabled = hasFlash !== true;
	    _flashState.outdated = flashVersion && _parseFloat(flashVersion) < _parseFloat(_minimumFlashVersion);
	    _flashState.version = flashVersion || "0.0.0";
	    _flashState.pluginType = isPPAPI ? "pepper" : isActiveX ? "activex" : hasFlash ? "netscape" : "unknown";
	  };
	  /**
	 * Invoke the Flash detection algorithms immediately upon inclusion so we're not waiting later.
	 */
	  _detectFlashSupport(_ActiveXObject);
	  /**
	 * Always assess the `sandboxed` state of the page at important Flash-related moments.
	 */
	  _detectSandbox(true);
	  /**
	 * A shell constructor for `ZeroClipboard` client instances.
	 *
	 * @constructor
	 */
	  var ZeroClipboard = function() {
	    if (!(this instanceof ZeroClipboard)) {
	      return new ZeroClipboard();
	    }
	    if (typeof ZeroClipboard._createClient === "function") {
	      ZeroClipboard._createClient.apply(this, _args(arguments));
	    }
	  };
	  /**
	 * The ZeroClipboard library's version number.
	 *
	 * @static
	 * @readonly
	 * @property {string}
	 */
	  _defineProperty(ZeroClipboard, "version", {
	    value: "2.2.0",
	    writable: false,
	    configurable: true,
	    enumerable: true
	  });
	  /**
	 * Update or get a copy of the ZeroClipboard global configuration.
	 * Returns a copy of the current/updated configuration.
	 *
	 * @returns Object
	 * @static
	 */
	  ZeroClipboard.config = function() {
	    return _config.apply(this, _args(arguments));
	  };
	  /**
	 * Diagnostic method that describes the state of the browser, Flash Player, and ZeroClipboard.
	 *
	 * @returns Object
	 * @static
	 */
	  ZeroClipboard.state = function() {
	    return _state.apply(this, _args(arguments));
	  };
	  /**
	 * Check if Flash is unusable for any reason: disabled, outdated, deactivated, etc.
	 *
	 * @returns Boolean
	 * @static
	 */
	  ZeroClipboard.isFlashUnusable = function() {
	    return _isFlashUnusable.apply(this, _args(arguments));
	  };
	  /**
	 * Register an event listener.
	 *
	 * @returns `ZeroClipboard`
	 * @static
	 */
	  ZeroClipboard.on = function() {
	    return _on.apply(this, _args(arguments));
	  };
	  /**
	 * Unregister an event listener.
	 * If no `listener` function/object is provided, it will unregister all listeners for the provided `eventType`.
	 * If no `eventType` is provided, it will unregister all listeners for every event type.
	 *
	 * @returns `ZeroClipboard`
	 * @static
	 */
	  ZeroClipboard.off = function() {
	    return _off.apply(this, _args(arguments));
	  };
	  /**
	 * Retrieve event listeners for an `eventType`.
	 * If no `eventType` is provided, it will retrieve all listeners for every event type.
	 *
	 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
	 */
	  ZeroClipboard.handlers = function() {
	    return _listeners.apply(this, _args(arguments));
	  };
	  /**
	 * Event emission receiver from the Flash object, forwarding to any registered JavaScript event listeners.
	 *
	 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
	 * @static
	 */
	  ZeroClipboard.emit = function() {
	    return _emit.apply(this, _args(arguments));
	  };
	  /**
	 * Create and embed the Flash object.
	 *
	 * @returns The Flash object
	 * @static
	 */
	  ZeroClipboard.create = function() {
	    return _create.apply(this, _args(arguments));
	  };
	  /**
	 * Self-destruct and clean up everything, including the embedded Flash object.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.destroy = function() {
	    return _destroy.apply(this, _args(arguments));
	  };
	  /**
	 * Set the pending data for clipboard injection.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.setData = function() {
	    return _setData.apply(this, _args(arguments));
	  };
	  /**
	 * Clear the pending data for clipboard injection.
	 * If no `format` is provided, all pending data formats will be cleared.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.clearData = function() {
	    return _clearData.apply(this, _args(arguments));
	  };
	  /**
	 * Get a copy of the pending data for clipboard injection.
	 * If no `format` is provided, a copy of ALL pending data formats will be returned.
	 *
	 * @returns `String` or `Object`
	 * @static
	 */
	  ZeroClipboard.getData = function() {
	    return _getData.apply(this, _args(arguments));
	  };
	  /**
	 * Sets the current HTML object that the Flash object should overlay. This will put the global
	 * Flash object on top of the current element; depending on the setup, this may also set the
	 * pending clipboard text data as well as the Flash object's wrapping element's title attribute
	 * based on the underlying HTML element and ZeroClipboard configuration.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.focus = ZeroClipboard.activate = function() {
	    return _focus.apply(this, _args(arguments));
	  };
	  /**
	 * Un-overlays the Flash object. This will put the global Flash object off-screen; depending on
	 * the setup, this may also unset the Flash object's wrapping element's title attribute based on
	 * the underlying HTML element and ZeroClipboard configuration.
	 *
	 * @returns `undefined`
	 * @static
	 */
	  ZeroClipboard.blur = ZeroClipboard.deactivate = function() {
	    return _blur.apply(this, _args(arguments));
	  };
	  /**
	 * Returns the currently focused/"activated" HTML element that the Flash object is wrapping.
	 *
	 * @returns `HTMLElement` or `null`
	 * @static
	 */
	  ZeroClipboard.activeElement = function() {
	    return _activeElement.apply(this, _args(arguments));
	  };
	  /**
	 * Keep track of the ZeroClipboard client instance counter.
	 */
	  var _clientIdCounter = 0;
	  /**
	 * Keep track of the state of the client instances.
	 *
	 * Entry structure:
	 *   _clientMeta[client.id] = {
	 *     instance: client,
	 *     elements: [],
	 *     handlers: {}
	 *   };
	 */
	  var _clientMeta = {};
	  /**
	 * Keep track of the ZeroClipboard clipped elements counter.
	 */
	  var _elementIdCounter = 0;
	  /**
	 * Keep track of the state of the clipped element relationships to clients.
	 *
	 * Entry structure:
	 *   _elementMeta[element.zcClippingId] = [client1.id, client2.id];
	 */
	  var _elementMeta = {};
	  /**
	 * Keep track of the state of the mouse event handlers for clipped elements.
	 *
	 * Entry structure:
	 *   _mouseHandlers[element.zcClippingId] = {
	 *     mouseover:  function(event) {},
	 *     mouseout:   function(event) {},
	 *     mouseenter: function(event) {},
	 *     mouseleave: function(event) {},
	 *     mousemove:  function(event) {}
	 *   };
	 */
	  var _mouseHandlers = {};
	  /**
	 * Extending the ZeroClipboard configuration defaults for the Client module.
	 */
	  _extend(_globalConfig, {
	    autoActivate: true
	  });
	  /**
	 * The real constructor for `ZeroClipboard` client instances.
	 * @private
	 */
	  var _clientConstructor = function(elements) {
	    var client = this;
	    client.id = "" + _clientIdCounter++;
	    _clientMeta[client.id] = {
	      instance: client,
	      elements: [],
	      handlers: {}
	    };
	    if (elements) {
	      client.clip(elements);
	    }
	    ZeroClipboard.on("*", function(event) {
	      return client.emit(event);
	    });
	    ZeroClipboard.on("destroy", function() {
	      client.destroy();
	    });
	    ZeroClipboard.create();
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.on`.
	 * @private
	 */
	  var _clientOn = function(eventType, listener) {
	    var i, len, events, added = {}, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
	    if (!meta) {
	      throw new Error("Attempted to add new listener(s) to a destroyed ZeroClipboard client instance");
	    }
	    if (typeof eventType === "string" && eventType) {
	      events = eventType.toLowerCase().split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          this.on(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].replace(/^on/, "");
	        added[eventType] = true;
	        if (!handlers[eventType]) {
	          handlers[eventType] = [];
	        }
	        handlers[eventType].push(listener);
	      }
	      if (added.ready && _flashState.ready) {
	        this.emit({
	          type: "ready",
	          client: this
	        });
	      }
	      if (added.error) {
	        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
	          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")]) {
	            this.emit({
	              type: "error",
	              name: _flashStateErrorNames[i],
	              client: this
	            });
	            break;
	          }
	        }
	        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
	          this.emit({
	            type: "error",
	            name: "version-mismatch",
	            jsVersion: ZeroClipboard.version,
	            swfVersion: _zcSwfVersion
	          });
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.off`.
	 * @private
	 */
	  var _clientOff = function(eventType, listener) {
	    var i, len, foundIndex, events, perEventHandlers, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
	    if (!handlers) {
	      return this;
	    }
	    if (arguments.length === 0) {
	      events = _keys(handlers);
	    } else if (typeof eventType === "string" && eventType) {
	      events = eventType.split(/\s+/);
	    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
	      for (i in eventType) {
	        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
	          this.off(i, eventType[i]);
	        }
	      }
	    }
	    if (events && events.length) {
	      for (i = 0, len = events.length; i < len; i++) {
	        eventType = events[i].toLowerCase().replace(/^on/, "");
	        perEventHandlers = handlers[eventType];
	        if (perEventHandlers && perEventHandlers.length) {
	          if (listener) {
	            foundIndex = perEventHandlers.indexOf(listener);
	            while (foundIndex !== -1) {
	              perEventHandlers.splice(foundIndex, 1);
	              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
	            }
	          } else {
	            perEventHandlers.length = 0;
	          }
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.handlers`.
	 * @private
	 */
	  var _clientListeners = function(eventType) {
	    var copy = null, handlers = _clientMeta[this.id] && _clientMeta[this.id].handlers;
	    if (handlers) {
	      if (typeof eventType === "string" && eventType) {
	        copy = handlers[eventType] ? handlers[eventType].slice(0) : [];
	      } else {
	        copy = _deepCopy(handlers);
	      }
	    }
	    return copy;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.emit`.
	 * @private
	 */
	  var _clientEmit = function(event) {
	    if (_clientShouldEmit.call(this, event)) {
	      if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
	        event = _extend({}, event);
	      }
	      var eventCopy = _extend({}, _createEvent(event), {
	        client: this
	      });
	      _clientDispatchCallbacks.call(this, eventCopy);
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.clip`.
	 * @private
	 */
	  var _clientClip = function(elements) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to clip element(s) to a destroyed ZeroClipboard client instance");
	    }
	    elements = _prepClip(elements);
	    for (var i = 0; i < elements.length; i++) {
	      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
	        if (!elements[i].zcClippingId) {
	          elements[i].zcClippingId = "zcClippingId_" + _elementIdCounter++;
	          _elementMeta[elements[i].zcClippingId] = [ this.id ];
	          if (_globalConfig.autoActivate === true) {
	            _addMouseHandlers(elements[i]);
	          }
	        } else if (_elementMeta[elements[i].zcClippingId].indexOf(this.id) === -1) {
	          _elementMeta[elements[i].zcClippingId].push(this.id);
	        }
	        var clippedElements = _clientMeta[this.id] && _clientMeta[this.id].elements;
	        if (clippedElements.indexOf(elements[i]) === -1) {
	          clippedElements.push(elements[i]);
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.unclip`.
	 * @private
	 */
	  var _clientUnclip = function(elements) {
	    var meta = _clientMeta[this.id];
	    if (!meta) {
	      return this;
	    }
	    var clippedElements = meta.elements;
	    var arrayIndex;
	    if (typeof elements === "undefined") {
	      elements = clippedElements.slice(0);
	    } else {
	      elements = _prepClip(elements);
	    }
	    for (var i = elements.length; i--; ) {
	      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
	        arrayIndex = 0;
	        while ((arrayIndex = clippedElements.indexOf(elements[i], arrayIndex)) !== -1) {
	          clippedElements.splice(arrayIndex, 1);
	        }
	        var clientIds = _elementMeta[elements[i].zcClippingId];
	        if (clientIds) {
	          arrayIndex = 0;
	          while ((arrayIndex = clientIds.indexOf(this.id, arrayIndex)) !== -1) {
	            clientIds.splice(arrayIndex, 1);
	          }
	          if (clientIds.length === 0) {
	            if (_globalConfig.autoActivate === true) {
	              _removeMouseHandlers(elements[i]);
	            }
	            delete elements[i].zcClippingId;
	          }
	        }
	      }
	    }
	    return this;
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.elements`.
	 * @private
	 */
	  var _clientElements = function() {
	    var meta = _clientMeta[this.id];
	    return meta && meta.elements ? meta.elements.slice(0) : [];
	  };
	  /**
	 * The underlying implementation of `ZeroClipboard.Client.prototype.destroy`.
	 * @private
	 */
	  var _clientDestroy = function() {
	    if (!_clientMeta[this.id]) {
	      return;
	    }
	    this.unclip();
	    this.off();
	    delete _clientMeta[this.id];
	  };
	  /**
	 * Inspect an Event to see if the Client (`this`) should honor it for emission.
	 * @private
	 */
	  var _clientShouldEmit = function(event) {
	    if (!(event && event.type)) {
	      return false;
	    }
	    if (event.client && event.client !== this) {
	      return false;
	    }
	    var meta = _clientMeta[this.id];
	    var clippedEls = meta && meta.elements;
	    var hasClippedEls = !!clippedEls && clippedEls.length > 0;
	    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;
	    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;
	    var goodClient = event.client && event.client === this;
	    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {
	      return false;
	    }
	    return true;
	  };
	  /**
	 * Handle the actual dispatching of events to a client instance.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _clientDispatchCallbacks = function(event) {
	    var meta = _clientMeta[this.id];
	    if (!(typeof event === "object" && event && event.type && meta)) {
	      return;
	    }
	    var async = _shouldPerformAsync(event);
	    var wildcardTypeHandlers = meta && meta.handlers["*"] || [];
	    var specificTypeHandlers = meta && meta.handlers[event.type] || [];
	    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
	    if (handlers && handlers.length) {
	      var i, len, func, context, eventCopy, originalContext = this;
	      for (i = 0, len = handlers.length; i < len; i++) {
	        func = handlers[i];
	        context = originalContext;
	        if (typeof func === "string" && typeof _window[func] === "function") {
	          func = _window[func];
	        }
	        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
	          context = func;
	          func = func.handleEvent;
	        }
	        if (typeof func === "function") {
	          eventCopy = _extend({}, event);
	          _dispatchCallback(func, context, [ eventCopy ], async);
	        }
	      }
	    }
	  };
	  /**
	 * Prepares the elements for clipping/unclipping.
	 *
	 * @returns An Array of elements.
	 * @private
	 */
	  var _prepClip = function(elements) {
	    if (typeof elements === "string") {
	      elements = [];
	    }
	    return typeof elements.length !== "number" ? [ elements ] : elements;
	  };
	  /**
	 * Add a `mouseover` handler function for a clipped element.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _addMouseHandlers = function(element) {
	    if (!(element && element.nodeType === 1)) {
	      return;
	    }
	    var _suppressMouseEvents = function(event) {
	      if (!(event || (event = _window.event))) {
	        return;
	      }
	      if (event._source !== "js") {
	        event.stopImmediatePropagation();
	        event.preventDefault();
	      }
	      delete event._source;
	    };
	    var _elementMouseOver = function(event) {
	      if (!(event || (event = _window.event))) {
	        return;
	      }
	      _suppressMouseEvents(event);
	      ZeroClipboard.focus(element);
	    };
	    element.addEventListener("mouseover", _elementMouseOver, false);
	    element.addEventListener("mouseout", _suppressMouseEvents, false);
	    element.addEventListener("mouseenter", _suppressMouseEvents, false);
	    element.addEventListener("mouseleave", _suppressMouseEvents, false);
	    element.addEventListener("mousemove", _suppressMouseEvents, false);
	    _mouseHandlers[element.zcClippingId] = {
	      mouseover: _elementMouseOver,
	      mouseout: _suppressMouseEvents,
	      mouseenter: _suppressMouseEvents,
	      mouseleave: _suppressMouseEvents,
	      mousemove: _suppressMouseEvents
	    };
	  };
	  /**
	 * Remove a `mouseover` handler function for a clipped element.
	 *
	 * @returns `undefined`
	 * @private
	 */
	  var _removeMouseHandlers = function(element) {
	    if (!(element && element.nodeType === 1)) {
	      return;
	    }
	    var mouseHandlers = _mouseHandlers[element.zcClippingId];
	    if (!(typeof mouseHandlers === "object" && mouseHandlers)) {
	      return;
	    }
	    var key, val, mouseEvents = [ "move", "leave", "enter", "out", "over" ];
	    for (var i = 0, len = mouseEvents.length; i < len; i++) {
	      key = "mouse" + mouseEvents[i];
	      val = mouseHandlers[key];
	      if (typeof val === "function") {
	        element.removeEventListener(key, val, false);
	      }
	    }
	    delete _mouseHandlers[element.zcClippingId];
	  };
	  /**
	 * Creates a new ZeroClipboard client instance.
	 * Optionally, auto-`clip` an element or collection of elements.
	 *
	 * @constructor
	 */
	  ZeroClipboard._createClient = function() {
	    _clientConstructor.apply(this, _args(arguments));
	  };
	  /**
	 * Register an event listener to the client.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.on = function() {
	    return _clientOn.apply(this, _args(arguments));
	  };
	  /**
	 * Unregister an event handler from the client.
	 * If no `listener` function/object is provided, it will unregister all handlers for the provided `eventType`.
	 * If no `eventType` is provided, it will unregister all handlers for every event type.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.off = function() {
	    return _clientOff.apply(this, _args(arguments));
	  };
	  /**
	 * Retrieve event listeners for an `eventType` from the client.
	 * If no `eventType` is provided, it will retrieve all listeners for every event type.
	 *
	 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
	 */
	  ZeroClipboard.prototype.handlers = function() {
	    return _clientListeners.apply(this, _args(arguments));
	  };
	  /**
	 * Event emission receiver from the Flash object for this client's registered JavaScript event listeners.
	 *
	 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
	 */
	  ZeroClipboard.prototype.emit = function() {
	    return _clientEmit.apply(this, _args(arguments));
	  };
	  /**
	 * Register clipboard actions for new element(s) to the client.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.clip = function() {
	    return _clientClip.apply(this, _args(arguments));
	  };
	  /**
	 * Unregister the clipboard actions of previously registered element(s) on the page.
	 * If no elements are provided, ALL registered elements will be unregistered.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.unclip = function() {
	    return _clientUnclip.apply(this, _args(arguments));
	  };
	  /**
	 * Get all of the elements to which this client is clipped.
	 *
	 * @returns array of clipped elements
	 */
	  ZeroClipboard.prototype.elements = function() {
	    return _clientElements.apply(this, _args(arguments));
	  };
	  /**
	 * Self-destruct and clean up everything for a single client.
	 * This will NOT destroy the embedded Flash object.
	 *
	 * @returns `undefined`
	 */
	  ZeroClipboard.prototype.destroy = function() {
	    return _clientDestroy.apply(this, _args(arguments));
	  };
	  /**
	 * Stores the pending plain text to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setText = function(text) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData("text/plain", text);
	    return this;
	  };
	  /**
	 * Stores the pending HTML text to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setHtml = function(html) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData("text/html", html);
	    return this;
	  };
	  /**
	 * Stores the pending rich text (RTF) to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setRichText = function(richText) {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData("application/rtf", richText);
	    return this;
	  };
	  /**
	 * Stores the pending data to inject into the clipboard.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.setData = function() {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.setData.apply(this, _args(arguments));
	    return this;
	  };
	  /**
	 * Clears the pending data to inject into the clipboard.
	 * If no `format` is provided, all pending data formats will be cleared.
	 *
	 * @returns `this`
	 */
	  ZeroClipboard.prototype.clearData = function() {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    ZeroClipboard.clearData.apply(this, _args(arguments));
	    return this;
	  };
	  /**
	 * Gets a copy of the pending data to inject into the clipboard.
	 * If no `format` is provided, a copy of ALL pending data formats will be returned.
	 *
	 * @returns `String` or `Object`
	 */
	  ZeroClipboard.prototype.getData = function() {
	    if (!_clientMeta[this.id]) {
	      throw new Error("Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance");
	    }
	    return ZeroClipboard.getData.apply(this, _args(arguments));
	  };
	  if (typeof define === "function" && define.amd) {
	    define(function() {
	      return ZeroClipboard;
	    });
	  } else if (typeof module === "object" && module && typeof module.exports === "object" && module.exports) {
	    module.exports = ZeroClipboard;
	  } else {
	    window.ZeroClipboard = ZeroClipboard;
	  }
	})(function() {
	  return this || window;
	}());
	},{}]},{},[23,59,61,60,62,83,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,100,101,102,90,91,92,93,94,95,31,35,32,33,40,34,36,37,38,39])("zeroclipboard")
	});
	}.call(window));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39), (function() { return this; }())))

/***/ },
/* 39 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var DiluteByDilutionFactorDown, DiluteByDilutionFactorLeft, DiluteByDilutionFactorRight, DiluteByDilutionFactorUp, DiluteByVolumeDown, DiluteByVolumeLeft, DiluteByVolumeRight, DiluteByVolumeUp, DilutionStrategy, SERIAL_DILUTION_MODEL_FIELDS, SIGNIFICANT_FIGS, SerialDilutionByDilutionFactor, SerialDilutionByVolume, SerialDilutionFactory, WellsModel,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	SERIAL_DILUTION_MODEL_FIELDS = __webpack_require__(41).SERIAL_DILUTION_MODEL_FIELDS;

	SIGNIFICANT_FIGS = 4;

	WellsModel = __webpack_require__(31).WellsModel;

	SerialDilutionFactory = (function() {
	  function SerialDilutionFactory() {}

	  SerialDilutionFactory.prototype.getSerialDilutionStrategy = function(serialDilutionModel, selectedRegion) {
	    if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.IS_DILUTION_BY_VOLUME)) {
	      if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteRight") {
	        return new DiluteByVolumeRight(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DESTINATION_WELL_VOLUME), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.TRANSFER_VOLUME), selectedRegion);
	      } else if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteUp") {
	        return new DiluteByVolumeUp(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DESTINATION_WELL_VOLUME), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.TRANSFER_VOLUME), selectedRegion);
	      } else if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteLeft") {
	        return new DiluteByVolumeLeft(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DESTINATION_WELL_VOLUME), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.TRANSFER_VOLUME), selectedRegion);
	      } else if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteDown") {
	        return new DiluteByVolumeDown(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DESTINATION_WELL_VOLUME), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.TRANSFER_VOLUME), selectedRegion);
	      }
	    } else {
	      if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteRight") {
	        return new DiluteByDilutionFactorRight(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DILUTION_FACTOR), selectedRegion);
	      } else if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteUp") {
	        return new DiluteByDilutionFactorUp(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DILUTION_FACTOR), selectedRegion);
	      } else if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteLeft") {
	        return new DiluteByDilutionFactorLeft(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DILUTION_FACTOR), selectedRegion);
	      } else if (serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteDown") {
	        return new DiluteByDilutionFactorDown(serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES), serialDilutionModel.get(SERIAL_DILUTION_MODEL_FIELDS.DILUTION_FACTOR), selectedRegion);
	      }
	    }
	  };

	  return SerialDilutionFactory;

	})();

	DilutionStrategy = (function() {
	  function DilutionStrategy(numberOfDoses, selectedRegion) {
	    this.numberOfDoses = numberOfDoses;
	    this.selectedRegion = selectedRegion;
	  }

	  return DilutionStrategy;

	})();

	SerialDilutionByVolume = (function(superClass) {
	  extend(SerialDilutionByVolume, superClass);

	  function SerialDilutionByVolume(numberOfDoses, destinationWellVolume, transferVolume, selectedRegion) {
	    this.getConcentration = bind(this.getConcentration, this);
	    SerialDilutionByVolume.__super__.constructor.call(this, numberOfDoses, selectedRegion);
	    this.destinationWellVolume = parseFloat(destinationWellVolume);
	    this.transferVolume = parseFloat(transferVolume);
	    this.selectedRegion = selectedRegion;
	  }

	  SerialDilutionByVolume.prototype.getConcentration = function(previousConcentration) {
	    var wellBatchConcentration;
	    wellBatchConcentration = (previousConcentration * this.transferVolume) / (this.destinationWellVolume + this.transferVolume);
	    wellBatchConcentration = parseFloat(wellBatchConcentration.toFixed(SIGNIFICANT_FIGS));
	    return wellBatchConcentration;
	  };

	  return SerialDilutionByVolume;

	})(DilutionStrategy);

	DiluteByVolumeRight = (function(superClass) {
	  extend(DiluteByVolumeRight, superClass);

	  function DiluteByVolumeRight(numberOfDoses, destinationWellVolume, transferVolume, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByVolumeRight.__super__.constructor.call(this, numberOfDoses, destinationWellVolume, transferVolume, selectedRegion);
	    this.startingRowIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.rowStart, ref1 = selectedRegion.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondColIdx = selectedRegion.colStart + 1;
	    this.lastColIdx = (selectedRegion.colStart + numberOfDoses) - 1;
	    this.colIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondColIdx, ref3 = this.lastColIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByVolumeRight.prototype.getWells = function(wells) {
	    var colIdx, concentration, finalVolume, i, initialWellUpdatedAmount, j, len, len1, plateWells, previousConcentration, ref, ref1, rowIdx, startingCell, well;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    ref = this.startingRowIdexes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      rowIdx = ref[i];
	      startingCell = this.wellsToUpdate.getWellAtRowIdxColIdx(rowIdx, this.selectedRegion.colStart);
	      previousConcentration = parseFloat(startingCell.batchConcentration);
	      ref1 = this.colIdxs;
	      for (j = 0, len1 = ref1.length; j < len1; j++) {
	        colIdx = ref1[j];
	        concentration = this.getConcentration(previousConcentration);
	        previousConcentration = concentration;
	        well = {};
	        if (colIdx !== this.lastColIdx) {
	          well = {
	            amount: this.destinationWellVolume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        } else {
	          finalVolume = this.transferVolume + this.destinationWellVolume;
	          well = {
	            amount: finalVolume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        }
	        this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	        plateWells.push([rowIdx, colIdx, well]);
	      }
	      initialWellUpdatedAmount = startingCell.amount - this.transferVolume;
	      initialWellUpdatedAmount = parseFloat(initialWellUpdatedAmount.toFixed(SIGNIFICANT_FIGS));
	      well = {
	        amount: initialWellUpdatedAmount,
	        batchCode: startingCell.batchCode,
	        batchConcentration: startingCell.batchConcentration
	      };
	      plateWells.push([rowIdx, this.selectedRegion.colStart, well]);
	      this.wellsToUpdate.fillWellWithWellObject(rowIdx, this.selectedRegion.colStart, well);
	    }
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByVolumeRight;

	})(SerialDilutionByVolume);

	DiluteByVolumeLeft = (function(superClass) {
	  extend(DiluteByVolumeLeft, superClass);

	  function DiluteByVolumeLeft(numberOfDoses, destinationWellVolume, transferVolume, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByVolumeLeft.__super__.constructor.call(this, numberOfDoses, destinationWellVolume, transferVolume, selectedRegion);
	    this.startingRowIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.rowStart, ref1 = selectedRegion.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondColIdx = selectedRegion.colStart - 1;
	    this.lastColIdx = (selectedRegion.colStart - numberOfDoses) + 1;
	    this.colIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondColIdx, ref3 = this.lastColIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByVolumeLeft.prototype.getWells = function(wells) {
	    var colIdx, concentration, finalVolume, i, initialWellUpdatedAmount, j, len, len1, plateWells, previousConcentration, ref, ref1, rowIdx, startingCell, well;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    ref = this.startingRowIdexes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      rowIdx = ref[i];
	      startingCell = this.wellsToUpdate.getWellAtRowIdxColIdx(rowIdx, this.selectedRegion.colStart);
	      previousConcentration = parseFloat(startingCell.batchConcentration);
	      ref1 = this.colIdxs;
	      for (j = 0, len1 = ref1.length; j < len1; j++) {
	        colIdx = ref1[j];
	        concentration = this.getConcentration(previousConcentration);
	        previousConcentration = concentration;
	        well = {};
	        if (colIdx !== this.lastColIdx) {
	          well = {
	            amount: this.destinationWellVolume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        } else {
	          finalVolume = this.transferVolume + this.destinationWellVolume;
	          well = {
	            amount: finalVolume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        }
	        this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	        plateWells.push([rowIdx, colIdx, well]);
	      }
	      initialWellUpdatedAmount = startingCell.amount - this.transferVolume;
	      initialWellUpdatedAmount = parseFloat(initialWellUpdatedAmount.toFixed(SIGNIFICANT_FIGS));
	      well = {
	        amount: initialWellUpdatedAmount,
	        batchCode: startingCell.batchCode,
	        batchConcentration: startingCell.batchConcentration
	      };
	      plateWells.push([rowIdx, this.selectedRegion.colStart, well]);
	      this.wellsToUpdate.fillWellWithWellObject(rowIdx, this.selectedRegion.colStart, well);
	    }
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByVolumeLeft;

	})(SerialDilutionByVolume);

	DiluteByVolumeUp = (function(superClass) {
	  extend(DiluteByVolumeUp, superClass);

	  function DiluteByVolumeUp(numberOfDoses, destinationWellVolume, transferVolume, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByVolumeUp.__super__.constructor.call(this, numberOfDoses, destinationWellVolume, transferVolume, selectedRegion);
	    this.startingColIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.colStart, ref1 = selectedRegion.colStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondRowIdx = selectedRegion.rowStart - 1;
	    this.lastRowIdx = (selectedRegion.rowStart - numberOfDoses) + 1;
	    this.rowIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondRowIdx, ref3 = this.lastRowIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByVolumeUp.prototype.getWells = function(wells) {
	    var plateWells;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    _.each(this.startingColIdexes, (function(_this) {
	      return function(colIdx) {
	        var initialWellUpdatedAmount, previousConcentration, startingCell, well;
	        startingCell = _this.wellsToUpdate.getWellAtRowIdxColIdx(_this.selectedRegion.rowStart, colIdx);
	        previousConcentration = parseFloat(startingCell.batchConcentration);
	        _.each(_this.rowIdxs, function(rowIdx) {
	          var concentration, finalVolume, well;
	          concentration = _this.getConcentration(previousConcentration);
	          previousConcentration = concentration;
	          well = {};
	          if (rowIdx !== _this.lastRowIdx) {
	            well = {
	              amount: _this.destinationWellVolume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          } else {
	            finalVolume = _this.transferVolume + _this.destinationWellVolume;
	            well = {
	              amount: finalVolume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          }
	          _this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	          return plateWells.push([rowIdx, colIdx, well]);
	        });
	        initialWellUpdatedAmount = startingCell.amount - _this.transferVolume;
	        initialWellUpdatedAmount = parseFloat(initialWellUpdatedAmount.toFixed(SIGNIFICANT_FIGS));
	        well = {
	          amount: initialWellUpdatedAmount,
	          batchCode: startingCell.batchCode,
	          batchConcentration: startingCell.batchConcentration
	        };
	        plateWells.push([_this.selectedRegion.rowStart, colIdx, well]);
	        return _this.wellsToUpdate.fillWellWithWellObject(_this.selectedRegion.rowStart, colIdx, well);
	      };
	    })(this));
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByVolumeUp;

	})(SerialDilutionByVolume);

	DiluteByVolumeDown = (function(superClass) {
	  extend(DiluteByVolumeDown, superClass);

	  function DiluteByVolumeDown(numberOfDoses, destinationWellVolume, transferVolume, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByVolumeDown.__super__.constructor.call(this, numberOfDoses, destinationWellVolume, transferVolume, selectedRegion);
	    this.startingColIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.colStart, ref1 = selectedRegion.colStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondRowIdx = selectedRegion.rowStart + 1;
	    this.lastRowIdx = (selectedRegion.rowStart + numberOfDoses) - 1;
	    this.rowIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondRowIdx, ref3 = this.lastRowIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByVolumeDown.prototype.getWells = function(wells) {
	    var plateWells;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    _.each(this.startingColIdexes, (function(_this) {
	      return function(colIdx) {
	        var initialWellUpdatedAmount, previousConcentration, startingCell, well;
	        startingCell = _this.wellsToUpdate.getWellAtRowIdxColIdx(_this.selectedRegion.rowStart, colIdx);
	        previousConcentration = parseFloat(startingCell.batchConcentration);
	        _.each(_this.rowIdxs, function(rowIdx) {
	          var concentration, finalVolume, well;
	          concentration = _this.getConcentration(previousConcentration);
	          previousConcentration = concentration;
	          well = {};
	          if (rowIdx !== _this.lastRowIdx) {
	            well = {
	              amount: _this.destinationWellVolume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          } else {
	            finalVolume = _this.transferVolume + _this.destinationWellVolume;
	            well = {
	              amount: finalVolume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          }
	          _this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	          return plateWells.push([rowIdx, colIdx, well]);
	        });
	        initialWellUpdatedAmount = startingCell.amount - _this.transferVolume;
	        initialWellUpdatedAmount = parseFloat(initialWellUpdatedAmount.toFixed(SIGNIFICANT_FIGS));
	        well = {
	          amount: initialWellUpdatedAmount,
	          batchCode: startingCell.batchCode,
	          batchConcentration: startingCell.batchConcentration
	        };
	        plateWells.push([_this.selectedRegion.rowStart, colIdx, well]);
	        return _this.wellsToUpdate.fillWellWithWellObject(_this.selectedRegion.rowStart, colIdx, well);
	      };
	    })(this));
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByVolumeDown;

	})(SerialDilutionByVolume);

	SerialDilutionByDilutionFactor = (function(superClass) {
	  extend(SerialDilutionByDilutionFactor, superClass);

	  function SerialDilutionByDilutionFactor(numberOfDoses, dilutionFactor, selectedRegion) {
	    this.getConcentration = bind(this.getConcentration, this);
	    SerialDilutionByDilutionFactor.__super__.constructor.call(this, numberOfDoses, selectedRegion);
	    this.dilutionFactor = parseFloat(dilutionFactor);
	    this.selectedRegion = selectedRegion;
	  }

	  SerialDilutionByDilutionFactor.prototype.getConcentration = function(previousConcentration) {
	    var wellBatchConcentration;
	    wellBatchConcentration = previousConcentration / this.dilutionFactor;
	    wellBatchConcentration = parseFloat(wellBatchConcentration.toFixed(SIGNIFICANT_FIGS));
	    return wellBatchConcentration;
	  };

	  return SerialDilutionByDilutionFactor;

	})(DilutionStrategy);

	DiluteByDilutionFactorRight = (function(superClass) {
	  extend(DiluteByDilutionFactorRight, superClass);

	  function DiluteByDilutionFactorRight(numberOfDoses, dilutionFactor, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByDilutionFactorRight.__super__.constructor.call(this, numberOfDoses, dilutionFactor, selectedRegion);
	    this.startingRowIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.rowStart, ref1 = selectedRegion.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondColIdx = selectedRegion.colStart + 1;
	    this.lastColIdx = (selectedRegion.colStart + numberOfDoses) - 1;
	    this.colIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondColIdx, ref3 = this.lastColIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByDilutionFactorRight.prototype.getWells = function(wells) {
	    var colIdx, concentration, finalVolume, i, initialWellUpdatedAmount, j, len, len1, plateWells, previousConcentration, ref, ref1, rowIdx, startingCell, volume, well;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    ref = this.startingRowIdexes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      rowIdx = ref[i];
	      startingCell = this.wellsToUpdate.getWellAtRowIdxColIdx(rowIdx, this.selectedRegion.colStart);
	      previousConcentration = parseFloat(startingCell.batchConcentration);
	      volume = startingCell.amount - (startingCell.amount / this.dilutionFactor);
	      volume = parseFloat(volume.toFixed(SIGNIFICANT_FIGS));
	      ref1 = this.colIdxs;
	      for (j = 0, len1 = ref1.length; j < len1; j++) {
	        colIdx = ref1[j];
	        concentration = this.getConcentration(previousConcentration);
	        previousConcentration = concentration;
	        well = {};
	        if (colIdx !== this.lastColIdx) {
	          well = {
	            amount: volume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        } else {
	          finalVolume = startingCell.amount;
	          well = {
	            amount: finalVolume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        }
	        this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	        plateWells.push([rowIdx, colIdx, well]);
	      }
	      initialWellUpdatedAmount = volume;
	      well = {
	        amount: initialWellUpdatedAmount,
	        batchCode: startingCell.batchCode,
	        batchConcentration: startingCell.batchConcentration
	      };
	      plateWells.push([rowIdx, this.selectedRegion.colStart, well]);
	      this.wellsToUpdate.fillWellWithWellObject(rowIdx, this.selectedRegion.colStart, well);
	    }
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByDilutionFactorRight;

	})(SerialDilutionByDilutionFactor);

	DiluteByDilutionFactorLeft = (function(superClass) {
	  extend(DiluteByDilutionFactorLeft, superClass);

	  function DiluteByDilutionFactorLeft(numberOfDoses, dilutionFactor, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByDilutionFactorLeft.__super__.constructor.call(this, numberOfDoses, dilutionFactor, selectedRegion);
	    this.startingRowIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.rowStart, ref1 = selectedRegion.rowStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondColIdx = selectedRegion.colStart - 1;
	    this.lastColIdx = (selectedRegion.colStart - numberOfDoses) + 1;
	    this.colIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondColIdx, ref3 = this.lastColIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByDilutionFactorLeft.prototype.getWells = function(wells) {
	    var colIdx, concentration, finalVolume, i, initialWellUpdatedAmount, j, len, len1, plateWells, previousConcentration, ref, ref1, rowIdx, startingCell, volume, well;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    ref = this.startingRowIdexes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      rowIdx = ref[i];
	      startingCell = this.wellsToUpdate.getWellAtRowIdxColIdx(rowIdx, this.selectedRegion.colStart);
	      previousConcentration = parseFloat(startingCell.batchConcentration);
	      volume = startingCell.amount - (startingCell.amount / this.dilutionFactor);
	      volume = parseFloat(volume.toFixed(SIGNIFICANT_FIGS));
	      ref1 = this.colIdxs;
	      for (j = 0, len1 = ref1.length; j < len1; j++) {
	        colIdx = ref1[j];
	        concentration = this.getConcentration(previousConcentration);
	        previousConcentration = concentration;
	        well = {};
	        if (colIdx !== this.lastColIdx) {
	          well = {
	            amount: volume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        } else {
	          finalVolume = startingCell.amount;
	          well = {
	            amount: finalVolume,
	            batchCode: startingCell.batchCode,
	            batchConcentration: concentration
	          };
	        }
	        this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	        plateWells.push([rowIdx, colIdx, well]);
	      }
	      initialWellUpdatedAmount = volume;
	      well = {
	        amount: initialWellUpdatedAmount,
	        batchCode: startingCell.batchCode,
	        batchConcentration: startingCell.batchConcentration
	      };
	      plateWells.push([rowIdx, this.selectedRegion.colStart, well]);
	      this.wellsToUpdate.fillWellWithWellObject(rowIdx, this.selectedRegion.colStart, well);
	    }
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByDilutionFactorLeft;

	})(SerialDilutionByDilutionFactor);

	DiluteByDilutionFactorDown = (function(superClass) {
	  extend(DiluteByDilutionFactorDown, superClass);

	  function DiluteByDilutionFactorDown(numberOfDoses, dilutionFactor, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByDilutionFactorDown.__super__.constructor.call(this, numberOfDoses, dilutionFactor, selectedRegion);
	    this.startingColIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.colStart, ref1 = selectedRegion.colStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondRowIdx = selectedRegion.rowStart + 1;
	    this.lastRowIdx = (selectedRegion.rowStart + numberOfDoses) - 1;
	    this.rowIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondRowIdx, ref3 = this.lastRowIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByDilutionFactorDown.prototype.getWells = function(wells) {
	    var plateWells;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    _.each(this.startingColIdexes, (function(_this) {
	      return function(colIdx) {
	        var initialWellUpdatedAmount, previousConcentration, startingCell, volume, well;
	        startingCell = _this.wellsToUpdate.getWellAtRowIdxColIdx(_this.selectedRegion.rowStart, colIdx);
	        previousConcentration = parseFloat(startingCell.batchConcentration);
	        volume = startingCell.amount - (startingCell.amount / _this.dilutionFactor);
	        volume = parseFloat(volume.toFixed(SIGNIFICANT_FIGS));
	        _.each(_this.rowIdxs, function(rowIdx) {
	          var concentration, finalVolume, well;
	          concentration = _this.getConcentration(previousConcentration);
	          previousConcentration = concentration;
	          well = {};
	          if (rowIdx !== _this.lastRowIdx) {
	            well = {
	              amount: volume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          } else {
	            finalVolume = startingCell.amount;
	            well = {
	              amount: finalVolume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          }
	          _this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	          return plateWells.push([rowIdx, colIdx, well]);
	        });
	        initialWellUpdatedAmount = volume;
	        well = {
	          amount: initialWellUpdatedAmount,
	          batchCode: startingCell.batchCode,
	          batchConcentration: startingCell.batchConcentration
	        };
	        plateWells.push([_this.selectedRegion.rowStart, colIdx, well]);
	        return _this.wellsToUpdate.fillWellWithWellObject(_this.selectedRegion.rowStart, colIdx, well);
	      };
	    })(this));
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByDilutionFactorDown;

	})(SerialDilutionByDilutionFactor);

	DiluteByDilutionFactorUp = (function(superClass) {
	  extend(DiluteByDilutionFactorUp, superClass);

	  function DiluteByDilutionFactorUp(numberOfDoses, dilutionFactor, selectedRegion) {
	    this.getWells = bind(this.getWells, this);
	    var i, j, ref, ref1, ref2, ref3, results, results1;
	    DiluteByDilutionFactorUp.__super__.constructor.call(this, numberOfDoses, dilutionFactor, selectedRegion);
	    this.startingColIdexes = (function() {
	      results = [];
	      for (var i = ref = selectedRegion.colStart, ref1 = selectedRegion.colStop; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
	      return results;
	    }).apply(this);
	    this.secondRowIdx = selectedRegion.rowStart - 1;
	    this.lastRowIdx = (selectedRegion.rowStart - numberOfDoses) + 1;
	    this.rowIdxs = (function() {
	      results1 = [];
	      for (var j = ref2 = this.secondRowIdx, ref3 = this.lastRowIdx; ref2 <= ref3 ? j <= ref3 : j >= ref3; ref2 <= ref3 ? j++ : j--){ results1.push(j); }
	      return results1;
	    }).apply(this);
	  }

	  DiluteByDilutionFactorUp.prototype.getWells = function(wells) {
	    var plateWells;
	    this.wellsToUpdate = new WellsModel({
	      allWells: wells
	    });
	    plateWells = [];
	    _.each(this.startingColIdexes, (function(_this) {
	      return function(colIdx) {
	        var initialWellUpdatedAmount, previousConcentration, startingCell, volume, well;
	        startingCell = _this.wellsToUpdate.getWellAtRowIdxColIdx(_this.selectedRegion.rowStart, colIdx);
	        previousConcentration = parseFloat(startingCell.batchConcentration);
	        volume = startingCell.amount - (startingCell.amount / _this.dilutionFactor);
	        volume = parseFloat(volume.toFixed(SIGNIFICANT_FIGS));
	        _.each(_this.rowIdxs, function(rowIdx) {
	          var concentration, finalVolume, well;
	          concentration = _this.getConcentration(previousConcentration);
	          previousConcentration = concentration;
	          well = {};
	          if (rowIdx !== _this.lastRowIdx) {
	            well = {
	              amount: volume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          } else {
	            finalVolume = startingCell.amount;
	            well = {
	              amount: finalVolume,
	              batchCode: startingCell.batchCode,
	              batchConcentration: concentration
	            };
	          }
	          _this.wellsToUpdate.fillWellWithWellObject(rowIdx, colIdx, well);
	          return plateWells.push([rowIdx, colIdx, well]);
	        });
	        initialWellUpdatedAmount = volume;
	        well = {
	          amount: initialWellUpdatedAmount,
	          batchCode: startingCell.batchCode,
	          batchConcentration: startingCell.batchConcentration
	        };
	        plateWells.push([_this.selectedRegion.rowStart, colIdx, well]);
	        return _this.wellsToUpdate.fillWellWithWellObject(_this.selectedRegion.rowStart, colIdx, well);
	      };
	    })(this));
	    this.wellsToUpdate.save();
	    return plateWells;
	  };

	  return DiluteByDilutionFactorUp;

	})(SerialDilutionByDilutionFactor);

	module.exports = {
	  SerialDilutionFactory: SerialDilutionFactory
	};


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, BackboneValidation, SERIAL_DILUTION_MODEL_FIELDS, SerialDilutionModel, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	_ = __webpack_require__(11);

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_.extend(Backbone.Model.prototype, BackboneValidation.mixin);

	SERIAL_DILUTION_MODEL_FIELDS = {
	  DESTINATION_WELL_VOLUME: "destinationWellVolume",
	  DILUTION_FACTOR: "dilutionFactor",
	  DIRECTION: "direction",
	  NUMBER_OF_DOSES: "numberOfDoses",
	  TEMPLATE: "template",
	  TRANSFER_VOLUME: "transferVolume",
	  IS_DILUTION_BY_VOLUME: "isDilutionByVolume",
	  NUMBER_OF_COLUMNS_SELECTED: "numberOfColumnsSelected",
	  NUMBER_OF_ROWS_SELECTED: "numberOfRowsSelected",
	  SELECTED_ROW_IDX: "selectedRowIdx",
	  SELECTED_COLUMN_IDX: "selectedColumnIdx",
	  MAX_NUMBER_OF_COLUMNS: "maxNumberOfColumns",
	  MAX_NUMBER_OF_ROWS: "maxNumberOfRows"
	};

	SerialDilutionModel = (function(superClass) {
	  extend(SerialDilutionModel, superClass);

	  function SerialDilutionModel() {
	    return SerialDilutionModel.__super__.constructor.apply(this, arguments);
	  }

	  SerialDilutionModel.prototype.defaults = {
	    "destinationWellVolume": "",
	    "dilutionFactor": "",
	    "direction": "diluteRight",
	    "numberOfDoses": 0,
	    "template": "",
	    "transferVolume": "",
	    "isDilutionByVolume": true
	  };

	  SerialDilutionModel.prototype.validation = {
	    template: {
	      required: true,
	      msg: "Please Plate or Barcode"
	    }
	  };

	  SerialDilutionModel.prototype.initialize = function() {
	    return this.errorMessages = [];
	  };

	  SerialDilutionModel.prototype.aRowIsSelected = function() {
	    var aRowIsSelected;
	    aRowIsSelected = false;
	    if (this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_COLUMNS_SELECTED) > 1) {
	      aRowIsSelected = true;
	    }
	    return aRowIsSelected;
	  };

	  SerialDilutionModel.prototype.aColumnIsSelected = function() {
	    var aColumnIsSelected;
	    aColumnIsSelected = false;
	    if (this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_ROWS_SELECTED) > 1) {
	      aColumnIsSelected = true;
	    }
	    return aColumnIsSelected;
	  };

	  SerialDilutionModel.prototype.aSingleCellIsSelected = function() {
	    var aSingleCellIsSelected;
	    aSingleCellIsSelected = false;
	    if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_ROWS_SELECTED) === 1) && (this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_COLUMNS_SELECTED) === 1)) {
	      aSingleCellIsSelected = true;
	    }
	    return aSingleCellIsSelected;
	  };

	  SerialDilutionModel.prototype.enoughSpaceForNumberOfDoses = function() {
	    var enoughSpaceForNumberOfDoses;
	    enoughSpaceForNumberOfDoses = false;
	    if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_ROW_IDX) != null) && (this.get(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_COLUMN_IDX) != null)) {
	      if (this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteLeft") {
	        if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_COLUMN_IDX) - this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES)) > -1) {
	          enoughSpaceForNumberOfDoses = true;
	        }
	      } else if (this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteRight") {
	        if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_COLUMN_IDX) + this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES)) < this.get(SERIAL_DILUTION_MODEL_FIELDS.MAX_NUMBER_OF_COLUMNS)) {
	          enoughSpaceForNumberOfDoses = true;
	        }
	      } else if (this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteUp") {
	        if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_ROW_IDX) - this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES)) > -1) {
	          enoughSpaceForNumberOfDoses = true;
	        }
	      } else if (this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteDown") {
	        if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_ROW_IDX) + this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES)) < this.get(SERIAL_DILUTION_MODEL_FIELDS.MAX_NUMBER_OF_ROWS)) {
	          enoughSpaceForNumberOfDoses = true;
	        }
	      }
	    } else {
	      enoughSpaceForNumberOfDoses = true;
	    }
	    if (!enoughSpaceForNumberOfDoses) {
	      this.errorMessages.push("There is not enough space to perform the requested dilution");
	    }
	    return enoughSpaceForNumberOfDoses;
	  };

	  SerialDilutionModel.prototype.validRegionSelected = function() {
	    var validRegionSelected;
	    validRegionSelected = false;
	    if (this.aSingleCellIsSelected()) {
	      validRegionSelected = true;
	    } else {
	      if (!this.aColumnIsSelected() && !this.aRowIsSelected()) {
	        this.errorMessages.push("Please select a plate region to perform a dilution");
	        validRegionSelected = false;
	      } else {
	        if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_COLUMNS_SELECTED) === 1) && (this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_ROWS_SELECTED) === 1)) {
	          validRegionSelected = true;
	        } else {
	          if (this.aRowIsSelected() && this.aColumnIsSelected()) {
	            this.errorMessages.push("Please select either a single row or a single column");
	          } else {
	            if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteUp") || (this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteDown")) {
	              if (this.aRowIsSelected() && !this.aColumnIsSelected()) {
	                validRegionSelected = true;
	              } else {
	                this.errorMessages.push("Please select a single row to perform a vertical dilution");
	              }
	            } else if ((this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteRight") || (this.get(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION) === "diluteLeft")) {
	              if (this.aColumnIsSelected() && !this.aRowIsSelected()) {
	                validRegionSelected = true;
	              } else {
	                this.errorMessages.push("Please select a single column to perform a horizontal dilution");
	              }
	            }
	          }
	        }
	      }
	    }
	    return validRegionSelected;
	  };

	  SerialDilutionModel.prototype.validateNumberOfDoses = function() {
	    var validNumberOfDoses;
	    validNumberOfDoses = true;
	    if (isNaN(this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES))) {
	      this.errorMessages.push("Please enter a numeric value for the number of doses");
	      validNumberOfDoses = false;
	    } else if ($.trim(this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES)) === "") {
	      this.errorMessages.push("Please enter the number of doses");
	      validNumberOfDoses = false;
	    } else if (this.get(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_DOSES) <= 0) {
	      this.errorMessages.push("The number of doses must be greater than 0");
	      validNumberOfDoses = false;
	    }
	    return validNumberOfDoses;
	  };

	  SerialDilutionModel.prototype.validateTransferVolume = function() {
	    var valid;
	    valid = true;
	    if (this.get(SERIAL_DILUTION_MODEL_FIELDS.IS_DILUTION_BY_VOLUME)) {
	      if (isNaN(this.get(SERIAL_DILUTION_MODEL_FIELDS.TRANSFER_VOLUME))) {
	        this.errorMessages.push("Please enter a numeric value for the transfer volume");
	        valid = false;
	      } else if ($.trim(this.get(SERIAL_DILUTION_MODEL_FIELDS.TRANSFER_VOLUME)) === "") {
	        this.errorMessages.push("Please enter the transfer volume");
	        valid = false;
	      } else if (this.get(SERIAL_DILUTION_MODEL_FIELDS.TRANSFER_VOLUME) <= 0) {
	        this.errorMessages.push("The transfer volume must be greater than 0");
	        valid = false;
	      }
	    }
	    return valid;
	  };

	  SerialDilutionModel.prototype.validateDestinationVolume = function() {
	    var valid;
	    valid = true;
	    if (this.get(SERIAL_DILUTION_MODEL_FIELDS.IS_DILUTION_BY_VOLUME)) {
	      if (isNaN(this.get(SERIAL_DILUTION_MODEL_FIELDS.DESTINATION_WELL_VOLUME))) {
	        this.errorMessages.push("Please enter a numeric value for the destination volume");
	        valid = false;
	      } else if ($.trim(this.get(SERIAL_DILUTION_MODEL_FIELDS.DESTINATION_WELL_VOLUME)) === "") {
	        this.errorMessages.push("Please enter the destination volume");
	        valid = false;
	      } else if (this.get(SERIAL_DILUTION_MODEL_FIELDS.DESTINATION_WELL_VOLUME) <= 0) {
	        this.errorMessages.push("The destination volume must be greater than 0");
	        valid = false;
	      }
	    }
	    return valid;
	  };

	  SerialDilutionModel.prototype.validateDilutionFactor = function() {
	    var valid;
	    valid = true;
	    if (!this.get(SERIAL_DILUTION_MODEL_FIELDS.IS_DILUTION_BY_VOLUME)) {
	      if (isNaN(this.get(SERIAL_DILUTION_MODEL_FIELDS.DILUTION_FACTOR))) {
	        this.errorMessages.push("Please enter a numeric value for the dilution factor");
	        valid = false;
	      } else if ($.trim(this.get(SERIAL_DILUTION_MODEL_FIELDS.DILUTION_FACTOR)) === "") {
	        this.errorMessages.push("Please enter the dilution factor");
	        valid = false;
	      } else if (this.get(SERIAL_DILUTION_MODEL_FIELDS.DILUTION_FACTOR) < 1) {
	        this.errorMessages.push("The dilution factor must be greater than 0");
	        valid = false;
	      }
	    }
	    return valid;
	  };

	  SerialDilutionModel.prototype.isItValid = function() {
	    this.errorMessages = [];
	    if (this.validateNumberOfDoses()) {
	      this.enoughSpaceForNumberOfDoses();
	    }
	    this.validRegionSelected();
	    this.validateTransferVolume();
	    this.validateDestinationVolume();
	    this.validateDilutionFactor();
	    if (_.size(this.errorMessages) === 0) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  SerialDilutionModel.prototype.reset = function() {
	    return this.set({
	      "destinationWellVolume": "",
	      "dilutionFactor": "",
	      "direction": "",
	      "numberOfDoses": "",
	      "template": "",
	      "transferVolume": ""
	    });
	  };

	  return SerialDilutionModel;

	})(Backbone.Model);

	module.exports = {
	  SerialDilutionModel: SerialDilutionModel,
	  SERIAL_DILUTION_MODEL_FIELDS: SERIAL_DILUTION_MODEL_FIELDS
	};


/***/ },
/* 42 */
/***/ function(module, exports) {

	module.exports = "\n<div style=\"overflow: auto; width: 100%; height: 100%\">\n    <div name=\"\" class=\"editorHandsontable\" style=\"position: absolute; top: 115px; left: 320px; bottom: 0px; right: 0px; padding-right: 0px; padding-bottom: 0px;\">\n        <div name=\"handsontablecontainer\"></div>\n    </div>\n</div>\n<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" name=\"handsontablePasteError\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                <h4 class=\"modal-title\">Error</h4>\n            </div>\n            <div class=\"modal-body\">\n                <p>Not enough room on the plate to enter the data that is being pasted.  You may choose to paste any way, and the data that fits will appear in the table, while the remaining data will be ignored.</p>\n                <span class=\"hide\">\n                    <p>The data you are pasting in has <span name=\"numberOfRowsBeingPasted\"></span> rows, but there are only <span name=\"numberOfRowsAvailable\"></span> available.</p>\n                    <p>The data you are pasting in has <span name=\"numberOfColsBeingPasted\"></span> columns, but there are only <span name=\"numberOfColumnsAvailable\"></span> available.</p>\n                </span>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" name=\"pasteTruncatedIdentifiersAnyway\" data-dismiss=\"modal\">Paste any way</button>\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n            </div>\n        </div><!-- /.modal-content -->\n    </div><!-- /.modal-dialog -->\n</div><!-- /.modal -->\n\n<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" name=\"updatingWellContents\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                <h4 class=\"modal-title\">Saving</h4>\n            </div>\n            <div class=\"modal-body\">\n                Saving plate content....\n            </div>\n            <div class=\"modal-footer\">\n\n            </div>\n        </div><!-- /.modal-content -->\n    </div><!-- /.modal-dialog -->\n</div><!-- /.modal -->\n\n<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" name=\"overwrittingWellContentsWarning\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                <h4 class=\"modal-title\">Warning</h4>\n            </div>\n            <div class=\"modal-body\">\n                Overwrite content?\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" name=\"insertOverwrittenWellsAnyway\" data-dismiss=\"modal\">Yes</button>\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Cancel</button>\n            </div>\n        </div><!-- /.modal-content -->\n    </div><!-- /.modal-dialog -->\n</div><!-- /.modal -->";

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = "<!-- TOOLBAR -->\n\n<div class=\"well acasWell toolbarWell\">\n\n    <div class=\"btn-group toolbarButtons\" role=\"group\">\n        <div class=\"btn-group\">\n            <button class=\"btn btn-default dropdown-toggle toolbarViewButton\" data-toggle=\"dropdown\" name=\"cellZoom\">Fit to Screen</button>\n            <ul class=\"dropdown-menu\" role=\"menu\">\n                <li><a href=\"#\" name=\"showAll\">Show All</a></li>\n                <li><a href=\"#\" name=\"fitToContents\">Fit to Contents</a></li>\n                <li><a href=\"#\" name=\"fitToScreen\">Fit to Screen</a></li>\n            </ul>\n        </div>\n\n        <div class=\"btn-group\">\n            <button class=\"btn btn-default dropdown-toggle toolbarViewButton\" data-toggle=\"dropdown\" name=\"selectedView\" >Compound View</button>\n            <ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dropdownMenu1\">\n                <li><a href=\"#\" name=\"compoundView\">Compound View</a></li>\n                <li><a href=\"#\" name=\"volumeView\">Volume View</a></li>\n                <li><a href=\"#\" name=\"concentrationView\">Concentration View</a></li>\n                <li><a href=\"#\" name=\"masterView\">Master View</a></li>\n            </ul>\n        </div>\n        <div class=\"btn-group\">\n            <button class=\"btn btn-default dropdown-toggle toolbarViewButton\" data-toggle=\"dropdown\" name=\"selectedColorBy\">No Color</button>\n            <ul class=\"dropdown-menu\" role=\"menu\">\n                <li><a href=\"#\" name=\"colorByCompound\">Color By Compound</a></li>\n                <li><a href=\"#\" name=\"colorByVolume\">Color By Volume</a></li>\n                <li><a href=\"#\" name=\"colorByConcentration\">Color By Concentration</a></li>\n                <li><a href=\"#\" name=\"colorByNone\">No Color</a></li>\n            </ul>\n        </div>\n        <button class=\"btn btn-default toolbarViewButtonSmall toolbarSmallText\" name=\"decreaseFontSize\">AA</button>\n        <button class=\"btn btn-default toolbarViewButtonSmall\" name=\"increaseFontSize\">AA</button>\n        <button class=\"btn btn-default toolbarViewButtonSmall\"><i class=\"fa fa-undo\"></i></button>\n        <button class=\"btn btn-default toolbarViewButtonSmall\"><i class=\"fa fa-repeat\"></i></button>\n        <button class=\"btn btn-default toolbarViewButtonSmall\" name=\"displayToolTips\"><i class=\"fa fa-search-plus\"></i></button>\n    </div>\n\n    <!--<button class=\"btn btn-default\">Save</button>-->\n    <button class=\"btn btn-primary\">Complete</button>\n\n</div>\n\n<!-- TABLE style=\"width: 800px; height: 600px;\" -->\n<div>\n<!--<div class=\"well acasWell editorHandsontable\" name=\"plateTableContainer\" style=\"width: 100%; height: 100%; overflow: hidden;\">-->\n    <!--<div class=\"editorHandsontable\" name=\"plateTableContainer\" style=\"width: 100%; height: 100%; overflow: hidden;\">-->\n        <div class=\"bv_tableContainer\" name=\"plateTableContainer\" style=\"height: 100%; width: 100%;\">\n\n        </div>\n\n<!--</div>-->\n</div>\n";

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var $, Backbone, BackboneValidation, TEMPLATE_CONTROLLER_EVENTS, TemplateController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	TEMPLATE_CONTROLLER_EVENTS = {};

	_.extend(Backbone.Validation.callbacks, {
	  valid: function(view, attr, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.removeClass('has-error');
	    return $group.find('.help-block').html('').addClass('hidden');
	  },
	  invalid: function(view, attr, error, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.addClass('has-error');
	    return $group.find('.help-block').html(error).removeClass('hidden');
	  }
	});

	TemplateController = (function(superClass) {
	  extend(TemplateController, superClass);

	  function TemplateController() {
	    this.render = bind(this.render, this);
	    return TemplateController.__super__.constructor.apply(this, arguments);
	  }

	  TemplateController.prototype.template = _.template(__webpack_require__(45));

	  TemplateController.prototype.initialize = function(options) {};

	  TemplateController.prototype.events = {};

	  TemplateController.prototype.render = function() {
	    $(this.el).html(this.template());
	    return this;
	  };

	  return TemplateController;

	})(Backbone.View);

	module.exports = {
	  TemplateController: TemplateController,
	  TEMPLATE_CONTROLLER_EVENTS: TEMPLATE_CONTROLLER_EVENTS
	};


/***/ },
/* 45 */
/***/ function(module, exports) {

	module.exports = "<h5 class=\"pull-left templateHeader\">Template</h5>\n<div class=\"pull-right\">\n    <i class=\"fa fa-question-circle editorTabHelpIcon\"></i>\n</div>\n\n<div class=\"form\">\n    <div class=\"form-group\">\n        <label class=\"control-label\">Select a Well Type</label>\n        <div class=\"\">\n            <select class=\"form-control\">\n                <option>Positive Control</option>\n                <option>Negative Control</option>\n                <option>Vehicle Control</option>\n                <option>Test Compound</option>\n            </select>\n        </div>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" /> Fill Region with Sequential IDs\n        </label>\n    </div>\n    <div class=\"form-group editorTabSeq\">\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control editorTabSeqIDs pull-left\" placeholder=\"1\" />\n            <div class=\"editorTabSeqIDsTo pull-left\">to</div>\n            <input type=\"text\" class=\"form-control editorTabSeqIDs pull-left\" placeholder=\"100\" />\n        </div>\n    </div>\n    <div class=\"radio editorTabFillSuboption\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" /> Fill Region in Order\n        </label>\n    </div>\n    <div class=\"radio editorTabFillSuboption\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" /> Fill Region in Random Order\n        </label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" /> Fill Region with Single ID\n        </label>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" disabled />\n        </div>\n    </div>\n    <div class=\"form-group editorTabLabelSpecial\">\n        <label class=\"control-label editorTabLabelDirection\">Direction</label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" /> Row Major\n        </label>\n    </div>\n    <div class=\"radio\">\n        <label>\n            <input type=\"radio\" value=\"\" class=\"editorTabRadio\" /> Column Major\n        </label>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Volume (uL)</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" />\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Conc. (mM)</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control\" />\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div>You have <span class=\"cellsSelected\">n</span> cells selected.</div>\n    </div>\n    <div class=\"form-group\">\n        <button class=\"btn btn-default pull-right\">Add</button>\n    </div>\n</div>";

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var $, Backbone, BackboneValidation, SERIAL_DILUTION_CONTROLLER_EVENTS, SERIAL_DILUTION_MODEL_FIELDS, SerialDilutionController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	SERIAL_DILUTION_CONTROLLER_EVENTS = {
	  APPLY_DILUTION: "applyDilution"
	};

	SERIAL_DILUTION_MODEL_FIELDS = __webpack_require__(41).SERIAL_DILUTION_MODEL_FIELDS;

	_.extend(Backbone.Validation.callbacks, {
	  valid: function(view, attr, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.removeClass('has-error');
	    return $group.find('.help-block').html('').addClass('hidden');
	  },
	  invalid: function(view, attr, error, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.addClass('has-error');
	    return $group.find('.help-block').html(error).removeClass('hidden');
	  }
	});

	SerialDilutionController = (function(superClass) {
	  extend(SerialDilutionController, superClass);

	  function SerialDilutionController() {
	    this.render = bind(this.render, this);
	    this.buildErrorMessage = bind(this.buildErrorMessage, this);
	    this.setStateOfSubmitButton = bind(this.setStateOfSubmitButton, this);
	    this.updateSelectedRegion = bind(this.updateSelectedRegion, this);
	    this.handleDilutionStrategyChanged = bind(this.handleDilutionStrategyChanged, this);
	    this.handleApplyDilutionClicked = bind(this.handleApplyDilutionClicked, this);
	    this.handleDilutionDirectionChanged = bind(this.handleDilutionDirectionChanged, this);
	    this.completeInitialization = bind(this.completeInitialization, this);
	    return SerialDilutionController.__super__.constructor.apply(this, arguments);
	  }

	  SerialDilutionController.prototype.template = _.template(__webpack_require__(47));

	  SerialDilutionController.prototype.initialize = function(options) {
	    this.model = options.model;
	    return this.numericFields = ["numberOfDoses", "transferVolume", "destinationWellVolume", "dilutionFactor"];
	  };

	  SerialDilutionController.prototype.events = {
	    "change input[type='text']": "handleFormFieldUpdate",
	    "click button[name='applyDilution']": "handleApplyDilutionClicked",
	    "click button[name='diluteUp']": "handleDilutionDirectionChanged",
	    "click button[name='diluteRight']": "handleDilutionDirectionChanged",
	    "click button[name='diluteDown']": "handleDilutionDirectionChanged",
	    "click button[name='diluteLeft']": "handleDilutionDirectionChanged",
	    "change input[name='dilutionStrategy']": "handleDilutionStrategyChanged"
	  };

	  SerialDilutionController.prototype.handleFormFieldUpdate = function(evt) {
	    var data, ref, target;
	    target = $(evt.currentTarget);
	    data = {};
	    if (ref = target.attr('name'), indexOf.call(this.numericFields, ref) >= 0) {
	      data[target.attr('name')] = parseFloat($.trim(target.val()));
	    } else {
	      data[target.attr('name')] = $.trim(target.val());
	    }
	    this.model.set(data);
	    return this.setStateOfSubmitButton();
	  };

	  SerialDilutionController.prototype.completeInitialization = function(plateMetadata) {
	    this.model.set(SERIAL_DILUTION_MODEL_FIELDS.MAX_NUMBER_OF_COLUMNS, plateMetadata.numberOfColumns);
	    return this.model.set(SERIAL_DILUTION_MODEL_FIELDS.MAX_NUMBER_OF_ROWS, plateMetadata.numberOfRows);
	  };

	  SerialDilutionController.prototype.handleDilutionDirectionChanged = function(e) {
	    var dilutionDirection;
	    dilutionDirection = e.currentTarget.name;
	    this.$(".serialDilutionDirection").removeClass("active");
	    $("button[name='" + dilutionDirection + "']").addClass("active");
	    this.model.set(SERIAL_DILUTION_MODEL_FIELDS.DIRECTION, dilutionDirection);
	    return this.setStateOfSubmitButton();
	  };

	  SerialDilutionController.prototype.handleApplyDilutionClicked = function() {
	    return this.trigger(SERIAL_DILUTION_CONTROLLER_EVENTS.APPLY_DILUTION, this.model);
	  };

	  SerialDilutionController.prototype.handleDilutionStrategyChanged = function(e) {
	    if (e.currentTarget.value === "volume") {
	      this.model.set(SERIAL_DILUTION_MODEL_FIELDS.IS_DILUTION_BY_VOLUME, true);
	      this.$("input[name='transferVolume']").prop("disabled", false);
	      this.$("input[name='destinationWellVolume']").prop("disabled", false);
	      this.$("input[name='dilutionFactor']").prop("disabled", true);
	    } else {
	      this.model.set(SERIAL_DILUTION_MODEL_FIELDS.IS_DILUTION_BY_VOLUME, false);
	      this.$("input[name='transferVolume']").prop("disabled", true);
	      this.$("input[name='destinationWellVolume']").prop("disabled", true);
	      this.$("input[name='dilutionFactor']").prop("disabled", false);
	    }
	    return this.setStateOfSubmitButton();
	  };

	  SerialDilutionController.prototype.updateSelectedRegion = function(selectedRegion) {
	    var numberOfColumnsSelected, numberOfRowsSelected;
	    numberOfRowsSelected = Math.abs(selectedRegion.rowStart - selectedRegion.rowStop) + 1;
	    numberOfColumnsSelected = Math.abs(selectedRegion.colStart - selectedRegion.colStop) + 1;
	    this.model.set(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_COLUMN_IDX, selectedRegion.colStart);
	    this.model.set(SERIAL_DILUTION_MODEL_FIELDS.SELECTED_ROW_IDX, selectedRegion.rowStart);
	    this.model.set(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_COLUMNS_SELECTED, numberOfColumnsSelected);
	    this.model.set(SERIAL_DILUTION_MODEL_FIELDS.NUMBER_OF_ROWS_SELECTED, numberOfRowsSelected);
	    return this.setStateOfSubmitButton();
	  };

	  SerialDilutionController.prototype.setStateOfSubmitButton = function() {
	    var errorMessages;
	    if (this.model.isItValid()) {
	      this.$(".bv_errorMessages").empty();
	      this.$("button[name='applyDilution']").prop("disabled", false);
	      return this.$("button[name='applyDilution']").removeClass("disabled");
	    } else {
	      errorMessages = this.buildErrorMessage();
	      this.$(".bv_errorMessages").html(errorMessages);
	      this.$("button[name='applyDilution']").prop("disabled", true);
	      return this.$("button[name='applyDilution']").addClass("disabled");
	    }
	  };

	  SerialDilutionController.prototype.buildErrorMessage = function() {
	    var errorMessages;
	    errorMessages = "";
	    _.each(this.model.errorMessages, function(errorMessage) {
	      return errorMessages += errorMessage + "<br />";
	    });
	    return errorMessages;
	  };

	  SerialDilutionController.prototype.render = function() {
	    $(this.el).html(this.template());
	    this.setStateOfSubmitButton();
	    return this;
	  };

	  return SerialDilutionController;

	})(Backbone.View);

	module.exports = {
	  SerialDilutionController: SerialDilutionController,
	  SERIAL_DILUTION_CONTROLLER_EVENTS: SERIAL_DILUTION_CONTROLLER_EVENTS
	};


/***/ },
/* 47 */
/***/ function(module, exports) {

	module.exports = "<h5 class=\"pull-left\">Serial Dilution</h5>\n<div class=\"pull-right\">\n    <i class=\"fa fa-question-circle editorTabHelpIcon\"></i>\n</div>\n\n<div class=\"form\">\n    <div class=\"form-group\">\n        <label class=\"control-label\">Select Serial Dilution</label>\n        <div class=\"\">\n            <select class=\"form-control\">\n                <option>Select from Template</option>\n            </select>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"control-label\">Number of Doses</label>\n        <div class=\"\">\n            <input type=\"text\" class=\"form-control pull-left editorTabNumOfDoses\" style=\"padding-right: 5px; padding-right: 5px;\" name=\"numberOfDoses\" />\n            <div class=\"btn-group\" role=\"group\">\n                <button class=\"btn btn-default serialDilutionDirection\" name=\"diluteUp\"><i class=\"fa fa-arrow-up\"></i></button>\n                <button class=\"btn btn-default active serialDilutionDirection\" name=\"diluteRight\"><i class=\"fa fa-arrow-right\"></i></button>\n                <button class=\"btn btn-default serialDilutionDirection\" name=\"diluteDown\"><i class=\"fa fa-arrow-down\"></i></button>\n                <button class=\"btn btn-default serialDilutionDirection\" name=\"diluteLeft\"><i class=\"fa fa-arrow-left\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-1\" style=\"padding-right: 5px; padding-left: 5px;\">\n            <div class=\"radio pull-left editorTabVolRadio\">\n                <label>\n                    <input type=\"radio\" name=\"dilutionStrategy\" value=\"volume\" class=\"bv_volume\" checked=\"true\" />\n                </label>\n            </div>\n        </div>\n        <div class=\"col-md-10\" style=\"padding-right: 5px; padding-left: 5px;\">\n            <div class=\"form-group pull-left editorTabTransferVol\">\n                <label class=\"control-label\">Transfer Volume (uL)</label>\n                <div class=\"\">\n                    <input type=\"text\" class=\"form-control\" name=\"transferVolume\"/>\n                </div>\n            </div>\n            <div class=\"form-group pull-left editorTabDestinationWellVol\">\n                <label class=\"control-label\">Destination Well Volume (uL)</label>\n                <div class=\"\">\n                    <input type=\"text\" class=\"form-control\" name=\"destinationWellVolume\"/>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!--<div class=\"form group\">-->\n        <!--<div class=\"editorTabOr\"><span>Or</span></div>-->\n    <!--</div>-->\n    <div class=\"row\">\n        <div class=\"col-md-1\" style=\"padding-right: 5px; padding-left: 5px;\">\n            <div class=\"radio pull-left editorTabDilutionFactorRadio\">\n                <label>\n                    <input type=\"radio\" name=\"dilutionStrategy\" value=\"dilutionFactor\" class=\"bv_dilutionFactor\" />\n                </label>\n            </div>\n        </div>\n        <div class=\"col-md-10\" style=\"padding-right: 5px; padding-left: 5px;\">\n            <div class=\"form-group pull-left editorTabDilutionFactor\">\n                <label class=\"control-label\">Dilution Factor</label>\n                <div class=\"\">\n                    <input type=\"text\" class=\"form-control\" name=\"dilutionFactor\" disabled />\n                </div>\n            </div>\n        </div>\n    </div>\n        </div>\n    <div class=\"form-group\">\n        <button class=\"btn btn-default pull-right\" name=\"applyDilution\">Apply Dilution</button>\n    </div>\n    <div class=\"form-group pull-right bv_errorMessages\">error messages will go here</div>\n</div>";

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var $, Backbone, EditorFormTabViewController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	EditorFormTabViewController = (function(superClass) {
	  extend(EditorFormTabViewController, superClass);

	  function EditorFormTabViewController() {
	    this.handleEditorCollapseButtonClick = bind(this.handleEditorCollapseButtonClick, this);
	    this.hidePreviouslyDisplayedFormContainer = bind(this.hidePreviouslyDisplayedFormContainer, this);
	    this.clearPreviouslySelectedTab = bind(this.clearPreviouslySelectedTab, this);
	    this.handleSerialDilutionTabClick = bind(this.handleSerialDilutionTabClick, this);
	    this.handleTemplateTabClick = bind(this.handleTemplateTabClick, this);
	    this.handleAddContentTabClick = bind(this.handleAddContentTabClick, this);
	    this.handleInfoTabClick = bind(this.handleInfoTabClick, this);
	    this.render = bind(this.render, this);
	    return EditorFormTabViewController.__super__.constructor.apply(this, arguments);
	  }

	  EditorFormTabViewController.prototype.template = __webpack_require__(49);

	  EditorFormTabViewController.prototype.initialize = function(options) {
	    this.tabSelectors = [".editorTabInfo", ".editorTabAddContent", ".editorTabTemplate", ".editorTabSerialDilution"];
	    this.containerSelectors = ["div[name='info_form']", "div[name='add_content_form']", "div[name='template_form']", "div[name='serial_dilution_form']"];
	    this.plateInfoController = options.plateInfoController;
	    this.addContentController = options.addContentController;
	    this.templateController = options.templateController;
	    return this.serialDilutionController = options.serialDilutionController;
	  };

	  EditorFormTabViewController.prototype.events = {
	    "click a[name='info_tab']": "handleInfoTabClick",
	    "click a[name='add_content_tab']": "handleAddContentTabClick",
	    "click a[name='template_tab']": "handleTemplateTabClick",
	    "click a[name='serial_dilution_tab']": "handleSerialDilutionTabClick",
	    "click .editorCollapseButton": "handleEditorCollapseButtonClick"
	  };

	  EditorFormTabViewController.prototype.render = function() {
	    $(this.el).html(this.template);
	    this.$("div[name='info_form']").html(this.plateInfoController.render().el);
	    this.$("div[name='add_content_form']").html(this.addContentController.render().el);
	    this.$("div[name='template_form']").html(this.templateController.render().el);
	    this.$("div[name='serial_dilution_form']").html(this.serialDilutionController.render().el);
	    this.handleInfoTabClick();
	    return this;
	  };

	  EditorFormTabViewController.prototype.handleInfoTabClick = function(e) {
	    if (e != null) {
	      e.preventDefault();
	    }
	    this.clearPreviouslySelectedTab();
	    this.hidePreviouslyDisplayedFormContainer();
	    this.$(".editorTabInfo").addClass("tabSelected");
	    return this.$("div[name='info_form']").removeClass("hide");
	  };

	  EditorFormTabViewController.prototype.handleAddContentTabClick = function(e) {
	    e.preventDefault();
	    this.clearPreviouslySelectedTab();
	    this.hidePreviouslyDisplayedFormContainer();
	    this.$(".editorTabAddContent").addClass("tabSelected");
	    return this.$("div[name='add_content_form']").removeClass("hide");
	  };

	  EditorFormTabViewController.prototype.handleTemplateTabClick = function(e) {
	    e.preventDefault();
	    this.clearPreviouslySelectedTab();
	    this.hidePreviouslyDisplayedFormContainer();
	    this.$(".editorTabTemplate").addClass("tabSelected");
	    return this.$("div[name='template_form']").removeClass("hide");
	  };

	  EditorFormTabViewController.prototype.handleSerialDilutionTabClick = function(e) {
	    e.preventDefault();
	    this.clearPreviouslySelectedTab();
	    this.hidePreviouslyDisplayedFormContainer();
	    this.$(".editorTabSerialDilution").addClass("tabSelected");
	    return this.$("div[name='serial_dilution_form']").removeClass("hide");
	  };

	  EditorFormTabViewController.prototype.clearPreviouslySelectedTab = function() {
	    return _.each(this.tabSelectors, (function(_this) {
	      return function(selector) {
	        return _this.$(selector).removeClass("tabSelected");
	      };
	    })(this));
	  };

	  EditorFormTabViewController.prototype.hidePreviouslyDisplayedFormContainer = function() {
	    return _.each(this.containerSelectors, (function(_this) {
	      return function(selector) {
	        return _this.$(selector).addClass("hide");
	      };
	    })(this));
	  };

	  EditorFormTabViewController.prototype.handleEditorCollapseButtonClick = function() {
	    return this.$(".editorPanel").toggleClass("hidden");
	  };

	  return EditorFormTabViewController;

	})(Backbone.View);

	module.exports = {
	  EditorFormTabViewController: EditorFormTabViewController
	};


/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = "<!-- LEFT PANEL -->\n<div class=\"col-xs-1 editorNav\">\n    <div class=\"well acasWell editorNavWell\">\n        <a href=\"#\" name=\"info_tab\">\n            <div class=\"editorTab editorTabInfo\" >\n                <div class=\"rotate editorTabInfoLink\">Info</div>\n            </div>\n        </a>\n        <a href=\"#\" name=\"add_content_tab\">\n            <div class=\"editorTab editorTabAddContent\">\n                <div class=\"rotate editorTabAddContentLink\">Add Content</div>\n            </div>\n        </a>\n        <a href=\"#\" name=\"template_tab\" class=\"hide\">\n            <div class=\"editorTab editorTabTemplate\">\n                <div class=\"rotate editorTabTemplateLink\">Template</div>\n            </div>\n        </a>\n        <a href=\"#\" name=\"serial_dilution_tab\">\n            <div class=\"editorTab editorTabSerialDilution\">\n                <div class=\"rotate editorTabSerialDilutionLink\">Serial Dilution</div>\n            </div>\n        </a>\n\n        <div class=\"editorNavCollapse\">\n            <button class=\"btn btn-default editorCollapseButton\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></button>\n        </div>\n\n    </div>\n</div>\n<div class=\"col-xs-3 editorPanel\">\n    <div class=\"well acasWell editorPanelWell\">\n        <div name=\"info_form\" class=\"hide\">\n            info form\n        </div>\n        <div name=\"add_content_form\" class=\"hide\">\n            add content form\n        </div>\n        <div name=\"template_form\" class=\"hide\">\n            template form\n        </div>\n        <div name=\"serial_dilution_form\" class=\"hide\">\n            serial dilution form\n        </div>\n    </div>\n</div>";

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, BackboneValidation, PLATE_INFO_MODEL_FIELDS, PlateInfoModel, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	_ = __webpack_require__(11);

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_.extend(Backbone.Model.prototype, BackboneValidation.mixin);

	PLATE_INFO_MODEL_FIELDS = {
	  BARCODE: 'barcode',
	  DESCRIPTION: 'description',
	  PLATE_SIZE: 'plateSize',
	  TYPE: 'type',
	  STATUS: 'status',
	  CREATED_DATE: 'createdDate',
	  SUPPLIER: 'supplier',
	  NUMBER_OF_COLUMNS: "numberOfColumns",
	  NUMBER_OF_ROWS: "numberOfRows",
	  PLATE_SIZE: "plateSize"
	};

	PlateInfoModel = (function(superClass) {
	  extend(PlateInfoModel, superClass);

	  function PlateInfoModel() {
	    return PlateInfoModel.__super__.constructor.apply(this, arguments);
	  }

	  PlateInfoModel.prototype.url = "/api/containerByContainerCode";

	  PlateInfoModel.prototype.defaults = {
	    barcode: "",
	    description: "",
	    plateSize: "",
	    type: "",
	    status: "",
	    createdDate: "",
	    supplier: "",
	    numberOfColumns: "",
	    numberOfRows: ""
	  };

	  PlateInfoModel.prototype.validation = {
	    plateSize: [
	      {
	        required: true,
	        msg: "Please enter the plate size",
	        pattern: 'number',
	        msg: "Plate Size must be numeric"
	      }
	    ]
	  };

	  return PlateInfoModel;

	})(Backbone.Model);

	module.exports = {
	  PlateInfoModel: PlateInfoModel,
	  PLATE_INFO_MODEL_FIELDS: PLATE_INFO_MODEL_FIELDS
	};


/***/ },
/* 51 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\n    <div class=\"col-sm-12\">\n        <h3 class=\"moduleTitle\">Plate Registration</h3>\n    </div>\n</div>\n<!-- EDITOR -->\n<div class=\"row\">\n    <div name=\"editorFormTabViewContainer\"></div>\n    <div class=\"editorMain\" name=\"plateViewContainer\"></div>\n</div>";

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $, Backbone, BackboneValidation, CREATE_PLATE_CONTROLLER_EVENTS, CreatePlateController, PickList, PickListSelectController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_ = __webpack_require__(11);

	$ = __webpack_require__(3);

	PickListSelectController = __webpack_require__(27).PickListSelectController;

	PickList = __webpack_require__(27).PickList;

	CREATE_PLATE_CONTROLLER_EVENTS = {
	  CREATE_PLATE: "CreatePlate"
	};

	_.extend(Backbone.Validation.callbacks, {
	  valid: function(view, attr, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.removeClass('has-error');
	    return $group.find('.help-block').html('').addClass('hidden');
	  },
	  invalid: function(view, attr, error, selector) {
	    var $el, $group;
	    $el = view.$('[name=' + attr + ']');
	    $group = $el.closest('.form-group');
	    $group.addClass('has-error');
	    return $group.find('.help-block').html(error).removeClass('hidden');
	  }
	});

	CreatePlateController = (function(superClass) {
	  extend(CreatePlateController, superClass);

	  function CreatePlateController() {
	    this.handleSuccessfulSave = bind(this.handleSuccessfulSave, this);
	    this.handleClickStart = bind(this.handleClickStart, this);
	    this.updateModel = bind(this.updateModel, this);
	    this.initializeSelectLists = bind(this.initializeSelectLists, this);
	    this.render = bind(this.render, this);
	    this.completeInitialization = bind(this.completeInitialization, this);
	    return CreatePlateController.__super__.constructor.apply(this, arguments);
	  }

	  CreatePlateController.prototype.template = _.template(__webpack_require__(53));

	  CreatePlateController.prototype.initialize = function(options) {
	    this.model = options.model;
	    this.plateDefinitions = options.plateDefinitions;
	    return this.selectLists = [
	      {
	        containerSelector: "select[name='definition']",
	        collection: this.plateDefinitions
	      }
	    ];
	  };

	  CreatePlateController.prototype.events = {
	    "change input": "handleFormFieldUpdate",
	    "change select": "handleFormFieldUpdate",
	    "click button[name='submit']": "handleClickStart"
	  };

	  CreatePlateController.prototype.completeInitialization = function() {
	    var plateDefinition;
	    plateDefinition = document.getElementsByName("definition");
	    return this.handleFormFieldUpdate({
	      currentTarget: plateDefinition
	    });
	  };

	  CreatePlateController.prototype.render = function() {
	    $(this.el).html(this.template());
	    this.initializeSelectLists();
	    return this;
	  };

	  CreatePlateController.prototype.initializeSelectLists = function() {
	    return _.each(this.selectLists, (function(_this) {
	      return function(selectList) {
	        return _this.plateDefinitionsSelectList = new PickListSelectController({
	          el: $(_this.el).find(selectList.containerSelector),
	          collection: selectList.collection,
	          insertFirstOption: new PickList({
	            code: "unassigned",
	            name: "Select Plate Definition"
	          }),
	          selectedCode: "unassigned",
	          className: "form-control"
	        });
	      };
	    })(this));
	  };

	  CreatePlateController.prototype.handleFormFieldUpdate = function(evt) {
	    var data, target;
	    target = $(evt.currentTarget);
	    data = {};
	    data[target.attr('name')] = $.trim(target.val());
	    return this.updateModel(data);
	  };

	  CreatePlateController.prototype.updateModel = function(data) {
	    this.model.set(data);
	    if (this.model.isValid(true)) {
	      return this.$("button[name='submit']").prop("disabled", false);
	    } else {
	      return this.$("button[name='submit']").prop("disabled", true);
	    }
	  };

	  CreatePlateController.prototype.handleClickStart = function() {
	    return this.trigger(CREATE_PLATE_CONTROLLER_EVENTS.CREATE_PLATE, this.model);
	  };

	  CreatePlateController.prototype.handleSuccessfulSave = function(updatedModel) {
	    this.model.reset();
	    return this.render();
	  };

	  return CreatePlateController;

	})(Backbone.View);

	module.exports = {
	  CreatePlateController: CreatePlateController,
	  CREATE_PLATE_CONTROLLER_EVENTS: CREATE_PLATE_CONTROLLER_EVENTS
	};


/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\n    <div class=\"col-sm-8 col-xs-offset-2\">\n        <h3 class=\"moduleTitle\">Plate Registration</h3>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-sm-8 col-xs-offset-2\">\n        <h3 class=\"moduleTitle\">New Plate</h3>\n    </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"well acasWell col-xs-8 col-xs-offset-2 form-horizontal\">\n\n        <div class=\"form-group\">\n            <div class=\"col-sm-2\">\n            </div>\n            <div class=\"col-sm-10\">\n                <label class=\"control-label\">\n                    <input type=\"radio\" name=\"template\" value=\"plate\" checked>&nbsp;Plate\n                </label>\n                <label style=\"padding-left: 1.5em;\"  class=\"control-label\">\n                    <input type=\"radio\" name=\"template\" value=\"\">&nbsp;Template\n                </label>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label class=\"col-sm-2 control-label\">\n                * Plate Size\n            </label>\n            <div class=\"col-sm-10\">\n                <select class=\"form-control\" name=\"definition\"></select>\n            </div>\n\n        </div>\n        <div class=\"form-group\">\n            <label class=\"col-sm-2 control-label\">\n                * Plate Barcode\n            </label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" name=\"barcode\" />\n            </div>\n\n        </div>\n        <div class=\"form-group\">\n            <label class=\"col-sm-2 control-label\">\n                Description\n            </label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" name=\"description\"/>\n            </div>\n        </div>\n        <hr />\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <button class=\"btn btn-primary pull-right\" name=\"submit\" disabled>Start</button>\n            </div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, CREATE_PLATE_SAVE_CONTROLLER_PROPERTIES, CreatePlateSaveController, DATA_SERVICE_CONTROLLER_EVENTS, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	__webpack_require__(13);

	CREATE_PLATE_SAVE_CONTROLLER_PROPERTIES = {
	  URL: '/api/createPlate',
	  PLATE_BARCODE_ALREADY_EXISTS: '"Barcode already exists"'
	};

	DATA_SERVICE_CONTROLLER_EVENTS = {
	  CLOSE_MODAL: "CloseModal",
	  WARNING: "Warning",
	  ERROR: "Error"
	};

	CreatePlateSaveController = (function(superClass) {
	  extend(CreatePlateSaveController, superClass);

	  function CreatePlateSaveController() {
	    this.render = bind(this.render, this);
	    this.handWarningContinueClick = bind(this.handWarningContinueClick, this);
	    this.handleWarning = bind(this.handleWarning, this);
	    this.handleError = bind(this.handleError, this);
	    this.handleSuccessCallback = bind(this.handleSuccessCallback, this);
	    return CreatePlateSaveController.__super__.constructor.apply(this, arguments);
	  }

	  CreatePlateSaveController.prototype.template = _.template(__webpack_require__(55));

	  CreatePlateSaveController.prototype.initialize = function(options) {
	    this.serviceCallProgressText = "Creating Plate";
	    this.url = CREATE_PLATE_SAVE_CONTROLLER_PROPERTIES.URL;
	    this.plateModel = options.plateModel;
	    this.data = this.plateModel.toJSON();
	    this.successCallback = options.successCallback;
	    return this.ajaxMethod = 'POST';
	  };

	  CreatePlateSaveController.prototype.handleSuccessCallback = function(data, textStatus, jqXHR) {
	    if (data === "Barcode already exists") {
	      this.trigger("SaveSuccess");
	      return this.handleError();
	    } else {
	      this.successCallback(this.plateModel);
	      this.$("a[name='linkToPlate']").prop("href", "#plateDesign/" + data.barcode);
	      this.$("div[name='plateCreatedSuccessfully']").removeClass("hide");
	      return this.trigger("SaveSuccess");
	    }
	  };

	  CreatePlateSaveController.prototype.handleError = function(errors) {
	    this.$("div[name='errorMessages']").removeClass("hide");
	    this.$("a[name='barcode']").prop("href", "#plateDesign/" + (this.plateModel.get('barcode')));
	    return this.$("a[name='barcode']").html(this.plateModel.get("barcode"));
	  };

	  CreatePlateSaveController.prototype.handleWarning = function(warnings) {
	    return console.log("handleWarning");
	  };

	  CreatePlateSaveController.prototype.handWarningContinueClick = function() {
	    return console.log("handWarningContinueClick");
	  };

	  CreatePlateSaveController.prototype.render = function() {
	    $(this.el).html(this.template());
	    return this;
	  };

	  return CreatePlateSaveController;

	})(Backbone.View);

	module.exports = {
	  CreatePlateSaveController: CreatePlateSaveController
	};


/***/ },
/* 55 */
/***/ function(module, exports) {

	module.exports = "<div class=\"hide\" name=\"warningMessages\">\n    <h4><p class=\"bg-warning\"></p></h4>\n</div>\n<div class=\"hide\" name=\"errorMessages\">\n    <h4><p class=\"bg-error\">Error:</p></h4>\n    <p>The barcode <a name=\"barcode\" style=\"font-weight: bold;\" target=\"_blank\"></a> has already been used.  Please go back and enter a different barcode.</p>\n\n</div>\n<div class=\"hide\" name=\"plateCreatedSuccessfully\">\n    <h5><p>Plate created successfully.  Click <a href=\"\" target=\"_blank\" name=\"linkToPlate\">here</a> to edit the plate.</p></h5>\n</div>";

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, PLATE_DEFINITION_COLLECTION_CONST, PickListList, PlateDefinitionCollection, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	_ = __webpack_require__(11);

	Backbone = __webpack_require__(7);

	PickListList = __webpack_require__(27).PickListList;

	PLATE_DEFINITION_COLLECTION_CONST = {
	  URL: "/api/containers/definition%20container/plate?format=codetable"
	};

	PlateDefinitionCollection = (function(superClass) {
	  extend(PlateDefinitionCollection, superClass);

	  function PlateDefinitionCollection() {
	    return PlateDefinitionCollection.__super__.constructor.apply(this, arguments);
	  }

	  PlateDefinitionCollection.prototype.url = function() {
	    return PLATE_DEFINITION_COLLECTION_CONST.URL;
	  };

	  return PlateDefinitionCollection;

	})(PickListList);

	module.exports = {
	  PlateDefinitionCollection: PlateDefinitionCollection,
	  PLATE_DEFINITION_COLLECTION_CONST: PLATE_DEFINITION_COLLECTION_CONST
	};


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, BackboneValidation, PLATE_MODEL_FIELDS, PlateModel, _,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	_ = __webpack_require__(11);

	Backbone = __webpack_require__(7);

	BackboneValidation = __webpack_require__(10);

	_.extend(Backbone.Model.prototype, BackboneValidation.mixin);

	PLATE_MODEL_FIELDS = {
	  BARCODE: "barcode",
	  DEFINITION: "definition",
	  DESCRIPTION: "description",
	  TEMPLATE: "template",
	  RECORDED_BY: "recordedBy",
	  SUPPLIER: "supplier",
	  WELLS: "wells",
	  NUMBER_OF_COLUMNS: "numberOfColumns",
	  NUMBER_OF_ROWS: "numberOfRows",
	  PLATE_SIZE: "plateSize"
	};

	PlateModel = (function(superClass) {
	  extend(PlateModel, superClass);

	  function PlateModel() {
	    return PlateModel.__super__.constructor.apply(this, arguments);
	  }

	  PlateModel.prototype.url = "/api/v1/containers/createPlate";

	  PlateModel.prototype.defaults = {
	    "barcode": "",
	    "definition": "",
	    "description": "",
	    "template": null,
	    "recordedBy": "acas",
	    "supplier": "",
	    "wells": []
	  };

	  PlateModel.prototype.validation = {
	    barcode: {
	      required: true,
	      msg: "Please the Plate ID"
	    },
	    definition: {
	      required: true,
	      msg: "Please select the plate size"
	    }
	  };

	  PlateModel.prototype.reset = function() {
	    return this.set({
	      "barcode": "",
	      "definition": "",
	      "description": "",
	      "template": null,
	      "recordedBy": "acas",
	      "supplier": "",
	      "wells": []
	    });
	  };

	  return PlateModel;

	})(Backbone.Model);

	module.exports = {
	  PlateModel: PlateModel,
	  PLATE_MODEL_FIELDS: PLATE_MODEL_FIELDS
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, DATA_SERVICE_CONTROLLER_EVENTS, DataServiceController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	__webpack_require__(13);

	__webpack_require__(15);

	DATA_SERVICE_CONTROLLER_EVENTS = {};

	DataServiceController = (function(superClass) {
	  extend(DataServiceController, superClass);

	  function DataServiceController() {
	    this.render = bind(this.render, this);
	    this.closeModal = bind(this.closeModal, this);
	    this.openModal = bind(this.openModal, this);
	    this.handleErrorGoBackClick = bind(this.handleErrorGoBackClick, this);
	    this.handWarningContinueClick = bind(this.handWarningContinueClick, this);
	    this.handleError = bind(this.handleError, this);
	    this.handleWarning = bind(this.handleWarning, this);
	    this.hideSuccessFields = bind(this.hideSuccessFields, this);
	    this.setupMessageFields = bind(this.setupMessageFields, this);
	    this.displaySuccessFields = bind(this.displaySuccessFields, this);
	    this.displayServerErrorMessage = bind(this.displayServerErrorMessage, this);
	    this.doServiceCalls = bind(this.doServiceCalls, this);
	    this.doServiceCall = bind(this.doServiceCall, this);
	    this.setupService = bind(this.setupService, this);
	    return DataServiceController.__super__.constructor.apply(this, arguments);
	  }

	  DataServiceController.prototype.template = _.template(__webpack_require__(59));

	  DataServiceController.prototype.initialize = function() {
	    return this.serviceController = null;
	  };

	  DataServiceController.prototype.events = {
	    "click button[name='warningContinue']": "handWarningContinueClick",
	    "click button[name='errorGoBack']": "handleErrorGoBackClick"
	  };

	  DataServiceController.prototype.setupService = function(serviceController) {
	    this.serviceController = serviceController;
	    this.listenTo(this.serviceController, "Warning", this.handleWarning);
	    this.listenTo(this.serviceController, "Error", this.handleError);
	    this.listenTo(this.serviceController, "CloseModal", this.closeModal);
	    this.listenTo(this.serviceController, "SaveSuccess", this.displaySuccessFields);
	    this.$("div[name='serviceControllerContainer']").html(this.serviceController.render().el);
	    return this.$(".bv_serviceCallProgressText").html(this.serviceController.serviceCallProgressText);
	  };

	  DataServiceController.prototype.doServiceCall = function() {
	    this.setupMessageFields();
	    this.hideSuccessFields();
	    this.openModal();
	    return $.ajax({
	      data: this.serviceController.data,
	      dataType: "json",
	      method: this.serviceController.ajaxMethod,
	      url: this.serviceController.url
	    }).done((function(_this) {
	      return function(data, textStatus, jqXHR) {
	        return _this.serviceController.handleSuccessCallback(data, textStatus, jqXHR);
	      };
	    })(this)).fail((function(_this) {
	      return function(jqXHR, textStatus, errorThrown) {
	        return _this.displayServerErrorMessage();
	      };
	    })(this));
	  };

	  DataServiceController.prototype.doServiceCalls = function() {
	    var numberOfCompletedServiceCalls, numberOfServiceCalls;
	    this.setupMessageFields();
	    this.hideSuccessFields();
	    this.openModal();
	    numberOfServiceCalls = _.size(this.serviceController.url);
	    numberOfCompletedServiceCalls = 0;
	    return _.each(this.serviceController.url, (function(_this) {
	      return function(serviceCall) {
	        return $.ajax({
	          data: serviceCall.data,
	          dataType: "json",
	          method: serviceCall.ajaxMethod,
	          url: serviceCall.url
	        }).done(function(data, textStatus, jqXHR) {
	          serviceCall.callback(data);
	          numberOfCompletedServiceCalls++;
	          if (numberOfCompletedServiceCalls === numberOfServiceCalls) {
	            return _this.serviceController.handleSuccessCallback();
	          }
	        }).fail(function(jqXHR, textStatus, errorThrown) {
	          return _this.displayServerErrorMessage();
	        });
	      };
	    })(this));
	  };

	  DataServiceController.prototype.displayServerErrorMessage = function() {
	    this.$("div[name='serviceCallProgressFeedback']").addClass("hide");
	    this.$("div[name='serverErrorMessage']").removeClass("hide");
	    return this.$("div[name='serverErrorButtons']").removeClass("hide");
	  };

	  DataServiceController.prototype.displaySuccessFields = function() {
	    this.$("div[name='serviceCallProgressFeedback']").addClass("hide");
	    this.$("div[name='serviceControllerContainer']").removeClass("hide");
	    return this.$("div[name='closeButtons']").removeClass("hide");
	  };

	  DataServiceController.prototype.setupMessageFields = function() {
	    this.$("div[name='warningButtons']").addClass("hide");
	    this.$("div[name='errorButtons']").addClass("hide");
	    this.$("div[name='serverErrorButtons']").addClass("hide");
	    return this.$("div[name='closeButtons']").addClass("hide");
	  };

	  DataServiceController.prototype.hideSuccessFields = function() {
	    this.$("div[name='serviceCallProgressFeedback']").removeClass("hide");
	    this.$("div[name='serviceControllerContainer']").addClass("hide");
	    return this.$("div[name='closeButtons']").addClass("hide");
	  };

	  DataServiceController.prototype.handleWarning = function() {
	    this.$("div[name='warningButtons']").removeClass("hide");
	    this.$("div[name='serviceCallProgressFeedback']").addClass("hide");
	    return this.$("div[name='serviceControllerContainer']").removeClass("hide");
	  };

	  DataServiceController.prototype.handleError = function() {
	    this.$("div[name='serviceCallProgressFeedback']").addClass("hide");
	    this.$("div[name='serviceControllerContainer']").removeClass("hide");
	    return this.$("div[name='errorButtons']").removeClass("hide");
	  };

	  DataServiceController.prototype.handWarningContinueClick = function() {
	    return this.serviceController.handWarningContinueClick();
	  };

	  DataServiceController.prototype.handleErrorGoBackClick = function() {
	    if (this.serviceController.handleErrorGoBackClick != null) {
	      this.serviceController.handleErrorGoBackClick();
	    }
	    return this.closeModal();
	  };

	  DataServiceController.prototype.openModal = function() {
	    return this.$("div[name='serviceCallModal']").modal({
	      keyboard: false,
	      backdrop: 'static'
	    });
	  };

	  DataServiceController.prototype.closeModal = function() {
	    return this.$("div[name='serviceCallModal']").modal('hide');
	  };

	  DataServiceController.prototype.render = function() {
	    $(this.el).html(this.template());
	    return this;
	  };

	  return DataServiceController;

	})(Backbone.View);

	module.exports = {
	  DataServiceController: DataServiceController
	};


/***/ },
/* 59 */
/***/ function(module, exports) {

	module.exports = "<div class=\"modal fade\" name=\"serviceCallModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\n    <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n            <!--\n            <div class=\"modal-header\">\n\n            </div>\n            -->\n            <div class=\"modal-body\">\n                <div class=\"\" name=\"serviceCallProgressFeedback\" style=\"text-align: center;\">\n                    <h5 class=\"modal-title bv_serviceCallProgressText\" style=\"padding-bottom: 0.5em; padding-top: 1em;\" ></h5>\n                    <div class=\"progress\">\n                        <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\">\n                            <span class=\"sr-only\"></span>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"hide\" name=\"serverErrorMessage\">\n                    <p>An error occurred processing the list of identifiers.  Please try again.</p>\n                    <p>If you continue to receieve this error,\n                        please contact contact_person@company.com\n                    </p>\n                </div>\n\n                <div class=\"hide\" name=\"serviceControllerContainer\"></div>\n\n            </div>\n            <div class=\"modal-footer\">\n                <div class=\"hide\" name=\"warningButtons\">\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Go Back</button>\n                    <button type=\"button\" class=\"btn btn-primary\" name=\"warningContinue\">Continue</button>\n                </div>\n                <div class=\"hide\" name=\"errorButtons\">\n                    <button type=\"button\" class=\"btn btn-default\" name=\"errorGoBack\">Go Back</button>\n                </div>\n                <div class=\"hide\" name=\"serverErrorButtons\">\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Go Back</button>\n                </div>\n                <div class=\"hide\" name=\"closeButtons\">\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Okay</button>\n                </div>\n\n                <!--\n\n                -->\n            </div>\n        </div>\n    </div>\n</div>";

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var ADD_CONTENT_MODEL_FIELDS, AddContentIdentifierValidationController, Backbone, DATA_SERVICE_CONTROLLER_EVENTS, IDENTIFIER_VALIDATION_CONTROLLER_PROPERTIES, IdentifierValidationController, PlateTableIdentifierValidationController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	__webpack_require__(13);

	ADD_CONTENT_MODEL_FIELDS = __webpack_require__(32).ADD_CONTENT_MODEL_FIELDS;

	IDENTIFIER_VALIDATION_CONTROLLER_PROPERTIES = {
	  URL: '/api/validateIdentifiers'
	};

	DATA_SERVICE_CONTROLLER_EVENTS = {
	  CLOSE_MODAL: "CloseModal",
	  WARNING: "Warning",
	  ERROR: "Error"
	};

	IdentifierValidationController = (function(superClass) {
	  extend(IdentifierValidationController, superClass);

	  function IdentifierValidationController() {
	    this.render = bind(this.render, this);
	    this.handWarningContinueClick = bind(this.handWarningContinueClick, this);
	    this.handleWarning = bind(this.handleWarning, this);
	    this.handleError = bind(this.handleError, this);
	    this.handleSuccessCallback = bind(this.handleSuccessCallback, this);
	    return IdentifierValidationController.__super__.constructor.apply(this, arguments);
	  }

	  IdentifierValidationController.prototype.template = _.template(__webpack_require__(61));

	  IdentifierValidationController.prototype.initialize = function(options) {
	    this.serviceCallProgressText = "Validating Identifiers";
	    this.url = IDENTIFIER_VALIDATION_CONTROLLER_PROPERTIES.URL;
	    this.addContentModel = options.addContentModel;
	    this.data = {
	      identifiers: this.addContentModel.formatIdentifiersForValidationService()
	    };
	    this.successCallback = options.successCallback;
	    return this.ajaxMethod = 'POST';
	  };

	  IdentifierValidationController.prototype.handleSuccessCallback = function(data, textStatus, jqXHR) {
	    var aliasedIdentifiers, validIdentifier, validNames, valuesToAdd;
	    this.aliasedRequestNames = this.getAliasedRequestNames(data);
	    this.invalidRequestNames = this.getInvalidRequestNames(data);
	    this.validRequestNames = this.getValidRequestNames(data);
	    aliasedIdentifiers = [];
	    _.each(this.aliasedRequestNames, function(aliasedName) {
	      return aliasedIdentifiers.push(aliasedName.requestName);
	    });
	    validIdentifier = [];
	    _.each(this.validRequestNames, function(validName) {
	      return validIdentifier.push(validName.requestName);
	    });
	    this.validIdentifiers = _.union(aliasedIdentifiers, validIdentifier);
	    this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.ALIASED_IDENTIFIERS, this.aliasedRequestNames);
	    this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.INVALID_IDENTIFIERS, this.invalidRequestNames);
	    if (_.size(this.invalidRequestNames) === 0 && _.size(this.aliasedRequestNames) === 0) {
	      validNames = _.union(this.aliasedRequestNames, this.validRequestNames);
	      valuesToAdd = [];
	      _.each(validNames, function(v) {
	        return valuesToAdd.push(v.preferredName);
	      });
	      this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.VALIDATED_IDENTIFIERS, valuesToAdd);
	      this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.VALID_IDENTIFIERS, this.validIdentifiers);
	      this.successCallback(this.addContentModel);
	      return this.trigger(DATA_SERVICE_CONTROLLER_EVENTS.CLOSE_MODAL);
	    } else if (_.size(this.aliasedRequestNames) > 0 && _.size(this.invalidRequestNames) > 0) {
	      console.log("errors and aliases");
	      this.handleWarning(this.aliasedRequestNames);
	      this.handleError(this.invalidRequestNames);
	      return this.trigger(DATA_SERVICE_CONTROLLER_EVENTS.ERROR);
	    } else if (_.size(this.aliasedRequestNames) > 0) {
	      this.trigger(DATA_SERVICE_CONTROLLER_EVENTS.WARNING);
	      return this.handleWarning(this.aliasedRequestNames);
	    } else if (_.size(this.invalidRequestNames) > 0) {
	      this.trigger(DATA_SERVICE_CONTROLLER_EVENTS.ERROR);
	      return this.handleError(this.invalidRequestNames);
	    }
	  };

	  IdentifierValidationController.prototype.getAliasedRequestNames = function(requestNames) {
	    var aliasedRequestNames;
	    aliasedRequestNames = [];
	    _.each(requestNames, function(requestName) {
	      if (requestName.preferredName !== "") {
	        if (requestName.requestName !== requestName.preferredName) {
	          return aliasedRequestNames.push(requestName);
	        }
	      }
	    });
	    return aliasedRequestNames;
	  };

	  IdentifierValidationController.prototype.getInvalidRequestNames = function(requestNames) {
	    var invalidRequestNames;
	    invalidRequestNames = [];
	    _.each(requestNames, function(requestName) {
	      if (requestName.preferredName === "") {
	        return invalidRequestNames.push(requestName);
	      }
	    });
	    return invalidRequestNames;
	  };

	  IdentifierValidationController.prototype.getValidRequestNames = function(requestNames) {
	    var validRequestNames;
	    validRequestNames = [];
	    _.each(requestNames, function(requestName) {
	      if (requestName.requestName === requestName.preferredName) {
	        console.log("request name is valid");
	        return validRequestNames.push(requestName);
	      }
	    });
	    return validRequestNames;
	  };

	  IdentifierValidationController.prototype.handleError = function(errors) {
	    var listOfErrorIdentifiers;
	    listOfErrorIdentifiers = "<ul>";
	    _.each(errors, function(arn) {
	      return listOfErrorIdentifiers += "<li>" + arn.requestName + "</li>";
	    });
	    listOfErrorIdentifiers += "</ul>";
	    this.$("div[name='errorIdentifiers']").html(listOfErrorIdentifiers);
	    return this.$("div[name='errorMessages']").removeClass("hide");
	  };

	  IdentifierValidationController.prototype.handleWarning = function(warnings) {
	    var listOfAliasedIdentifiers;
	    listOfAliasedIdentifiers = "<table class='table'><tr><th>Aliased Identiier</th><th>Preferred Identifier</th></tr>";
	    _.each(warnings, function(arn) {
	      return listOfAliasedIdentifiers += "<tr><td>" + arn.requestName + "</td><td>" + arn.preferredName + "</td></tr>";
	    });
	    listOfAliasedIdentifiers += "</table>";
	    this.$("div[name='aliasedIdentifiers']").html(listOfAliasedIdentifiers);
	    return this.$("div[name='warningMessages']").removeClass("hide");
	  };

	  IdentifierValidationController.prototype.handWarningContinueClick = function() {
	    var validNames, valuesToAdd;
	    validNames = _.union(this.aliasedRequestNames, this.validRequestNames);
	    valuesToAdd = [];
	    _.each(validNames, function(v) {
	      return valuesToAdd.push(v.preferredName);
	    });
	    this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.VALIDATED_IDENTIFIERS, valuesToAdd);
	    this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.VALID_IDENTIFIERS, this.validIdentifiers);
	    this.successCallback(this.addContentModel);
	    return this.trigger(DATA_SERVICE_CONTROLLER_EVENTS.CLOSE_MODAL);
	  };

	  IdentifierValidationController.prototype.render = function() {
	    $(this.el).html(this.template());
	    return this;
	  };

	  return IdentifierValidationController;

	})(Backbone.View);

	AddContentIdentifierValidationController = (function(superClass) {
	  extend(AddContentIdentifierValidationController, superClass);

	  function AddContentIdentifierValidationController() {
	    return AddContentIdentifierValidationController.__super__.constructor.apply(this, arguments);
	  }

	  return AddContentIdentifierValidationController;

	})(IdentifierValidationController);

	PlateTableIdentifierValidationController = (function(superClass) {
	  extend(PlateTableIdentifierValidationController, superClass);

	  function PlateTableIdentifierValidationController() {
	    this.handleErrorGoBackClick = bind(this.handleErrorGoBackClick, this);
	    return PlateTableIdentifierValidationController.__super__.constructor.apply(this, arguments);
	  }

	  PlateTableIdentifierValidationController.prototype.handleErrorGoBackClick = function() {
	    var validNames, valuesToAdd;
	    validNames = _.union(this.aliasedRequestNames, this.validRequestNames);
	    valuesToAdd = [];
	    _.each(validNames, function(v) {
	      return valuesToAdd.push(v.preferredName);
	    });
	    this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.VALIDATED_IDENTIFIERS, valuesToAdd);
	    this.addContentModel.set(ADD_CONTENT_MODEL_FIELDS.VALID_IDENTIFIERS, this.validIdentifiers);
	    return this.successCallback(this.addContentModel);
	  };

	  return PlateTableIdentifierValidationController;

	})(IdentifierValidationController);

	module.exports = {
	  AddContentIdentifierValidationController: AddContentIdentifierValidationController,
	  PlateTableIdentifierValidationController: PlateTableIdentifierValidationController
	};


/***/ },
/* 61 */
/***/ function(module, exports) {

	module.exports = "<div class=\"hide\" name=\"warningMessages\">\n    <h5><p class=\"bg-warning\">Warning: Aliased Identifiers</p></h5>\n    <div name=\"aliasedIdentifiers\"></div>\n</div>\n<div class=\"hide\" name=\"errorMessages\">\n    <h5><p class=\"bg-error\">Error: The following identifiers were not found.  Please go back and correct</p></h5>\n    <div name=\"errorIdentifiers\"></div>\n</div>";

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var Backbone, DATA_SERVICE_CONTROLLER_EVENTS, LOAD_PLATE_CONTROLLER_PROPERTIES, LoadPlateController, _,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Backbone = __webpack_require__(7);

	_ = __webpack_require__(11);

	__webpack_require__(13);

	LOAD_PLATE_CONTROLLER_PROPERTIES = {
	  PLATE_META_INFO_URL: '/api/getContainerAndDefinitionContainerByContainerLabel/',
	  WELL_CONTENT_URL: '/api/getWellContentByPlateBarcode/'
	};

	DATA_SERVICE_CONTROLLER_EVENTS = {
	  CLOSE_MODAL: "CloseModal",
	  WARNING: "Warning",
	  ERROR: "Error"
	};

	LoadPlateController = (function(superClass) {
	  extend(LoadPlateController, superClass);

	  function LoadPlateController() {
	    this.render = bind(this.render, this);
	    this.handWarningContinueClick = bind(this.handWarningContinueClick, this);
	    this.handleWarning = bind(this.handleWarning, this);
	    this.handleError = bind(this.handleError, this);
	    this.handleSuccessCallback = bind(this.handleSuccessCallback, this);
	    this.handleWellContentCallback = bind(this.handleWellContentCallback, this);
	    this.handlePlateMetaDataInfoCallback = bind(this.handlePlateMetaDataInfoCallback, this);
	    return LoadPlateController.__super__.constructor.apply(this, arguments);
	  }

	  LoadPlateController.prototype.template = _.template(__webpack_require__(63));

	  LoadPlateController.prototype.initialize = function(options) {
	    var plateBarcode;
	    this.serviceCallProgressText = "Loading Plate";
	    plateBarcode = options.plateBarcode;
	    this.url = [
	      {
	        url: LOAD_PLATE_CONTROLLER_PROPERTIES.PLATE_META_INFO_URL + plateBarcode,
	        callback: this.handlePlateMetaDataInfoCallback,
	        ajaxMethod: 'GET',
	        data: ''
	      }, {
	        url: LOAD_PLATE_CONTROLLER_PROPERTIES.WELL_CONTENT_URL + plateBarcode,
	        callback: this.handleWellContentCallback,
	        ajaxMethod: 'GET',
	        data: ''
	      }
	    ];
	    this.successCallback = options.successCallback;
	    return this.ajaxMethod = 'GET';
	  };

	  LoadPlateController.prototype.handlePlateMetaDataInfoCallback = function(data) {
	    return this.plateMetadata = data;
	  };

	  LoadPlateController.prototype.handleWellContentCallback = function(data) {
	    return this.wellContent = data;
	  };

	  LoadPlateController.prototype.handleSuccessCallback = function() {
	    this.successCallback({
	      wellContent: this.wellContent,
	      plateMetadata: this.plateMetadata
	    });
	    return this.trigger(DATA_SERVICE_CONTROLLER_EVENTS.CLOSE_MODAL);
	  };

	  LoadPlateController.prototype.handleError = function(errors) {
	    return console.log("handleError");
	  };

	  LoadPlateController.prototype.handleWarning = function(warnings) {
	    return console.log("handleWarning");
	  };

	  LoadPlateController.prototype.handWarningContinueClick = function() {
	    return console.log("handWarningContinueClick");
	  };

	  LoadPlateController.prototype.render = function() {
	    $(this.el).html(this.template());
	    return this;
	  };

	  return LoadPlateController;

	})(Backbone.View);

	module.exports = {
	  LoadPlateController: LoadPlateController
	};


/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = "<div class=\"hide\" name=\"warningMessages\">\n    <h4><p class=\"bg-warning\">Warning: something happened...</p></h4>\n</div>\n<div class=\"hide\" name=\"errorMessages\">\n    <h4><p class=\"bg-error\">Error: an error occurred loading the plate.</p></h4>\n</div>\n";

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var ClonePlateController, DataTable, PickList, PickListSelectController, PlateSearchController, SEARCH_RESULT_ROW_EVENTS, SearchResultCollection, SearchResultModel, SearchResultRow, SearchResultTable,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	DataTable = __webpack_require__(65);

	__webpack_require__(13);

	__webpack_require__(15);

	PickListSelectController = __webpack_require__(27).PickListSelectController;

	PickList = __webpack_require__(27).PickList;

	PlateSearchController = (function(superClass) {
	  extend(PlateSearchController, superClass);

	  function PlateSearchController() {
	    this.render = bind(this.render, this);
	    this.handleClonePlateClicked = bind(this.handleClonePlateClicked, this);
	    this.handleClonePlate = bind(this.handleClonePlate, this);
	    this.searchCallback = bind(this.searchCallback, this);
	    this.handleSearchClicked = bind(this.handleSearchClicked, this);
	    this.initializeSelectLists = bind(this.initializeSelectLists, this);
	    this.completeInitialize = bind(this.completeInitialize, this);
	    return PlateSearchController.__super__.constructor.apply(this, arguments);
	  }

	  PlateSearchController.prototype.template = _.template(__webpack_require__(66));

	  PlateSearchController.prototype.events = {
	    "click button[name='search']": "handleSearchClicked",
	    "click button[name='clonePlate']": "handleClonePlateClicked"
	  };

	  PlateSearchController.prototype.initialize = function(options) {
	    this.plateDefinitions = options.plateDefinitions;
	    this.plateTypes = options.plateTypes;
	    this.plateStatuses = options.plateStatuses;
	    return this.selectLists = [
	      {
	        containerSelector: "select[name='definition']",
	        collection: this.plateDefinitions
	      }
	    ];
	  };

	  PlateSearchController.prototype.completeInitialize = function() {
	    return this.initializeSelectLists();
	  };

	  PlateSearchController.prototype.initializeSelectLists = function() {
	    this.plateDefinitionsSelectList = new PickListSelectController({
	      el: $(this.el).find("select[name='definition']"),
	      collection: this.plateDefinitions,
	      insertFirstOption: new PickList({
	        code: "unassigned",
	        name: ""
	      }),
	      selectedCode: "unassigned",
	      className: "form-control"
	    });
	    this.plateTypesSelectList = new PickListSelectController({
	      el: $(this.el).find("select[name='type']"),
	      collection: this.plateTypes,
	      insertFirstOption: new PickList({
	        code: "unassigned",
	        name: ""
	      }),
	      selectedCode: "unassigned",
	      className: "form-control"
	    });
	    return this.plateStatusesSelectList = new PickListSelectController({
	      el: $(this.el).find("select[name='status']"),
	      collection: this.plateStatuses,
	      insertFirstOption: new PickList({
	        code: "unassigned",
	        name: ""
	      }),
	      selectedCode: "unassigned",
	      className: "form-control"
	    });
	  };

	  PlateSearchController.prototype.handleSearchClicked = function() {
	    var barcode, description, searchTerms;
	    searchTerms = {};
	    barcode = $.trim(this.$("input[name='barcodeSearchTerm']").val());
	    if (barcode !== "") {
	      searchTerms.barcode = barcode;
	    }
	    description = $.trim(this.$("input[name='descriptionSearchTerm']").val());
	    if (description !== "") {
	      searchTerms.description = description;
	    }
	    if (this.plateDefinitionsSelectList.getSelectedCode() !== "unassigned") {
	      searchTerms.definition = this.plateDefinitionsSelectList.getSelectedCode();
	    }
	    if (this.plateTypesSelectList.getSelectedCode() !== "unassigned") {
	      searchTerms.type = this.plateTypesSelectList.getSelectedCode();
	    }
	    if (this.plateStatusesSelectList.getSelectedCode() !== "unassigned") {
	      searchTerms.status = this.plateStatusesSelectList.getSelectedCode();
	    }
	    console.log("searchTerms");
	    console.log(searchTerms);
	    return $.ajax({
	      data: searchTerms,
	      dataType: "json",
	      method: "POST",
	      url: "api/searchContainers"
	    }).done((function(_this) {
	      return function(data, textStatus, jqXHR) {
	        console.log("got search results?");
	        console.log(data);
	        return _this.searchCallback(data);
	      };
	    })(this)).fail((function(_this) {
	      return function(jqXHR, textStatus, errorThrown) {
	        console.log("an error occured");
	        return console.log(errorThrown);
	      };
	    })(this));
	  };

	  PlateSearchController.prototype.searchCallback = function(searchResults) {
	    var searchResultsCollection;
	    searchResultsCollection = new SearchResultCollection(searchResults);
	    if (this.searchResultsTable != null) {
	      this.searchResultsTable.remove();
	    }
	    this.searchResultsTable = new SearchResultTable({
	      collection: searchResultsCollection
	    });
	    this.listenTo(this.searchResultsTable, SEARCH_RESULT_ROW_EVENTS.CLONE_PLATE, this.handleClonePlate);
	    $(".bv_searchResults").html(this.searchResultsTable.render().el);
	    return this.searchResultsTable.completeInitialization();
	  };

	  PlateSearchController.prototype.handleClonePlate = function(plateInfo) {
	    this.plateCloneController = new ClonePlateController();
	    this.$("button[name='cancelClonePlate']").removeClass("hide");
	    this.$("button[name='clonePlate']").removeClass("hide");
	    this.$("button[name='closeClonePlate']").addClass("hide");
	    this.$(".bv_clonePlateBarcodeContainer").html(this.plateCloneController.render().el);
	    this.$(".bv_linkToPlateToClone").prop('href', "#plateDesign/" + plateInfo.barcode);
	    this.$(".bv_linkToPlateToClone").html(plateInfo.barcode);
	    this.plateToCloneCodeName = plateInfo.codeName;
	    return this.$("div[name='clonePlateDialogbox']").modal({
	      keyboard: false,
	      backdrop: 'static'
	    });
	  };

	  PlateSearchController.prototype.handleClonePlateClicked = function() {
	    var clonePlateBarcode, data;
	    clonePlateBarcode = this.plateCloneController.getBarcode();
	    this.plateCloneController.setControlToSaving();
	    data = {
	      codeName: this.plateToCloneCodeName,
	      barcode: clonePlateBarcode
	    };
	    return $.ajax({
	      data: data,
	      dataType: "json",
	      method: "POST",
	      url: "api/cloneContainer"
	    }).done((function(_this) {
	      return function(data, textStatus, jqXHR) {
	        console.log("got a new plate?");
	        console.log(data);
	        _this.plateCloneController.setControlToSavingSuccess();
	        _this.$("button[name='cancelClonePlate']").addClass("hide");
	        _this.$("button[name='clonePlate']").addClass("hide");
	        return _this.$("button[name='closeClonePlate']").removeClass("hide");
	      };
	    })(this)).fail((function(_this) {
	      return function(jqXHR, textStatus, errorThrown) {
	        console.log("an error occured");
	        console.log(errorThrown);
	        return _this.plateCloneController.setControlToSavingError();
	      };
	    })(this));
	  };

	  PlateSearchController.prototype.render = function() {
	    $(this.el).html(this.template());
	    return this;
	  };

	  return PlateSearchController;

	})(Backbone.View);

	SearchResultModel = (function(superClass) {
	  extend(SearchResultModel, superClass);

	  function SearchResultModel() {
	    return SearchResultModel.__super__.constructor.apply(this, arguments);
	  }

	  return SearchResultModel;

	})(Backbone.Model);

	SearchResultCollection = (function(superClass) {
	  extend(SearchResultCollection, superClass);

	  function SearchResultCollection() {
	    return SearchResultCollection.__super__.constructor.apply(this, arguments);
	  }

	  SearchResultCollection.prototype.model = SearchResultModel;

	  return SearchResultCollection;

	})(Backbone.Collection);

	SearchResultTable = (function(superClass) {
	  extend(SearchResultTable, superClass);

	  function SearchResultTable() {
	    this.render = bind(this.render, this);
	    this.handleClonePlate = bind(this.handleClonePlate, this);
	    this.completeInitialization = bind(this.completeInitialization, this);
	    return SearchResultTable.__super__.constructor.apply(this, arguments);
	  }

	  SearchResultTable.prototype.tagName = "table";

	  SearchResultTable.prototype.className = "display";

	  SearchResultTable.prototype.template = "<thead>\n  <tr>\n      <th>Barcode</th>\n      <th>Wells</th>\n      <th>User</th>\n      <th>Description</th>\n      <th>Request ID</th>\n      <th>Status</th>\n      <th>Type</th>\n      <th>Clone</th>\n      <th>Launch</th>\n  </tr>\n</thead>\n<tbody class=\"bv_searchResultsBody\">\n</tbody>";

	  SearchResultTable.prototype.initialize = function(options) {
	    return this.collection = options.collection;
	  };

	  SearchResultTable.prototype.completeInitialization = function() {
	    return $(this.el).DataTable();
	  };

	  SearchResultTable.prototype.handleClonePlate = function(plateInfo) {
	    console.log("propagating event with codename: ", plateInfo);
	    return this.trigger(SEARCH_RESULT_ROW_EVENTS.CLONE_PLATE, plateInfo);
	  };

	  SearchResultTable.prototype.render = function() {
	    $(this.el).html(this.template);
	    $(this.el).prop('width', '100%');
	    _.each(this.collection.models, (function(_this) {
	      return function(model) {
	        var searchResultRow;
	        searchResultRow = new SearchResultRow({
	          model: model
	        });
	        _this.listenTo(searchResultRow, SEARCH_RESULT_ROW_EVENTS.CLONE_PLATE, _this.handleClonePlate);
	        return _this.$(".bv_searchResultsBody").append(searchResultRow.render().el);
	      };
	    })(this));
	    return this;
	  };

	  return SearchResultTable;

	})(Backbone.View);

	SEARCH_RESULT_ROW_EVENTS = {
	  CLONE_PLATE: "clonePlate"
	};

	SearchResultRow = (function(superClass) {
	  extend(SearchResultRow, superClass);

	  function SearchResultRow() {
	    this.render = bind(this.render, this);
	    this.handleClonePlateClicked = bind(this.handleClonePlateClicked, this);
	    return SearchResultRow.__super__.constructor.apply(this, arguments);
	  }

	  SearchResultRow.prototype.tagName = "tr";

	  SearchResultRow.prototype.template = "<td><%= barcode %></td>\n<td><%= plateSize %></td>\n<td><%= recordedBy %></td>\n<td><%= description %></td>\n<td><!-- requestId --></td>\n<td><%= status %></td>\n<td><%= type %></td>\n<td><button class=\"btn btn-xs btn-primary\" name=\"clonePlateRow\">Clone</button></td>\n<td><a href=\"#plateDesign/<%= barcode %>\" target=\"_blank\" >launch</a></td>";

	  SearchResultRow.prototype.events = {
	    "click button[name='clonePlateRow']": "handleClonePlateClicked"
	  };

	  SearchResultRow.prototype.initialize = function(options) {
	    return this.model = options.model;
	  };

	  SearchResultRow.prototype.handleClonePlateClicked = function() {
	    console.log("handleClonePlateClicked");
	    return this.trigger(SEARCH_RESULT_ROW_EVENTS.CLONE_PLATE, {
	      codeName: this.model.get('codeName'),
	      barcode: this.model.get('barcode')
	    });
	  };

	  SearchResultRow.prototype.render = function() {
	    var compiledTemplate;
	    compiledTemplate = _.template(this.template);
	    console.log("@model.toJSON()");
	    console.log(this.model.toJSON());
	    $(this.el).html(compiledTemplate(this.model.toJSON()));
	    return this;
	  };

	  return SearchResultRow;

	})(Backbone.View);

	ClonePlateController = (function(superClass) {
	  extend(ClonePlateController, superClass);

	  function ClonePlateController() {
	    this.render = bind(this.render, this);
	    this.getBarcode = bind(this.getBarcode, this);
	    this.setControlToSavingError = bind(this.setControlToSavingError, this);
	    this.setControlToSavingSuccess = bind(this.setControlToSavingSuccess, this);
	    this.setControlToSaving = bind(this.setControlToSaving, this);
	    return ClonePlateController.__super__.constructor.apply(this, arguments);
	  }

	  ClonePlateController.prototype.tagName = 'tr';

	  ClonePlateController.prototype.template = "<td>\n  <input type=\"text\" class=\"form-control\" name=\"clonedPlateBarcode\"/>\n</td>\n<td>\n  <p class='bv_cloningMessage hide'>Cloning...</p>\n  <a href=\"\" class='bv_linkToNewPlate hide' target=\"_blank\">complete</a>\n  <p class='bv_barcodeAlreadyUsedError hide'>Error: duplicate barcode</p>\n</td>";

	  ClonePlateController.prototype.setControlToSaving = function() {
	    this.$(".bv_barcodeAlreadyUsedError").addClass("hide");
	    this.$("input[name='clonedPlateBarcode']").addClass("disabled");
	    this.$("input[name='clonedPlateBarcode']").prop("disabled", true);
	    return this.$(".bv_cloningMessage").removeClass("hide");
	  };

	  ClonePlateController.prototype.setControlToSavingSuccess = function() {
	    this.$(".bv_cloningMessage").addClass("hide");
	    this.$(".bv_linkToNewPlate").prop("href", "#plateDesign/" + (this.getBarcode()));
	    return this.$(".bv_linkToNewPlate").removeClass("hide");
	  };

	  ClonePlateController.prototype.setControlToSavingError = function() {
	    this.$(".bv_barcodeAlreadyUsedError").removeClass("hide");
	    this.$(".bv_cloningMessage").addClass("hide");
	    this.$("input[name='clonedPlateBarcode']").removeClass("disabled");
	    return this.$("input[name='clonedPlateBarcode']").prop("disabled", false);
	  };

	  ClonePlateController.prototype.getBarcode = function() {
	    return this.$("input[name='clonedPlateBarcode']").val();
	  };

	  ClonePlateController.prototype.render = function() {
	    $(this.el).html(this.template);
	    return this;
	  };

	  return ClonePlateController;

	})(Backbone.View);

	module.exports = {
	  PlateSearchController: PlateSearchController
	};


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
	(function() {

	/**
	 * @summary     DataTables
	 * @description Paginate, search and sort HTML tables
	 * @version     1.9.4
	 * @file        jquery.dataTables.js
	 * @author      Allan Jardine (www.sprymedia.co.uk)
	 * @contact     www.sprymedia.co.uk/contact
	 *
	 * @copyright Copyright 2008-2012 Allan Jardine, all rights reserved.
	 *
	 * This source file is free software, under either the GPL v2 license or a
	 * BSD style license, available at:
	 *   http://datatables.net/license_gpl2
	 *   http://datatables.net/license_bsd
	 * 
	 * This source file is distributed in the hope that it will be useful, but 
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
	 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
	 * 
	 * For details please refer to: http://www.datatables.net
	 */

	/*jslint evil: true, undef: true, browser: true */
	/*globals $, jQuery,define,_fnExternApiFunc,_fnInitialise,_fnInitComplete,_fnLanguageCompat,_fnAddColumn,_fnColumnOptions,_fnAddData,_fnCreateTr,_fnGatherData,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnServerParams,_fnAddOptionsHtml,_fnFeatureHtmlTable,_fnScrollDraw,_fnAdjustColumnSizing,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnBuildSearchArray,_fnBuildSearchRow,_fnFilterCreateSearch,_fnDataToSearch,_fnSort,_fnSortAttachListener,_fnSortingClasses,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnFeatureHtmlLength,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnNodeToDataIndex,_fnVisbleColumns,_fnCalculateEnd,_fnConvertToWidth,_fnCalculateColumnWidths,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnDetectType,_fnSettingsFromNode,_fnGetDataMaster,_fnGetTrNodes,_fnGetTdNodes,_fnEscapeRegex,_fnDeleteIndex,_fnReOrderIndex,_fnColumnOrdering,_fnLog,_fnClearTable,_fnSaveState,_fnLoadState,_fnCreateCookie,_fnReadCookie,_fnDetectHeader,_fnGetUniqueThs,_fnScrollBarWidth,_fnApplyToChildren,_fnMap,_fnGetRowData,_fnGetCellData,_fnSetCellData,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnApplyColumnDefs,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnJsonString,_fnRender,_fnNodeToColumnIndex,_fnInfoMacros,_fnBrowserDetect,_fnGetColumns*/

	(/** @lends <global> */function( window, document, undefined ) {

	(function( factory ) {
		"use strict";

		// Define as an AMD module if possible
		if ( true )
		{
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}
		/* Define using browser globals otherwise
		 * Prevent multiple instantiations if the script is loaded twice
		 */
		else if ( jQuery && !jQuery.fn.dataTable )
		{
			factory( jQuery );
		}
	}
	(/** @lends <global> */function( $ ) {
		"use strict";
		/** 
		 * DataTables is a plug-in for the jQuery Javascript library. It is a 
		 * highly flexible tool, based upon the foundations of progressive 
		 * enhancement, which will add advanced interaction controls to any 
		 * HTML table. For a full list of features please refer to
		 * <a href="http://datatables.net">DataTables.net</a>.
		 *
		 * Note that the <i>DataTable</i> object is not a global variable but is
		 * aliased to <i>jQuery.fn.DataTable</i> and <i>jQuery.fn.dataTable</i> through which 
		 * it may be  accessed.
		 *
		 *  @class
		 *  @param {object} [oInit={}] Configuration object for DataTables. Options
		 *    are defined by {@link DataTable.defaults}
		 *  @requires jQuery 1.3+
		 * 
		 *  @example
		 *    // Basic initialisation
		 *    $(document).ready( function {
		 *      $('#example').dataTable();
		 *    } );
		 *  
		 *  @example
		 *    // Initialisation with configuration options - in this case, disable
		 *    // pagination and sorting.
		 *    $(document).ready( function {
		 *      $('#example').dataTable( {
		 *        "bPaginate": false,
		 *        "bSort": false 
		 *      } );
		 *    } );
		 */
		var DataTable = function( oInit )
		{
			
			
			/**
			 * Add a column to the list used for the table with default values
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} nTh The th element for this column
			 *  @memberof DataTable#oApi
			 */
			function _fnAddColumn( oSettings, nTh )
			{
				var oDefaults = DataTable.defaults.columns;
				var iCol = oSettings.aoColumns.length;
				var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
					"sSortingClass": oSettings.oClasses.sSortable,
					"sSortingClassJUI": oSettings.oClasses.sSortJUI,
					"nTh": nTh ? nTh : document.createElement('th'),
					"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
					"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
					"mData": oDefaults.mData ? oDefaults.oDefaults : iCol
				} );
				oSettings.aoColumns.push( oCol );
				
				/* Add a column specific filter */
				if ( oSettings.aoPreSearchCols[ iCol ] === undefined || oSettings.aoPreSearchCols[ iCol ] === null )
				{
					oSettings.aoPreSearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch );
				}
				else
				{
					var oPre = oSettings.aoPreSearchCols[ iCol ];
					
					/* Don't require that the user must specify bRegex, bSmart or bCaseInsensitive */
					if ( oPre.bRegex === undefined )
					{
						oPre.bRegex = true;
					}
					
					if ( oPre.bSmart === undefined )
					{
						oPre.bSmart = true;
					}
					
					if ( oPre.bCaseInsensitive === undefined )
					{
						oPre.bCaseInsensitive = true;
					}
				}
				
				/* Use the column options function to initialise classes etc */
				_fnColumnOptions( oSettings, iCol, null );
			}
			
			
			/**
			 * Apply options for a column
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iCol column index to consider
			 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
			 *  @memberof DataTable#oApi
			 */
			function _fnColumnOptions( oSettings, iCol, oOptions )
			{
				var oCol = oSettings.aoColumns[ iCol ];
				
				/* User specified column options */
				if ( oOptions !== undefined && oOptions !== null )
				{
					/* Backwards compatibility for mDataProp */
					if ( oOptions.mDataProp && !oOptions.mData )
					{
						oOptions.mData = oOptions.mDataProp;
					}
			
					if ( oOptions.sType !== undefined )
					{
						oCol.sType = oOptions.sType;
						oCol._bAutoType = false;
					}
					
					$.extend( oCol, oOptions );
					_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
			
					/* iDataSort to be applied (backwards compatibility), but aDataSort will take
					 * priority if defined
					 */
					if ( oOptions.iDataSort !== undefined )
					{
						oCol.aDataSort = [ oOptions.iDataSort ];
					}
					_fnMap( oCol, oOptions, "aDataSort" );
				}
			
				/* Cache the data get and set functions for speed */
				var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
				var mData = _fnGetObjectDataFn( oCol.mData );
			
				oCol.fnGetData = function (oData, sSpecific) {
					var innerData = mData( oData, sSpecific );
			
					if ( oCol.mRender && (sSpecific && sSpecific !== '') )
					{
						return mRender( innerData, sSpecific, oData );
					}
					return innerData;
				};
				oCol.fnSetData = _fnSetObjectDataFn( oCol.mData );
				
				/* Feature sorting overrides column specific when off */
				if ( !oSettings.oFeatures.bSort )
				{
					oCol.bSortable = false;
				}
				
				/* Check that the class assignment is correct for sorting */
				if ( !oCol.bSortable ||
					 ($.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) == -1) )
				{
					oCol.sSortingClass = oSettings.oClasses.sSortableNone;
					oCol.sSortingClassJUI = "";
				}
				else if ( $.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) == -1 )
				{
					oCol.sSortingClass = oSettings.oClasses.sSortable;
					oCol.sSortingClassJUI = oSettings.oClasses.sSortJUI;
				}
				else if ( $.inArray('asc', oCol.asSorting) != -1 && $.inArray('desc', oCol.asSorting) == -1 )
				{
					oCol.sSortingClass = oSettings.oClasses.sSortableAsc;
					oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIAscAllowed;
				}
				else if ( $.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) != -1 )
				{
					oCol.sSortingClass = oSettings.oClasses.sSortableDesc;
					oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIDescAllowed;
				}
			}
			
			
			/**
			 * Adjust the table column widths for new data. Note: you would probably want to 
			 * do a redraw after calling this function!
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnAdjustColumnSizing ( oSettings )
			{
				/* Not interested in doing column width calculation if auto-width is disabled */
				if ( oSettings.oFeatures.bAutoWidth === false )
				{
					return false;
				}
				
				_fnCalculateColumnWidths( oSettings );
				for ( var i=0 , iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					oSettings.aoColumns[i].nTh.style.width = oSettings.aoColumns[i].sWidth;
				}
			}
			
			
			/**
			 * Covert the index of a visible column to the index in the data array (take account
			 * of hidden columns)
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iMatch Visible column index to lookup
			 *  @returns {int} i the data index
			 *  @memberof DataTable#oApi
			 */
			function _fnVisibleToColumnIndex( oSettings, iMatch )
			{
				var aiVis = _fnGetColumns( oSettings, 'bVisible' );
			
				return typeof aiVis[iMatch] === 'number' ?
					aiVis[iMatch] :
					null;
			}
			
			
			/**
			 * Covert the index of an index in the data array and convert it to the visible
			 *   column index (take account of hidden columns)
			 *  @param {int} iMatch Column index to lookup
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {int} i the data index
			 *  @memberof DataTable#oApi
			 */
			function _fnColumnIndexToVisible( oSettings, iMatch )
			{
				var aiVis = _fnGetColumns( oSettings, 'bVisible' );
				var iPos = $.inArray( iMatch, aiVis );
			
				return iPos !== -1 ? iPos : null;
			}
			
			
			/**
			 * Get the number of visible columns
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {int} i the number of visible columns
			 *  @memberof DataTable#oApi
			 */
			function _fnVisbleColumns( oSettings )
			{
				return _fnGetColumns( oSettings, 'bVisible' ).length;
			}
			
			
			/**
			 * Get an array of column indexes that match a given property
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sParam Parameter in aoColumns to look for - typically 
			 *    bVisible or bSearchable
			 *  @returns {array} Array of indexes with matched properties
			 *  @memberof DataTable#oApi
			 */
			function _fnGetColumns( oSettings, sParam )
			{
				var a = [];
			
				$.map( oSettings.aoColumns, function(val, i) {
					if ( val[sParam] ) {
						a.push( i );
					}
				} );
			
				return a;
			}
			
			
			/**
			 * Get the sort type based on an input string
			 *  @param {string} sData data we wish to know the type of
			 *  @returns {string} type (defaults to 'string' if no type can be detected)
			 *  @memberof DataTable#oApi
			 */
			function _fnDetectType( sData )
			{
				var aTypes = DataTable.ext.aTypes;
				var iLen = aTypes.length;
				
				for ( var i=0 ; i<iLen ; i++ )
				{
					var sType = aTypes[i]( sData );
					if ( sType !== null )
					{
						return sType;
					}
				}
				
				return 'string';
			}
			
			
			/**
			 * Figure out how to reorder a display list
			 *  @param {object} oSettings dataTables settings object
			 *  @returns array {int} aiReturn index list for reordering
			 *  @memberof DataTable#oApi
			 */
			function _fnReOrderIndex ( oSettings, sColumns )
			{
				var aColumns = sColumns.split(',');
				var aiReturn = [];
				
				for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					for ( var j=0 ; j<iLen ; j++ )
					{
						if ( oSettings.aoColumns[i].sName == aColumns[j] )
						{
							aiReturn.push( j );
							break;
						}
					}
				}
				
				return aiReturn;
			}
			
			
			/**
			 * Get the column ordering that DataTables expects
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {string} comma separated list of names
			 *  @memberof DataTable#oApi
			 */
			function _fnColumnOrdering ( oSettings )
			{
				var sNames = '';
				for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					sNames += oSettings.aoColumns[i].sName+',';
				}
				if ( sNames.length == iLen )
				{
					return "";
				}
				return sNames.slice(0, -1);
			}
			
			
			/**
			 * Take the column definitions and static columns arrays and calculate how
			 * they relate to column indexes. The callback function will then apply the
			 * definition found for a column to a suitable configuration object.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
			 *  @param {array} aoCols The aoColumns array that defines columns individually
			 *  @param {function} fn Callback function - takes two parameters, the calculated
			 *    column index and the definition for that column.
			 *  @memberof DataTable#oApi
			 */
			function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
			{
				var i, iLen, j, jLen, k, kLen;
			
				// Column definitions with aTargets
				if ( aoColDefs )
				{
					/* Loop over the definitions array - loop in reverse so first instance has priority */
					for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
					{
						/* Each definition can target multiple columns, as it is an array */
						var aTargets = aoColDefs[i].aTargets;
						if ( !$.isArray( aTargets ) )
						{
							_fnLog( oSettings, 1, 'aTargets must be an array of targets, not a '+(typeof aTargets) );
						}
			
						for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
						{
							if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
							{
								/* Add columns that we don't yet know about */
								while( oSettings.aoColumns.length <= aTargets[j] )
								{
									_fnAddColumn( oSettings );
								}
			
								/* Integer, basic index */
								fn( aTargets[j], aoColDefs[i] );
							}
							else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
							{
								/* Negative integer, right to left column counting */
								fn( oSettings.aoColumns.length+aTargets[j], aoColDefs[i] );
							}
							else if ( typeof aTargets[j] === 'string' )
							{
								/* Class name matching on TH element */
								for ( k=0, kLen=oSettings.aoColumns.length ; k<kLen ; k++ )
								{
									if ( aTargets[j] == "_all" ||
									     $(oSettings.aoColumns[k].nTh).hasClass( aTargets[j] ) )
									{
										fn( k, aoColDefs[i] );
									}
								}
							}
						}
					}
				}
			
				// Statically defined columns array
				if ( aoCols )
				{
					for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
					{
						fn( i, aoCols[i] );
					}
				}
			}
			
			/**
			 * Add a data array to the table, creating DOM node etc. This is the parallel to 
			 * _fnGatherData, but for adding rows from a Javascript source, rather than a
			 * DOM source.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {array} aData data array to be added
			 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
			 *  @memberof DataTable#oApi
			 */
			function _fnAddData ( oSettings, aDataSupplied )
			{
				var oCol;
				
				/* Take an independent copy of the data source so we can bash it about as we wish */
				var aDataIn = ($.isArray(aDataSupplied)) ?
					aDataSupplied.slice() :
					$.extend( true, {}, aDataSupplied );
				
				/* Create the object for storing information about this new row */
				var iRow = oSettings.aoData.length;
				var oData = $.extend( true, {}, DataTable.models.oRow );
				oData._aData = aDataIn;
				oSettings.aoData.push( oData );
			
				/* Create the cells */
				var nTd, sThisType;
				for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					oCol = oSettings.aoColumns[i];
			
					/* Use rendered data for filtering / sorting */
					if ( typeof oCol.fnRender === 'function' && oCol.bUseRendered && oCol.mData !== null )
					{
						_fnSetCellData( oSettings, iRow, i, _fnRender(oSettings, iRow, i) );
					}
					else
					{
						_fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );
					}
					
					/* See if we should auto-detect the column type */
					if ( oCol._bAutoType && oCol.sType != 'string' )
					{
						/* Attempt to auto detect the type - same as _fnGatherData() */
						var sVarType = _fnGetCellData( oSettings, iRow, i, 'type' );
						if ( sVarType !== null && sVarType !== '' )
						{
							sThisType = _fnDetectType( sVarType );
							if ( oCol.sType === null )
							{
								oCol.sType = sThisType;
							}
							else if ( oCol.sType != sThisType && oCol.sType != "html" )
							{
								/* String is always the 'fallback' option */
								oCol.sType = 'string';
							}
						}
					}
				}
				
				/* Add to the display array */
				oSettings.aiDisplayMaster.push( iRow );
			
				/* Create the DOM information */
				if ( !oSettings.oFeatures.bDeferRender )
				{
					_fnCreateTr( oSettings, iRow );
				}
			
				return iRow;
			}
			
			
			/**
			 * Read in the data from the target table from the DOM
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnGatherData( oSettings )
			{
				var iLoop, i, iLen, j, jLen, jInner,
				 	nTds, nTrs, nTd, nTr, aLocalData, iThisIndex,
					iRow, iRows, iColumn, iColumns, sNodeName,
					oCol, oData;
				
				/*
				 * Process by row first
				 * Add the data object for the whole table - storing the tr node. Note - no point in getting
				 * DOM based data if we are going to go and replace it with Ajax source data.
				 */
				if ( oSettings.bDeferLoading || oSettings.sAjaxSource === null )
				{
					nTr = oSettings.nTBody.firstChild;
					while ( nTr )
					{
						if ( nTr.nodeName.toUpperCase() == "TR" )
						{
							iThisIndex = oSettings.aoData.length;
							nTr._DT_RowIndex = iThisIndex;
							oSettings.aoData.push( $.extend( true, {}, DataTable.models.oRow, {
								"nTr": nTr
							} ) );
			
							oSettings.aiDisplayMaster.push( iThisIndex );
							nTd = nTr.firstChild;
							jInner = 0;
							while ( nTd )
							{
								sNodeName = nTd.nodeName.toUpperCase();
								if ( sNodeName == "TD" || sNodeName == "TH" )
								{
									_fnSetCellData( oSettings, iThisIndex, jInner, $.trim(nTd.innerHTML) );
									jInner++;
								}
								nTd = nTd.nextSibling;
							}
						}
						nTr = nTr.nextSibling;
					}
				}
				
				/* Gather in the TD elements of the Table - note that this is basically the same as
				 * fnGetTdNodes, but that function takes account of hidden columns, which we haven't yet
				 * setup!
				 */
				nTrs = _fnGetTrNodes( oSettings );
				nTds = [];
				for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
				{
					nTd = nTrs[i].firstChild;
					while ( nTd )
					{
						sNodeName = nTd.nodeName.toUpperCase();
						if ( sNodeName == "TD" || sNodeName == "TH" )
						{
							nTds.push( nTd );
						}
						nTd = nTd.nextSibling;
					}
				}
				
				/* Now process by column */
				for ( iColumn=0, iColumns=oSettings.aoColumns.length ; iColumn<iColumns ; iColumn++ )
				{
					oCol = oSettings.aoColumns[iColumn];
			
					/* Get the title of the column - unless there is a user set one */
					if ( oCol.sTitle === null )
					{
						oCol.sTitle = oCol.nTh.innerHTML;
					}
					
					var
						bAutoType = oCol._bAutoType,
						bRender = typeof oCol.fnRender === 'function',
						bClass = oCol.sClass !== null,
						bVisible = oCol.bVisible,
						nCell, sThisType, sRendered, sValType;
					
					/* A single loop to rule them all (and be more efficient) */
					if ( bAutoType || bRender || bClass || !bVisible )
					{
						for ( iRow=0, iRows=oSettings.aoData.length ; iRow<iRows ; iRow++ )
						{
							oData = oSettings.aoData[iRow];
							nCell = nTds[ (iRow*iColumns) + iColumn ];
							
							/* Type detection */
							if ( bAutoType && oCol.sType != 'string' )
							{
								sValType = _fnGetCellData( oSettings, iRow, iColumn, 'type' );
								if ( sValType !== '' )
								{
									sThisType = _fnDetectType( sValType );
									if ( oCol.sType === null )
									{
										oCol.sType = sThisType;
									}
									else if ( oCol.sType != sThisType && 
									          oCol.sType != "html" )
									{
										/* String is always the 'fallback' option */
										oCol.sType = 'string';
									}
								}
							}
			
							if ( oCol.mRender )
							{
								// mRender has been defined, so we need to get the value and set it
								nCell.innerHTML = _fnGetCellData( oSettings, iRow, iColumn, 'display' );
							}
							else if ( oCol.mData !== iColumn )
							{
								// If mData is not the same as the column number, then we need to
								// get the dev set value. If it is the column, no point in wasting
								// time setting the value that is already there!
								nCell.innerHTML = _fnGetCellData( oSettings, iRow, iColumn, 'display' );
							}
							
							/* Rendering */
							if ( bRender )
							{
								sRendered = _fnRender( oSettings, iRow, iColumn );
								nCell.innerHTML = sRendered;
								if ( oCol.bUseRendered )
								{
									/* Use the rendered data for filtering / sorting */
									_fnSetCellData( oSettings, iRow, iColumn, sRendered );
								}
							}
							
							/* Classes */
							if ( bClass )
							{
								nCell.className += ' '+oCol.sClass;
							}
							
							/* Column visibility */
							if ( !bVisible )
							{
								oData._anHidden[iColumn] = nCell;
								nCell.parentNode.removeChild( nCell );
							}
							else
							{
								oData._anHidden[iColumn] = null;
							}
			
							if ( oCol.fnCreatedCell )
							{
								oCol.fnCreatedCell.call( oSettings.oInstance,
									nCell, _fnGetCellData( oSettings, iRow, iColumn, 'display' ), oData._aData, iRow, iColumn
								);
							}
						}
					}
				}
			
				/* Row created callbacks */
				if ( oSettings.aoRowCreatedCallback.length !== 0 )
				{
					for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
					{
						oData = oSettings.aoData[i];
						_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [oData.nTr, oData._aData, i] );
					}
				}
			}
			
			
			/**
			 * Take a TR element and convert it to an index in aoData
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} n the TR element to find
			 *  @returns {int} index if the node is found, null if not
			 *  @memberof DataTable#oApi
			 */
			function _fnNodeToDataIndex( oSettings, n )
			{
				return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
			}
			
			
			/**
			 * Take a TD element and convert it into a column data index (not the visible index)
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow The row number the TD/TH can be found in
			 *  @param {node} n The TD/TH element to find
			 *  @returns {int} index if the node is found, -1 if not
			 *  @memberof DataTable#oApi
			 */
			function _fnNodeToColumnIndex( oSettings, iRow, n )
			{
				var anCells = _fnGetTdNodes( oSettings, iRow );
			
				for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					if ( anCells[i] === n )
					{
						return i;
					}
				}
				return -1;
			}
			
			
			/**
			 * Get an array of data for a given row from the internal data cache
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow aoData row id
			 *  @param {string} sSpecific data get type ('type' 'filter' 'sort')
			 *  @param {array} aiColumns Array of column indexes to get data from
			 *  @returns {array} Data array
			 *  @memberof DataTable#oApi
			 */
			function _fnGetRowData( oSettings, iRow, sSpecific, aiColumns )
			{
				var out = [];
				for ( var i=0, iLen=aiColumns.length ; i<iLen ; i++ )
				{
					out.push( _fnGetCellData( oSettings, iRow, aiColumns[i], sSpecific ) );
				}
				return out;
			}
			
			
			/**
			 * Get the data for a given cell from the internal cache, taking into account data mapping
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow aoData row id
			 *  @param {int} iCol Column index
			 *  @param {string} sSpecific data get type ('display', 'type' 'filter' 'sort')
			 *  @returns {*} Cell data
			 *  @memberof DataTable#oApi
			 */
			function _fnGetCellData( oSettings, iRow, iCol, sSpecific )
			{
				var sData;
				var oCol = oSettings.aoColumns[iCol];
				var oData = oSettings.aoData[iRow]._aData;
			
				if ( (sData=oCol.fnGetData( oData, sSpecific )) === undefined )
				{
					if ( oSettings.iDrawError != oSettings.iDraw && oCol.sDefaultContent === null )
					{
						_fnLog( oSettings, 0, "Requested unknown parameter "+
							(typeof oCol.mData=='function' ? '{mData function}' : "'"+oCol.mData+"'")+
							" from the data source for row "+iRow );
						oSettings.iDrawError = oSettings.iDraw;
					}
					return oCol.sDefaultContent;
				}
			
				/* When the data source is null, we can use default column data */
				if ( sData === null && oCol.sDefaultContent !== null )
				{
					sData = oCol.sDefaultContent;
				}
				else if ( typeof sData === 'function' )
				{
					/* If the data source is a function, then we run it and use the return */
					return sData();
				}
			
				if ( sSpecific == 'display' && sData === null )
				{
					return '';
				}
				return sData;
			}
			
			
			/**
			 * Set the value for a specific cell, into the internal data cache
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow aoData row id
			 *  @param {int} iCol Column index
			 *  @param {*} val Value to set
			 *  @memberof DataTable#oApi
			 */
			function _fnSetCellData( oSettings, iRow, iCol, val )
			{
				var oCol = oSettings.aoColumns[iCol];
				var oData = oSettings.aoData[iRow]._aData;
			
				oCol.fnSetData( oData, val );
			}
			
			
			// Private variable that is used to match array syntax in the data property object
			var __reArray = /\[.*?\]$/;
			
			/**
			 * Return a function that can be used to get data from a source object, taking
			 * into account the ability to use nested objects as a source
			 *  @param {string|int|function} mSource The data source for the object
			 *  @returns {function} Data get function
			 *  @memberof DataTable#oApi
			 */
			function _fnGetObjectDataFn( mSource )
			{
				if ( mSource === null )
				{
					/* Give an empty string for rendering / sorting etc */
					return function (data, type) {
						return null;
					};
				}
				else if ( typeof mSource === 'function' )
				{
					return function (data, type, extra) {
						return mSource( data, type, extra );
					};
				}
				else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1) )
				{
					/* If there is a . in the source string then the data source is in a 
					 * nested object so we loop over the data for each level to get the next
					 * level down. On each loop we test for undefined, and if found immediately
					 * return. This allows entire objects to be missing and sDefaultContent to
					 * be used if defined, rather than throwing an error
					 */
					var fetchData = function (data, type, src) {
						var a = src.split('.');
						var arrayNotation, out, innerSrc;
			
						if ( src !== "" )
						{
							for ( var i=0, iLen=a.length ; i<iLen ; i++ )
							{
								// Check if we are dealing with an array notation request
								arrayNotation = a[i].match(__reArray);
			
								if ( arrayNotation ) {
									a[i] = a[i].replace(__reArray, '');
			
									// Condition allows simply [] to be passed in
									if ( a[i] !== "" ) {
										data = data[ a[i] ];
									}
									out = [];
									
									// Get the remainder of the nested object to get
									a.splice( 0, i+1 );
									innerSrc = a.join('.');
			
									// Traverse each entry in the array getting the properties requested
									for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
										out.push( fetchData( data[j], type, innerSrc ) );
									}
			
									// If a string is given in between the array notation indicators, that
									// is used to join the strings together, otherwise an array is returned
									var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
									data = (join==="") ? out : out.join(join);
			
									// The inner call to fetchData has already traversed through the remainder
									// of the source requested, so we exit from the loop
									break;
								}
			
								if ( data === null || data[ a[i] ] === undefined )
								{
									return undefined;
								}
								data = data[ a[i] ];
							}
						}
			
						return data;
					};
			
					return function (data, type) {
						return fetchData( data, type, mSource );
					};
				}
				else
				{
					/* Array or flat object mapping */
					return function (data, type) {
						return data[mSource];	
					};
				}
			}
			
			
			/**
			 * Return a function that can be used to set data from a source object, taking
			 * into account the ability to use nested objects as a source
			 *  @param {string|int|function} mSource The data source for the object
			 *  @returns {function} Data set function
			 *  @memberof DataTable#oApi
			 */
			function _fnSetObjectDataFn( mSource )
			{
				if ( mSource === null )
				{
					/* Nothing to do when the data source is null */
					return function (data, val) {};
				}
				else if ( typeof mSource === 'function' )
				{
					return function (data, val) {
						mSource( data, 'set', val );
					};
				}
				else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1) )
				{
					/* Like the get, we need to get data from a nested object */
					var setData = function (data, val, src) {
						var a = src.split('.'), b;
						var arrayNotation, o, innerSrc;
			
						for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
						{
							// Check if we are dealing with an array notation request
							arrayNotation = a[i].match(__reArray);
			
							if ( arrayNotation )
							{
								a[i] = a[i].replace(__reArray, '');
								data[ a[i] ] = [];
								
								// Get the remainder of the nested object to set so we can recurse
								b = a.slice();
								b.splice( 0, i+1 );
								innerSrc = b.join('.');
			
								// Traverse each entry in the array setting the properties requested
								for ( var j=0, jLen=val.length ; j<jLen ; j++ )
								{
									o = {};
									setData( o, val[j], innerSrc );
									data[ a[i] ].push( o );
								}
			
								// The inner call to setData has already traversed through the remainder
								// of the source and has set the data, thus we can exit here
								return;
							}
			
							// If the nested object doesn't currently exist - since we are
							// trying to set the value - create it
							if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
							{
								data[ a[i] ] = {};
							}
							data = data[ a[i] ];
						}
			
						// If array notation is used, we just want to strip it and use the property name
						// and assign the value. If it isn't used, then we get the result we want anyway
						data[ a[a.length-1].replace(__reArray, '') ] = val;
					};
			
					return function (data, val) {
						return setData( data, val, mSource );
					};
				}
				else
				{
					/* Array or flat object mapping */
					return function (data, val) {
						data[mSource] = val;	
					};
				}
			}
			
			
			/**
			 * Return an array with the full table data
			 *  @param {object} oSettings dataTables settings object
			 *  @returns array {array} aData Master data array
			 *  @memberof DataTable#oApi
			 */
			function _fnGetDataMaster ( oSettings )
			{
				var aData = [];
				var iLen = oSettings.aoData.length;
				for ( var i=0 ; i<iLen; i++ )
				{
					aData.push( oSettings.aoData[i]._aData );
				}
				return aData;
			}
			
			
			/**
			 * Nuke the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnClearTable( oSettings )
			{
				oSettings.aoData.splice( 0, oSettings.aoData.length );
				oSettings.aiDisplayMaster.splice( 0, oSettings.aiDisplayMaster.length );
				oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length );
				_fnCalculateEnd( oSettings );
			}
			
			
			 /**
			 * Take an array of integers (index array) and remove a target integer (value - not 
			 * the key!)
			 *  @param {array} a Index array to target
			 *  @param {int} iTarget value to find
			 *  @memberof DataTable#oApi
			 */
			function _fnDeleteIndex( a, iTarget )
			{
				var iTargetIndex = -1;
				
				for ( var i=0, iLen=a.length ; i<iLen ; i++ )
				{
					if ( a[i] == iTarget )
					{
						iTargetIndex = i;
					}
					else if ( a[i] > iTarget )
					{
						a[i]--;
					}
				}
				
				if ( iTargetIndex != -1 )
				{
					a.splice( iTargetIndex, 1 );
				}
			}
			
			
			 /**
			 * Call the developer defined fnRender function for a given cell (row/column) with
			 * the required parameters and return the result.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow aoData index for the row
			 *  @param {int} iCol aoColumns index for the column
			 *  @returns {*} Return of the developer's fnRender function
			 *  @memberof DataTable#oApi
			 */
			function _fnRender( oSettings, iRow, iCol )
			{
				var oCol = oSettings.aoColumns[iCol];
			
				return oCol.fnRender( {
					"iDataRow":    iRow,
					"iDataColumn": iCol,
					"oSettings":   oSettings,
					"aData":       oSettings.aoData[iRow]._aData,
					"mDataProp":   oCol.mData
				}, _fnGetCellData(oSettings, iRow, iCol, 'display') );
			}
			/**
			 * Create a new TR element (and it's TD children) for a row
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow Row to consider
			 *  @memberof DataTable#oApi
			 */
			function _fnCreateTr ( oSettings, iRow )
			{
				var oData = oSettings.aoData[iRow];
				var nTd;
			
				if ( oData.nTr === null )
				{
					oData.nTr = document.createElement('tr');
			
					/* Use a private property on the node to allow reserve mapping from the node
					 * to the aoData array for fast look up
					 */
					oData.nTr._DT_RowIndex = iRow;
			
					/* Special parameters can be given by the data source to be used on the row */
					if ( oData._aData.DT_RowId )
					{
						oData.nTr.id = oData._aData.DT_RowId;
					}
			
					if ( oData._aData.DT_RowClass )
					{
						oData.nTr.className = oData._aData.DT_RowClass;
					}
			
					/* Process each column */
					for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
					{
						var oCol = oSettings.aoColumns[i];
						nTd = document.createElement( oCol.sCellType );
			
						/* Render if needed - if bUseRendered is true then we already have the rendered
						 * value in the data source - so can just use that
						 */
						nTd.innerHTML = (typeof oCol.fnRender === 'function' && (!oCol.bUseRendered || oCol.mData === null)) ?
							_fnRender( oSettings, iRow, i ) :
							_fnGetCellData( oSettings, iRow, i, 'display' );
					
						/* Add user defined class */
						if ( oCol.sClass !== null )
						{
							nTd.className = oCol.sClass;
						}
						
						if ( oCol.bVisible )
						{
							oData.nTr.appendChild( nTd );
							oData._anHidden[i] = null;
						}
						else
						{
							oData._anHidden[i] = nTd;
						}
			
						if ( oCol.fnCreatedCell )
						{
							oCol.fnCreatedCell.call( oSettings.oInstance,
								nTd, _fnGetCellData( oSettings, iRow, i, 'display' ), oData._aData, iRow, i
							);
						}
					}
			
					_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [oData.nTr, oData._aData, iRow] );
				}
			}
			
			
			/**
			 * Create the HTML header for the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnBuildHead( oSettings )
			{
				var i, nTh, iLen, j, jLen;
				var iThs = $('th, td', oSettings.nTHead).length;
				var iCorrector = 0;
				var jqChildren;
				
				/* If there is a header in place - then use it - otherwise it's going to get nuked... */
				if ( iThs !== 0 )
				{
					/* We've got a thead from the DOM, so remove hidden columns and apply width to vis cols */
					for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
					{
						nTh = oSettings.aoColumns[i].nTh;
						nTh.setAttribute('role', 'columnheader');
						if ( oSettings.aoColumns[i].bSortable )
						{
							nTh.setAttribute('tabindex', oSettings.iTabIndex);
							nTh.setAttribute('aria-controls', oSettings.sTableId);
						}
			
						if ( oSettings.aoColumns[i].sClass !== null )
						{
							$(nTh).addClass( oSettings.aoColumns[i].sClass );
						}
						
						/* Set the title of the column if it is user defined (not what was auto detected) */
						if ( oSettings.aoColumns[i].sTitle != nTh.innerHTML )
						{
							nTh.innerHTML = oSettings.aoColumns[i].sTitle;
						}
					}
				}
				else
				{
					/* We don't have a header in the DOM - so we are going to have to create one */
					var nTr = document.createElement( "tr" );
					
					for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
					{
						nTh = oSettings.aoColumns[i].nTh;
						nTh.innerHTML = oSettings.aoColumns[i].sTitle;
						nTh.setAttribute('tabindex', '0');
						
						if ( oSettings.aoColumns[i].sClass !== null )
						{
							$(nTh).addClass( oSettings.aoColumns[i].sClass );
						}
						
						nTr.appendChild( nTh );
					}
					$(oSettings.nTHead).html( '' )[0].appendChild( nTr );
					_fnDetectHeader( oSettings.aoHeader, oSettings.nTHead );
				}
				
				/* ARIA role for the rows */	
				$(oSettings.nTHead).children('tr').attr('role', 'row');
				
				/* Add the extra markup needed by jQuery UI's themes */
				if ( oSettings.bJUI )
				{
					for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
					{
						nTh = oSettings.aoColumns[i].nTh;
						
						var nDiv = document.createElement('div');
						nDiv.className = oSettings.oClasses.sSortJUIWrapper;
						$(nTh).contents().appendTo(nDiv);
						
						var nSpan = document.createElement('span');
						nSpan.className = oSettings.oClasses.sSortIcon;
						nDiv.appendChild( nSpan );
						nTh.appendChild( nDiv );
					}
				}
				
				if ( oSettings.oFeatures.bSort )
				{
					for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
					{
						if ( oSettings.aoColumns[i].bSortable !== false )
						{
							_fnSortAttachListener( oSettings, oSettings.aoColumns[i].nTh, i );
						}
						else
						{
							$(oSettings.aoColumns[i].nTh).addClass( oSettings.oClasses.sSortableNone );
						}
					}
				}
				
				/* Deal with the footer - add classes if required */
				if ( oSettings.oClasses.sFooterTH !== "" )
				{
					$(oSettings.nTFoot).children('tr').children('th').addClass( oSettings.oClasses.sFooterTH );
				}
				
				/* Cache the footer elements */
				if ( oSettings.nTFoot !== null )
				{
					var anCells = _fnGetUniqueThs( oSettings, null, oSettings.aoFooter );
					for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
					{
						if ( anCells[i] )
						{
							oSettings.aoColumns[i].nTf = anCells[i];
							if ( oSettings.aoColumns[i].sClass )
							{
								$(anCells[i]).addClass( oSettings.aoColumns[i].sClass );
							}
						}
					}
				}
			}
			
			
			/**
			 * Draw the header (or footer) element based on the column visibility states. The
			 * methodology here is to use the layout array from _fnDetectHeader, modified for
			 * the instantaneous column visibility, to construct the new layout. The grid is
			 * traversed over cell at a time in a rows x columns grid fashion, although each 
			 * cell insert can cover multiple elements in the grid - which is tracks using the
			 * aApplied array. Cell inserts in the grid will only occur where there isn't
			 * already a cell in that position.
			 *  @param {object} oSettings dataTables settings object
			 *  @param array {objects} aoSource Layout array from _fnDetectHeader
			 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc, 
			 *  @memberof DataTable#oApi
			 */
			function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
			{
				var i, iLen, j, jLen, k, kLen, n, nLocalTr;
				var aoLocal = [];
				var aApplied = [];
				var iColumns = oSettings.aoColumns.length;
				var iRowspan, iColspan;
			
				if (  bIncludeHidden === undefined )
				{
					bIncludeHidden = false;
				}
			
				/* Make a copy of the master layout array, but without the visible columns in it */
				for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
				{
					aoLocal[i] = aoSource[i].slice();
					aoLocal[i].nTr = aoSource[i].nTr;
			
					/* Remove any columns which are currently hidden */
					for ( j=iColumns-1 ; j>=0 ; j-- )
					{
						if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
						{
							aoLocal[i].splice( j, 1 );
						}
					}
			
					/* Prep the applied array - it needs an element for each row */
					aApplied.push( [] );
				}
			
				for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
				{
					nLocalTr = aoLocal[i].nTr;
					
					/* All cells are going to be replaced, so empty out the row */
					if ( nLocalTr )
					{
						while( (n = nLocalTr.firstChild) )
						{
							nLocalTr.removeChild( n );
						}
					}
			
					for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
					{
						iRowspan = 1;
						iColspan = 1;
			
						/* Check to see if there is already a cell (row/colspan) covering our target
						 * insert point. If there is, then there is nothing to do.
						 */
						if ( aApplied[i][j] === undefined )
						{
							nLocalTr.appendChild( aoLocal[i][j].cell );
							aApplied[i][j] = 1;
			
							/* Expand the cell to cover as many rows as needed */
							while ( aoLocal[i+iRowspan] !== undefined &&
							        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
							{
								aApplied[i+iRowspan][j] = 1;
								iRowspan++;
							}
			
							/* Expand the cell to cover as many columns as needed */
							while ( aoLocal[i][j+iColspan] !== undefined &&
							        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
							{
								/* Must update the applied array over the rows for the columns */
								for ( k=0 ; k<iRowspan ; k++ )
								{
									aApplied[i+k][j+iColspan] = 1;
								}
								iColspan++;
							}
			
							/* Do the actual expansion in the DOM */
							aoLocal[i][j].cell.rowSpan = iRowspan;
							aoLocal[i][j].cell.colSpan = iColspan;
						}
					}
				}
			}
			
			
			/**
			 * Insert the required TR nodes into the table for display
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnDraw( oSettings )
			{
				/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
				var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
				if ( $.inArray( false, aPreDraw ) !== -1 )
				{
					_fnProcessingDisplay( oSettings, false );
					return;
				}
				
				var i, iLen, n;
				var anRows = [];
				var iRowCount = 0;
				var iStripes = oSettings.asStripeClasses.length;
				var iOpenRows = oSettings.aoOpenRows.length;
				
				oSettings.bDrawing = true;
				
				/* Check and see if we have an initial draw position from state saving */
				if ( oSettings.iInitDisplayStart !== undefined && oSettings.iInitDisplayStart != -1 )
				{
					if ( oSettings.oFeatures.bServerSide )
					{
						oSettings._iDisplayStart = oSettings.iInitDisplayStart;
					}
					else
					{
						oSettings._iDisplayStart = (oSettings.iInitDisplayStart >= oSettings.fnRecordsDisplay()) ?
							0 : oSettings.iInitDisplayStart;
					}
					oSettings.iInitDisplayStart = -1;
					_fnCalculateEnd( oSettings );
				}
				
				/* Server-side processing draw intercept */
				if ( oSettings.bDeferLoading )
				{
					oSettings.bDeferLoading = false;
					oSettings.iDraw++;
				}
				else if ( !oSettings.oFeatures.bServerSide )
				{
					oSettings.iDraw++;
				}
				else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
				{
					return;
				}
				
				if ( oSettings.aiDisplay.length !== 0 )
				{
					var iStart = oSettings._iDisplayStart;
					var iEnd = oSettings._iDisplayEnd;
					
					if ( oSettings.oFeatures.bServerSide )
					{
						iStart = 0;
						iEnd = oSettings.aoData.length;
					}
					
					for ( var j=iStart ; j<iEnd ; j++ )
					{
						var aoData = oSettings.aoData[ oSettings.aiDisplay[j] ];
						if ( aoData.nTr === null )
						{
							_fnCreateTr( oSettings, oSettings.aiDisplay[j] );
						}
			
						var nRow = aoData.nTr;
						
						/* Remove the old striping classes and then add the new one */
						if ( iStripes !== 0 )
						{
							var sStripe = oSettings.asStripeClasses[ iRowCount % iStripes ];
							if ( aoData._sRowStripe != sStripe )
							{
								$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
								aoData._sRowStripe = sStripe;
							}
						}
						
						/* Row callback functions - might want to manipulate the row */
						_fnCallbackFire( oSettings, 'aoRowCallback', null, 
							[nRow, oSettings.aoData[ oSettings.aiDisplay[j] ]._aData, iRowCount, j] );
						
						anRows.push( nRow );
						iRowCount++;
						
						/* If there is an open row - and it is attached to this parent - attach it on redraw */
						if ( iOpenRows !== 0 )
						{
							for ( var k=0 ; k<iOpenRows ; k++ )
							{
								if ( nRow == oSettings.aoOpenRows[k].nParent )
								{
									anRows.push( oSettings.aoOpenRows[k].nTr );
									break;
								}
							}
						}
					}
				}
				else
				{
					/* Table is empty - create a row with an empty message in it */
					anRows[ 0 ] = document.createElement( 'tr' );
					
					if ( oSettings.asStripeClasses[0] )
					{
						anRows[ 0 ].className = oSettings.asStripeClasses[0];
					}
			
					var oLang = oSettings.oLanguage;
					var sZero = oLang.sZeroRecords;
					if ( oSettings.iDraw == 1 && oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide )
					{
						sZero = oLang.sLoadingRecords;
					}
					else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
					{
						sZero = oLang.sEmptyTable;
					}
			
					var nTd = document.createElement( 'td' );
					nTd.setAttribute( 'valign', "top" );
					nTd.colSpan = _fnVisbleColumns( oSettings );
					nTd.className = oSettings.oClasses.sRowEmpty;
					nTd.innerHTML = _fnInfoMacros( oSettings, sZero );
					
					anRows[ iRowCount ].appendChild( nTd );
				}
				
				/* Header and footer callbacks */
				_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0], 
					_fnGetDataMaster( oSettings ), oSettings._iDisplayStart, oSettings.fnDisplayEnd(), oSettings.aiDisplay ] );
				
				_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0], 
					_fnGetDataMaster( oSettings ), oSettings._iDisplayStart, oSettings.fnDisplayEnd(), oSettings.aiDisplay ] );
				
				/* 
				 * Need to remove any old row from the display - note we can't just empty the tbody using
				 * $().html('') since this will unbind the jQuery event handlers (even although the node 
				 * still exists!) - equally we can't use innerHTML, since IE throws an exception.
				 */
				var
					nAddFrag = document.createDocumentFragment(),
					nRemoveFrag = document.createDocumentFragment(),
					nBodyPar, nTrs;
				
				if ( oSettings.nTBody )
				{
					nBodyPar = oSettings.nTBody.parentNode;
					nRemoveFrag.appendChild( oSettings.nTBody );
					
					/* When doing infinite scrolling, only remove child rows when sorting, filtering or start
					 * up. When not infinite scroll, always do it.
					 */
					if ( !oSettings.oScroll.bInfinite || !oSettings._bInitComplete ||
					 	oSettings.bSorted || oSettings.bFiltered )
					{
						while( (n = oSettings.nTBody.firstChild) )
						{
							oSettings.nTBody.removeChild( n );
						}
					}
					
					/* Put the draw table into the dom */
					for ( i=0, iLen=anRows.length ; i<iLen ; i++ )
					{
						nAddFrag.appendChild( anRows[i] );
					}
					
					oSettings.nTBody.appendChild( nAddFrag );
					if ( nBodyPar !== null )
					{
						nBodyPar.appendChild( oSettings.nTBody );
					}
				}
				
				/* Call all required callback functions for the end of a draw */
				_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
				
				/* Draw is complete, sorting and filtering must be as well */
				oSettings.bSorted = false;
				oSettings.bFiltered = false;
				oSettings.bDrawing = false;
				
				if ( oSettings.oFeatures.bServerSide )
				{
					_fnProcessingDisplay( oSettings, false );
					if ( !oSettings._bInitComplete )
					{
						_fnInitComplete( oSettings );
					}
				}
			}
			
			
			/**
			 * Redraw the table - taking account of the various features which are enabled
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnReDraw( oSettings )
			{
				if ( oSettings.oFeatures.bSort )
				{
					/* Sorting will refilter and draw for us */
					_fnSort( oSettings, oSettings.oPreviousSearch );
				}
				else if ( oSettings.oFeatures.bFilter )
				{
					/* Filtering will redraw for us */
					_fnFilterComplete( oSettings, oSettings.oPreviousSearch );
				}
				else
				{
					_fnCalculateEnd( oSettings );
					_fnDraw( oSettings );
				}
			}
			
			
			/**
			 * Add the options to the page HTML for the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnAddOptionsHtml ( oSettings )
			{
				/*
				 * Create a temporary, empty, div which we can later on replace with what we have generated
				 * we do it this way to rendering the 'options' html offline - speed :-)
				 */
				var nHolding = $('<div></div>')[0];
				oSettings.nTable.parentNode.insertBefore( nHolding, oSettings.nTable );
				
				/* 
				 * All DataTables are wrapped in a div
				 */
				oSettings.nTableWrapper = $('<div id="'+oSettings.sTableId+'_wrapper" class="'+oSettings.oClasses.sWrapper+'" role="grid"></div>')[0];
				oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
			
				/* Track where we want to insert the option */
				var nInsertNode = oSettings.nTableWrapper;
				
				/* Loop over the user set positioning and place the elements as needed */
				var aDom = oSettings.sDom.split('');
				var nTmp, iPushFeature, cOption, nNewNode, cNext, sAttr, j;
				for ( var i=0 ; i<aDom.length ; i++ )
				{
					iPushFeature = 0;
					cOption = aDom[i];
					
					if ( cOption == '<' )
					{
						/* New container div */
						nNewNode = $('<div></div>')[0];
						
						/* Check to see if we should append an id and/or a class name to the container */
						cNext = aDom[i+1];
						if ( cNext == "'" || cNext == '"' )
						{
							sAttr = "";
							j = 2;
							while ( aDom[i+j] != cNext )
							{
								sAttr += aDom[i+j];
								j++;
							}
							
							/* Replace jQuery UI constants */
							if ( sAttr == "H" )
							{
								sAttr = oSettings.oClasses.sJUIHeader;
							}
							else if ( sAttr == "F" )
							{
								sAttr = oSettings.oClasses.sJUIFooter;
							}
							
							/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
							 * breaks the string into parts and applies them as needed
							 */
							if ( sAttr.indexOf('.') != -1 )
							{
								var aSplit = sAttr.split('.');
								nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
								nNewNode.className = aSplit[1];
							}
							else if ( sAttr.charAt(0) == "#" )
							{
								nNewNode.id = sAttr.substr(1, sAttr.length-1);
							}
							else
							{
								nNewNode.className = sAttr;
							}
							
							i += j; /* Move along the position array */
						}
						
						nInsertNode.appendChild( nNewNode );
						nInsertNode = nNewNode;
					}
					else if ( cOption == '>' )
					{
						/* End container div */
						nInsertNode = nInsertNode.parentNode;
					}
					else if ( cOption == 'l' && oSettings.oFeatures.bPaginate && oSettings.oFeatures.bLengthChange )
					{
						/* Length */
						nTmp = _fnFeatureHtmlLength( oSettings );
						iPushFeature = 1;
					}
					else if ( cOption == 'f' && oSettings.oFeatures.bFilter )
					{
						/* Filter */
						nTmp = _fnFeatureHtmlFilter( oSettings );
						iPushFeature = 1;
					}
					else if ( cOption == 'r' && oSettings.oFeatures.bProcessing )
					{
						/* pRocessing */
						nTmp = _fnFeatureHtmlProcessing( oSettings );
						iPushFeature = 1;
					}
					else if ( cOption == 't' )
					{
						/* Table */
						nTmp = _fnFeatureHtmlTable( oSettings );
						iPushFeature = 1;
					}
					else if ( cOption ==  'i' && oSettings.oFeatures.bInfo )
					{
						/* Info */
						nTmp = _fnFeatureHtmlInfo( oSettings );
						iPushFeature = 1;
					}
					else if ( cOption == 'p' && oSettings.oFeatures.bPaginate )
					{
						/* Pagination */
						nTmp = _fnFeatureHtmlPaginate( oSettings );
						iPushFeature = 1;
					}
					else if ( DataTable.ext.aoFeatures.length !== 0 )
					{
						/* Plug-in features */
						var aoFeatures = DataTable.ext.aoFeatures;
						for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
						{
							if ( cOption == aoFeatures[k].cFeature )
							{
								nTmp = aoFeatures[k].fnInit( oSettings );
								if ( nTmp )
								{
									iPushFeature = 1;
								}
								break;
							}
						}
					}
					
					/* Add to the 2D features array */
					if ( iPushFeature == 1 && nTmp !== null )
					{
						if ( typeof oSettings.aanFeatures[cOption] !== 'object' )
						{
							oSettings.aanFeatures[cOption] = [];
						}
						oSettings.aanFeatures[cOption].push( nTmp );
						nInsertNode.appendChild( nTmp );
					}
				}
				
				/* Built our DOM structure - replace the holding div with what we want */
				nHolding.parentNode.replaceChild( oSettings.nTableWrapper, nHolding );
			}
			
			
			/**
			 * Use the DOM source to create up an array of header cells. The idea here is to
			 * create a layout grid (array) of rows x columns, which contains a reference
			 * to the cell that that point in the grid (regardless of col/rowspan), such that
			 * any column / row could be removed and the new grid constructed
			 *  @param array {object} aLayout Array to store the calculated layout in
			 *  @param {node} nThead The header/footer element for the table
			 *  @memberof DataTable#oApi
			 */
			function _fnDetectHeader ( aLayout, nThead )
			{
				var nTrs = $(nThead).children('tr');
				var nTr, nCell;
				var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
				var bUnique;
				var fnShiftCol = function ( a, i, j ) {
					var k = a[i];
			                while ( k[j] ) {
						j++;
					}
					return j;
				};
			
				aLayout.splice( 0, aLayout.length );
				
				/* We know how many rows there are in the layout - so prep it */
				for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
				{
					aLayout.push( [] );
				}
				
				/* Calculate a layout array */
				for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
				{
					nTr = nTrs[i];
					iColumn = 0;
					
					/* For every cell in the row... */
					nCell = nTr.firstChild;
					while ( nCell ) {
						if ( nCell.nodeName.toUpperCase() == "TD" ||
						     nCell.nodeName.toUpperCase() == "TH" )
						{
							/* Get the col and rowspan attributes from the DOM and sanitise them */
							iColspan = nCell.getAttribute('colspan') * 1;
							iRowspan = nCell.getAttribute('rowspan') * 1;
							iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
							iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
			
							/* There might be colspan cells already in this row, so shift our target 
							 * accordingly
							 */
							iColShifted = fnShiftCol( aLayout, i, iColumn );
							
							/* Cache calculation for unique columns */
							bUnique = iColspan === 1 ? true : false;
							
							/* If there is col / rowspan, copy the information into the layout grid */
							for ( l=0 ; l<iColspan ; l++ )
							{
								for ( k=0 ; k<iRowspan ; k++ )
								{
									aLayout[i+k][iColShifted+l] = {
										"cell": nCell,
										"unique": bUnique
									};
									aLayout[i+k].nTr = nTr;
								}
							}
						}
						nCell = nCell.nextSibling;
					}
				}
			}
			
			
			/**
			 * Get an array of unique th elements, one for each column
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} nHeader automatically detect the layout from this node - optional
			 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
			 *  @returns array {node} aReturn list of unique th's
			 *  @memberof DataTable#oApi
			 */
			function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
			{
				var aReturn = [];
				if ( !aLayout )
				{
					aLayout = oSettings.aoHeader;
					if ( nHeader )
					{
						aLayout = [];
						_fnDetectHeader( aLayout, nHeader );
					}
				}
			
				for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
				{
					for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
					{
						if ( aLayout[i][j].unique && 
							 (!aReturn[j] || !oSettings.bSortCellsTop) )
						{
							aReturn[j] = aLayout[i][j].cell;
						}
					}
				}
				
				return aReturn;
			}
			
			
			
			/**
			 * Update the table using an Ajax call
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {boolean} Block the table drawing or not
			 *  @memberof DataTable#oApi
			 */
			function _fnAjaxUpdate( oSettings )
			{
				if ( oSettings.bAjaxDataGet )
				{
					oSettings.iDraw++;
					_fnProcessingDisplay( oSettings, true );
					var iColumns = oSettings.aoColumns.length;
					var aoData = _fnAjaxParameters( oSettings );
					_fnServerParams( oSettings, aoData );
					
					oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aoData,
						function(json) {
							_fnAjaxUpdateDraw( oSettings, json );
						}, oSettings );
					return false;
				}
				else
				{
					return true;
				}
			}
			
			
			/**
			 * Build up the parameters in an object needed for a server-side processing request
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {bool} block the table drawing or not
			 *  @memberof DataTable#oApi
			 */
			function _fnAjaxParameters( oSettings )
			{
				var iColumns = oSettings.aoColumns.length;
				var aoData = [], mDataProp, aaSort, aDataSort;
				var i, j;
				
				aoData.push( { "name": "sEcho",          "value": oSettings.iDraw } );
				aoData.push( { "name": "iColumns",       "value": iColumns } );
				aoData.push( { "name": "sColumns",       "value": _fnColumnOrdering(oSettings) } );
				aoData.push( { "name": "iDisplayStart",  "value": oSettings._iDisplayStart } );
				aoData.push( { "name": "iDisplayLength", "value": oSettings.oFeatures.bPaginate !== false ?
					oSettings._iDisplayLength : -1 } );
					
				for ( i=0 ; i<iColumns ; i++ )
				{
				  mDataProp = oSettings.aoColumns[i].mData;
					aoData.push( { "name": "mDataProp_"+i, "value": typeof(mDataProp)==="function" ? 'function' : mDataProp } );
				}
				
				/* Filtering */
				if ( oSettings.oFeatures.bFilter !== false )
				{
					aoData.push( { "name": "sSearch", "value": oSettings.oPreviousSearch.sSearch } );
					aoData.push( { "name": "bRegex",  "value": oSettings.oPreviousSearch.bRegex } );
					for ( i=0 ; i<iColumns ; i++ )
					{
						aoData.push( { "name": "sSearch_"+i,     "value": oSettings.aoPreSearchCols[i].sSearch } );
						aoData.push( { "name": "bRegex_"+i,      "value": oSettings.aoPreSearchCols[i].bRegex } );
						aoData.push( { "name": "bSearchable_"+i, "value": oSettings.aoColumns[i].bSearchable } );
					}
				}
				
				/* Sorting */
				if ( oSettings.oFeatures.bSort !== false )
				{
					var iCounter = 0;
			
					aaSort = ( oSettings.aaSortingFixed !== null ) ?
						oSettings.aaSortingFixed.concat( oSettings.aaSorting ) :
						oSettings.aaSorting.slice();
					
					for ( i=0 ; i<aaSort.length ; i++ )
					{
						aDataSort = oSettings.aoColumns[ aaSort[i][0] ].aDataSort;
						
						for ( j=0 ; j<aDataSort.length ; j++ )
						{
							aoData.push( { "name": "iSortCol_"+iCounter,  "value": aDataSort[j] } );
							aoData.push( { "name": "sSortDir_"+iCounter,  "value": aaSort[i][1] } );
							iCounter++;
						}
					}
					aoData.push( { "name": "iSortingCols",   "value": iCounter } );
					
					for ( i=0 ; i<iColumns ; i++ )
					{
						aoData.push( { "name": "bSortable_"+i,  "value": oSettings.aoColumns[i].bSortable } );
					}
				}
				
				return aoData;
			}
			
			
			/**
			 * Add Ajax parameters from plug-ins
			 *  @param {object} oSettings dataTables settings object
			 *  @param array {objects} aoData name/value pairs to send to the server
			 *  @memberof DataTable#oApi
			 */
			function _fnServerParams( oSettings, aoData )
			{
				_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [aoData] );
			}
			
			
			/**
			 * Data the data from the server (nuking the old) and redraw the table
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} json json data return from the server.
			 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
			 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
			 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
			 *  @param {array} json.aaData The data to display on this page
			 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
			 *  @memberof DataTable#oApi
			 */
			function _fnAjaxUpdateDraw ( oSettings, json )
			{
				if ( json.sEcho !== undefined )
				{
					/* Protect against old returns over-writing a new one. Possible when you get
					 * very fast interaction, and later queries are completed much faster
					 */
					if ( json.sEcho*1 < oSettings.iDraw )
					{
						return;
					}
					else
					{
						oSettings.iDraw = json.sEcho * 1;
					}
				}
				
				if ( !oSettings.oScroll.bInfinite ||
					   (oSettings.oScroll.bInfinite && (oSettings.bSorted || oSettings.bFiltered)) )
				{
					_fnClearTable( oSettings );
				}
				oSettings._iRecordsTotal = parseInt(json.iTotalRecords, 10);
				oSettings._iRecordsDisplay = parseInt(json.iTotalDisplayRecords, 10);
				
				/* Determine if reordering is required */
				var sOrdering = _fnColumnOrdering(oSettings);
				var bReOrder = (json.sColumns !== undefined && sOrdering !== "" && json.sColumns != sOrdering );
				var aiIndex;
				if ( bReOrder )
				{
					aiIndex = _fnReOrderIndex( oSettings, json.sColumns );
				}
				
				var aData = _fnGetObjectDataFn( oSettings.sAjaxDataProp )( json );
				for ( var i=0, iLen=aData.length ; i<iLen ; i++ )
				{
					if ( bReOrder )
					{
						/* If we need to re-order, then create a new array with the correct order and add it */
						var aDataSorted = [];
						for ( var j=0, jLen=oSettings.aoColumns.length ; j<jLen ; j++ )
						{
							aDataSorted.push( aData[i][ aiIndex[j] ] );
						}
						_fnAddData( oSettings, aDataSorted );
					}
					else
					{
						/* No re-order required, sever got it "right" - just straight add */
						_fnAddData( oSettings, aData[i] );
					}
				}
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
				
				oSettings.bAjaxDataGet = false;
				_fnDraw( oSettings );
				oSettings.bAjaxDataGet = true;
				_fnProcessingDisplay( oSettings, false );
			}
			
			
			
			/**
			 * Generate the node required for filtering text
			 *  @returns {node} Filter control element
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlFilter ( oSettings )
			{
				var oPreviousSearch = oSettings.oPreviousSearch;
				
				var sSearchStr = oSettings.oLanguage.sSearch;
				sSearchStr = (sSearchStr.indexOf('_INPUT_') !== -1) ?
				  sSearchStr.replace('_INPUT_', '<input type="text" />') :
				  sSearchStr==="" ? '<input type="text" />' : sSearchStr+' <input type="text" />';
				
				var nFilter = document.createElement( 'div' );
				nFilter.className = oSettings.oClasses.sFilter;
				nFilter.innerHTML = '<label>'+sSearchStr+'</label>';
				if ( !oSettings.aanFeatures.f )
				{
					nFilter.id = oSettings.sTableId+'_filter';
				}
				
				var jqFilter = $('input[type="text"]', nFilter);
			
				// Store a reference to the input element, so other input elements could be
				// added to the filter wrapper if needed (submit button for example)
				nFilter._DT_Input = jqFilter[0];
			
				jqFilter.val( oPreviousSearch.sSearch.replace('"','&quot;') );
				jqFilter.bind( 'keyup.DT', function(e) {
					/* Update all other filter input elements for the new display */
					var n = oSettings.aanFeatures.f;
					var val = this.value==="" ? "" : this.value; // mental IE8 fix :-(
			
					for ( var i=0, iLen=n.length ; i<iLen ; i++ )
					{
						if ( n[i] != $(this).parents('div.dataTables_filter')[0] )
						{
							$(n[i]._DT_Input).val( val );
						}
					}
					
					/* Now do the filter */
					if ( val != oPreviousSearch.sSearch )
					{
						_fnFilterComplete( oSettings, { 
							"sSearch": val, 
							"bRegex": oPreviousSearch.bRegex,
							"bSmart": oPreviousSearch.bSmart ,
							"bCaseInsensitive": oPreviousSearch.bCaseInsensitive 
						} );
					}
				} );
			
				jqFilter
					.attr('aria-controls', oSettings.sTableId)
					.bind( 'keypress.DT', function(e) {
						/* Prevent form submission */
						if ( e.keyCode == 13 )
						{
							return false;
						}
					}
				);
				
				return nFilter;
			}
			
			
			/**
			 * Filter the table using both the global filter and column based filtering
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} oSearch search information
			 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterComplete ( oSettings, oInput, iForce )
			{
				var oPrevSearch = oSettings.oPreviousSearch;
				var aoPrevSearch = oSettings.aoPreSearchCols;
				var fnSaveFilter = function ( oFilter ) {
					/* Save the filtering values */
					oPrevSearch.sSearch = oFilter.sSearch;
					oPrevSearch.bRegex = oFilter.bRegex;
					oPrevSearch.bSmart = oFilter.bSmart;
					oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
				};
			
				/* In server-side processing all filtering is done by the server, so no point hanging around here */
				if ( !oSettings.oFeatures.bServerSide )
				{
					/* Global filter */
					_fnFilter( oSettings, oInput.sSearch, iForce, oInput.bRegex, oInput.bSmart, oInput.bCaseInsensitive );
					fnSaveFilter( oInput );
			
					/* Now do the individual column filter */
					for ( var i=0 ; i<oSettings.aoPreSearchCols.length ; i++ )
					{
						_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, aoPrevSearch[i].bRegex, 
							aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
					}
					
					/* Custom filtering */
					_fnFilterCustom( oSettings );
				}
				else
				{
					fnSaveFilter( oInput );
				}
				
				/* Tell the draw function we have been filtering */
				oSettings.bFiltered = true;
				$(oSettings.oInstance).trigger('filter', oSettings);
				
				/* Redraw the table */
				oSettings._iDisplayStart = 0;
				_fnCalculateEnd( oSettings );
				_fnDraw( oSettings );
				
				/* Rebuild search array 'offline' */
				_fnBuildSearchArray( oSettings, 0 );
			}
			
			
			/**
			 * Apply custom filtering functions
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterCustom( oSettings )
			{
				var afnFilters = DataTable.ext.afnFiltering;
				var aiFilterColumns = _fnGetColumns( oSettings, 'bSearchable' );
			
				for ( var i=0, iLen=afnFilters.length ; i<iLen ; i++ )
				{
					var iCorrector = 0;
					for ( var j=0, jLen=oSettings.aiDisplay.length ; j<jLen ; j++ )
					{
						var iDisIndex = oSettings.aiDisplay[j-iCorrector];
						var bTest = afnFilters[i](
							oSettings,
							_fnGetRowData( oSettings, iDisIndex, 'filter', aiFilterColumns ),
							iDisIndex
						);
						
						/* Check if we should use this row based on the filtering function */
						if ( !bTest )
						{
							oSettings.aiDisplay.splice( j-iCorrector, 1 );
							iCorrector++;
						}
					}
				}
			}
			
			
			/**
			 * Filter the table on a per-column basis
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sInput string to filter on
			 *  @param {int} iColumn column to filter
			 *  @param {bool} bRegex treat search string as a regular expression or not
			 *  @param {bool} bSmart use smart filtering or not
			 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterColumn ( oSettings, sInput, iColumn, bRegex, bSmart, bCaseInsensitive )
			{
				if ( sInput === "" )
				{
					return;
				}
				
				var iIndexCorrector = 0;
				var rpSearch = _fnFilterCreateSearch( sInput, bRegex, bSmart, bCaseInsensitive );
				
				for ( var i=oSettings.aiDisplay.length-1 ; i>=0 ; i-- )
				{
					var sData = _fnDataToSearch( _fnGetCellData( oSettings, oSettings.aiDisplay[i], iColumn, 'filter' ),
						oSettings.aoColumns[iColumn].sType );
					if ( ! rpSearch.test( sData ) )
					{
						oSettings.aiDisplay.splice( i, 1 );
						iIndexCorrector++;
					}
				}
			}
			
			
			/**
			 * Filter the data table based on user input and draw the table
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sInput string to filter on
			 *  @param {int} iForce optional - force a research of the master array (1) or not (undefined or 0)
			 *  @param {bool} bRegex treat as a regular expression or not
			 *  @param {bool} bSmart perform smart filtering or not
			 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
			 *  @memberof DataTable#oApi
			 */
			function _fnFilter( oSettings, sInput, iForce, bRegex, bSmart, bCaseInsensitive )
			{
				var i;
				var rpSearch = _fnFilterCreateSearch( sInput, bRegex, bSmart, bCaseInsensitive );
				var oPrevSearch = oSettings.oPreviousSearch;
				
				/* Check if we are forcing or not - optional parameter */
				if ( !iForce )
				{
					iForce = 0;
				}
				
				/* Need to take account of custom filtering functions - always filter */
				if ( DataTable.ext.afnFiltering.length !== 0 )
				{
					iForce = 1;
				}
				
				/*
				 * If the input is blank - we want the full data set
				 */
				if ( sInput.length <= 0 )
				{
					oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length);
					oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
				}
				else
				{
					/*
					 * We are starting a new search or the new search string is smaller 
					 * then the old one (i.e. delete). Search from the master array
				 	 */
					if ( oSettings.aiDisplay.length == oSettings.aiDisplayMaster.length ||
						   oPrevSearch.sSearch.length > sInput.length || iForce == 1 ||
						   sInput.indexOf(oPrevSearch.sSearch) !== 0 )
					{
						/* Nuke the old display array - we are going to rebuild it */
						oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length);
						
						/* Force a rebuild of the search array */
						_fnBuildSearchArray( oSettings, 1 );
						
						/* Search through all records to populate the search array
						 * The the oSettings.aiDisplayMaster and asDataSearch arrays have 1 to 1 
						 * mapping
						 */
						for ( i=0 ; i<oSettings.aiDisplayMaster.length ; i++ )
						{
							if ( rpSearch.test(oSettings.asDataSearch[i]) )
							{
								oSettings.aiDisplay.push( oSettings.aiDisplayMaster[i] );
							}
						}
				  }
				  else
					{
				  	/* Using old search array - refine it - do it this way for speed
				  	 * Don't have to search the whole master array again
						 */
				  	var iIndexCorrector = 0;
				  	
				  	/* Search the current results */
				  	for ( i=0 ; i<oSettings.asDataSearch.length ; i++ )
						{
				  		if ( ! rpSearch.test(oSettings.asDataSearch[i]) )
							{
				  			oSettings.aiDisplay.splice( i-iIndexCorrector, 1 );
				  			iIndexCorrector++;
				  		}
				  	}
				  }
				}
			}
			
			
			/**
			 * Create an array which can be quickly search through
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iMaster use the master data array - optional
			 *  @memberof DataTable#oApi
			 */
			function _fnBuildSearchArray ( oSettings, iMaster )
			{
				if ( !oSettings.oFeatures.bServerSide )
				{
					/* Clear out the old data */
					oSettings.asDataSearch = [];
			
					var aiFilterColumns = _fnGetColumns( oSettings, 'bSearchable' );
					var aiIndex = (iMaster===1) ?
					 	oSettings.aiDisplayMaster :
					 	oSettings.aiDisplay;
					
					for ( var i=0, iLen=aiIndex.length ; i<iLen ; i++ )
					{
						oSettings.asDataSearch[i] = _fnBuildSearchRow(
							oSettings,
							_fnGetRowData( oSettings, aiIndex[i], 'filter', aiFilterColumns )
						);
					}
				}
			}
			
			
			/**
			 * Create a searchable string from a single data row
			 *  @param {object} oSettings dataTables settings object
			 *  @param {array} aData Row data array to use for the data to search
			 *  @memberof DataTable#oApi
			 */
			function _fnBuildSearchRow( oSettings, aData )
			{
				var sSearch = aData.join('  ');
				
				/* If it looks like there is an HTML entity in the string, attempt to decode it */
				if ( sSearch.indexOf('&') !== -1 )
				{
					sSearch = $('<div>').html(sSearch).text();
				}
				
				// Strip newline characters
				return sSearch.replace( /[\n\r]/g, " " );
			}
			
			/**
			 * Build a regular expression object suitable for searching a table
			 *  @param {string} sSearch string to search for
			 *  @param {bool} bRegex treat as a regular expression or not
			 *  @param {bool} bSmart perform smart filtering or not
			 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
			 *  @returns {RegExp} constructed object
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterCreateSearch( sSearch, bRegex, bSmart, bCaseInsensitive )
			{
				var asSearch, sRegExpString;
				
				if ( bSmart )
				{
					/* Generate the regular expression to use. Something along the lines of:
					 * ^(?=.*?\bone\b)(?=.*?\btwo\b)(?=.*?\bthree\b).*$
					 */
					asSearch = bRegex ? sSearch.split( ' ' ) : _fnEscapeRegex( sSearch ).split( ' ' );
					sRegExpString = '^(?=.*?'+asSearch.join( ')(?=.*?' )+').*$';
					return new RegExp( sRegExpString, bCaseInsensitive ? "i" : "" );
				}
				else
				{
					sSearch = bRegex ? sSearch : _fnEscapeRegex( sSearch );
					return new RegExp( sSearch, bCaseInsensitive ? "i" : "" );
				}
			}
			
			
			/**
			 * Convert raw data into something that the user can search on
			 *  @param {string} sData data to be modified
			 *  @param {string} sType data type
			 *  @returns {string} search string
			 *  @memberof DataTable#oApi
			 */
			function _fnDataToSearch ( sData, sType )
			{
				if ( typeof DataTable.ext.ofnSearch[sType] === "function" )
				{
					return DataTable.ext.ofnSearch[sType]( sData );
				}
				else if ( sData === null )
				{
					return '';
				}
				else if ( sType == "html" )
				{
					return sData.replace(/[\r\n]/g," ").replace( /<.*?>/g, "" );
				}
				else if ( typeof sData === "string" )
				{
					return sData.replace(/[\r\n]/g," ");
				}
				return sData;
			}
			
			
			/**
			 * scape a string such that it can be used in a regular expression
			 *  @param {string} sVal string to escape
			 *  @returns {string} escaped string
			 *  @memberof DataTable#oApi
			 */
			function _fnEscapeRegex ( sVal )
			{
				var acEscape = [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ];
				var reReplace = new RegExp( '(\\' + acEscape.join('|\\') + ')', 'g' );
				return sVal.replace(reReplace, '\\$1');
			}
			
			
			/**
			 * Generate the node required for the info display
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {node} Information element
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlInfo ( oSettings )
			{
				var nInfo = document.createElement( 'div' );
				nInfo.className = oSettings.oClasses.sInfo;
				
				/* Actions that are to be taken once only for this feature */
				if ( !oSettings.aanFeatures.i )
				{
					/* Add draw callback */
					oSettings.aoDrawCallback.push( {
						"fn": _fnUpdateInfo,
						"sName": "information"
					} );
					
					/* Add id */
					nInfo.id = oSettings.sTableId+'_info';
				}
				oSettings.nTable.setAttribute( 'aria-describedby', oSettings.sTableId+'_info' );
				
				return nInfo;
			}
			
			
			/**
			 * Update the information elements in the display
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnUpdateInfo ( oSettings )
			{
				/* Show information about the table */
				if ( !oSettings.oFeatures.bInfo || oSettings.aanFeatures.i.length === 0 )
				{
					return;
				}
				
				var
					oLang = oSettings.oLanguage,
					iStart = oSettings._iDisplayStart+1,
					iEnd = oSettings.fnDisplayEnd(),
					iMax = oSettings.fnRecordsTotal(),
					iTotal = oSettings.fnRecordsDisplay(),
					sOut;
				
				if ( iTotal === 0 )
				{
					/* Empty record set */
					sOut = oLang.sInfoEmpty;
				}
				else {
					/* Normal record set */
					sOut = oLang.sInfo;
				}
			
				if ( iTotal != iMax )
				{
					/* Record set after filtering */
					sOut += ' ' + oLang.sInfoFiltered;
				}
			
				// Convert the macros
				sOut += oLang.sInfoPostFix;
				sOut = _fnInfoMacros( oSettings, sOut );
				
				if ( oLang.fnInfoCallback !== null )
				{
					sOut = oLang.fnInfoCallback.call( oSettings.oInstance, 
						oSettings, iStart, iEnd, iMax, iTotal, sOut );
				}
				
				var n = oSettings.aanFeatures.i;
				for ( var i=0, iLen=n.length ; i<iLen ; i++ )
				{
					$(n[i]).html( sOut );
				}
			}
			
			
			function _fnInfoMacros ( oSettings, str )
			{
				var
					iStart = oSettings._iDisplayStart+1,
					sStart = oSettings.fnFormatNumber( iStart ),
					iEnd = oSettings.fnDisplayEnd(),
					sEnd = oSettings.fnFormatNumber( iEnd ),
					iTotal = oSettings.fnRecordsDisplay(),
					sTotal = oSettings.fnFormatNumber( iTotal ),
					iMax = oSettings.fnRecordsTotal(),
					sMax = oSettings.fnFormatNumber( iMax );
			
				// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
				// internally
				if ( oSettings.oScroll.bInfinite )
				{
					sStart = oSettings.fnFormatNumber( 1 );
				}
			
				return str.
					replace(/_START_/g, sStart).
					replace(/_END_/g,   sEnd).
					replace(/_TOTAL_/g, sTotal).
					replace(/_MAX_/g,   sMax);
			}
			
			
			
			/**
			 * Draw the table for the first time, adding all required features
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnInitialise ( oSettings )
			{
				var i, iLen, iAjaxStart=oSettings.iInitDisplayStart;
				
				/* Ensure that the table data is fully initialised */
				if ( oSettings.bInitialised === false )
				{
					setTimeout( function(){ _fnInitialise( oSettings ); }, 200 );
					return;
				}
				
				/* Show the display HTML options */
				_fnAddOptionsHtml( oSettings );
				
				/* Build and draw the header / footer for the table */
				_fnBuildHead( oSettings );
				_fnDrawHead( oSettings, oSettings.aoHeader );
				if ( oSettings.nTFoot )
				{
					_fnDrawHead( oSettings, oSettings.aoFooter );
				}
			
				/* Okay to show that something is going on now */
				_fnProcessingDisplay( oSettings, true );
				
				/* Calculate sizes for columns */
				if ( oSettings.oFeatures.bAutoWidth )
				{
					_fnCalculateColumnWidths( oSettings );
				}
				
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					if ( oSettings.aoColumns[i].sWidth !== null )
					{
						oSettings.aoColumns[i].nTh.style.width = _fnStringToCss( oSettings.aoColumns[i].sWidth );
					}
				}
				
				/* If there is default sorting required - let's do it. The sort function will do the
				 * drawing for us. Otherwise we draw the table regardless of the Ajax source - this allows
				 * the table to look initialised for Ajax sourcing data (show 'loading' message possibly)
				 */
				if ( oSettings.oFeatures.bSort )
				{
					_fnSort( oSettings );
				}
				else if ( oSettings.oFeatures.bFilter )
				{
					_fnFilterComplete( oSettings, oSettings.oPreviousSearch );
				}
				else
				{
					oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
					_fnCalculateEnd( oSettings );
					_fnDraw( oSettings );
				}
				
				/* if there is an ajax source load the data */
				if ( oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide )
				{
					var aoData = [];
					_fnServerParams( oSettings, aoData );
					oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aoData, function(json) {
						var aData = (oSettings.sAjaxDataProp !== "") ?
						 	_fnGetObjectDataFn( oSettings.sAjaxDataProp )(json) : json;
			
						/* Got the data - add it to the table */
						for ( i=0 ; i<aData.length ; i++ )
						{
							_fnAddData( oSettings, aData[i] );
						}
						
						/* Reset the init display for cookie saving. We've already done a filter, and
						 * therefore cleared it before. So we need to make it appear 'fresh'
						 */
						oSettings.iInitDisplayStart = iAjaxStart;
						
						if ( oSettings.oFeatures.bSort )
						{
							_fnSort( oSettings );
						}
						else
						{
							oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
							_fnCalculateEnd( oSettings );
							_fnDraw( oSettings );
						}
						
						_fnProcessingDisplay( oSettings, false );
						_fnInitComplete( oSettings, json );
					}, oSettings );
					return;
				}
				
				/* Server-side processing initialisation complete is done at the end of _fnDraw */
				if ( !oSettings.oFeatures.bServerSide )
				{
					_fnProcessingDisplay( oSettings, false );
					_fnInitComplete( oSettings );
				}
			}
			
			
			/**
			 * Draw the table for the first time, adding all required features
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
			 *    with client-side processing (optional)
			 *  @memberof DataTable#oApi
			 */
			function _fnInitComplete ( oSettings, json )
			{
				oSettings._bInitComplete = true;
				_fnCallbackFire( oSettings, 'aoInitComplete', 'init', [oSettings, json] );
			}
			
			
			/**
			 * Language compatibility - when certain options are given, and others aren't, we
			 * need to duplicate the values over, in order to provide backwards compatibility
			 * with older language files.
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnLanguageCompat( oLanguage )
			{
				var oDefaults = DataTable.defaults.oLanguage;
			
				/* Backwards compatibility - if there is no sEmptyTable given, then use the same as
				 * sZeroRecords - assuming that is given.
				 */
				if ( !oLanguage.sEmptyTable && oLanguage.sZeroRecords &&
					oDefaults.sEmptyTable === "No data available in table" )
				{
					_fnMap( oLanguage, oLanguage, 'sZeroRecords', 'sEmptyTable' );
				}
			
				/* Likewise with loading records */
				if ( !oLanguage.sLoadingRecords && oLanguage.sZeroRecords &&
					oDefaults.sLoadingRecords === "Loading..." )
				{
					_fnMap( oLanguage, oLanguage, 'sZeroRecords', 'sLoadingRecords' );
				}
			}
			
			
			
			/**
			 * Generate the node required for user display length changing
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {node} Display length feature node
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlLength ( oSettings )
			{
				if ( oSettings.oScroll.bInfinite )
				{
					return null;
				}
				
				/* This can be overruled by not using the _MENU_ var/macro in the language variable */
				var sName = 'name="'+oSettings.sTableId+'_length"';
				var sStdMenu = '<select size="1" '+sName+'>';
				var i, iLen;
				var aLengthMenu = oSettings.aLengthMenu;
				
				if ( aLengthMenu.length == 2 && typeof aLengthMenu[0] === 'object' && 
						typeof aLengthMenu[1] === 'object' )
				{
					for ( i=0, iLen=aLengthMenu[0].length ; i<iLen ; i++ )
					{
						sStdMenu += '<option value="'+aLengthMenu[0][i]+'">'+aLengthMenu[1][i]+'</option>';
					}
				}
				else
				{
					for ( i=0, iLen=aLengthMenu.length ; i<iLen ; i++ )
					{
						sStdMenu += '<option value="'+aLengthMenu[i]+'">'+aLengthMenu[i]+'</option>';
					}
				}
				sStdMenu += '</select>';
				
				var nLength = document.createElement( 'div' );
				if ( !oSettings.aanFeatures.l )
				{
					nLength.id = oSettings.sTableId+'_length';
				}
				nLength.className = oSettings.oClasses.sLength;
				nLength.innerHTML = '<label>'+oSettings.oLanguage.sLengthMenu.replace( '_MENU_', sStdMenu )+'</label>';
				
				/*
				 * Set the length to the current display length - thanks to Andrea Pavlovic for this fix,
				 * and Stefan Skopnik for fixing the fix!
				 */
				$('select option[value="'+oSettings._iDisplayLength+'"]', nLength).attr("selected", true);
				
				$('select', nLength).bind( 'change.DT', function(e) {
					var iVal = $(this).val();
					
					/* Update all other length options for the new display */
					var n = oSettings.aanFeatures.l;
					for ( i=0, iLen=n.length ; i<iLen ; i++ )
					{
						if ( n[i] != this.parentNode )
						{
							$('select', n[i]).val( iVal );
						}
					}
					
					/* Redraw the table */
					oSettings._iDisplayLength = parseInt(iVal, 10);
					_fnCalculateEnd( oSettings );
					
					/* If we have space to show extra rows (backing up from the end point - then do so */
					if ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() )
					{
						oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;
						if ( oSettings._iDisplayStart < 0 )
						{
							oSettings._iDisplayStart = 0;
						}
					}
					
					if ( oSettings._iDisplayLength == -1 )
					{
						oSettings._iDisplayStart = 0;
					}
					
					_fnDraw( oSettings );
				} );
			
			
				$('select', nLength).attr('aria-controls', oSettings.sTableId);
				
				return nLength;
			}
			
			
			/**
			 * Recalculate the end point based on the start point
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnCalculateEnd( oSettings )
			{
				if ( oSettings.oFeatures.bPaginate === false )
				{
					oSettings._iDisplayEnd = oSettings.aiDisplay.length;
				}
				else
				{
					/* Set the end point of the display - based on how many elements there are
					 * still to display
					 */
					if ( oSettings._iDisplayStart + oSettings._iDisplayLength > oSettings.aiDisplay.length ||
						   oSettings._iDisplayLength == -1 )
					{
						oSettings._iDisplayEnd = oSettings.aiDisplay.length;
					}
					else
					{
						oSettings._iDisplayEnd = oSettings._iDisplayStart + oSettings._iDisplayLength;
					}
				}
			}
			
			
			
			/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
			 * Note that most of the paging logic is done in 
			 * DataTable.ext.oPagination
			 */
			
			/**
			 * Generate the node required for default pagination
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {node} Pagination feature node
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlPaginate ( oSettings )
			{
				if ( oSettings.oScroll.bInfinite )
				{
					return null;
				}
				
				var nPaginate = document.createElement( 'div' );
				nPaginate.className = oSettings.oClasses.sPaging+oSettings.sPaginationType;
				
				DataTable.ext.oPagination[ oSettings.sPaginationType ].fnInit( oSettings, nPaginate, 
					function( oSettings ) {
						_fnCalculateEnd( oSettings );
						_fnDraw( oSettings );
					}
				);
				
				/* Add a draw callback for the pagination on first instance, to update the paging display */
				if ( !oSettings.aanFeatures.p )
				{
					oSettings.aoDrawCallback.push( {
						"fn": function( oSettings ) {
							DataTable.ext.oPagination[ oSettings.sPaginationType ].fnUpdate( oSettings, function( oSettings ) {
								_fnCalculateEnd( oSettings );
								_fnDraw( oSettings );
							} );
						},
						"sName": "pagination"
					} );
				}
				return nPaginate;
			}
			
			
			/**
			 * Alter the display settings to change the page
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
			 *    or page number to jump to (integer)
			 *  @returns {bool} true page has changed, false - no change (no effect) eg 'first' on page 1
			 *  @memberof DataTable#oApi
			 */
			function _fnPageChange ( oSettings, mAction )
			{
				var iOldStart = oSettings._iDisplayStart;
				
				if ( typeof mAction === "number" )
				{
					oSettings._iDisplayStart = mAction * oSettings._iDisplayLength;
					if ( oSettings._iDisplayStart > oSettings.fnRecordsDisplay() )
					{
						oSettings._iDisplayStart = 0;
					}
				}
				else if ( mAction == "first" )
				{
					oSettings._iDisplayStart = 0;
				}
				else if ( mAction == "previous" )
				{
					oSettings._iDisplayStart = oSettings._iDisplayLength>=0 ?
						oSettings._iDisplayStart - oSettings._iDisplayLength :
						0;
					
					/* Correct for under-run */
					if ( oSettings._iDisplayStart < 0 )
					{
					  oSettings._iDisplayStart = 0;
					}
				}
				else if ( mAction == "next" )
				{
					if ( oSettings._iDisplayLength >= 0 )
					{
						/* Make sure we are not over running the display array */
						if ( oSettings._iDisplayStart + oSettings._iDisplayLength < oSettings.fnRecordsDisplay() )
						{
							oSettings._iDisplayStart += oSettings._iDisplayLength;
						}
					}
					else
					{
						oSettings._iDisplayStart = 0;
					}
				}
				else if ( mAction == "last" )
				{
					if ( oSettings._iDisplayLength >= 0 )
					{
						var iPages = parseInt( (oSettings.fnRecordsDisplay()-1) / oSettings._iDisplayLength, 10 ) + 1;
						oSettings._iDisplayStart = (iPages-1) * oSettings._iDisplayLength;
					}
					else
					{
						oSettings._iDisplayStart = 0;
					}
				}
				else
				{
					_fnLog( oSettings, 0, "Unknown paging action: "+mAction );
				}
				$(oSettings.oInstance).trigger('page', oSettings);
				
				return iOldStart != oSettings._iDisplayStart;
			}
			
			
			
			/**
			 * Generate the node required for the processing node
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {node} Processing element
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlProcessing ( oSettings )
			{
				var nProcessing = document.createElement( 'div' );
				
				if ( !oSettings.aanFeatures.r )
				{
					nProcessing.id = oSettings.sTableId+'_processing';
				}
				nProcessing.innerHTML = oSettings.oLanguage.sProcessing;
				nProcessing.className = oSettings.oClasses.sProcessing;
				oSettings.nTable.parentNode.insertBefore( nProcessing, oSettings.nTable );
				
				return nProcessing;
			}
			
			
			/**
			 * Display or hide the processing indicator
			 *  @param {object} oSettings dataTables settings object
			 *  @param {bool} bShow Show the processing indicator (true) or not (false)
			 *  @memberof DataTable#oApi
			 */
			function _fnProcessingDisplay ( oSettings, bShow )
			{
				if ( oSettings.oFeatures.bProcessing )
				{
					var an = oSettings.aanFeatures.r;
					for ( var i=0, iLen=an.length ; i<iLen ; i++ )
					{
						an[i].style.visibility = bShow ? "visible" : "hidden";
					}
				}
			
				$(oSettings.oInstance).trigger('processing', [oSettings, bShow]);
			}
			
			/**
			 * Add any control elements for the table - specifically scrolling
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {node} Node to add to the DOM
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlTable ( oSettings )
			{
				/* Check if scrolling is enabled or not - if not then leave the DOM unaltered */
				if ( oSettings.oScroll.sX === "" && oSettings.oScroll.sY === "" )
				{
					return oSettings.nTable;
				}
				
				/*
				 * The HTML structure that we want to generate in this function is:
				 *  div - nScroller
				 *    div - nScrollHead
				 *      div - nScrollHeadInner
				 *        table - nScrollHeadTable
				 *          thead - nThead
				 *    div - nScrollBody
				 *      table - oSettings.nTable
				 *        thead - nTheadSize
				 *        tbody - nTbody
				 *    div - nScrollFoot
				 *      div - nScrollFootInner
				 *        table - nScrollFootTable
				 *          tfoot - nTfoot
				 */
				var
				 	nScroller = document.createElement('div'),
				 	nScrollHead = document.createElement('div'),
				 	nScrollHeadInner = document.createElement('div'),
				 	nScrollBody = document.createElement('div'),
				 	nScrollFoot = document.createElement('div'),
				 	nScrollFootInner = document.createElement('div'),
				 	nScrollHeadTable = oSettings.nTable.cloneNode(false),
				 	nScrollFootTable = oSettings.nTable.cloneNode(false),
					nThead = oSettings.nTable.getElementsByTagName('thead')[0],
				 	nTfoot = oSettings.nTable.getElementsByTagName('tfoot').length === 0 ? null : 
						oSettings.nTable.getElementsByTagName('tfoot')[0],
					oClasses = oSettings.oClasses;
				
				nScrollHead.appendChild( nScrollHeadInner );
				nScrollFoot.appendChild( nScrollFootInner );
				nScrollBody.appendChild( oSettings.nTable );
				nScroller.appendChild( nScrollHead );
				nScroller.appendChild( nScrollBody );
				nScrollHeadInner.appendChild( nScrollHeadTable );
				nScrollHeadTable.appendChild( nThead );
				if ( nTfoot !== null )
				{
					nScroller.appendChild( nScrollFoot );
					nScrollFootInner.appendChild( nScrollFootTable );
					nScrollFootTable.appendChild( nTfoot );
				}
				
				nScroller.className = oClasses.sScrollWrapper;
				nScrollHead.className = oClasses.sScrollHead;
				nScrollHeadInner.className = oClasses.sScrollHeadInner;
				nScrollBody.className = oClasses.sScrollBody;
				nScrollFoot.className = oClasses.sScrollFoot;
				nScrollFootInner.className = oClasses.sScrollFootInner;
				
				if ( oSettings.oScroll.bAutoCss )
				{
					nScrollHead.style.overflow = "hidden";
					nScrollHead.style.position = "relative";
					nScrollFoot.style.overflow = "hidden";
					nScrollBody.style.overflow = "auto";
				}
				
				nScrollHead.style.border = "0";
				nScrollHead.style.width = "100%";
				nScrollFoot.style.border = "0";
				nScrollHeadInner.style.width = oSettings.oScroll.sXInner !== "" ?
					oSettings.oScroll.sXInner : "100%"; /* will be overwritten */
				
				/* Modify attributes to respect the clones */
				nScrollHeadTable.removeAttribute('id');
				nScrollHeadTable.style.marginLeft = "0";
				oSettings.nTable.style.marginLeft = "0";
				if ( nTfoot !== null )
				{
					nScrollFootTable.removeAttribute('id');
					nScrollFootTable.style.marginLeft = "0";
				}
				
				/* Move caption elements from the body to the header, footer or leave where it is
				 * depending on the configuration. Note that the DTD says there can be only one caption */
				var nCaption = $(oSettings.nTable).children('caption');
				if ( nCaption.length > 0 )
				{
					nCaption = nCaption[0];
					if ( nCaption._captionSide === "top" )
					{
						nScrollHeadTable.appendChild( nCaption );
					}
					else if ( nCaption._captionSide === "bottom" && nTfoot )
					{
						nScrollFootTable.appendChild( nCaption );
					}
				}
				
				/*
				 * Sizing
				 */
				/* When x-scrolling add the width and a scroller to move the header with the body */
				if ( oSettings.oScroll.sX !== "" )
				{
					nScrollHead.style.width = _fnStringToCss( oSettings.oScroll.sX );
					nScrollBody.style.width = _fnStringToCss( oSettings.oScroll.sX );
					
					if ( nTfoot !== null )
					{
						nScrollFoot.style.width = _fnStringToCss( oSettings.oScroll.sX );	
					}
					
					/* When the body is scrolled, then we also want to scroll the headers */
					$(nScrollBody).scroll( function (e) {
						nScrollHead.scrollLeft = this.scrollLeft;
						
						if ( nTfoot !== null )
						{
							nScrollFoot.scrollLeft = this.scrollLeft;
						}
					} );
				}
				
				/* When yscrolling, add the height */
				if ( oSettings.oScroll.sY !== "" )
				{
					nScrollBody.style.height = _fnStringToCss( oSettings.oScroll.sY );
				}
				
				/* Redraw - align columns across the tables */
				oSettings.aoDrawCallback.push( {
					"fn": _fnScrollDraw,
					"sName": "scrolling"
				} );
				
				/* Infinite scrolling event handlers */
				if ( oSettings.oScroll.bInfinite )
				{
					$(nScrollBody).scroll( function() {
						/* Use a blocker to stop scrolling from loading more data while other data is still loading */
						if ( !oSettings.bDrawing && $(this).scrollTop() !== 0 )
						{
							/* Check if we should load the next data set */
							if ( $(this).scrollTop() + $(this).height() > 
								$(oSettings.nTable).height() - oSettings.oScroll.iLoadGap )
							{
								/* Only do the redraw if we have to - we might be at the end of the data */
								if ( oSettings.fnDisplayEnd() < oSettings.fnRecordsDisplay() )
								{
									_fnPageChange( oSettings, 'next' );
									_fnCalculateEnd( oSettings );
									_fnDraw( oSettings );
								}
							}
						}
					} );
				}
				
				oSettings.nScrollHead = nScrollHead;
				oSettings.nScrollFoot = nScrollFoot;
				
				return nScroller;
			}
			
			
			/**
			 * Update the various tables for resizing. It's a bit of a pig this function, but
			 * basically the idea to:
			 *   1. Re-create the table inside the scrolling div
			 *   2. Take live measurements from the DOM
			 *   3. Apply the measurements
			 *   4. Clean up
			 *  @param {object} o dataTables settings object
			 *  @returns {node} Node to add to the DOM
			 *  @memberof DataTable#oApi
			 */
			function _fnScrollDraw ( o )
			{
				var
					nScrollHeadInner = o.nScrollHead.getElementsByTagName('div')[0],
					nScrollHeadTable = nScrollHeadInner.getElementsByTagName('table')[0],
					nScrollBody = o.nTable.parentNode,
					i, iLen, j, jLen, anHeadToSize, anHeadSizers, anFootSizers, anFootToSize, oStyle, iVis,
					nTheadSize, nTfootSize,
					iWidth, aApplied=[], aAppliedFooter=[], iSanityWidth,
					nScrollFootInner = (o.nTFoot !== null) ? o.nScrollFoot.getElementsByTagName('div')[0] : null,
					nScrollFootTable = (o.nTFoot !== null) ? nScrollFootInner.getElementsByTagName('table')[0] : null,
					ie67 = o.oBrowser.bScrollOversize,
					zeroOut = function(nSizer) {
						oStyle = nSizer.style;
						oStyle.paddingTop = "0";
						oStyle.paddingBottom = "0";
						oStyle.borderTopWidth = "0";
						oStyle.borderBottomWidth = "0";
						oStyle.height = 0;
					};
				
				/*
				 * 1. Re-create the table inside the scrolling div
				 */
				
				/* Remove the old minimised thead and tfoot elements in the inner table */
				$(o.nTable).children('thead, tfoot').remove();
			
				/* Clone the current header and footer elements and then place it into the inner table */
				nTheadSize = $(o.nTHead).clone()[0];
				o.nTable.insertBefore( nTheadSize, o.nTable.childNodes[0] );
				anHeadToSize = o.nTHead.getElementsByTagName('tr');
				anHeadSizers = nTheadSize.getElementsByTagName('tr');
				
				if ( o.nTFoot !== null )
				{
					nTfootSize = $(o.nTFoot).clone()[0];
					o.nTable.insertBefore( nTfootSize, o.nTable.childNodes[1] );
					anFootToSize = o.nTFoot.getElementsByTagName('tr');
					anFootSizers = nTfootSize.getElementsByTagName('tr');
				}
				
				/*
				 * 2. Take live measurements from the DOM - do not alter the DOM itself!
				 */
				
				/* Remove old sizing and apply the calculated column widths
				 * Get the unique column headers in the newly created (cloned) header. We want to apply the
				 * calculated sizes to this header
				 */
				if ( o.oScroll.sX === "" )
				{
					nScrollBody.style.width = '100%';
					nScrollHeadInner.parentNode.style.width = '100%';
				}
				
				var nThs = _fnGetUniqueThs( o, nTheadSize );
				for ( i=0, iLen=nThs.length ; i<iLen ; i++ )
				{
					iVis = _fnVisibleToColumnIndex( o, i );
					nThs[i].style.width = o.aoColumns[iVis].sWidth;
				}
				
				if ( o.nTFoot !== null )
				{
					_fnApplyToChildren( function(n) {
						n.style.width = "";
					}, anFootSizers );
				}
			
				// If scroll collapse is enabled, when we put the headers back into the body for sizing, we
				// will end up forcing the scrollbar to appear, making our measurements wrong for when we
				// then hide it (end of this function), so add the header height to the body scroller.
				if ( o.oScroll.bCollapse && o.oScroll.sY !== "" )
				{
					nScrollBody.style.height = (nScrollBody.offsetHeight + o.nTHead.offsetHeight)+"px";
				}
				
				/* Size the table as a whole */
				iSanityWidth = $(o.nTable).outerWidth();
				if ( o.oScroll.sX === "" )
				{
					/* No x scrolling */
					o.nTable.style.width = "100%";
					
					/* I know this is rubbish - but IE7 will make the width of the table when 100% include
					 * the scrollbar - which is shouldn't. When there is a scrollbar we need to take this
					 * into account.
					 */
					if ( ie67 && ($('tbody', nScrollBody).height() > nScrollBody.offsetHeight || 
						$(nScrollBody).css('overflow-y') == "scroll")  )
					{
						o.nTable.style.width = _fnStringToCss( $(o.nTable).outerWidth() - o.oScroll.iBarWidth);
					}
				}
				else
				{
					if ( o.oScroll.sXInner !== "" )
					{
						/* x scroll inner has been given - use it */
						o.nTable.style.width = _fnStringToCss(o.oScroll.sXInner);
					}
					else if ( iSanityWidth == $(nScrollBody).width() &&
					   $(nScrollBody).height() < $(o.nTable).height() )
					{
						/* There is y-scrolling - try to take account of the y scroll bar */
						o.nTable.style.width = _fnStringToCss( iSanityWidth-o.oScroll.iBarWidth );
						if ( $(o.nTable).outerWidth() > iSanityWidth-o.oScroll.iBarWidth )
						{
							/* Not possible to take account of it */
							o.nTable.style.width = _fnStringToCss( iSanityWidth );
						}
					}
					else
					{
						/* All else fails */
						o.nTable.style.width = _fnStringToCss( iSanityWidth );
					}
				}
				
				/* Recalculate the sanity width - now that we've applied the required width, before it was
				 * a temporary variable. This is required because the column width calculation is done
				 * before this table DOM is created.
				 */
				iSanityWidth = $(o.nTable).outerWidth();
				
				/* We want the hidden header to have zero height, so remove padding and borders. Then
				 * set the width based on the real headers
				 */
				
				// Apply all styles in one pass. Invalidates layout only once because we don't read any 
				// DOM properties.
				_fnApplyToChildren( zeroOut, anHeadSizers );
				 
				// Read all widths in next pass. Forces layout only once because we do not change 
				// any DOM properties.
				_fnApplyToChildren( function(nSizer) {
					aApplied.push( _fnStringToCss( $(nSizer).width() ) );
				}, anHeadSizers );
				 
				// Apply all widths in final pass. Invalidates layout only once because we do not
				// read any DOM properties.
				_fnApplyToChildren( function(nToSize, i) {
					nToSize.style.width = aApplied[i];
				}, anHeadToSize );
			
				$(anHeadSizers).height(0);
				
				/* Same again with the footer if we have one */
				if ( o.nTFoot !== null )
				{
					_fnApplyToChildren( zeroOut, anFootSizers );
					 
					_fnApplyToChildren( function(nSizer) {
						aAppliedFooter.push( _fnStringToCss( $(nSizer).width() ) );
					}, anFootSizers );
					 
					_fnApplyToChildren( function(nToSize, i) {
						nToSize.style.width = aAppliedFooter[i];
					}, anFootToSize );
			
					$(anFootSizers).height(0);
				}
				
				/*
				 * 3. Apply the measurements
				 */
				
				/* "Hide" the header and footer that we used for the sizing. We want to also fix their width
				 * to what they currently are
				 */
				_fnApplyToChildren( function(nSizer, i) {
					nSizer.innerHTML = "";
					nSizer.style.width = aApplied[i];
				}, anHeadSizers );
				
				if ( o.nTFoot !== null )
				{
					_fnApplyToChildren( function(nSizer, i) {
						nSizer.innerHTML = "";
						nSizer.style.width = aAppliedFooter[i];
					}, anFootSizers );
				}
				
				/* Sanity check that the table is of a sensible width. If not then we are going to get
				 * misalignment - try to prevent this by not allowing the table to shrink below its min width
				 */
				if ( $(o.nTable).outerWidth() < iSanityWidth )
				{
					/* The min width depends upon if we have a vertical scrollbar visible or not */
					var iCorrection = ((nScrollBody.scrollHeight > nScrollBody.offsetHeight || 
						$(nScrollBody).css('overflow-y') == "scroll")) ?
							iSanityWidth+o.oScroll.iBarWidth : iSanityWidth;
					
					/* IE6/7 are a law unto themselves... */
					if ( ie67 && (nScrollBody.scrollHeight > 
						nScrollBody.offsetHeight || $(nScrollBody).css('overflow-y') == "scroll")  )
					{
						o.nTable.style.width = _fnStringToCss( iCorrection-o.oScroll.iBarWidth );
					}
					
					/* Apply the calculated minimum width to the table wrappers */
					nScrollBody.style.width = _fnStringToCss( iCorrection );
					o.nScrollHead.style.width = _fnStringToCss( iCorrection );
					
					if ( o.nTFoot !== null )
					{
						o.nScrollFoot.style.width = _fnStringToCss( iCorrection );
					}
					
					/* And give the user a warning that we've stopped the table getting too small */
					if ( o.oScroll.sX === "" )
					{
						_fnLog( o, 1, "The table cannot fit into the current element which will cause column"+
							" misalignment. The table has been drawn at its minimum possible width." );
					}
					else if ( o.oScroll.sXInner !== "" )
					{
						_fnLog( o, 1, "The table cannot fit into the current element which will cause column"+
							" misalignment. Increase the sScrollXInner value or remove it to allow automatic"+
							" calculation" );
					}
				}
				else
				{
					nScrollBody.style.width = _fnStringToCss( '100%' );
					o.nScrollHead.style.width = _fnStringToCss( '100%' );
					
					if ( o.nTFoot !== null )
					{
						o.nScrollFoot.style.width = _fnStringToCss( '100%' );
					}
				}
				
				
				/*
				 * 4. Clean up
				 */
				if ( o.oScroll.sY === "" )
				{
					/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
					 * the scrollbar height from the visible display, rather than adding it on. We need to
					 * set the height in order to sort this. Don't want to do it in any other browsers.
					 */
					if ( ie67 )
					{
						nScrollBody.style.height = _fnStringToCss( o.nTable.offsetHeight+o.oScroll.iBarWidth );
					}
				}
				
				if ( o.oScroll.sY !== "" && o.oScroll.bCollapse )
				{
					nScrollBody.style.height = _fnStringToCss( o.oScroll.sY );
					
					var iExtra = (o.oScroll.sX !== "" && o.nTable.offsetWidth > nScrollBody.offsetWidth) ?
					 	o.oScroll.iBarWidth : 0;
					if ( o.nTable.offsetHeight < nScrollBody.offsetHeight )
					{
						nScrollBody.style.height = _fnStringToCss( o.nTable.offsetHeight+iExtra );
					}
				}
				
				/* Finally set the width's of the header and footer tables */
				var iOuterWidth = $(o.nTable).outerWidth();
				nScrollHeadTable.style.width = _fnStringToCss( iOuterWidth );
				nScrollHeadInner.style.width = _fnStringToCss( iOuterWidth );
			
				// Figure out if there are scrollbar present - if so then we need a the header and footer to
				// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
				var bScrolling = $(o.nTable).height() > nScrollBody.clientHeight || $(nScrollBody).css('overflow-y') == "scroll";
				nScrollHeadInner.style.paddingRight = bScrolling ? o.oScroll.iBarWidth+"px" : "0px";
				
				if ( o.nTFoot !== null )
				{
					nScrollFootTable.style.width = _fnStringToCss( iOuterWidth );
					nScrollFootInner.style.width = _fnStringToCss( iOuterWidth );
					nScrollFootInner.style.paddingRight = bScrolling ? o.oScroll.iBarWidth+"px" : "0px";
				}
			
				/* Adjust the position of the header in case we loose the y-scrollbar */
				$(nScrollBody).scroll();
				
				/* If sorting or filtering has occurred, jump the scrolling back to the top */
				if ( o.bSorted || o.bFiltered )
				{
					nScrollBody.scrollTop = 0;
				}
			}
			
			
			/**
			 * Apply a given function to the display child nodes of an element array (typically
			 * TD children of TR rows
			 *  @param {function} fn Method to apply to the objects
			 *  @param array {nodes} an1 List of elements to look through for display children
			 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
			 *  @memberof DataTable#oApi
			 */
			function _fnApplyToChildren( fn, an1, an2 )
			{
				var index=0, i=0, iLen=an1.length;
				var nNode1, nNode2;
			
				while ( i < iLen )
				{
					nNode1 = an1[i].firstChild;
					nNode2 = an2 ? an2[i].firstChild : null;
					while ( nNode1 )
					{
						if ( nNode1.nodeType === 1 )
						{
							if ( an2 )
							{
								fn( nNode1, nNode2, index );
							}
							else
							{
								fn( nNode1, index );
							}
							index++;
						}
						nNode1 = nNode1.nextSibling;
						nNode2 = an2 ? nNode2.nextSibling : null;
					}
					i++;
				}
			}
			
			/**
			 * Convert a CSS unit width to pixels (e.g. 2em)
			 *  @param {string} sWidth width to be converted
			 *  @param {node} nParent parent to get the with for (required for relative widths) - optional
			 *  @returns {int} iWidth width in pixels
			 *  @memberof DataTable#oApi
			 */
			function _fnConvertToWidth ( sWidth, nParent )
			{
				if ( !sWidth || sWidth === null || sWidth === '' )
				{
					return 0;
				}
				
				if ( !nParent )
				{
					nParent = document.body;
				}
				
				var iWidth;
				var nTmp = document.createElement( "div" );
				nTmp.style.width = _fnStringToCss( sWidth );
				
				nParent.appendChild( nTmp );
				iWidth = nTmp.offsetWidth;
				nParent.removeChild( nTmp );
				
				return ( iWidth );
			}
			
			
			/**
			 * Calculate the width of columns for the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnCalculateColumnWidths ( oSettings )
			{
				var iTableWidth = oSettings.nTable.offsetWidth;
				var iUserInputs = 0;
				var iTmpWidth;
				var iVisibleColumns = 0;
				var iColums = oSettings.aoColumns.length;
				var i, iIndex, iCorrector, iWidth;
				var oHeaders = $('th', oSettings.nTHead);
				var widthAttr = oSettings.nTable.getAttribute('width');
				var nWrapper = oSettings.nTable.parentNode;
				
				/* Convert any user input sizes into pixel sizes */
				for ( i=0 ; i<iColums ; i++ )
				{
					if ( oSettings.aoColumns[i].bVisible )
					{
						iVisibleColumns++;
						
						if ( oSettings.aoColumns[i].sWidth !== null )
						{
							iTmpWidth = _fnConvertToWidth( oSettings.aoColumns[i].sWidthOrig, 
								nWrapper );
							if ( iTmpWidth !== null )
							{
								oSettings.aoColumns[i].sWidth = _fnStringToCss( iTmpWidth );
							}
								
							iUserInputs++;
						}
					}
				}
				
				/* If the number of columns in the DOM equals the number that we have to process in 
				 * DataTables, then we can use the offsets that are created by the web-browser. No custom 
				 * sizes can be set in order for this to happen, nor scrolling used
				 */
				if ( iColums == oHeaders.length && iUserInputs === 0 && iVisibleColumns == iColums &&
					oSettings.oScroll.sX === "" && oSettings.oScroll.sY === "" )
				{
					for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
					{
						iTmpWidth = $(oHeaders[i]).width();
						if ( iTmpWidth !== null )
						{
							oSettings.aoColumns[i].sWidth = _fnStringToCss( iTmpWidth );
						}
					}
				}
				else
				{
					/* Otherwise we are going to have to do some calculations to get the width of each column.
					 * Construct a 1 row table with the widest node in the data, and any user defined widths,
					 * then insert it into the DOM and allow the browser to do all the hard work of
					 * calculating table widths.
					 */
					var
						nCalcTmp = oSettings.nTable.cloneNode( false ),
						nTheadClone = oSettings.nTHead.cloneNode(true),
						nBody = document.createElement( 'tbody' ),
						nTr = document.createElement( 'tr' ),
						nDivSizing;
					
					nCalcTmp.removeAttribute( "id" );
					nCalcTmp.appendChild( nTheadClone );
					if ( oSettings.nTFoot !== null )
					{
						nCalcTmp.appendChild( oSettings.nTFoot.cloneNode(true) );
						_fnApplyToChildren( function(n) {
							n.style.width = "";
						}, nCalcTmp.getElementsByTagName('tr') );
					}
					
					nCalcTmp.appendChild( nBody );
					nBody.appendChild( nTr );
					
					/* Remove any sizing that was previously applied by the styles */
					var jqColSizing = $('thead th', nCalcTmp);
					if ( jqColSizing.length === 0 )
					{
						jqColSizing = $('tbody tr:eq(0)>td', nCalcTmp);
					}
			
					/* Apply custom sizing to the cloned header */
					var nThs = _fnGetUniqueThs( oSettings, nTheadClone );
					iCorrector = 0;
					for ( i=0 ; i<iColums ; i++ )
					{
						var oColumn = oSettings.aoColumns[i];
						if ( oColumn.bVisible && oColumn.sWidthOrig !== null && oColumn.sWidthOrig !== "" )
						{
							nThs[i-iCorrector].style.width = _fnStringToCss( oColumn.sWidthOrig );
						}
						else if ( oColumn.bVisible )
						{
							nThs[i-iCorrector].style.width = "";
						}
						else
						{
							iCorrector++;
						}
					}
			
					/* Find the biggest td for each column and put it into the table */
					for ( i=0 ; i<iColums ; i++ )
					{
						if ( oSettings.aoColumns[i].bVisible )
						{
							var nTd = _fnGetWidestNode( oSettings, i );
							if ( nTd !== null )
							{
								nTd = nTd.cloneNode(true);
								if ( oSettings.aoColumns[i].sContentPadding !== "" )
								{
									nTd.innerHTML += oSettings.aoColumns[i].sContentPadding;
								}
								nTr.appendChild( nTd );
							}
						}
					}
					
					/* Build the table and 'display' it */
					nWrapper.appendChild( nCalcTmp );
					
					/* When scrolling (X or Y) we want to set the width of the table as appropriate. However,
					 * when not scrolling leave the table width as it is. This results in slightly different,
					 * but I think correct behaviour
					 */
					if ( oSettings.oScroll.sX !== "" && oSettings.oScroll.sXInner !== "" )
					{
						nCalcTmp.style.width = _fnStringToCss(oSettings.oScroll.sXInner);
					}
					else if ( oSettings.oScroll.sX !== "" )
					{
						nCalcTmp.style.width = "";
						if ( $(nCalcTmp).width() < nWrapper.offsetWidth )
						{
							nCalcTmp.style.width = _fnStringToCss( nWrapper.offsetWidth );
						}
					}
					else if ( oSettings.oScroll.sY !== "" )
					{
						nCalcTmp.style.width = _fnStringToCss( nWrapper.offsetWidth );
					}
					else if ( widthAttr )
					{
						nCalcTmp.style.width = _fnStringToCss( widthAttr );
					}
					nCalcTmp.style.visibility = "hidden";
					
					/* Scrolling considerations */
					_fnScrollingWidthAdjust( oSettings, nCalcTmp );
					
					/* Read the width's calculated by the browser and store them for use by the caller. We
					 * first of all try to use the elements in the body, but it is possible that there are
					 * no elements there, under which circumstances we use the header elements
					 */
					var oNodes = $("tbody tr:eq(0)", nCalcTmp).children();
					if ( oNodes.length === 0 )
					{
						oNodes = _fnGetUniqueThs( oSettings, $('thead', nCalcTmp)[0] );
					}
			
					/* Browsers need a bit of a hand when a width is assigned to any columns when 
					 * x-scrolling as they tend to collapse the table to the min-width, even if
					 * we sent the column widths. So we need to keep track of what the table width
					 * should be by summing the user given values, and the automatic values
					 */
					if ( oSettings.oScroll.sX !== "" )
					{
						var iTotal = 0;
						iCorrector = 0;
						for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
						{
							if ( oSettings.aoColumns[i].bVisible )
							{
								if ( oSettings.aoColumns[i].sWidthOrig === null )
								{
									iTotal += $(oNodes[iCorrector]).outerWidth();
								}
								else
								{
									iTotal += parseInt(oSettings.aoColumns[i].sWidth.replace('px',''), 10) +
										($(oNodes[iCorrector]).outerWidth() - $(oNodes[iCorrector]).width());
								}
								iCorrector++;
							}
						}
						
						nCalcTmp.style.width = _fnStringToCss( iTotal );
						oSettings.nTable.style.width = _fnStringToCss( iTotal );
					}
			
					iCorrector = 0;
					for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
					{
						if ( oSettings.aoColumns[i].bVisible )
						{
							iWidth = $(oNodes[iCorrector]).width();
							if ( iWidth !== null && iWidth > 0 )
							{
								oSettings.aoColumns[i].sWidth = _fnStringToCss( iWidth );
							}
							iCorrector++;
						}
					}
			
					var cssWidth = $(nCalcTmp).css('width');
					oSettings.nTable.style.width = (cssWidth.indexOf('%') !== -1) ?
					    cssWidth : _fnStringToCss( $(nCalcTmp).outerWidth() );
					nCalcTmp.parentNode.removeChild( nCalcTmp );
				}
			
				if ( widthAttr )
				{
					oSettings.nTable.style.width = _fnStringToCss( widthAttr );
				}
			}
			
			
			/**
			 * Adjust a table's width to take account of scrolling
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} n table node
			 *  @memberof DataTable#oApi
			 */
			function _fnScrollingWidthAdjust ( oSettings, n )
			{
				if ( oSettings.oScroll.sX === "" && oSettings.oScroll.sY !== "" )
				{
					/* When y-scrolling only, we want to remove the width of the scroll bar so the table
					 * + scroll bar will fit into the area avaialble.
					 */
					var iOrigWidth = $(n).width();
					n.style.width = _fnStringToCss( $(n).outerWidth()-oSettings.oScroll.iBarWidth );
				}
				else if ( oSettings.oScroll.sX !== "" )
				{
					/* When x-scrolling both ways, fix the table at it's current size, without adjusting */
					n.style.width = _fnStringToCss( $(n).outerWidth() );
				}
			}
			
			
			/**
			 * Get the widest node
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iCol column of interest
			 *  @returns {node} widest table node
			 *  @memberof DataTable#oApi
			 */
			function _fnGetWidestNode( oSettings, iCol )
			{
				var iMaxIndex = _fnGetMaxLenString( oSettings, iCol );
				if ( iMaxIndex < 0 )
				{
					return null;
				}
			
				if ( oSettings.aoData[iMaxIndex].nTr === null )
				{
					var n = document.createElement('td');
					n.innerHTML = _fnGetCellData( oSettings, iMaxIndex, iCol, '' );
					return n;
				}
				return _fnGetTdNodes(oSettings, iMaxIndex)[iCol];
			}
			
			
			/**
			 * Get the maximum strlen for each data column
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iCol column of interest
			 *  @returns {string} max string length for each column
			 *  @memberof DataTable#oApi
			 */
			function _fnGetMaxLenString( oSettings, iCol )
			{
				var iMax = -1;
				var iMaxIndex = -1;
				
				for ( var i=0 ; i<oSettings.aoData.length ; i++ )
				{
					var s = _fnGetCellData( oSettings, i, iCol, 'display' )+"";
					s = s.replace( /<.*?>/g, "" );
					if ( s.length > iMax )
					{
						iMax = s.length;
						iMaxIndex = i;
					}
				}
				
				return iMaxIndex;
			}
			
			
			/**
			 * Append a CSS unit (only if required) to a string
			 *  @param {array} aArray1 first array
			 *  @param {array} aArray2 second array
			 *  @returns {int} 0 if match, 1 if length is different, 2 if no match
			 *  @memberof DataTable#oApi
			 */
			function _fnStringToCss( s )
			{
				if ( s === null )
				{
					return "0px";
				}
				
				if ( typeof s == 'number' )
				{
					if ( s < 0 )
					{
						return "0px";
					}
					return s+"px";
				}
				
				/* Check if the last character is not 0-9 */
				var c = s.charCodeAt( s.length-1 );
				if (c < 0x30 || c > 0x39)
				{
					return s;
				}
				return s+"px";
			}
			
			
			/**
			 * Get the width of a scroll bar in this browser being used
			 *  @returns {int} width in pixels
			 *  @memberof DataTable#oApi
			 */
			function _fnScrollBarWidth ()
			{  
				var inner = document.createElement('p');
				var style = inner.style;
				style.width = "100%";
				style.height = "200px";
				style.padding = "0px";
				
				var outer = document.createElement('div');
				style = outer.style;
				style.position = "absolute";
				style.top = "0px";
				style.left = "0px";
				style.visibility = "hidden";
				style.width = "200px";
				style.height = "150px";
				style.padding = "0px";
				style.overflow = "hidden";
				outer.appendChild(inner);
				
				document.body.appendChild(outer);
				var w1 = inner.offsetWidth;
				outer.style.overflow = 'scroll';
				var w2 = inner.offsetWidth;
				if ( w1 == w2 )
				{
					w2 = outer.clientWidth;
				}
				
				document.body.removeChild(outer);
				return (w1 - w2);  
			}
			
			/**
			 * Change the order of the table
			 *  @param {object} oSettings dataTables settings object
			 *  @param {bool} bApplyClasses optional - should we apply classes or not
			 *  @memberof DataTable#oApi
			 */
			function _fnSort ( oSettings, bApplyClasses )
			{
				var
					i, iLen, j, jLen, k, kLen,
					sDataType, nTh,
					aaSort = [],
				 	aiOrig = [],
					oSort = DataTable.ext.oSort,
					aoData = oSettings.aoData,
					aoColumns = oSettings.aoColumns,
					oAria = oSettings.oLanguage.oAria;
				
				/* No sorting required if server-side or no sorting array */
				if ( !oSettings.oFeatures.bServerSide && 
					(oSettings.aaSorting.length !== 0 || oSettings.aaSortingFixed !== null) )
				{
					aaSort = ( oSettings.aaSortingFixed !== null ) ?
						oSettings.aaSortingFixed.concat( oSettings.aaSorting ) :
						oSettings.aaSorting.slice();
					
					/* If there is a sorting data type, and a function belonging to it, then we need to
					 * get the data from the developer's function and apply it for this column
					 */
					for ( i=0 ; i<aaSort.length ; i++ )
					{
						var iColumn = aaSort[i][0];
						var iVisColumn = _fnColumnIndexToVisible( oSettings, iColumn );
						sDataType = oSettings.aoColumns[ iColumn ].sSortDataType;
						if ( DataTable.ext.afnSortData[sDataType] )
						{
							var aData = DataTable.ext.afnSortData[sDataType].call( 
								oSettings.oInstance, oSettings, iColumn, iVisColumn
							);
							if ( aData.length === aoData.length )
							{
								for ( j=0, jLen=aoData.length ; j<jLen ; j++ )
								{
									_fnSetCellData( oSettings, j, iColumn, aData[j] );
								}
							}
							else
							{
								_fnLog( oSettings, 0, "Returned data sort array (col "+iColumn+") is the wrong length" );
							}
						}
					}
					
					/* Create a value - key array of the current row positions such that we can use their
					 * current position during the sort, if values match, in order to perform stable sorting
					 */
					for ( i=0, iLen=oSettings.aiDisplayMaster.length ; i<iLen ; i++ )
					{
						aiOrig[ oSettings.aiDisplayMaster[i] ] = i;
					}
			
					/* Build an internal data array which is specific to the sort, so we can get and prep
					 * the data to be sorted only once, rather than needing to do it every time the sorting
					 * function runs. This make the sorting function a very simple comparison
					 */
					var iSortLen = aaSort.length;
					var fnSortFormat, aDataSort;
					for ( i=0, iLen=aoData.length ; i<iLen ; i++ )
					{
						for ( j=0 ; j<iSortLen ; j++ )
						{
							aDataSort = aoColumns[ aaSort[j][0] ].aDataSort;
			
							for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
							{
								sDataType = aoColumns[ aDataSort[k] ].sType;
								fnSortFormat = oSort[ (sDataType ? sDataType : 'string')+"-pre" ];
								
								aoData[i]._aSortData[ aDataSort[k] ] = fnSortFormat ?
									fnSortFormat( _fnGetCellData( oSettings, i, aDataSort[k], 'sort' ) ) :
									_fnGetCellData( oSettings, i, aDataSort[k], 'sort' );
							}
						}
					}
					
					/* Do the sort - here we want multi-column sorting based on a given data source (column)
					 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
					 * follow on it's own, but this is what we want (example two column sorting):
					 *  fnLocalSorting = function(a,b){
					 *  	var iTest;
					 *  	iTest = oSort['string-asc']('data11', 'data12');
					 *  	if (iTest !== 0)
					 *  		return iTest;
					 *    iTest = oSort['numeric-desc']('data21', 'data22');
					 *    if (iTest !== 0)
					 *  		return iTest;
					 *  	return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
					 *  }
					 * Basically we have a test for each sorting column, if the data in that column is equal,
					 * test the next column. If all columns match, then we use a numeric sort on the row 
					 * positions in the original data array to provide a stable sort.
					 */
					oSettings.aiDisplayMaster.sort( function ( a, b ) {
						var k, l, lLen, iTest, aDataSort, sDataType;
						for ( k=0 ; k<iSortLen ; k++ )
						{
							aDataSort = aoColumns[ aaSort[k][0] ].aDataSort;
			
							for ( l=0, lLen=aDataSort.length ; l<lLen ; l++ )
							{
								sDataType = aoColumns[ aDataSort[l] ].sType;
								
								iTest = oSort[ (sDataType ? sDataType : 'string')+"-"+aaSort[k][1] ](
									aoData[a]._aSortData[ aDataSort[l] ],
									aoData[b]._aSortData[ aDataSort[l] ]
								);
							
								if ( iTest !== 0 )
								{
									return iTest;
								}
							}
						}
						
						return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
					} );
				}
				
				/* Alter the sorting classes to take account of the changes */
				if ( (bApplyClasses === undefined || bApplyClasses) && !oSettings.oFeatures.bDeferRender )
				{
					_fnSortingClasses( oSettings );
				}
			
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					var sTitle = aoColumns[i].sTitle.replace( /<.*?>/g, "" );
					nTh = aoColumns[i].nTh;
					nTh.removeAttribute('aria-sort');
					nTh.removeAttribute('aria-label');
					
					/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
					if ( aoColumns[i].bSortable )
					{
						if ( aaSort.length > 0 && aaSort[0][0] == i )
						{
							nTh.setAttribute('aria-sort', aaSort[0][1]=="asc" ? "ascending" : "descending" );
							
							var nextSort = (aoColumns[i].asSorting[ aaSort[0][2]+1 ]) ? 
								aoColumns[i].asSorting[ aaSort[0][2]+1 ] : aoColumns[i].asSorting[0];
							nTh.setAttribute('aria-label', sTitle+
								(nextSort=="asc" ? oAria.sSortAscending : oAria.sSortDescending) );
						}
						else
						{
							nTh.setAttribute('aria-label', sTitle+
								(aoColumns[i].asSorting[0]=="asc" ? oAria.sSortAscending : oAria.sSortDescending) );
						}
					}
					else
					{
						nTh.setAttribute('aria-label', sTitle);
					}
				}
				
				/* Tell the draw function that we have sorted the data */
				oSettings.bSorted = true;
				$(oSettings.oInstance).trigger('sort', oSettings);
				
				/* Copy the master data into the draw array and re-draw */
				if ( oSettings.oFeatures.bFilter )
				{
					/* _fnFilter() will redraw the table for us */
					_fnFilterComplete( oSettings, oSettings.oPreviousSearch, 1 );
				}
				else
				{
					oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
					oSettings._iDisplayStart = 0; /* reset display back to page 0 */
					_fnCalculateEnd( oSettings );
					_fnDraw( oSettings );
				}
			}
			
			
			/**
			 * Attach a sort handler (click) to a node
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} nNode node to attach the handler to
			 *  @param {int} iDataIndex column sorting index
			 *  @param {function} [fnCallback] callback function
			 *  @memberof DataTable#oApi
			 */
			function _fnSortAttachListener ( oSettings, nNode, iDataIndex, fnCallback )
			{
				_fnBindAction( nNode, {}, function (e) {
					/* If the column is not sortable - don't to anything */
					if ( oSettings.aoColumns[iDataIndex].bSortable === false )
					{
						return;
					}
					
					/*
					 * This is a little bit odd I admit... I declare a temporary function inside the scope of
					 * _fnBuildHead and the click handler in order that the code presented here can be used 
					 * twice - once for when bProcessing is enabled, and another time for when it is 
					 * disabled, as we need to perform slightly different actions.
					 *   Basically the issue here is that the Javascript engine in modern browsers don't 
					 * appear to allow the rendering engine to update the display while it is still executing
					 * it's thread (well - it does but only after long intervals). This means that the 
					 * 'processing' display doesn't appear for a table sort. To break the js thread up a bit
					 * I force an execution break by using setTimeout - but this breaks the expected 
					 * thread continuation for the end-developer's point of view (their code would execute
					 * too early), so we only do it when we absolutely have to.
					 */
					var fnInnerSorting = function () {
						var iColumn, iNextSort;
						
						/* If the shift key is pressed then we are multiple column sorting */
						if ( e.shiftKey )
						{
							/* Are we already doing some kind of sort on this column? */
							var bFound = false;
							for ( var i=0 ; i<oSettings.aaSorting.length ; i++ )
							{
								if ( oSettings.aaSorting[i][0] == iDataIndex )
								{
									bFound = true;
									iColumn = oSettings.aaSorting[i][0];
									iNextSort = oSettings.aaSorting[i][2]+1;
									
									if ( !oSettings.aoColumns[iColumn].asSorting[iNextSort] )
									{
										/* Reached the end of the sorting options, remove from multi-col sort */
										oSettings.aaSorting.splice( i, 1 );
									}
									else
									{
										/* Move onto next sorting direction */
										oSettings.aaSorting[i][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];
										oSettings.aaSorting[i][2] = iNextSort;
									}
									break;
								}
							}
							
							/* No sort yet - add it in */
							if ( bFound === false )
							{
								oSettings.aaSorting.push( [ iDataIndex, 
									oSettings.aoColumns[iDataIndex].asSorting[0], 0 ] );
							}
						}
						else
						{
							/* If no shift key then single column sort */
							if ( oSettings.aaSorting.length == 1 && oSettings.aaSorting[0][0] == iDataIndex )
							{
								iColumn = oSettings.aaSorting[0][0];
								iNextSort = oSettings.aaSorting[0][2]+1;
								if ( !oSettings.aoColumns[iColumn].asSorting[iNextSort] )
								{
									iNextSort = 0;
								}
								oSettings.aaSorting[0][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];
								oSettings.aaSorting[0][2] = iNextSort;
							}
							else
							{
								oSettings.aaSorting.splice( 0, oSettings.aaSorting.length );
								oSettings.aaSorting.push( [ iDataIndex, 
									oSettings.aoColumns[iDataIndex].asSorting[0], 0 ] );
							}
						}
						
						/* Run the sort */
						_fnSort( oSettings );
					}; /* /fnInnerSorting */
					
					if ( !oSettings.oFeatures.bProcessing )
					{
						fnInnerSorting();
					}
					else
					{
						_fnProcessingDisplay( oSettings, true );
						setTimeout( function() {
							fnInnerSorting();
							if ( !oSettings.oFeatures.bServerSide )
							{
								_fnProcessingDisplay( oSettings, false );
							}
						}, 0 );
					}
					
					/* Call the user specified callback function - used for async user interaction */
					if ( typeof fnCallback == 'function' )
					{
						fnCallback( oSettings );
					}
				} );
			}
			
			
			/**
			 * Set the sorting classes on the header, Note: it is safe to call this function 
			 * when bSort and bSortClasses are false
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnSortingClasses( oSettings )
			{
				var i, iLen, j, jLen, iFound;
				var aaSort, sClass;
				var iColumns = oSettings.aoColumns.length;
				var oClasses = oSettings.oClasses;
				
				for ( i=0 ; i<iColumns ; i++ )
				{
					if ( oSettings.aoColumns[i].bSortable )
					{
						$(oSettings.aoColumns[i].nTh).removeClass( oClasses.sSortAsc +" "+ oClasses.sSortDesc +
							" "+ oSettings.aoColumns[i].sSortingClass );
					}
				}
				
				if ( oSettings.aaSortingFixed !== null )
				{
					aaSort = oSettings.aaSortingFixed.concat( oSettings.aaSorting );
				}
				else
				{
					aaSort = oSettings.aaSorting.slice();
				}
				
				/* Apply the required classes to the header */
				for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
				{
					if ( oSettings.aoColumns[i].bSortable )
					{
						sClass = oSettings.aoColumns[i].sSortingClass;
						iFound = -1;
						for ( j=0 ; j<aaSort.length ; j++ )
						{
							if ( aaSort[j][0] == i )
							{
								sClass = ( aaSort[j][1] == "asc" ) ?
									oClasses.sSortAsc : oClasses.sSortDesc;
								iFound = j;
								break;
							}
						}
						$(oSettings.aoColumns[i].nTh).addClass( sClass );
						
						if ( oSettings.bJUI )
						{
							/* jQuery UI uses extra markup */
							var jqSpan = $("span."+oClasses.sSortIcon,  oSettings.aoColumns[i].nTh);
							jqSpan.removeClass(oClasses.sSortJUIAsc +" "+ oClasses.sSortJUIDesc +" "+ 
								oClasses.sSortJUI +" "+ oClasses.sSortJUIAscAllowed +" "+ oClasses.sSortJUIDescAllowed );
							
							var sSpanClass;
							if ( iFound == -1 )
							{
							 	sSpanClass = oSettings.aoColumns[i].sSortingClassJUI;
							}
							else if ( aaSort[iFound][1] == "asc" )
							{
								sSpanClass = oClasses.sSortJUIAsc;
							}
							else
							{
								sSpanClass = oClasses.sSortJUIDesc;
							}
							
							jqSpan.addClass( sSpanClass );
						}
					}
					else
					{
						/* No sorting on this column, so add the base class. This will have been assigned by
						 * _fnAddColumn
						 */
						$(oSettings.aoColumns[i].nTh).addClass( oSettings.aoColumns[i].sSortingClass );
					}
				}
				
				/* 
				 * Apply the required classes to the table body
				 * Note that this is given as a feature switch since it can significantly slow down a sort
				 * on large data sets (adding and removing of classes is always slow at the best of times..)
				 * Further to this, note that this code is admittedly fairly ugly. It could be made a lot 
				 * simpler using jQuery selectors and add/removeClass, but that is significantly slower
				 * (on the order of 5 times slower) - hence the direct DOM manipulation here.
				 * Note that for deferred drawing we do use jQuery - the reason being that taking the first
				 * row found to see if the whole column needs processed can miss classes since the first
				 * column might be new.
				 */
				sClass = oClasses.sSortColumn;
				
				if ( oSettings.oFeatures.bSort && oSettings.oFeatures.bSortClasses )
				{
					var nTds = _fnGetTdNodes( oSettings );
					
					/* Determine what the sorting class for each column should be */
					var iClass, iTargetCol;
					var asClasses = [];
					for (i = 0; i < iColumns; i++)
					{
						asClasses.push("");
					}
					for (i = 0, iClass = 1; i < aaSort.length; i++)
					{
						iTargetCol = parseInt( aaSort[i][0], 10 );
						asClasses[iTargetCol] = sClass + iClass;
						
						if ( iClass < 3 )
						{
							iClass++;
						}
					}
					
					/* Make changes to the classes for each cell as needed */
					var reClass = new RegExp(sClass + "[123]");
					var sTmpClass, sCurrentClass, sNewClass;
					for ( i=0, iLen=nTds.length; i<iLen; i++ )
					{
						/* Determine which column we're looking at */
						iTargetCol = i % iColumns;
						
						/* What is the full list of classes now */
						sCurrentClass = nTds[i].className;
						/* What sorting class should be applied? */
						sNewClass = asClasses[iTargetCol];
						/* What would the new full list be if we did a replacement? */
						sTmpClass = sCurrentClass.replace(reClass, sNewClass);
						
						if ( sTmpClass != sCurrentClass )
						{
							/* We changed something */
							nTds[i].className = $.trim( sTmpClass );
						}
						else if ( sNewClass.length > 0 && sCurrentClass.indexOf(sNewClass) == -1 )
						{
							/* We need to add a class */
							nTds[i].className = sCurrentClass + " " + sNewClass;
						}
					}
				}
			}
			
			
			
			/**
			 * Save the state of a table in a cookie such that the page can be reloaded
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnSaveState ( oSettings )
			{
				if ( !oSettings.oFeatures.bStateSave || oSettings.bDestroying )
				{
					return;
				}
			
				/* Store the interesting variables */
				var i, iLen, bInfinite=oSettings.oScroll.bInfinite;
				var oState = {
					"iCreate":      new Date().getTime(),
					"iStart":       (bInfinite ? 0 : oSettings._iDisplayStart),
					"iEnd":         (bInfinite ? oSettings._iDisplayLength : oSettings._iDisplayEnd),
					"iLength":      oSettings._iDisplayLength,
					"aaSorting":    $.extend( true, [], oSettings.aaSorting ),
					"oSearch":      $.extend( true, {}, oSettings.oPreviousSearch ),
					"aoSearchCols": $.extend( true, [], oSettings.aoPreSearchCols ),
					"abVisCols":    []
				};
			
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					oState.abVisCols.push( oSettings.aoColumns[i].bVisible );
				}
			
				_fnCallbackFire( oSettings, "aoStateSaveParams", 'stateSaveParams', [oSettings, oState] );
				
				oSettings.fnStateSave.call( oSettings.oInstance, oSettings, oState );
			}
			
			
			/**
			 * Attempt to load a saved table state from a cookie
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} oInit DataTables init object so we can override settings
			 *  @memberof DataTable#oApi
			 */
			function _fnLoadState ( oSettings, oInit )
			{
				if ( !oSettings.oFeatures.bStateSave )
				{
					return;
				}
			
				var oData = oSettings.fnStateLoad.call( oSettings.oInstance, oSettings );
				if ( !oData )
				{
					return;
				}
				
				/* Allow custom and plug-in manipulation functions to alter the saved data set and
				 * cancelling of loading by returning false
				 */
				var abStateLoad = _fnCallbackFire( oSettings, 'aoStateLoadParams', 'stateLoadParams', [oSettings, oData] );
				if ( $.inArray( false, abStateLoad ) !== -1 )
				{
					return;
				}
				
				/* Store the saved state so it might be accessed at any time */
				oSettings.oLoadedState = $.extend( true, {}, oData );
				
				/* Restore key features */
				oSettings._iDisplayStart    = oData.iStart;
				oSettings.iInitDisplayStart = oData.iStart;
				oSettings._iDisplayEnd      = oData.iEnd;
				oSettings._iDisplayLength   = oData.iLength;
				oSettings.aaSorting         = oData.aaSorting.slice();
				oSettings.saved_aaSorting   = oData.aaSorting.slice();
				
				/* Search filtering  */
				$.extend( oSettings.oPreviousSearch, oData.oSearch );
				$.extend( true, oSettings.aoPreSearchCols, oData.aoSearchCols );
				
				/* Column visibility state
				 * Pass back visibility settings to the init handler, but to do not here override
				 * the init object that the user might have passed in
				 */
				oInit.saved_aoColumns = [];
				for ( var i=0 ; i<oData.abVisCols.length ; i++ )
				{
					oInit.saved_aoColumns[i] = {};
					oInit.saved_aoColumns[i].bVisible = oData.abVisCols[i];
				}
			
				_fnCallbackFire( oSettings, 'aoStateLoaded', 'stateLoaded', [oSettings, oData] );
			}
			
			
			/**
			 * Create a new cookie with a value to store the state of a table
			 *  @param {string} sName name of the cookie to create
			 *  @param {string} sValue the value the cookie should take
			 *  @param {int} iSecs duration of the cookie
			 *  @param {string} sBaseName sName is made up of the base + file name - this is the base
			 *  @param {function} fnCallback User definable function to modify the cookie
			 *  @memberof DataTable#oApi
			 */
			function _fnCreateCookie ( sName, sValue, iSecs, sBaseName, fnCallback )
			{
				var date = new Date();
				date.setTime( date.getTime()+(iSecs*1000) );
				
				/* 
				 * Shocking but true - it would appear IE has major issues with having the path not having
				 * a trailing slash on it. We need the cookie to be available based on the path, so we
				 * have to append the file name to the cookie name. Appalling. Thanks to vex for adding the
				 * patch to use at least some of the path
				 */
				var aParts = window.location.pathname.split('/');
				var sNameFile = sName + '_' + aParts.pop().replace(/[\/:]/g,"").toLowerCase();
				var sFullCookie, oData;
				
				if ( fnCallback !== null )
				{
					oData = (typeof $.parseJSON === 'function') ? 
						$.parseJSON( sValue ) : eval( '('+sValue+')' );
					sFullCookie = fnCallback( sNameFile, oData, date.toGMTString(),
						aParts.join('/')+"/" );
				}
				else
				{
					sFullCookie = sNameFile + "=" + encodeURIComponent(sValue) +
						"; expires=" + date.toGMTString() +"; path=" + aParts.join('/')+"/";
				}
				
				/* Are we going to go over the cookie limit of 4KiB? If so, try to delete a cookies
				 * belonging to DataTables.
				 */
				var
					aCookies =document.cookie.split(';'),
					iNewCookieLen = sFullCookie.split(';')[0].length,
					aOldCookies = [];
				
				if ( iNewCookieLen+document.cookie.length+10 > 4096 ) /* Magic 10 for padding */
				{
					for ( var i=0, iLen=aCookies.length ; i<iLen ; i++ )
					{
						if ( aCookies[i].indexOf( sBaseName ) != -1 )
						{
							/* It's a DataTables cookie, so eval it and check the time stamp */
							var aSplitCookie = aCookies[i].split('=');
							try {
								oData = eval( '('+decodeURIComponent(aSplitCookie[1])+')' );
			
								if ( oData && oData.iCreate )
								{
									aOldCookies.push( {
										"name": aSplitCookie[0],
										"time": oData.iCreate
									} );
								}
							}
							catch( e ) {}
						}
					}
			
					// Make sure we delete the oldest ones first
					aOldCookies.sort( function (a, b) {
						return b.time - a.time;
					} );
			
					// Eliminate as many old DataTables cookies as we need to
					while ( iNewCookieLen + document.cookie.length + 10 > 4096 ) {
						if ( aOldCookies.length === 0 ) {
							// Deleted all DT cookies and still not enough space. Can't state save
							return;
						}
						
						var old = aOldCookies.pop();
						document.cookie = old.name+"=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path="+
							aParts.join('/') + "/";
					}
				}
				
				document.cookie = sFullCookie;
			}
			
			
			/**
			 * Read an old cookie to get a cookie with an old table state
			 *  @param {string} sName name of the cookie to read
			 *  @returns {string} contents of the cookie - or null if no cookie with that name found
			 *  @memberof DataTable#oApi
			 */
			function _fnReadCookie ( sName )
			{
				var
					aParts = window.location.pathname.split('/'),
					sNameEQ = sName + '_' + aParts[aParts.length-1].replace(/[\/:]/g,"").toLowerCase() + '=',
				 	sCookieContents = document.cookie.split(';');
				
				for( var i=0 ; i<sCookieContents.length ; i++ )
				{
					var c = sCookieContents[i];
					
					while (c.charAt(0)==' ')
					{
						c = c.substring(1,c.length);
					}
					
					if (c.indexOf(sNameEQ) === 0)
					{
						return decodeURIComponent( c.substring(sNameEQ.length,c.length) );
					}
				}
				return null;
			}
			
			
			/**
			 * Return the settings object for a particular table
			 *  @param {node} nTable table we are using as a dataTable
			 *  @returns {object} Settings object - or null if not found
			 *  @memberof DataTable#oApi
			 */
			function _fnSettingsFromNode ( nTable )
			{
				for ( var i=0 ; i<DataTable.settings.length ; i++ )
				{
					if ( DataTable.settings[i].nTable === nTable )
					{
						return DataTable.settings[i];
					}
				}
				
				return null;
			}
			
			
			/**
			 * Return an array with the TR nodes for the table
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {array} TR array
			 *  @memberof DataTable#oApi
			 */
			function _fnGetTrNodes ( oSettings )
			{
				var aNodes = [];
				var aoData = oSettings.aoData;
				for ( var i=0, iLen=aoData.length ; i<iLen ; i++ )
				{
					if ( aoData[i].nTr !== null )
					{
						aNodes.push( aoData[i].nTr );
					}
				}
				return aNodes;
			}
			
			
			/**
			 * Return an flat array with all TD nodes for the table, or row
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} [iIndividualRow] aoData index to get the nodes for - optional 
			 *    if not given then the return array will contain all nodes for the table
			 *  @returns {array} TD array
			 *  @memberof DataTable#oApi
			 */
			function _fnGetTdNodes ( oSettings, iIndividualRow )
			{
				var anReturn = [];
				var iCorrector;
				var anTds, nTd;
				var iRow, iRows=oSettings.aoData.length,
					iColumn, iColumns, oData, sNodeName, iStart=0, iEnd=iRows;
				
				/* Allow the collection to be limited to just one row */
				if ( iIndividualRow !== undefined )
				{
					iStart = iIndividualRow;
					iEnd = iIndividualRow+1;
				}
			
				for ( iRow=iStart ; iRow<iEnd ; iRow++ )
				{
					oData = oSettings.aoData[iRow];
					if ( oData.nTr !== null )
					{
						/* get the TD child nodes - taking into account text etc nodes */
						anTds = [];
						nTd = oData.nTr.firstChild;
						while ( nTd )
						{
							sNodeName = nTd.nodeName.toLowerCase();
							if ( sNodeName == 'td' || sNodeName == 'th' )
							{
								anTds.push( nTd );
							}
							nTd = nTd.nextSibling;
						}
			
						iCorrector = 0;
						for ( iColumn=0, iColumns=oSettings.aoColumns.length ; iColumn<iColumns ; iColumn++ )
						{
							if ( oSettings.aoColumns[iColumn].bVisible )
							{
								anReturn.push( anTds[iColumn-iCorrector] );
							}
							else
							{
								anReturn.push( oData._anHidden[iColumn] );
								iCorrector++;
							}
						}
					}
				}
			
				return anReturn;
			}
			
			
			/**
			 * Log an error message
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iLevel log error messages, or display them to the user
			 *  @param {string} sMesg error message
			 *  @memberof DataTable#oApi
			 */
			function _fnLog( oSettings, iLevel, sMesg )
			{
				var sAlert = (oSettings===null) ?
					"DataTables warning: "+sMesg :
					"DataTables warning (table id = '"+oSettings.sTableId+"'): "+sMesg;
				
				if ( iLevel === 0 )
				{
					if ( DataTable.ext.sErrMode == 'alert' )
					{
						alert( sAlert );
					}
					else
					{
						throw new Error(sAlert);
					}
					return;
				}
				else if ( window.console && console.log )
				{
					console.log( sAlert );
				}
			}
			
			
			/**
			 * See if a property is defined on one object, if so assign it to the other object
			 *  @param {object} oRet target object
			 *  @param {object} oSrc source object
			 *  @param {string} sName property
			 *  @param {string} [sMappedName] name to map too - optional, sName used if not given
			 *  @memberof DataTable#oApi
			 */
			function _fnMap( oRet, oSrc, sName, sMappedName )
			{
				if ( sMappedName === undefined )
				{
					sMappedName = sName;
				}
				if ( oSrc[sName] !== undefined )
				{
					oRet[sMappedName] = oSrc[sName];
				}
			}
			
			
			/**
			 * Extend objects - very similar to jQuery.extend, but deep copy objects, and shallow
			 * copy arrays. The reason we need to do this, is that we don't want to deep copy array
			 * init values (such as aaSorting) since the dev wouldn't be able to override them, but
			 * we do want to deep copy arrays.
			 *  @param {object} oOut Object to extend
			 *  @param {object} oExtender Object from which the properties will be applied to oOut
			 *  @returns {object} oOut Reference, just for convenience - oOut === the return.
			 *  @memberof DataTable#oApi
			 *  @todo This doesn't take account of arrays inside the deep copied objects.
			 */
			function _fnExtend( oOut, oExtender )
			{
				var val;
				
				for ( var prop in oExtender )
				{
					if ( oExtender.hasOwnProperty(prop) )
					{
						val = oExtender[prop];
			
						if ( typeof oInit[prop] === 'object' && val !== null && $.isArray(val) === false )
						{
							$.extend( true, oOut[prop], val );
						}
						else
						{
							oOut[prop] = val;
						}
					}
				}
			
				return oOut;
			}
			
			
			/**
			 * Bind an event handers to allow a click or return key to activate the callback.
			 * This is good for accessibility since a return on the keyboard will have the
			 * same effect as a click, if the element has focus.
			 *  @param {element} n Element to bind the action to
			 *  @param {object} oData Data object to pass to the triggered function
			 *  @param {function} fn Callback function for when the event is triggered
			 *  @memberof DataTable#oApi
			 */
			function _fnBindAction( n, oData, fn )
			{
				$(n)
					.bind( 'click.DT', oData, function (e) {
							n.blur(); // Remove focus outline for mouse users
							fn(e);
						} )
					.bind( 'keypress.DT', oData, function (e){
						if ( e.which === 13 ) {
							fn(e);
						} } )
					.bind( 'selectstart.DT', function () {
						/* Take the brutal approach to cancelling text selection */
						return false;
						} );
			}
			
			
			/**
			 * Register a callback function. Easily allows a callback function to be added to
			 * an array store of callback functions that can then all be called together.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
			 *  @param {function} fn Function to be called back
			 *  @param {string} sName Identifying name for the callback (i.e. a label)
			 *  @memberof DataTable#oApi
			 */
			function _fnCallbackReg( oSettings, sStore, fn, sName )
			{
				if ( fn )
				{
					oSettings[sStore].push( {
						"fn": fn,
						"sName": sName
					} );
				}
			}
			
			
			/**
			 * Fire callback functions and trigger events. Note that the loop over the callback
			 * array store is done backwards! Further note that you do not want to fire off triggers
			 * in time sensitive applications (for example cell creation) as its slow.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
			 *  @param {string} sTrigger Name of the jQuery custom event to trigger. If null no trigger
			 *    is fired
			 *  @param {array} aArgs Array of arguments to pass to the callback function / trigger
			 *  @memberof DataTable#oApi
			 */
			function _fnCallbackFire( oSettings, sStore, sTrigger, aArgs )
			{
				var aoStore = oSettings[sStore];
				var aRet =[];
			
				for ( var i=aoStore.length-1 ; i>=0 ; i-- )
				{
					aRet.push( aoStore[i].fn.apply( oSettings.oInstance, aArgs ) );
				}
			
				if ( sTrigger !== null )
				{
					$(oSettings.oInstance).trigger(sTrigger, aArgs);
				}
			
				return aRet;
			}
			
			
			/**
			 * JSON stringify. If JSON.stringify it provided by the browser, json2.js or any other
			 * library, then we use that as it is fast, safe and accurate. If the function isn't 
			 * available then we need to built it ourselves - the inspiration for this function comes
			 * from Craig Buckler ( http://www.sitepoint.com/javascript-json-serialization/ ). It is
			 * not perfect and absolutely should not be used as a replacement to json2.js - but it does
			 * do what we need, without requiring a dependency for DataTables.
			 *  @param {object} o JSON object to be converted
			 *  @returns {string} JSON string
			 *  @memberof DataTable#oApi
			 */
			var _fnJsonString = (window.JSON) ? JSON.stringify : function( o )
			{
				/* Not an object or array */
				var sType = typeof o;
				if (sType !== "object" || o === null)
				{
					// simple data type
					if (sType === "string")
					{
						o = '"'+o+'"';
					}
					return o+"";
				}
			
				/* If object or array, need to recurse over it */
				var
					sProp, mValue,
					json = [],
					bArr = $.isArray(o);
				
				for (sProp in o)
				{
					mValue = o[sProp];
					sType = typeof mValue;
			
					if (sType === "string")
					{
						mValue = '"'+mValue+'"';
					}
					else if (sType === "object" && mValue !== null)
					{
						mValue = _fnJsonString(mValue);
					}
			
					json.push((bArr ? "" : '"'+sProp+'":') + mValue);
				}
			
				return (bArr ? "[" : "{") + json + (bArr ? "]" : "}");
			};
			
			
			/**
			 * From some browsers (specifically IE6/7) we need special handling to work around browser
			 * bugs - this function is used to detect when these workarounds are needed.
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnBrowserDetect( oSettings )
			{
				/* IE6/7 will oversize a width 100% element inside a scrolling element, to include the
				 * width of the scrollbar, while other browsers ensure the inner element is contained
				 * without forcing scrolling
				 */
				var n = $(
					'<div style="position:absolute; top:0; left:0; height:1px; width:1px; overflow:hidden">'+
						'<div style="position:absolute; top:1px; left:1px; width:100px; overflow:scroll;">'+
							'<div id="DT_BrowserTest" style="width:100%; height:10px;"></div>'+
						'</div>'+
					'</div>')[0];
			
				document.body.appendChild( n );
				oSettings.oBrowser.bScrollOversize = $('#DT_BrowserTest', n)[0].offsetWidth === 100 ? true : false;
				document.body.removeChild( n );
			}
			

			/**
			 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
			 * return the resulting jQuery object.
			 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
			 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
			 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
			 *    criterion ("applied") or all TR elements (i.e. no filter).
			 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
			 *    Can be either 'current', whereby the current sorting of the table is used, or
			 *    'original' whereby the original order the data was read into the table is used.
			 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
			 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be 
			 *    'current' and filter is 'applied', regardless of what they might be given as.
			 *  @returns {object} jQuery object, filtered by the given selector.
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Highlight every second row
			 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
			 *    } );
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Filter to rows with 'Webkit' in them, add a background colour and then
			 *      // remove the filter, thus highlighting the 'Webkit' rows only.
			 *      oTable.fnFilter('Webkit');
			 *      oTable.$('tr', {"filter": "applied"}).css('backgroundColor', 'blue');
			 *      oTable.fnFilter('');
			 *    } );
			 */
			this.$ = function ( sSelector, oOpts )
			{
				var i, iLen, a = [], tr;
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				var aoData = oSettings.aoData;
				var aiDisplay = oSettings.aiDisplay;
				var aiDisplayMaster = oSettings.aiDisplayMaster;
			
				if ( !oOpts )
				{
					oOpts = {};
				}
			
				oOpts = $.extend( {}, {
					"filter": "none", // applied
					"order": "current", // "original"
					"page": "all" // current
				}, oOpts );
			
				// Current page implies that order=current and fitler=applied, since it is fairly
				// senseless otherwise
				if ( oOpts.page == 'current' )
				{
					for ( i=oSettings._iDisplayStart, iLen=oSettings.fnDisplayEnd() ; i<iLen ; i++ )
					{
						tr = aoData[ aiDisplay[i] ].nTr;
						if ( tr )
						{
							a.push( tr );
						}
					}
				}
				else if ( oOpts.order == "current" && oOpts.filter == "none" )
				{
					for ( i=0, iLen=aiDisplayMaster.length ; i<iLen ; i++ )
					{
						tr = aoData[ aiDisplayMaster[i] ].nTr;
						if ( tr )
						{
							a.push( tr );
						}
					}
				}
				else if ( oOpts.order == "current" && oOpts.filter == "applied" )
				{
					for ( i=0, iLen=aiDisplay.length ; i<iLen ; i++ )
					{
						tr = aoData[ aiDisplay[i] ].nTr;
						if ( tr )
						{
							a.push( tr );
						}
					}
				}
				else if ( oOpts.order == "original" && oOpts.filter == "none" )
				{
					for ( i=0, iLen=aoData.length ; i<iLen ; i++ )
					{
						tr = aoData[ i ].nTr ;
						if ( tr )
						{
							a.push( tr );
						}
					}
				}
				else if ( oOpts.order == "original" && oOpts.filter == "applied" )
				{
					for ( i=0, iLen=aoData.length ; i<iLen ; i++ )
					{
						tr = aoData[ i ].nTr;
						if ( $.inArray( i, aiDisplay ) !== -1 && tr )
						{
							a.push( tr );
						}
					}
				}
				else
				{
					_fnLog( oSettings, 1, "Unknown selection options" );
				}
			
				/* We need to filter on the TR elements and also 'find' in their descendants
				 * to make the selector act like it would in a full table - so we need
				 * to build both results and then combine them together
				 */
				var jqA = $(a);
				var jqTRs = jqA.filter( sSelector );
				var jqDescendants = jqA.find( sSelector );
			
				return $( [].concat($.makeArray(jqTRs), $.makeArray(jqDescendants)) );
			};
			
			
			/**
			 * Almost identical to $ in operation, but in this case returns the data for the matched
			 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
			 * rather than any descendants, so the data can be obtained for the row/cell. If matching
			 * rows are found, the data returned is the original data array/object that was used to  
			 * create the row (or a generated array if from a DOM source).
			 *
			 * This method is often useful in-combination with $ where both functions are given the
			 * same parameters and the array indexes will match identically.
			 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
			 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
			 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
			 *    criterion ("applied") or all elements (i.e. no filter).
			 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
			 *    Can be either 'current', whereby the current sorting of the table is used, or
			 *    'original' whereby the original order the data was read into the table is used.
			 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
			 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be 
			 *    'current' and filter is 'applied', regardless of what they might be given as.
			 *  @returns {array} Data for the matched elements. If any elements, as a result of the
			 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null 
			 *    entry in the array.
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Get the data from the first row in the table
			 *      var data = oTable._('tr:first');
			 *
			 *      // Do something useful with the data
			 *      alert( "First cell is: "+data[0] );
			 *    } );
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Filter to 'Webkit' and get all data for 
			 *      oTable.fnFilter('Webkit');
			 *      var data = oTable._('tr', {"filter": "applied"});
			 *      
			 *      // Do something with the data
			 *      alert( data.length+" rows matched the filter" );
			 *    } );
			 */
			this._ = function ( sSelector, oOpts )
			{
				var aOut = [];
				var i, iLen, iIndex;
				var aTrs = this.$( sSelector, oOpts );
			
				for ( i=0, iLen=aTrs.length ; i<iLen ; i++ )
				{
					aOut.push( this.fnGetData(aTrs[i]) );
				}
			
				return aOut;
			};
			
			
			/**
			 * Add a single new row or multiple rows of data to the table. Please note
			 * that this is suitable for client-side processing only - if you are using 
			 * server-side processing (i.e. "bServerSide": true), then to add data, you
			 * must add it to the data source, i.e. the server-side, through an Ajax call.
			 *  @param {array|object} mData The data to be added to the table. This can be:
			 *    <ul>
			 *      <li>1D array of data - add a single row with the data provided</li>
			 *      <li>2D array of arrays - add multiple rows in a single call</li>
			 *      <li>object - data object when using <i>mData</i></li>
			 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
			 *    </ul>
			 *  @param {bool} [bRedraw=true] redraw the table or not
			 *  @returns {array} An array of integers, representing the list of indexes in 
			 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to 
			 *    the table.
			 *  @dtopt API
			 *
			 *  @example
			 *    // Global var for counter
			 *    var giCount = 2;
			 *    
			 *    $(document).ready(function() {
			 *      $('#example').dataTable();
			 *    } );
			 *    
			 *    function fnClickAddRow() {
			 *      $('#example').dataTable().fnAddData( [
			 *        giCount+".1",
			 *        giCount+".2",
			 *        giCount+".3",
			 *        giCount+".4" ]
			 *      );
			 *        
			 *      giCount++;
			 *    }
			 */
			this.fnAddData = function( mData, bRedraw )
			{
				if ( mData.length === 0 )
				{
					return [];
				}
				
				var aiReturn = [];
				var iTest;
				
				/* Find settings from table node */
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				
				/* Check if we want to add multiple rows or not */
				if ( typeof mData[0] === "object" && mData[0] !== null )
				{
					for ( var i=0 ; i<mData.length ; i++ )
					{
						iTest = _fnAddData( oSettings, mData[i] );
						if ( iTest == -1 )
						{
							return aiReturn;
						}
						aiReturn.push( iTest );
					}
				}
				else
				{
					iTest = _fnAddData( oSettings, mData );
					if ( iTest == -1 )
					{
						return aiReturn;
					}
					aiReturn.push( iTest );
				}
				
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
				
				if ( bRedraw === undefined || bRedraw )
				{
					_fnReDraw( oSettings );
				}
				return aiReturn;
			};
			
			
			/**
			 * This function will make DataTables recalculate the column sizes, based on the data 
			 * contained in the table and the sizes applied to the columns (in the DOM, CSS or 
			 * through the sWidth parameter). This can be useful when the width of the table's 
			 * parent element changes (for example a window resize).
			 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "sScrollY": "200px",
			 *        "bPaginate": false
			 *      } );
			 *      
			 *      $(window).bind('resize', function () {
			 *        oTable.fnAdjustColumnSizing();
			 *      } );
			 *    } );
			 */
			this.fnAdjustColumnSizing = function ( bRedraw )
			{
				var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);
				_fnAdjustColumnSizing( oSettings );
				
				if ( bRedraw === undefined || bRedraw )
				{
					this.fnDraw( false );
				}
				else if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )
				{
					/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
					this.oApi._fnScrollDraw(oSettings);
				}
			};
			
			
			/**
			 * Quickly and simply clear a table
			 *  @param {bool} [bRedraw=true] redraw the table or not
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
			 *      oTable.fnClearTable();
			 *    } );
			 */
			this.fnClearTable = function( bRedraw )
			{
				/* Find settings from table node */
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				_fnClearTable( oSettings );
				
				if ( bRedraw === undefined || bRedraw )
				{
					_fnDraw( oSettings );
				}
			};
			
			
			/**
			 * The exact opposite of 'opening' a row, this function will close any rows which 
			 * are currently 'open'.
			 *  @param {node} nTr the table row to 'close'
			 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable;
			 *      
			 *      // 'open' an information row when a row is clicked on
			 *      $('#example tbody tr').click( function () {
			 *        if ( oTable.fnIsOpen(this) ) {
			 *          oTable.fnClose( this );
			 *        } else {
			 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
			 *        }
			 *      } );
			 *      
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnClose = function( nTr )
			{
				/* Find settings from table node */
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				
				for ( var i=0 ; i<oSettings.aoOpenRows.length ; i++ )
				{
					if ( oSettings.aoOpenRows[i].nParent == nTr )
					{
						var nTrParent = oSettings.aoOpenRows[i].nTr.parentNode;
						if ( nTrParent )
						{
							/* Remove it if it is currently on display */
							nTrParent.removeChild( oSettings.aoOpenRows[i].nTr );
						}
						oSettings.aoOpenRows.splice( i, 1 );
						return 0;
					}
				}
				return 1;
			};
			
			
			/**
			 * Remove a row for the table
			 *  @param {mixed} mTarget The index of the row from aoData to be deleted, or
			 *    the TR element you want to delete
			 *  @param {function|null} [fnCallBack] Callback function
			 *  @param {bool} [bRedraw=true] Redraw the table or not
			 *  @returns {array} The row that was deleted
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Immediately remove the first row
			 *      oTable.fnDeleteRow( 0 );
			 *    } );
			 */
			this.fnDeleteRow = function( mTarget, fnCallBack, bRedraw )
			{
				/* Find settings from table node */
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				var i, iLen, iAODataIndex;
				
				iAODataIndex = (typeof mTarget === 'object') ? 
					_fnNodeToDataIndex(oSettings, mTarget) : mTarget;
				
				/* Return the data array from this row */
				var oData = oSettings.aoData.splice( iAODataIndex, 1 );
			
				/* Update the _DT_RowIndex parameter */
				for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
				{
					if ( oSettings.aoData[i].nTr !== null )
					{
						oSettings.aoData[i].nTr._DT_RowIndex = i;
					}
				}
				
				/* Remove the target row from the search array */
				var iDisplayIndex = $.inArray( iAODataIndex, oSettings.aiDisplay );
				oSettings.asDataSearch.splice( iDisplayIndex, 1 );
				
				/* Delete from the display arrays */
				_fnDeleteIndex( oSettings.aiDisplayMaster, iAODataIndex );
				_fnDeleteIndex( oSettings.aiDisplay, iAODataIndex );
				
				/* If there is a user callback function - call it */
				if ( typeof fnCallBack === "function" )
				{
					fnCallBack.call( this, oSettings, oData );
				}
				
				/* Check for an 'overflow' they case for displaying the table */
				if ( oSettings._iDisplayStart >= oSettings.fnRecordsDisplay() )
				{
					oSettings._iDisplayStart -= oSettings._iDisplayLength;
					if ( oSettings._iDisplayStart < 0 )
					{
						oSettings._iDisplayStart = 0;
					}
				}
				
				if ( bRedraw === undefined || bRedraw )
				{
					_fnCalculateEnd( oSettings );
					_fnDraw( oSettings );
				}
				
				return oData;
			};
			
			
			/**
			 * Restore the table to it's original state in the DOM by removing all of DataTables 
			 * enhancements, alterations to the DOM structure of the table and event listeners.
			 *  @param {boolean} [bRemove=false] Completely remove the table from the DOM
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
			 *      var oTable = $('#example').dataTable();
			 *      oTable.fnDestroy();
			 *    } );
			 */
			this.fnDestroy = function ( bRemove )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				var nOrig = oSettings.nTableWrapper.parentNode;
				var nBody = oSettings.nTBody;
				var i, iLen;
			
				bRemove = (bRemove===undefined) ? false : bRemove;
				
				/* Flag to note that the table is currently being destroyed - no action should be taken */
				oSettings.bDestroying = true;
				
				/* Fire off the destroy callbacks for plug-ins etc */
				_fnCallbackFire( oSettings, "aoDestroyCallback", "destroy", [oSettings] );
			
				/* If the table is not being removed, restore the hidden columns */
				if ( !bRemove )
				{
					for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
					{
						if ( oSettings.aoColumns[i].bVisible === false )
						{
							this.fnSetColumnVis( i, true );
						}
					}
				}
				
				/* Blitz all DT events */
				$(oSettings.nTableWrapper).find('*').andSelf().unbind('.DT');
				
				/* If there is an 'empty' indicator row, remove it */
				$('tbody>tr>td.'+oSettings.oClasses.sRowEmpty, oSettings.nTable).parent().remove();
				
				/* When scrolling we had to break the table up - restore it */
				if ( oSettings.nTable != oSettings.nTHead.parentNode )
				{
					$(oSettings.nTable).children('thead').remove();
					oSettings.nTable.appendChild( oSettings.nTHead );
				}
				
				if ( oSettings.nTFoot && oSettings.nTable != oSettings.nTFoot.parentNode )
				{
					$(oSettings.nTable).children('tfoot').remove();
					oSettings.nTable.appendChild( oSettings.nTFoot );
				}
				
				/* Remove the DataTables generated nodes, events and classes */
				oSettings.nTable.parentNode.removeChild( oSettings.nTable );
				$(oSettings.nTableWrapper).remove();
				
				oSettings.aaSorting = [];
				oSettings.aaSortingFixed = [];
				_fnSortingClasses( oSettings );
				
				$(_fnGetTrNodes( oSettings )).removeClass( oSettings.asStripeClasses.join(' ') );
				
				$('th, td', oSettings.nTHead).removeClass( [
					oSettings.oClasses.sSortable,
					oSettings.oClasses.sSortableAsc,
					oSettings.oClasses.sSortableDesc,
					oSettings.oClasses.sSortableNone ].join(' ')
				);
				if ( oSettings.bJUI )
				{
					$('th span.'+oSettings.oClasses.sSortIcon
						+ ', td span.'+oSettings.oClasses.sSortIcon, oSettings.nTHead).remove();
			
					$('th, td', oSettings.nTHead).each( function () {
						var jqWrapper = $('div.'+oSettings.oClasses.sSortJUIWrapper, this);
						var kids = jqWrapper.contents();
						$(this).append( kids );
						jqWrapper.remove();
					} );
				}
				
				/* Add the TR elements back into the table in their original order */
				if ( !bRemove && oSettings.nTableReinsertBefore )
				{
					nOrig.insertBefore( oSettings.nTable, oSettings.nTableReinsertBefore );
				}
				else if ( !bRemove )
				{
					nOrig.appendChild( oSettings.nTable );
				}
			
				for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
				{
					if ( oSettings.aoData[i].nTr !== null )
					{
						nBody.appendChild( oSettings.aoData[i].nTr );
					}
				}
				
				/* Restore the width of the original table */
				if ( oSettings.oFeatures.bAutoWidth === true )
				{
				  oSettings.nTable.style.width = _fnStringToCss(oSettings.sDestroyWidth);
				}
				
				/* If the were originally stripe classes - then we add them back here. Note
				 * this is not fool proof (for example if not all rows had stripe classes - but
				 * it's a good effort without getting carried away
				 */
				iLen = oSettings.asDestroyStripes.length;
				if (iLen)
				{
					var anRows = $(nBody).children('tr');
					for ( i=0 ; i<iLen ; i++ )
					{
						anRows.filter(':nth-child(' + iLen + 'n + ' + i + ')').addClass( oSettings.asDestroyStripes[i] );
					}
				}
				
				/* Remove the settings object from the settings array */
				for ( i=0, iLen=DataTable.settings.length ; i<iLen ; i++ )
				{
					if ( DataTable.settings[i] == oSettings )
					{
						DataTable.settings.splice( i, 1 );
					}
				}
				
				/* End it all */
				oSettings = null;
				oInit = null;
			};
			
			
			/**
			 * Redraw the table
			 *  @param {bool} [bComplete=true] Re-filter and resort (if enabled) the table before the draw.
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
			 *      oTable.fnDraw();
			 *    } );
			 */
			this.fnDraw = function( bComplete )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				if ( bComplete === false )
				{
					_fnCalculateEnd( oSettings );
					_fnDraw( oSettings );
				}
				else
				{
					_fnReDraw( oSettings );
				}
			};
			
			
			/**
			 * Filter the input based on data
			 *  @param {string} sInput String to filter the table on
			 *  @param {int|null} [iColumn] Column to limit filtering to
			 *  @param {bool} [bRegex=false] Treat as regular expression or not
			 *  @param {bool} [bSmart=true] Perform smart filtering or not
			 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
			 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Sometime later - filter...
			 *      oTable.fnFilter( 'test string' );
			 *    } );
			 */
			this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				
				if ( !oSettings.oFeatures.bFilter )
				{
					return;
				}
				
				if ( bRegex === undefined || bRegex === null )
				{
					bRegex = false;
				}
				
				if ( bSmart === undefined || bSmart === null )
				{
					bSmart = true;
				}
				
				if ( bShowGlobal === undefined || bShowGlobal === null )
				{
					bShowGlobal = true;
				}
				
				if ( bCaseInsensitive === undefined || bCaseInsensitive === null )
				{
					bCaseInsensitive = true;
				}
				
				if ( iColumn === undefined || iColumn === null )
				{
					/* Global filter */
					_fnFilterComplete( oSettings, {
						"sSearch":sInput+"",
						"bRegex": bRegex,
						"bSmart": bSmart,
						"bCaseInsensitive": bCaseInsensitive
					}, 1 );
					
					if ( bShowGlobal && oSettings.aanFeatures.f )
					{
						var n = oSettings.aanFeatures.f;
						for ( var i=0, iLen=n.length ; i<iLen ; i++ )
						{
							// IE9 throws an 'unknown error' if document.activeElement is used
							// inside an iframe or frame...
							try {
								if ( n[i]._DT_Input != document.activeElement )
								{
									$(n[i]._DT_Input).val( sInput );
								}
							}
							catch ( e ) {
								$(n[i]._DT_Input).val( sInput );
							}
						}
					}
				}
				else
				{
					/* Single column filter */
					$.extend( oSettings.aoPreSearchCols[ iColumn ], {
						"sSearch": sInput+"",
						"bRegex": bRegex,
						"bSmart": bSmart,
						"bCaseInsensitive": bCaseInsensitive
					} );
					_fnFilterComplete( oSettings, oSettings.oPreviousSearch, 1 );
				}
			};
			
			
			/**
			 * Get the data for the whole table, an individual row or an individual cell based on the 
			 * provided parameters.
			 *  @param {int|node} [mRow] A TR row node, TD/TH cell node or an integer. If given as
			 *    a TR node then the data source for the whole row will be returned. If given as a
			 *    TD/TH cell node then iCol will be automatically calculated and the data for the
			 *    cell returned. If given as an integer, then this is treated as the aoData internal
			 *    data index for the row (see fnGetPosition) and the data for that row used.
			 *  @param {int} [iCol] Optional column index that you want the data of.
			 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
			 *    returned. If mRow is defined, just data for that row, and is iCol is
			 *    defined, only data for the designated cell is returned.
			 *  @dtopt API
			 *
			 *  @example
			 *    // Row data
			 *    $(document).ready(function() {
			 *      oTable = $('#example').dataTable();
			 *
			 *      oTable.$('tr').click( function () {
			 *        var data = oTable.fnGetData( this );
			 *        // ... do something with the array / object of data for the row
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Individual cell data
			 *    $(document).ready(function() {
			 *      oTable = $('#example').dataTable();
			 *
			 *      oTable.$('td').click( function () {
			 *        var sData = oTable.fnGetData( this );
			 *        alert( 'The cell clicked on had the value of '+sData );
			 *      } );
			 *    } );
			 */
			this.fnGetData = function( mRow, iCol )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				
				if ( mRow !== undefined )
				{
					var iRow = mRow;
					if ( typeof mRow === 'object' )
					{
						var sNode = mRow.nodeName.toLowerCase();
						if (sNode === "tr" )
						{
							iRow = _fnNodeToDataIndex(oSettings, mRow);
						}
						else if ( sNode === "td" )
						{
							iRow = _fnNodeToDataIndex(oSettings, mRow.parentNode);
							iCol = _fnNodeToColumnIndex( oSettings, iRow, mRow );
						}
					}
			
					if ( iCol !== undefined )
					{
						return _fnGetCellData( oSettings, iRow, iCol, '' );
					}
					return (oSettings.aoData[iRow]!==undefined) ?
						oSettings.aoData[iRow]._aData : null;
				}
				return _fnGetDataMaster( oSettings );
			};
			
			
			/**
			 * Get an array of the TR nodes that are used in the table's body. Note that you will 
			 * typically want to use the '$' API method in preference to this as it is more 
			 * flexible.
			 *  @param {int} [iRow] Optional row index for the TR element you want
			 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
			 *    in the table's body, or iRow is defined, just the TR element requested.
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Get the nodes from the table
			 *      var nNodes = oTable.fnGetNodes( );
			 *    } );
			 */
			this.fnGetNodes = function( iRow )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				
				if ( iRow !== undefined ) {
					return (oSettings.aoData[iRow]!==undefined) ?
						oSettings.aoData[iRow].nTr : null;
				}
				return _fnGetTrNodes( oSettings );
			};
			
			
			/**
			 * Get the array indexes of a particular cell from it's DOM element
			 * and column index including hidden columns
			 *  @param {node} nNode this can either be a TR, TD or TH in the table's body
			 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
			 *    if given as a cell, an array of [row index, column index (visible), 
			 *    column index (all)] is given.
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      $('#example tbody td').click( function () {
			 *        // Get the position of the current data from the node
			 *        var aPos = oTable.fnGetPosition( this );
			 *        
			 *        // Get the data array for this row
			 *        var aData = oTable.fnGetData( aPos[0] );
			 *        
			 *        // Update the data array and return the value
			 *        aData[ aPos[1] ] = 'clicked';
			 *        this.innerHTML = 'clicked';
			 *      } );
			 *      
			 *      // Init DataTables
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnGetPosition = function( nNode )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				var sNodeName = nNode.nodeName.toUpperCase();
				
				if ( sNodeName == "TR" )
				{
					return _fnNodeToDataIndex(oSettings, nNode);
				}
				else if ( sNodeName == "TD" || sNodeName == "TH" )
				{
					var iDataIndex = _fnNodeToDataIndex( oSettings, nNode.parentNode );
					var iColumnIndex = _fnNodeToColumnIndex( oSettings, iDataIndex, nNode );
					return [ iDataIndex, _fnColumnIndexToVisible(oSettings, iColumnIndex ), iColumnIndex ];
				}
				return null;
			};
			
			
			/**
			 * Check to see if a row is 'open' or not.
			 *  @param {node} nTr the table row to check
			 *  @returns {boolean} true if the row is currently open, false otherwise
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable;
			 *      
			 *      // 'open' an information row when a row is clicked on
			 *      $('#example tbody tr').click( function () {
			 *        if ( oTable.fnIsOpen(this) ) {
			 *          oTable.fnClose( this );
			 *        } else {
			 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
			 *        }
			 *      } );
			 *      
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnIsOpen = function( nTr )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				var aoOpenRows = oSettings.aoOpenRows;
				
				for ( var i=0 ; i<oSettings.aoOpenRows.length ; i++ )
				{
					if ( oSettings.aoOpenRows[i].nParent == nTr )
					{
						return true;
					}
				}
				return false;
			};
			
			
			/**
			 * This function will place a new row directly after a row which is currently 
			 * on display on the page, with the HTML contents that is passed into the 
			 * function. This can be used, for example, to ask for confirmation that a 
			 * particular record should be deleted.
			 *  @param {node} nTr The table row to 'open'
			 *  @param {string|node|jQuery} mHtml The HTML to put into the row
			 *  @param {string} sClass Class to give the new TD cell
			 *  @returns {node} The row opened. Note that if the table row passed in as the
			 *    first parameter, is not found in the table, this method will silently
			 *    return.
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable;
			 *      
			 *      // 'open' an information row when a row is clicked on
			 *      $('#example tbody tr').click( function () {
			 *        if ( oTable.fnIsOpen(this) ) {
			 *          oTable.fnClose( this );
			 *        } else {
			 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
			 *        }
			 *      } );
			 *      
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnOpen = function( nTr, mHtml, sClass )
			{
				/* Find settings from table node */
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
			
				/* Check that the row given is in the table */
				var nTableRows = _fnGetTrNodes( oSettings );
				if ( $.inArray(nTr, nTableRows) === -1 )
				{
					return;
				}
				
				/* the old open one if there is one */
				this.fnClose( nTr );
				
				var nNewRow = document.createElement("tr");
				var nNewCell = document.createElement("td");
				nNewRow.appendChild( nNewCell );
				nNewCell.className = sClass;
				nNewCell.colSpan = _fnVisbleColumns( oSettings );
			
				if (typeof mHtml === "string")
				{
					nNewCell.innerHTML = mHtml;
				}
				else
				{
					$(nNewCell).html( mHtml );
				}
			
				/* If the nTr isn't on the page at the moment - then we don't insert at the moment */
				var nTrs = $('tr', oSettings.nTBody);
				if ( $.inArray(nTr, nTrs) != -1  )
				{
					$(nNewRow).insertAfter(nTr);
				}
				
				oSettings.aoOpenRows.push( {
					"nTr": nNewRow,
					"nParent": nTr
				} );
				
				return nNewRow;
			};
			
			
			/**
			 * Change the pagination - provides the internal logic for pagination in a simple API 
			 * function. With this function you can have a DataTables table go to the next, 
			 * previous, first or last pages.
			 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
			 *    or page number to jump to (integer), note that page 0 is the first page.
			 *  @param {bool} [bRedraw=true] Redraw the table or not
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      oTable.fnPageChange( 'next' );
			 *    } );
			 */
			this.fnPageChange = function ( mAction, bRedraw )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				_fnPageChange( oSettings, mAction );
				_fnCalculateEnd( oSettings );
				
				if ( bRedraw === undefined || bRedraw )
				{
					_fnDraw( oSettings );
				}
			};
			
			
			/**
			 * Show a particular column
			 *  @param {int} iCol The column whose display should be changed
			 *  @param {bool} bShow Show (true) or hide (false) the column
			 *  @param {bool} [bRedraw=true] Redraw the table or not
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Hide the second column after initialisation
			 *      oTable.fnSetColumnVis( 1, false );
			 *    } );
			 */
			this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				var i, iLen;
				var aoColumns = oSettings.aoColumns;
				var aoData = oSettings.aoData;
				var nTd, bAppend, iBefore;
				
				/* No point in doing anything if we are requesting what is already true */
				if ( aoColumns[iCol].bVisible == bShow )
				{
					return;
				}
				
				/* Show the column */
				if ( bShow )
				{
					var iInsert = 0;
					for ( i=0 ; i<iCol ; i++ )
					{
						if ( aoColumns[i].bVisible )
						{
							iInsert++;
						}
					}
					
					/* Need to decide if we should use appendChild or insertBefore */
					bAppend = (iInsert >= _fnVisbleColumns( oSettings ));
			
					/* Which coloumn should we be inserting before? */
					if ( !bAppend )
					{
						for ( i=iCol ; i<aoColumns.length ; i++ )
						{
							if ( aoColumns[i].bVisible )
							{
								iBefore = i;
								break;
							}
						}
					}
			
					for ( i=0, iLen=aoData.length ; i<iLen ; i++ )
					{
						if ( aoData[i].nTr !== null )
						{
							if ( bAppend )
							{
								aoData[i].nTr.appendChild( 
									aoData[i]._anHidden[iCol]
								);
							}
							else
							{
								aoData[i].nTr.insertBefore(
									aoData[i]._anHidden[iCol], 
									_fnGetTdNodes( oSettings, i )[iBefore] );
							}
						}
					}
				}
				else
				{
					/* Remove a column from display */
					for ( i=0, iLen=aoData.length ; i<iLen ; i++ )
					{
						if ( aoData[i].nTr !== null )
						{
							nTd = _fnGetTdNodes( oSettings, i )[iCol];
							aoData[i]._anHidden[iCol] = nTd;
							nTd.parentNode.removeChild( nTd );
						}
					}
				}
			
				/* Clear to set the visible flag */
				aoColumns[iCol].bVisible = bShow;
			
				/* Redraw the header and footer based on the new column visibility */
				_fnDrawHead( oSettings, oSettings.aoHeader );
				if ( oSettings.nTFoot )
				{
					_fnDrawHead( oSettings, oSettings.aoFooter );
				}
				
				/* If there are any 'open' rows, then we need to alter the colspan for this col change */
				for ( i=0, iLen=oSettings.aoOpenRows.length ; i<iLen ; i++ )
				{
					oSettings.aoOpenRows[i].nTr.colSpan = _fnVisbleColumns( oSettings );
				}
				
				/* Do a redraw incase anything depending on the table columns needs it 
				 * (built-in: scrolling) 
				 */
				if ( bRedraw === undefined || bRedraw )
				{
					_fnAdjustColumnSizing( oSettings );
					_fnDraw( oSettings );
				}
				
				_fnSaveState( oSettings );
			};
			
			
			/**
			 * Get the settings for a particular table for external manipulation
			 *  @returns {object} DataTables settings object. See 
			 *    {@link DataTable.models.oSettings}
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      var oSettings = oTable.fnSettings();
			 *      
			 *      // Show an example parameter from the settings
			 *      alert( oSettings._iDisplayStart );
			 *    } );
			 */
			this.fnSettings = function()
			{
				return _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
			};
			
			
			/**
			 * Sort the table by a particular column
			 *  @param {int} iCol the data index to sort on. Note that this will not match the 
			 *    'display index' if you have hidden data entries
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Sort immediately with columns 0 and 1
			 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
			 *    } );
			 */
			this.fnSort = function( aaSort )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				oSettings.aaSorting = aaSort;
				_fnSort( oSettings );
			};
			
			
			/**
			 * Attach a sort listener to an element for a given column
			 *  @param {node} nNode the element to attach the sort listener to
			 *  @param {int} iColumn the column that a click on this node will sort on
			 *  @param {function} [fnCallback] callback function when sort is run
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      
			 *      // Sort on column 1, when 'sorter' is clicked on
			 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
			 *    } );
			 */
			this.fnSortListener = function( nNode, iColumn, fnCallback )
			{
				_fnSortAttachListener( _fnSettingsFromNode( this[DataTable.ext.iApiIndex] ), nNode, iColumn,
				 	fnCallback );
			};
			
			
			/**
			 * Update a table cell or row - this method will accept either a single value to
			 * update the cell with, an array of values with one element for each column or
			 * an object in the same format as the original data source. The function is
			 * self-referencing in order to make the multi column updates easier.
			 *  @param {object|array|string} mData Data to update the cell/row with
			 *  @param {node|int} mRow TR element you want to update or the aoData index
			 *  @param {int} [iColumn] The column to update (not used of mData is an array or object)
			 *  @param {bool} [bRedraw=true] Redraw the table or not
			 *  @param {bool} [bAction=true] Perform pre-draw actions or not
			 *  @returns {int} 0 on success, 1 on error
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
			 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], 1, 0 ); // Row
			 *    } );
			 */
			this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
			{
				var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );
				var i, iLen, sDisplay;
				var iRow = (typeof mRow === 'object') ? 
					_fnNodeToDataIndex(oSettings, mRow) : mRow;
				
				if ( $.isArray(mData) && iColumn === undefined )
				{
					/* Array update - update the whole row */
					oSettings.aoData[iRow]._aData = mData.slice();
					
					/* Flag to the function that we are recursing */
					for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
					{
						this.fnUpdate( _fnGetCellData( oSettings, iRow, i ), iRow, i, false, false );
					}
				}
				else if ( $.isPlainObject(mData) && iColumn === undefined )
				{
					/* Object update - update the whole row - assume the developer gets the object right */
					oSettings.aoData[iRow]._aData = $.extend( true, {}, mData );
			
					for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
					{
						this.fnUpdate( _fnGetCellData( oSettings, iRow, i ), iRow, i, false, false );
					}
				}
				else
				{
					/* Individual cell update */
					_fnSetCellData( oSettings, iRow, iColumn, mData );
					sDisplay = _fnGetCellData( oSettings, iRow, iColumn, 'display' );
					
					var oCol = oSettings.aoColumns[iColumn];
					if ( oCol.fnRender !== null )
					{
						sDisplay = _fnRender( oSettings, iRow, iColumn );
						if ( oCol.bUseRendered )
						{
							_fnSetCellData( oSettings, iRow, iColumn, sDisplay );
						}
					}
					
					if ( oSettings.aoData[iRow].nTr !== null )
					{
						/* Do the actual HTML update */
						_fnGetTdNodes( oSettings, iRow )[iColumn].innerHTML = sDisplay;
					}
				}
				
				/* Modify the search index for this row (strictly this is likely not needed, since fnReDraw
				 * will rebuild the search array - however, the redraw might be disabled by the user)
				 */
				var iDisplayIndex = $.inArray( iRow, oSettings.aiDisplay );
				oSettings.asDataSearch[iDisplayIndex] = _fnBuildSearchRow(
					oSettings, 
					_fnGetRowData( oSettings, iRow, 'filter', _fnGetColumns( oSettings, 'bSearchable' ) )
				);
				
				/* Perform pre-draw actions */
				if ( bAction === undefined || bAction )
				{
					_fnAdjustColumnSizing( oSettings );
				}
				
				/* Redraw the table */
				if ( bRedraw === undefined || bRedraw )
				{
					_fnReDraw( oSettings );
				}
				return 0;
			};
			
			
			/**
			 * Provide a common method for plug-ins to check the version of DataTables being used, in order
			 * to ensure compatibility.
			 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
			 *    formats "X" and "X.Y" are also acceptable.
			 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
			 *    version, or false if this version of DataTales is not suitable
			 *  @method
			 *  @dtopt API
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
			 *    } );
			 */
			this.fnVersionCheck = DataTable.ext.fnVersionCheck;
			
			
			/*
			 * This is really a good bit rubbish this method of exposing the internal methods
			 * publicly... - To be fixed in 2.0 using methods on the prototype
			 */
			
			
			/**
			 * Create a wrapper function for exporting an internal functions to an external API.
			 *  @param {string} sFunc API function name
			 *  @returns {function} wrapped function
			 *  @memberof DataTable#oApi
			 */
			function _fnExternApiFunc (sFunc)
			{
				return function() {
					var aArgs = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat( 
						Array.prototype.slice.call(arguments) );
					return DataTable.ext.oApi[sFunc].apply( this, aArgs );
				};
			}
			
			
			/**
			 * Reference to internal functions for use by plug-in developers. Note that these
			 * methods are references to internal functions and are considered to be private.
			 * If you use these methods, be aware that they are liable to change between versions
			 * (check the upgrade notes).
			 *  @namespace
			 */
			this.oApi = {
				"_fnExternApiFunc": _fnExternApiFunc,
				"_fnInitialise": _fnInitialise,
				"_fnInitComplete": _fnInitComplete,
				"_fnLanguageCompat": _fnLanguageCompat,
				"_fnAddColumn": _fnAddColumn,
				"_fnColumnOptions": _fnColumnOptions,
				"_fnAddData": _fnAddData,
				"_fnCreateTr": _fnCreateTr,
				"_fnGatherData": _fnGatherData,
				"_fnBuildHead": _fnBuildHead,
				"_fnDrawHead": _fnDrawHead,
				"_fnDraw": _fnDraw,
				"_fnReDraw": _fnReDraw,
				"_fnAjaxUpdate": _fnAjaxUpdate,
				"_fnAjaxParameters": _fnAjaxParameters,
				"_fnAjaxUpdateDraw": _fnAjaxUpdateDraw,
				"_fnServerParams": _fnServerParams,
				"_fnAddOptionsHtml": _fnAddOptionsHtml,
				"_fnFeatureHtmlTable": _fnFeatureHtmlTable,
				"_fnScrollDraw": _fnScrollDraw,
				"_fnAdjustColumnSizing": _fnAdjustColumnSizing,
				"_fnFeatureHtmlFilter": _fnFeatureHtmlFilter,
				"_fnFilterComplete": _fnFilterComplete,
				"_fnFilterCustom": _fnFilterCustom,
				"_fnFilterColumn": _fnFilterColumn,
				"_fnFilter": _fnFilter,
				"_fnBuildSearchArray": _fnBuildSearchArray,
				"_fnBuildSearchRow": _fnBuildSearchRow,
				"_fnFilterCreateSearch": _fnFilterCreateSearch,
				"_fnDataToSearch": _fnDataToSearch,
				"_fnSort": _fnSort,
				"_fnSortAttachListener": _fnSortAttachListener,
				"_fnSortingClasses": _fnSortingClasses,
				"_fnFeatureHtmlPaginate": _fnFeatureHtmlPaginate,
				"_fnPageChange": _fnPageChange,
				"_fnFeatureHtmlInfo": _fnFeatureHtmlInfo,
				"_fnUpdateInfo": _fnUpdateInfo,
				"_fnFeatureHtmlLength": _fnFeatureHtmlLength,
				"_fnFeatureHtmlProcessing": _fnFeatureHtmlProcessing,
				"_fnProcessingDisplay": _fnProcessingDisplay,
				"_fnVisibleToColumnIndex": _fnVisibleToColumnIndex,
				"_fnColumnIndexToVisible": _fnColumnIndexToVisible,
				"_fnNodeToDataIndex": _fnNodeToDataIndex,
				"_fnVisbleColumns": _fnVisbleColumns,
				"_fnCalculateEnd": _fnCalculateEnd,
				"_fnConvertToWidth": _fnConvertToWidth,
				"_fnCalculateColumnWidths": _fnCalculateColumnWidths,
				"_fnScrollingWidthAdjust": _fnScrollingWidthAdjust,
				"_fnGetWidestNode": _fnGetWidestNode,
				"_fnGetMaxLenString": _fnGetMaxLenString,
				"_fnStringToCss": _fnStringToCss,
				"_fnDetectType": _fnDetectType,
				"_fnSettingsFromNode": _fnSettingsFromNode,
				"_fnGetDataMaster": _fnGetDataMaster,
				"_fnGetTrNodes": _fnGetTrNodes,
				"_fnGetTdNodes": _fnGetTdNodes,
				"_fnEscapeRegex": _fnEscapeRegex,
				"_fnDeleteIndex": _fnDeleteIndex,
				"_fnReOrderIndex": _fnReOrderIndex,
				"_fnColumnOrdering": _fnColumnOrdering,
				"_fnLog": _fnLog,
				"_fnClearTable": _fnClearTable,
				"_fnSaveState": _fnSaveState,
				"_fnLoadState": _fnLoadState,
				"_fnCreateCookie": _fnCreateCookie,
				"_fnReadCookie": _fnReadCookie,
				"_fnDetectHeader": _fnDetectHeader,
				"_fnGetUniqueThs": _fnGetUniqueThs,
				"_fnScrollBarWidth": _fnScrollBarWidth,
				"_fnApplyToChildren": _fnApplyToChildren,
				"_fnMap": _fnMap,
				"_fnGetRowData": _fnGetRowData,
				"_fnGetCellData": _fnGetCellData,
				"_fnSetCellData": _fnSetCellData,
				"_fnGetObjectDataFn": _fnGetObjectDataFn,
				"_fnSetObjectDataFn": _fnSetObjectDataFn,
				"_fnApplyColumnDefs": _fnApplyColumnDefs,
				"_fnBindAction": _fnBindAction,
				"_fnExtend": _fnExtend,
				"_fnCallbackReg": _fnCallbackReg,
				"_fnCallbackFire": _fnCallbackFire,
				"_fnJsonString": _fnJsonString,
				"_fnRender": _fnRender,
				"_fnNodeToColumnIndex": _fnNodeToColumnIndex,
				"_fnInfoMacros": _fnInfoMacros,
				"_fnBrowserDetect": _fnBrowserDetect,
				"_fnGetColumns": _fnGetColumns
			};
			
			$.extend( DataTable.ext.oApi, this.oApi );
			
			for ( var sFunc in DataTable.ext.oApi )
			{
				if ( sFunc )
				{
					this[sFunc] = _fnExternApiFunc(sFunc);
				}
			}
			
			
			var _that = this;
			this.each(function() {
				var i=0, iLen, j, jLen, k, kLen;
				var sId = this.getAttribute( 'id' );
				var bInitHandedOff = false;
				var bUsePassedData = false;
				
				
				/* Sanity check */
				if ( this.nodeName.toLowerCase() != 'table' )
				{
					_fnLog( null, 0, "Attempted to initialise DataTables on a node which is not a "+
						"table: "+this.nodeName );
					return;
				}
				
				/* Check to see if we are re-initialising a table */
				for ( i=0, iLen=DataTable.settings.length ; i<iLen ; i++ )
				{
					/* Base check on table node */
					if ( DataTable.settings[i].nTable == this )
					{
						if ( oInit === undefined || oInit.bRetrieve )
						{
							return DataTable.settings[i].oInstance;
						}
						else if ( oInit.bDestroy )
						{
							DataTable.settings[i].oInstance.fnDestroy();
							break;
						}
						else
						{
							_fnLog( DataTable.settings[i], 0, "Cannot reinitialise DataTable.\n\n"+
								"To retrieve the DataTables object for this table, pass no arguments or see "+
								"the docs for bRetrieve and bDestroy" );
							return;
						}
					}
					
					/* If the element we are initialising has the same ID as a table which was previously
					 * initialised, but the table nodes don't match (from before) then we destroy the old
					 * instance by simply deleting it. This is under the assumption that the table has been
					 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
					 */
					if ( DataTable.settings[i].sTableId == this.id )
					{
						DataTable.settings.splice( i, 1 );
						break;
					}
				}
				
				/* Ensure the table has an ID - required for accessibility */
				if ( sId === null || sId === "" )
				{
					sId = "DataTables_Table_"+(DataTable.ext._oExternConfig.iNextUnique++);
					this.id = sId;
				}
				
				/* Create the settings object for this table and set some of the default parameters */
				var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
					"nTable":        this,
					"oApi":          _that.oApi,
					"oInit":         oInit,
					"sDestroyWidth": $(this).width(),
					"sInstance":     sId,
					"sTableId":      sId
				} );
				DataTable.settings.push( oSettings );
				
				// Need to add the instance after the instance after the settings object has been added
				// to the settings array, so we can self reference the table instance if more than one
				oSettings.oInstance = (_that.length===1) ? _that : $(this).dataTable();
				
				/* Setting up the initialisation object */
				if ( !oInit )
				{
					oInit = {};
				}
				
				// Backwards compatibility, before we apply all the defaults
				if ( oInit.oLanguage )
				{
					_fnLanguageCompat( oInit.oLanguage );
				}
				
				oInit = _fnExtend( $.extend(true, {}, DataTable.defaults), oInit );
				
				// Map the initialisation options onto the settings object
				_fnMap( oSettings.oFeatures, oInit, "bPaginate" );
				_fnMap( oSettings.oFeatures, oInit, "bLengthChange" );
				_fnMap( oSettings.oFeatures, oInit, "bFilter" );
				_fnMap( oSettings.oFeatures, oInit, "bSort" );
				_fnMap( oSettings.oFeatures, oInit, "bInfo" );
				_fnMap( oSettings.oFeatures, oInit, "bProcessing" );
				_fnMap( oSettings.oFeatures, oInit, "bAutoWidth" );
				_fnMap( oSettings.oFeatures, oInit, "bSortClasses" );
				_fnMap( oSettings.oFeatures, oInit, "bServerSide" );
				_fnMap( oSettings.oFeatures, oInit, "bDeferRender" );
				_fnMap( oSettings.oScroll, oInit, "sScrollX", "sX" );
				_fnMap( oSettings.oScroll, oInit, "sScrollXInner", "sXInner" );
				_fnMap( oSettings.oScroll, oInit, "sScrollY", "sY" );
				_fnMap( oSettings.oScroll, oInit, "bScrollCollapse", "bCollapse" );
				_fnMap( oSettings.oScroll, oInit, "bScrollInfinite", "bInfinite" );
				_fnMap( oSettings.oScroll, oInit, "iScrollLoadGap", "iLoadGap" );
				_fnMap( oSettings.oScroll, oInit, "bScrollAutoCss", "bAutoCss" );
				_fnMap( oSettings, oInit, "asStripeClasses" );
				_fnMap( oSettings, oInit, "asStripClasses", "asStripeClasses" ); // legacy
				_fnMap( oSettings, oInit, "fnServerData" );
				_fnMap( oSettings, oInit, "fnFormatNumber" );
				_fnMap( oSettings, oInit, "sServerMethod" );
				_fnMap( oSettings, oInit, "aaSorting" );
				_fnMap( oSettings, oInit, "aaSortingFixed" );
				_fnMap( oSettings, oInit, "aLengthMenu" );
				_fnMap( oSettings, oInit, "sPaginationType" );
				_fnMap( oSettings, oInit, "sAjaxSource" );
				_fnMap( oSettings, oInit, "sAjaxDataProp" );
				_fnMap( oSettings, oInit, "iCookieDuration" );
				_fnMap( oSettings, oInit, "sCookiePrefix" );
				_fnMap( oSettings, oInit, "sDom" );
				_fnMap( oSettings, oInit, "bSortCellsTop" );
				_fnMap( oSettings, oInit, "iTabIndex" );
				_fnMap( oSettings, oInit, "oSearch", "oPreviousSearch" );
				_fnMap( oSettings, oInit, "aoSearchCols", "aoPreSearchCols" );
				_fnMap( oSettings, oInit, "iDisplayLength", "_iDisplayLength" );
				_fnMap( oSettings, oInit, "bJQueryUI", "bJUI" );
				_fnMap( oSettings, oInit, "fnCookieCallback" );
				_fnMap( oSettings, oInit, "fnStateLoad" );
				_fnMap( oSettings, oInit, "fnStateSave" );
				_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
				
				/* Callback functions which are array driven */
				_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
				_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
				_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
				_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
				_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
				_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
				_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
				_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
				_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
				_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
				_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
				
				if ( oSettings.oFeatures.bServerSide && oSettings.oFeatures.bSort &&
					   oSettings.oFeatures.bSortClasses )
				{
					/* Enable sort classes for server-side processing. Safe to do it here, since server-side
					 * processing must be enabled by the developer
					 */
					_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSortingClasses, 'server_side_sort_classes' );
				}
				else if ( oSettings.oFeatures.bDeferRender )
				{
					_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSortingClasses, 'defer_sort_classes' );
				}
				
				if ( oInit.bJQueryUI )
				{
					/* Use the JUI classes object for display. You could clone the oStdClasses object if 
					 * you want to have multiple tables with multiple independent classes 
					 */
					$.extend( oSettings.oClasses, DataTable.ext.oJUIClasses );
					
					if ( oInit.sDom === DataTable.defaults.sDom && DataTable.defaults.sDom === "lfrtip" )
					{
						/* Set the DOM to use a layout suitable for jQuery UI's theming */
						oSettings.sDom = '<"H"lfr>t<"F"ip>';
					}
				}
				else
				{
					$.extend( oSettings.oClasses, DataTable.ext.oStdClasses );
				}
				$(this).addClass( oSettings.oClasses.sTable );
				
				/* Calculate the scroll bar width and cache it for use later on */
				if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )
				{
					oSettings.oScroll.iBarWidth = _fnScrollBarWidth();
				}
				
				if ( oSettings.iInitDisplayStart === undefined )
				{
					/* Display start point, taking into account the save saving */
					oSettings.iInitDisplayStart = oInit.iDisplayStart;
					oSettings._iDisplayStart = oInit.iDisplayStart;
				}
				
				/* Must be done after everything which can be overridden by a cookie! */
				if ( oInit.bStateSave )
				{
					oSettings.oFeatures.bStateSave = true;
					_fnLoadState( oSettings, oInit );
					_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
				}
				
				if ( oInit.iDeferLoading !== null )
				{
					oSettings.bDeferLoading = true;
					var tmp = $.isArray( oInit.iDeferLoading );
					oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
					oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
				}
				
				if ( oInit.aaData !== null )
				{
					bUsePassedData = true;
				}
				
				/* Language definitions */
				if ( oInit.oLanguage.sUrl !== "" )
				{
					/* Get the language definitions from a file - because this Ajax call makes the language
					 * get async to the remainder of this function we use bInitHandedOff to indicate that 
					 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
					 */
					oSettings.oLanguage.sUrl = oInit.oLanguage.sUrl;
					$.getJSON( oSettings.oLanguage.sUrl, null, function( json ) {
						_fnLanguageCompat( json );
						$.extend( true, oSettings.oLanguage, oInit.oLanguage, json );
						_fnInitialise( oSettings );
					} );
					bInitHandedOff = true;
				}
				else
				{
					$.extend( true, oSettings.oLanguage, oInit.oLanguage );
				}
				
				
				/*
				 * Stripes
				 */
				if ( oInit.asStripeClasses === null )
				{
					oSettings.asStripeClasses =[
						oSettings.oClasses.sStripeOdd,
						oSettings.oClasses.sStripeEven
					];
				}
				
				/* Remove row stripe classes if they are already on the table row */
				iLen=oSettings.asStripeClasses.length;
				oSettings.asDestroyStripes = [];
				if (iLen)
				{
					var bStripeRemove = false;
					var anRows = $(this).children('tbody').children('tr:lt(' + iLen + ')');
					for ( i=0 ; i<iLen ; i++ )
					{
						if ( anRows.hasClass( oSettings.asStripeClasses[i] ) )
						{
							bStripeRemove = true;
							
							/* Store the classes which we are about to remove so they can be re-added on destroy */
							oSettings.asDestroyStripes.push( oSettings.asStripeClasses[i] );
						}
					}
					
					if ( bStripeRemove )
					{
						anRows.removeClass( oSettings.asStripeClasses.join(' ') );
					}
				}
				
				/*
				 * Columns
				 * See if we should load columns automatically or use defined ones
				 */
				var anThs = [];
				var aoColumnsInit;
				var nThead = this.getElementsByTagName('thead');
				if ( nThead.length !== 0 )
				{
					_fnDetectHeader( oSettings.aoHeader, nThead[0] );
					anThs = _fnGetUniqueThs( oSettings );
				}
				
				/* If not given a column array, generate one with nulls */
				if ( oInit.aoColumns === null )
				{
					aoColumnsInit = [];
					for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
					{
						aoColumnsInit.push( null );
					}
				}
				else
				{
					aoColumnsInit = oInit.aoColumns;
				}
				
				/* Add the columns */
				for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
				{
					/* Short cut - use the loop to check if we have column visibility state to restore */
					if ( oInit.saved_aoColumns !== undefined && oInit.saved_aoColumns.length == iLen )
					{
						if ( aoColumnsInit[i] === null )
						{
							aoColumnsInit[i] = {};
						}
						aoColumnsInit[i].bVisible = oInit.saved_aoColumns[i].bVisible;
					}
					
					_fnAddColumn( oSettings, anThs ? anThs[i] : null );
				}
				
				/* Apply the column definitions */
				_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
					_fnColumnOptions( oSettings, iCol, oDef );
				} );
				
				
				/*
				 * Sorting
				 * Check the aaSorting array
				 */
				for ( i=0, iLen=oSettings.aaSorting.length ; i<iLen ; i++ )
				{
					if ( oSettings.aaSorting[i][0] >= oSettings.aoColumns.length )
					{
						oSettings.aaSorting[i][0] = 0;
					}
					var oColumn = oSettings.aoColumns[ oSettings.aaSorting[i][0] ];
					
					/* Add a default sorting index */
					if ( oSettings.aaSorting[i][2] === undefined )
					{
						oSettings.aaSorting[i][2] = 0;
					}
					
					/* If aaSorting is not defined, then we use the first indicator in asSorting */
					if ( oInit.aaSorting === undefined && oSettings.saved_aaSorting === undefined )
					{
						oSettings.aaSorting[i][1] = oColumn.asSorting[0];
					}
					
					/* Set the current sorting index based on aoColumns.asSorting */
					for ( j=0, jLen=oColumn.asSorting.length ; j<jLen ; j++ )
					{
						if ( oSettings.aaSorting[i][1] == oColumn.asSorting[j] )
						{
							oSettings.aaSorting[i][2] = j;
							break;
						}
					}
				}
					
				/* Do a first pass on the sorting classes (allows any size changes to be taken into
				 * account, and also will apply sorting disabled classes if disabled
				 */
				_fnSortingClasses( oSettings );
				
				
				/*
				 * Final init
				 * Cache the header, body and footer as required, creating them if needed
				 */
				
				/* Browser support detection */
				_fnBrowserDetect( oSettings );
				
				// Work around for Webkit bug 83867 - store the caption-side before removing from doc
				var captions = $(this).children('caption').each( function () {
					this._captionSide = $(this).css('caption-side');
				} );
				
				var thead = $(this).children('thead');
				if ( thead.length === 0 )
				{
					thead = [ document.createElement( 'thead' ) ];
					this.appendChild( thead[0] );
				}
				oSettings.nTHead = thead[0];
				
				var tbody = $(this).children('tbody');
				if ( tbody.length === 0 )
				{
					tbody = [ document.createElement( 'tbody' ) ];
					this.appendChild( tbody[0] );
				}
				oSettings.nTBody = tbody[0];
				oSettings.nTBody.setAttribute( "role", "alert" );
				oSettings.nTBody.setAttribute( "aria-live", "polite" );
				oSettings.nTBody.setAttribute( "aria-relevant", "all" );
				
				var tfoot = $(this).children('tfoot');
				if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") )
				{
					// If we are a scrolling table, and no footer has been given, then we need to create
					// a tfoot element for the caption element to be appended to
					tfoot = [ document.createElement( 'tfoot' ) ];
					this.appendChild( tfoot[0] );
				}
				
				if ( tfoot.length > 0 )
				{
					oSettings.nTFoot = tfoot[0];
					_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
				}
				
				/* Check if there is data passing into the constructor */
				if ( bUsePassedData )
				{
					for ( i=0 ; i<oInit.aaData.length ; i++ )
					{
						_fnAddData( oSettings, oInit.aaData[ i ] );
					}
				}
				else
				{
					/* Grab the data from the page */
					_fnGatherData( oSettings );
				}
				
				/* Copy the data index array */
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
				
				/* Initialisation complete - table can be drawn */
				oSettings.bInitialised = true;
				
				/* Check if we need to initialise the table (it might not have been handed off to the
				 * language processor)
				 */
				if ( bInitHandedOff === false )
				{
					_fnInitialise( oSettings );
				}
			} );
			_that = null;
			return this;
		};

		
		
		/**
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
		 * to ensure compatibility.
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
		 *    formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
		 *    version, or false if this version of DataTales is not suitable
		 *  @static
		 *  @dtopt API-Static
		 *
		 *  @example
		 *    alert( $.fn.dataTable.fnVersionCheck( '1.9.0' ) );
		 */
		DataTable.fnVersionCheck = function( sVersion )
		{
			/* This is cheap, but effective */
			var fnZPad = function (Zpad, count)
			{
				while(Zpad.length < count) {
					Zpad += '0';
				}
				return Zpad;
			};
			var aThis = DataTable.ext.sVersion.split('.');
			var aThat = sVersion.split('.');
			var sThis = '', sThat = '';
			
			for ( var i=0, iLen=aThat.length ; i<iLen ; i++ )
			{
				sThis += fnZPad( aThis[i], 3 );
				sThat += fnZPad( aThat[i], 3 );
			}
			
			return parseInt(sThis, 10) >= parseInt(sThat, 10);
		};
		
		
		/**
		 * Check if a TABLE node is a DataTable table already or not.
		 *  @param {node} nTable The TABLE node to check if it is a DataTable or not (note that other
		 *    node types can be passed in, but will always return false).
		 *  @returns {boolean} true the table given is a DataTable, or false otherwise
		 *  @static
		 *  @dtopt API-Static
		 *
		 *  @example
		 *    var ex = document.getElementById('example');
		 *    if ( ! $.fn.DataTable.fnIsDataTable( ex ) ) {
		 *      $(ex).dataTable();
		 *    }
		 */
		DataTable.fnIsDataTable = function ( nTable )
		{
			var o = DataTable.settings;
		
			for ( var i=0 ; i<o.length ; i++ )
			{
				if ( o[i].nTable === nTable || o[i].nScrollHead === nTable || o[i].nScrollFoot === nTable )
				{
					return true;
				}
			}
		
			return false;
		};
		
		
		/**
		 * Get all DataTable tables that have been initialised - optionally you can select to
		 * get only currently visible tables.
		 *  @param {boolean} [bVisible=false] Flag to indicate if you want all (default) or 
		 *    visible tables only.
		 *  @returns {array} Array of TABLE nodes (not DataTable instances) which are DataTables
		 *  @static
		 *  @dtopt API-Static
		 *
		 *  @example
		 *    var table = $.fn.dataTable.fnTables(true);
		 *    if ( table.length > 0 ) {
		 *      $(table).dataTable().fnAdjustColumnSizing();
		 *    }
		 */
		DataTable.fnTables = function ( bVisible )
		{
			var out = [];
		
			jQuery.each( DataTable.settings, function (i, o) {
				if ( !bVisible || (bVisible === true && $(o.nTable).is(':visible')) )
				{
					out.push( o.nTable );
				}
			} );
		
			return out;
		};
		

		/**
		 * Version string for plug-ins to check compatibility. Allowed format is
		 * a.b.c.d.e where: a:int, b:int, c:int, d:string(dev|beta), e:int. d and
		 * e are optional
		 *  @member
		 *  @type string
		 *  @default Version number
		 */
		DataTable.version = "1.9.4";

		/**
		 * Private data store, containing all of the settings objects that are created for the
		 * tables on a given page.
		 * 
		 * Note that the <i>DataTable.settings</i> object is aliased to <i>jQuery.fn.dataTableExt</i> 
		 * through which it may be accessed and manipulated, or <i>jQuery.fn.dataTable.settings</i>.
		 *  @member
		 *  @type array
		 *  @default []
		 *  @private
		 */
		DataTable.settings = [];

		/**
		 * Object models container, for the various models that DataTables has available
		 * to it. These models define the objects that are used to hold the active state 
		 * and configuration of the table.
		 *  @namespace
		 */
		DataTable.models = {};
		
		
		/**
		 * DataTables extension options and plug-ins. This namespace acts as a collection "area"
		 * for plug-ins that can be used to extend the default DataTables behaviour - indeed many
		 * of the build in methods use this method to provide their own capabilities (sorting methods
		 * for example).
		 * 
		 * Note that this namespace is aliased to jQuery.fn.dataTableExt so it can be readily accessed
		 * and modified by plug-ins.
		 *  @namespace
		 */
		DataTable.models.ext = {
			/**
			 * Plug-in filtering functions - this method of filtering is complimentary to the default
			 * type based filtering, and a lot more comprehensive as it allows you complete control
			 * over the filtering logic. Each element in this array is a function (parameters
			 * described below) that is called for every row in the table, and your logic decides if
			 * it should be included in the filtered data set or not.
			 *   <ul>
			 *     <li>
			 *       Function input parameters:
			 *       <ul>
			 *         <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>
			 *         <li>{array|object} Data for the row to be processed (same as the original format
			 *           that was passed in as the data source, or an array from a DOM data source</li>
			 *         <li>{int} Row index in aoData ({@link DataTable.models.oSettings.aoData}), which can
			 *           be useful to retrieve the TR element if you need DOM interaction.</li>
			 *       </ul>
			 *     </li>
			 *     <li>
			 *       Function return:
			 *       <ul>
			 *         <li>{boolean} Include the row in the filtered result set (true) or not (false)</li>
			 *       </ul>
			 *     </il>
			 *   </ul>
			 *  @type array
			 *  @default []
			 *
			 *  @example
			 *    // The following example shows custom filtering being applied to the fourth column (i.e.
			 *    // the aData[3] index) based on two input values from the end-user, matching the data in 
			 *    // a certain range.
			 *    $.fn.dataTableExt.afnFiltering.push(
			 *      function( oSettings, aData, iDataIndex ) {
			 *        var iMin = document.getElementById('min').value * 1;
			 *        var iMax = document.getElementById('max').value * 1;
			 *        var iVersion = aData[3] == "-" ? 0 : aData[3]*1;
			 *        if ( iMin == "" && iMax == "" ) {
			 *          return true;
			 *        }
			 *        else if ( iMin == "" && iVersion < iMax ) {
			 *          return true;
			 *        }
			 *        else if ( iMin < iVersion && "" == iMax ) {
			 *          return true;
			 *        }
			 *        else if ( iMin < iVersion && iVersion < iMax ) {
			 *          return true;
			 *        }
			 *        return false;
			 *      }
			 *    );
			 */
			"afnFiltering": [],
		
		
			/**
			 * Plug-in sorting functions - this method of sorting is complimentary to the default type
			 * based sorting that DataTables does automatically, allowing much greater control over the
			 * the data that is being used to sort a column. This is useful if you want to do sorting
			 * based on live data (for example the contents of an 'input' element) rather than just the
			 * static string that DataTables knows of. The way these plug-ins work is that you create
			 * an array of the values you wish to be sorted for the column in question and then return
			 * that array. Which pre-sorting function is run here depends on the sSortDataType parameter
			 * that is used for the column (if any). This is the corollary of <i>ofnSearch</i> for sort 
			 * data.
			 *   <ul>
		     *     <li>
		     *       Function input parameters:
		     *       <ul>
			 *         <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>
		     *         <li>{int} Target column index</li>
		     *       </ul>
		     *     </li>
			 *     <li>
			 *       Function return:
			 *       <ul>
			 *         <li>{array} Data for the column to be sorted upon</li>
			 *       </ul>
			 *     </il>
			 *   </ul>
			 *  
			 * Note that as of v1.9, it is typically preferable to use <i>mData</i> to prepare data for
			 * the different uses that DataTables can put the data to. Specifically <i>mData</i> when
			 * used as a function will give you a 'type' (sorting, filtering etc) that you can use to 
			 * prepare the data as required for the different types. As such, this method is deprecated.
			 *  @type array
			 *  @default []
			 *  @deprecated
			 *
			 *  @example
			 *    // Updating the cached sorting information with user entered values in HTML input elements
			 *    jQuery.fn.dataTableExt.afnSortData['dom-text'] = function ( oSettings, iColumn )
			 *    {
			 *      var aData = [];
			 *      $( 'td:eq('+iColumn+') input', oSettings.oApi._fnGetTrNodes(oSettings) ).each( function () {
			 *        aData.push( this.value );
			 *      } );
			 *      return aData;
			 *    }
			 */
			"afnSortData": [],
		
		
			/**
			 * Feature plug-ins - This is an array of objects which describe the feature plug-ins that are
			 * available to DataTables. These feature plug-ins are accessible through the sDom initialisation
			 * option. As such, each feature plug-in must describe a function that is used to initialise
			 * itself (fnInit), a character so the feature can be enabled by sDom (cFeature) and the name
			 * of the feature (sFeature). Thus the objects attached to this method must provide:
			 *   <ul>
			 *     <li>{function} fnInit Initialisation of the plug-in
			 *       <ul>
		     *         <li>
		     *           Function input parameters:
		     *           <ul>
			 *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>
		     *           </ul>
		     *         </li>
			 *         <li>
			 *           Function return:
			 *           <ul>
			 *             <li>{node|null} The element which contains your feature. Note that the return
			 *                may also be void if your plug-in does not require to inject any DOM elements 
			 *                into DataTables control (sDom) - for example this might be useful when 
			 *                developing a plug-in which allows table control via keyboard entry.</li>
			 *           </ul>
			 *         </il>
			 *       </ul>
			 *     </li>
			 *     <li>{character} cFeature Character that will be matched in sDom - case sensitive</li>
			 *     <li>{string} sFeature Feature name</li>
			 *   </ul>
			 *  @type array
			 *  @default []
			 * 
			 *  @example
			 *    // How TableTools initialises itself.
			 *    $.fn.dataTableExt.aoFeatures.push( {
			 *      "fnInit": function( oSettings ) {
			 *        return new TableTools( { "oDTSettings": oSettings } );
			 *      },
			 *      "cFeature": "T",
			 *      "sFeature": "TableTools"
			 *    } );
			 */
			"aoFeatures": [],
		
		
			/**
			 * Type detection plug-in functions - DataTables utilises types to define how sorting and
			 * filtering behave, and types can be either  be defined by the developer (sType for the
			 * column) or they can be automatically detected by the methods in this array. The functions
			 * defined in the array are quite simple, taking a single parameter (the data to analyse) 
			 * and returning the type if it is a known type, or null otherwise.
			 *   <ul>
		     *     <li>
		     *       Function input parameters:
		     *       <ul>
			 *         <li>{*} Data from the column cell to be analysed</li>
		     *       </ul>
		     *     </li>
			 *     <li>
			 *       Function return:
			 *       <ul>
			 *         <li>{string|null} Data type detected, or null if unknown (and thus pass it
			 *           on to the other type detection functions.</li>
			 *       </ul>
			 *     </il>
			 *   </ul>
			 *  @type array
			 *  @default []
			 *  
			 *  @example
			 *    // Currency type detection plug-in:
			 *    jQuery.fn.dataTableExt.aTypes.push(
			 *      function ( sData ) {
			 *        var sValidChars = "0123456789.-";
			 *        var Char;
			 *        
			 *        // Check the numeric part
			 *        for ( i=1 ; i<sData.length ; i++ ) {
			 *          Char = sData.charAt(i); 
			 *          if (sValidChars.indexOf(Char) == -1) {
			 *            return null;
			 *          }
			 *        }
			 *        
			 *        // Check prefixed by currency
			 *        if ( sData.charAt(0) == '$' || sData.charAt(0) == '&pound;' ) {
			 *          return 'currency';
			 *        }
			 *        return null;
			 *      }
			 *    );
			 */
			"aTypes": [],
		
		
			/**
			 * Provide a common method for plug-ins to check the version of DataTables being used, 
			 * in order to ensure compatibility.
			 *  @type function
			 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note 
			 *    that the formats "X" and "X.Y" are also acceptable.
			 *  @returns {boolean} true if this version of DataTables is greater or equal to the 
			 *    required version, or false if this version of DataTales is not suitable
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
			 *    } );
			 */
			"fnVersionCheck": DataTable.fnVersionCheck,
		
		
			/**
			 * Index for what 'this' index API functions should use
			 *  @type int
			 *  @default 0
			 */
			"iApiIndex": 0,
		
		
			/**
			 * Pre-processing of filtering data plug-ins - When you assign the sType for a column
			 * (or have it automatically detected for you by DataTables or a type detection plug-in), 
			 * you will typically be using this for custom sorting, but it can also be used to provide 
			 * custom filtering by allowing you to pre-processing the data and returning the data in
			 * the format that should be filtered upon. This is done by adding functions this object 
			 * with a parameter name which matches the sType for that target column. This is the
			 * corollary of <i>afnSortData</i> for filtering data.
			 *   <ul>
		     *     <li>
		     *       Function input parameters:
		     *       <ul>
			 *         <li>{*} Data from the column cell to be prepared for filtering</li>
		     *       </ul>
		     *     </li>
			 *     <li>
			 *       Function return:
			 *       <ul>
			 *         <li>{string|null} Formatted string that will be used for the filtering.</li>
			 *       </ul>
			 *     </il>
			 *   </ul>
			 * 
			 * Note that as of v1.9, it is typically preferable to use <i>mData</i> to prepare data for
			 * the different uses that DataTables can put the data to. Specifically <i>mData</i> when
			 * used as a function will give you a 'type' (sorting, filtering etc) that you can use to 
			 * prepare the data as required for the different types. As such, this method is deprecated.
			 *  @type object
			 *  @default {}
			 *  @deprecated
			 *
			 *  @example
			 *    $.fn.dataTableExt.ofnSearch['title-numeric'] = function ( sData ) {
			 *      return sData.replace(/\n/g," ").replace( /<.*?>/g, "" );
			 *    }
			 */
			"ofnSearch": {},
		
		
			/**
			 * Container for all private functions in DataTables so they can be exposed externally
			 *  @type object
			 *  @default {}
			 */
			"oApi": {},
		
		
			/**
			 * Storage for the various classes that DataTables uses
			 *  @type object
			 *  @default {}
			 */
			"oStdClasses": {},
			
		
			/**
			 * Storage for the various classes that DataTables uses - jQuery UI suitable
			 *  @type object
			 *  @default {}
			 */
			"oJUIClasses": {},
		
		
			/**
			 * Pagination plug-in methods - The style and controls of the pagination can significantly 
			 * impact on how the end user interacts with the data in your table, and DataTables allows 
			 * the addition of pagination controls by extending this object, which can then be enabled
			 * through the <i>sPaginationType</i> initialisation parameter. Each pagination type that
			 * is added is an object (the property name of which is what <i>sPaginationType</i> refers
			 * to) that has two properties, both methods that are used by DataTables to update the
			 * control's state.
			 *   <ul>
			 *     <li>
			 *       fnInit -  Initialisation of the paging controls. Called only during initialisation 
			 *         of the table. It is expected that this function will add the required DOM elements 
			 *         to the page for the paging controls to work. The element pointer 
			 *         'oSettings.aanFeatures.p' array is provided by DataTables to contain the paging 
			 *         controls (note that this is a 2D array to allow for multiple instances of each 
			 *         DataTables DOM element). It is suggested that you add the controls to this element 
			 *         as children
			 *       <ul>
		     *         <li>
		     *           Function input parameters:
		     *           <ul>
			 *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>
			 *             <li>{node} Container into which the pagination controls must be inserted</li>
			 *             <li>{function} Draw callback function - whenever the controls cause a page
			 *               change, this method must be called to redraw the table.</li>
		     *           </ul>
		     *         </li>
			 *         <li>
			 *           Function return:
			 *           <ul>
			 *             <li>No return required</li>
			 *           </ul>
			 *         </il>
			 *       </ul>
			 *     </il>
			 *     <li>
			 *       fnInit -  This function is called whenever the paging status of the table changes and is
			 *         typically used to update classes and/or text of the paging controls to reflex the new 
			 *         status.
			 *       <ul>
		     *         <li>
		     *           Function input parameters:
		     *           <ul>
			 *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>
			 *             <li>{function} Draw callback function - in case you need to redraw the table again
			 *               or attach new event listeners</li>
		     *           </ul>
		     *         </li>
			 *         <li>
			 *           Function return:
			 *           <ul>
			 *             <li>No return required</li>
			 *           </ul>
			 *         </il>
			 *       </ul>
			 *     </il>
			 *   </ul>
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    $.fn.dataTableExt.oPagination.four_button = {
			 *      "fnInit": function ( oSettings, nPaging, fnCallbackDraw ) {
			 *        nFirst = document.createElement( 'span' );
			 *        nPrevious = document.createElement( 'span' );
			 *        nNext = document.createElement( 'span' );
			 *        nLast = document.createElement( 'span' );
			 *        
			 *        nFirst.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sFirst ) );
			 *        nPrevious.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sPrevious ) );
			 *        nNext.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sNext ) );
			 *        nLast.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sLast ) );
			 *        
			 *        nFirst.className = "paginate_button first";
			 *        nPrevious.className = "paginate_button previous";
			 *        nNext.className="paginate_button next";
			 *        nLast.className = "paginate_button last";
			 *        
			 *        nPaging.appendChild( nFirst );
			 *        nPaging.appendChild( nPrevious );
			 *        nPaging.appendChild( nNext );
			 *        nPaging.appendChild( nLast );
			 *        
			 *        $(nFirst).click( function () {
			 *          oSettings.oApi._fnPageChange( oSettings, "first" );
			 *          fnCallbackDraw( oSettings );
			 *        } );
			 *        
			 *        $(nPrevious).click( function() {
			 *          oSettings.oApi._fnPageChange( oSettings, "previous" );
			 *          fnCallbackDraw( oSettings );
			 *        } );
			 *        
			 *        $(nNext).click( function() {
			 *          oSettings.oApi._fnPageChange( oSettings, "next" );
			 *          fnCallbackDraw( oSettings );
			 *        } );
			 *        
			 *        $(nLast).click( function() {
			 *          oSettings.oApi._fnPageChange( oSettings, "last" );
			 *          fnCallbackDraw( oSettings );
			 *        } );
			 *        
			 *        $(nFirst).bind( 'selectstart', function () { return false; } );
			 *        $(nPrevious).bind( 'selectstart', function () { return false; } );
			 *        $(nNext).bind( 'selectstart', function () { return false; } );
			 *        $(nLast).bind( 'selectstart', function () { return false; } );
			 *      },
			 *      
			 *      "fnUpdate": function ( oSettings, fnCallbackDraw ) {
			 *        if ( !oSettings.aanFeatures.p ) {
			 *          return;
			 *        }
			 *        
			 *        // Loop over each instance of the pager
			 *        var an = oSettings.aanFeatures.p;
			 *        for ( var i=0, iLen=an.length ; i<iLen ; i++ ) {
			 *          var buttons = an[i].getElementsByTagName('span');
			 *          if ( oSettings._iDisplayStart === 0 ) {
			 *            buttons[0].className = "paginate_disabled_previous";
			 *            buttons[1].className = "paginate_disabled_previous";
			 *          }
			 *          else {
			 *            buttons[0].className = "paginate_enabled_previous";
			 *            buttons[1].className = "paginate_enabled_previous";
			 *          }
			 *          
			 *          if ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() ) {
			 *            buttons[2].className = "paginate_disabled_next";
			 *            buttons[3].className = "paginate_disabled_next";
			 *          }
			 *          else {
			 *            buttons[2].className = "paginate_enabled_next";
			 *            buttons[3].className = "paginate_enabled_next";
			 *          }
			 *        }
			 *      }
			 *    };
			 */
			"oPagination": {},
		
		
			/**
			 * Sorting plug-in methods - Sorting in DataTables is based on the detected type of the
			 * data column (you can add your own type detection functions, or override automatic 
			 * detection using sType). With this specific type given to the column, DataTables will 
			 * apply the required sort from the functions in the object. Each sort type must provide
			 * two mandatory methods, one each for ascending and descending sorting, and can optionally
			 * provide a pre-formatting method that will help speed up sorting by allowing DataTables
			 * to pre-format the sort data only once (rather than every time the actual sort functions
			 * are run). The two sorting functions are typical Javascript sort methods:
			 *   <ul>
		     *     <li>
		     *       Function input parameters:
		     *       <ul>
			 *         <li>{*} Data to compare to the second parameter</li>
			 *         <li>{*} Data to compare to the first parameter</li>
		     *       </ul>
		     *     </li>
			 *     <li>
			 *       Function return:
			 *       <ul>
			 *         <li>{int} Sorting match: <0 if first parameter should be sorted lower than
			 *           the second parameter, ===0 if the two parameters are equal and >0 if
			 *           the first parameter should be sorted height than the second parameter.</li>
			 *       </ul>
			 *     </il>
			 *   </ul>
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    // Case-sensitive string sorting, with no pre-formatting method
			 *    $.extend( $.fn.dataTableExt.oSort, {
			 *      "string-case-asc": function(x,y) {
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			 *      },
			 *      "string-case-desc": function(x,y) {
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			 *      }
			 *    } );
			 *
			 *  @example
			 *    // Case-insensitive string sorting, with pre-formatting
			 *    $.extend( $.fn.dataTableExt.oSort, {
			 *      "string-pre": function(x) {
			 *        return x.toLowerCase();
			 *      },
			 *      "string-asc": function(x,y) {
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			 *      },
			 *      "string-desc": function(x,y) {
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			 *      }
			 *    } );
			 */
			"oSort": {},
		
		
			/**
			 * Version string for plug-ins to check compatibility. Allowed format is
			 * a.b.c.d.e where: a:int, b:int, c:int, d:string(dev|beta), e:int. d and
			 * e are optional
			 *  @type string
			 *  @default Version number
			 */
			"sVersion": DataTable.version,
		
		
			/**
			 * How should DataTables report an error. Can take the value 'alert' or 'throw'
			 *  @type string
			 *  @default alert
			 */
			"sErrMode": "alert",
		
		
			/**
			 * Store information for DataTables to access globally about other instances
			 *  @namespace
			 *  @private
			 */
			"_oExternConfig": {
				/* int:iNextUnique - next unique number for an instance */
				"iNextUnique": 0
			}
		};
		
		
		
		
		/**
		 * Template object for the way in which DataTables holds information about
		 * search information for the global filter and individual column filters.
		 *  @namespace
		 */
		DataTable.models.oSearch = {
			/**
			 * Flag to indicate if the filtering should be case insensitive or not
			 *  @type boolean
			 *  @default true
			 */
			"bCaseInsensitive": true,
		
			/**
			 * Applied search term
			 *  @type string
			 *  @default <i>Empty string</i>
			 */
			"sSearch": "",
		
			/**
			 * Flag to indicate if the search term should be interpreted as a
			 * regular expression (true) or not (false) and therefore and special
			 * regex characters escaped.
			 *  @type boolean
			 *  @default false
			 */
			"bRegex": false,
		
			/**
			 * Flag to indicate if DataTables is to use its smart filtering or not.
			 *  @type boolean
			 *  @default true
			 */
			"bSmart": true
		};
		
		
		
		
		/**
		 * Template object for the way in which DataTables holds information about
		 * each individual row. This is the object format used for the settings 
		 * aoData array.
		 *  @namespace
		 */
		DataTable.models.oRow = {
			/**
			 * TR element for the row
			 *  @type node
			 *  @default null
			 */
			"nTr": null,
		
			/**
			 * Data object from the original data source for the row. This is either
			 * an array if using the traditional form of DataTables, or an object if
			 * using mData options. The exact type will depend on the passed in
			 * data from the data source, or will be an array if using DOM a data 
			 * source.
			 *  @type array|object
			 *  @default []
			 */
			"_aData": [],
		
			/**
			 * Sorting data cache - this array is ostensibly the same length as the
			 * number of columns (although each index is generated only as it is 
			 * needed), and holds the data that is used for sorting each column in the
			 * row. We do this cache generation at the start of the sort in order that
			 * the formatting of the sort data need be done only once for each cell
			 * per sort. This array should not be read from or written to by anything
			 * other than the master sorting methods.
			 *  @type array
			 *  @default []
			 *  @private
			 */
			"_aSortData": [],
		
			/**
			 * Array of TD elements that are cached for hidden rows, so they can be
			 * reinserted into the table if a column is made visible again (or to act
			 * as a store if a column is made hidden). Only hidden columns have a 
			 * reference in the array. For non-hidden columns the value is either
			 * undefined or null.
			 *  @type array nodes
			 *  @default []
			 *  @private
			 */
			"_anHidden": [],
		
			/**
			 * Cache of the class name that DataTables has applied to the row, so we
			 * can quickly look at this variable rather than needing to do a DOM check
			 * on className for the nTr property.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *  @private
			 */
			"_sRowStripe": ""
		};
		
		
		
		/**
		 * Template object for the column information object in DataTables. This object
		 * is held in the settings aoColumns array and contains all the information that
		 * DataTables needs about each individual column.
		 * 
		 * Note that this object is related to {@link DataTable.defaults.columns} 
		 * but this one is the internal data store for DataTables's cache of columns.
		 * It should NOT be manipulated outside of DataTables. Any configuration should
		 * be done through the initialisation options.
		 *  @namespace
		 */
		DataTable.models.oColumn = {
			/**
			 * A list of the columns that sorting should occur on when this column
			 * is sorted. That this property is an array allows multi-column sorting
			 * to be defined for a column (for example first name / last name columns
			 * would benefit from this). The values are integers pointing to the
			 * columns to be sorted on (typically it will be a single integer pointing
			 * at itself, but that doesn't need to be the case).
			 *  @type array
			 */
			"aDataSort": null,
		
			/**
			 * Define the sorting directions that are applied to the column, in sequence
			 * as the column is repeatedly sorted upon - i.e. the first value is used
			 * as the sorting direction when the column if first sorted (clicked on).
			 * Sort it again (click again) and it will move on to the next index.
			 * Repeat until loop.
			 *  @type array
			 */
			"asSorting": null,
			
			/**
			 * Flag to indicate if the column is searchable, and thus should be included
			 * in the filtering or not.
			 *  @type boolean
			 */
			"bSearchable": null,
			
			/**
			 * Flag to indicate if the column is sortable or not.
			 *  @type boolean
			 */
			"bSortable": null,
			
			/**
			 * <code>Deprecated</code> When using fnRender, you have two options for what 
			 * to do with the data, and this property serves as the switch. Firstly, you 
			 * can have the sorting and filtering use the rendered value (true - default), 
			 * or you can have the sorting and filtering us the original value (false).
			 *
			 * Please note that this option has now been deprecated and will be removed
			 * in the next version of DataTables. Please use mRender / mData rather than
			 * fnRender.
			 *  @type boolean
			 *  @deprecated
			 */
			"bUseRendered": null,
			
			/**
			 * Flag to indicate if the column is currently visible in the table or not
			 *  @type boolean
			 */
			"bVisible": null,
			
			/**
			 * Flag to indicate to the type detection method if the automatic type
			 * detection should be used, or if a column type (sType) has been specified
			 *  @type boolean
			 *  @default true
			 *  @private
			 */
			"_bAutoType": true,
			
			/**
			 * Developer definable function that is called whenever a cell is created (Ajax source,
			 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
			 * allowing you to modify the DOM element (add background colour for example) when the
			 * element is available.
			 *  @type function
			 *  @param {element} nTd The TD node that has been created
			 *  @param {*} sData The Data for the cell
			 *  @param {array|object} oData The data for the whole row
			 *  @param {int} iRow The row index for the aoData data store
			 *  @default null
			 */
			"fnCreatedCell": null,
			
			/**
			 * Function to get data from a cell in a column. You should <b>never</b>
			 * access data directly through _aData internally in DataTables - always use
			 * the method attached to this property. It allows mData to function as
			 * required. This function is automatically assigned by the column 
			 * initialisation method
			 *  @type function
			 *  @param {array|object} oData The data array/object for the array 
			 *    (i.e. aoData[]._aData)
			 *  @param {string} sSpecific The specific data type you want to get - 
			 *    'display', 'type' 'filter' 'sort'
			 *  @returns {*} The data for the cell from the given row's data
			 *  @default null
			 */
			"fnGetData": null,
			
			/**
			 * <code>Deprecated</code> Custom display function that will be called for the 
			 * display of each cell in this column.
			 *
			 * Please note that this option has now been deprecated and will be removed
			 * in the next version of DataTables. Please use mRender / mData rather than
			 * fnRender.
			 *  @type function
			 *  @param {object} o Object with the following parameters:
			 *  @param {int}    o.iDataRow The row in aoData
			 *  @param {int}    o.iDataColumn The column in question
			 *  @param {array}  o.aData The data for the row in question
			 *  @param {object} o.oSettings The settings object for this DataTables instance
			 *  @returns {string} The string you which to use in the display
			 *  @default null
			 *  @deprecated
			 */
			"fnRender": null,
			
			/**
			 * Function to set data for a cell in the column. You should <b>never</b> 
			 * set the data directly to _aData internally in DataTables - always use
			 * this method. It allows mData to function as required. This function
			 * is automatically assigned by the column initialisation method
			 *  @type function
			 *  @param {array|object} oData The data array/object for the array 
			 *    (i.e. aoData[]._aData)
			 *  @param {*} sValue Value to set
			 *  @default null
			 */
			"fnSetData": null,
			
			/**
			 * Property to read the value for the cells in the column from the data 
			 * source array / object. If null, then the default content is used, if a
			 * function is given then the return from the function is used.
			 *  @type function|int|string|null
			 *  @default null
			 */
			"mData": null,
			
			/**
			 * Partner property to mData which is used (only when defined) to get
			 * the data - i.e. it is basically the same as mData, but without the
			 * 'set' option, and also the data fed to it is the result from mData.
			 * This is the rendering method to match the data method of mData.
			 *  @type function|int|string|null
			 *  @default null
			 */
			"mRender": null,
			
			/**
			 * Unique header TH/TD element for this column - this is what the sorting
			 * listener is attached to (if sorting is enabled.)
			 *  @type node
			 *  @default null
			 */
			"nTh": null,
			
			/**
			 * Unique footer TH/TD element for this column (if there is one). Not used 
			 * in DataTables as such, but can be used for plug-ins to reference the 
			 * footer for each column.
			 *  @type node
			 *  @default null
			 */
			"nTf": null,
			
			/**
			 * The class to apply to all TD elements in the table's TBODY for the column
			 *  @type string
			 *  @default null
			 */
			"sClass": null,
			
			/**
			 * When DataTables calculates the column widths to assign to each column,
			 * it finds the longest string in each column and then constructs a
			 * temporary table and reads the widths from that. The problem with this
			 * is that "mmm" is much wider then "iiii", but the latter is a longer 
			 * string - thus the calculation can go wrong (doing it properly and putting
			 * it into an DOM object and measuring that is horribly(!) slow). Thus as
			 * a "work around" we provide this option. It will append its value to the
			 * text that is found to be the longest string for the column - i.e. padding.
			 *  @type string
			 */
			"sContentPadding": null,
			
			/**
			 * Allows a default value to be given for a column's data, and will be used
			 * whenever a null data source is encountered (this can be because mData
			 * is set to null, or because the data source itself is null).
			 *  @type string
			 *  @default null
			 */
			"sDefaultContent": null,
			
			/**
			 * Name for the column, allowing reference to the column by name as well as
			 * by index (needs a lookup to work by name).
			 *  @type string
			 */
			"sName": null,
			
			/**
			 * Custom sorting data type - defines which of the available plug-ins in
			 * afnSortData the custom sorting will use - if any is defined.
			 *  @type string
			 *  @default std
			 */
			"sSortDataType": 'std',
			
			/**
			 * Class to be applied to the header element when sorting on this column
			 *  @type string
			 *  @default null
			 */
			"sSortingClass": null,
			
			/**
			 * Class to be applied to the header element when sorting on this column -
			 * when jQuery UI theming is used.
			 *  @type string
			 *  @default null
			 */
			"sSortingClassJUI": null,
			
			/**
			 * Title of the column - what is seen in the TH element (nTh).
			 *  @type string
			 */
			"sTitle": null,
			
			/**
			 * Column sorting and filtering type
			 *  @type string
			 *  @default null
			 */
			"sType": null,
			
			/**
			 * Width of the column
			 *  @type string
			 *  @default null
			 */
			"sWidth": null,
			
			/**
			 * Width of the column when it was first "encountered"
			 *  @type string
			 *  @default null
			 */
			"sWidthOrig": null
		};
		
		
		
		/**
		 * Initialisation options that can be given to DataTables at initialisation 
		 * time.
		 *  @namespace
		 */
		DataTable.defaults = {
			/**
			 * An array of data to use for the table, passed in at initialisation which 
			 * will be used in preference to any data which is already in the DOM. This is
			 * particularly useful for constructing tables purely in Javascript, for
			 * example with a custom Ajax call.
			 *  @type array
			 *  @default null
			 *  @dtopt Option
			 * 
			 *  @example
			 *    // Using a 2D array data source
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "aaData": [
			 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
			 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
			 *        ],
			 *        "aoColumns": [
			 *          { "sTitle": "Engine" },
			 *          { "sTitle": "Browser" },
			 *          { "sTitle": "Platform" },
			 *          { "sTitle": "Version" },
			 *          { "sTitle": "Grade" }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using an array of objects as a data source (mData)
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "aaData": [
			 *          {
			 *            "engine":   "Trident",
			 *            "browser":  "Internet Explorer 4.0",
			 *            "platform": "Win 95+",
			 *            "version":  4,
			 *            "grade":    "X"
			 *          },
			 *          {
			 *            "engine":   "Trident",
			 *            "browser":  "Internet Explorer 5.0",
			 *            "platform": "Win 95+",
			 *            "version":  5,
			 *            "grade":    "C"
			 *          }
			 *        ],
			 *        "aoColumns": [
			 *          { "sTitle": "Engine",   "mData": "engine" },
			 *          { "sTitle": "Browser",  "mData": "browser" },
			 *          { "sTitle": "Platform", "mData": "platform" },
			 *          { "sTitle": "Version",  "mData": "version" },
			 *          { "sTitle": "Grade",    "mData": "grade" }
			 *        ]
			 *      } );
			 *    } );
			 */
			"aaData": null,
		
		
			/**
			 * If sorting is enabled, then DataTables will perform a first pass sort on 
			 * initialisation. You can define which column(s) the sort is performed upon, 
			 * and the sorting direction, with this variable. The aaSorting array should 
			 * contain an array for each column to be sorted initially containing the 
			 * column's index and a direction string ('asc' or 'desc').
			 *  @type array
			 *  @default [[0,'asc']]
			 *  @dtopt Option
			 * 
			 *  @example
			 *    // Sort by 3rd column first, and then 4th column
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aaSorting": [[2,'asc'], [3,'desc']]
			 *      } );
			 *    } );
			 *    
			 *    // No initial sorting
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aaSorting": []
			 *      } );
			 *    } );
			 */
			"aaSorting": [[0,'asc']],
		
		
			/**
			 * This parameter is basically identical to the aaSorting parameter, but 
			 * cannot be overridden by user interaction with the table. What this means 
			 * is that you could have a column (visible or hidden) which the sorting will 
			 * always be forced on first - any sorting after that (from the user) will 
			 * then be performed as required. This can be useful for grouping rows 
			 * together.
			 *  @type array
			 *  @default null
			 *  @dtopt Option
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aaSortingFixed": [[0,'asc']]
			 *      } );
			 *    } )
			 */
			"aaSortingFixed": null,
		
		
			/**
			 * This parameter allows you to readily specify the entries in the length drop
			 * down menu that DataTables shows when pagination is enabled. It can be 
			 * either a 1D array of options which will be used for both the displayed 
			 * option and the value, or a 2D array which will use the array in the first 
			 * position as the value, and the array in the second position as the 
			 * displayed options (useful for language strings such as 'All').
			 *  @type array
			 *  @default [ 10, 25, 50, 100 ]
			 *  @dtopt Option
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aLengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
			 *      } );
			 *    } );
			 *  
			 *  @example
			 *    // Setting the default display length as well as length menu
			 *    // This is likely to be wanted if you remove the '10' option which
			 *    // is the iDisplayLength default.
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "iDisplayLength": 25,
			 *        "aLengthMenu": [[25, 50, 100, -1], [25, 50, 100, "All"]]
			 *      } );
			 *    } );
			 */
			"aLengthMenu": [ 10, 25, 50, 100 ],
		
		
			/**
			 * The aoColumns option in the initialisation parameter allows you to define
			 * details about the way individual columns behave. For a full list of
			 * column options that can be set, please see 
			 * {@link DataTable.defaults.columns}. Note that if you use aoColumns to
			 * define your columns, you must have an entry in the array for every single
			 * column that you have in your table (these can be null if you don't which
			 * to specify any options).
			 *  @member
			 */
			"aoColumns": null,
		
			/**
			 * Very similar to aoColumns, aoColumnDefs allows you to target a specific 
			 * column, multiple columns, or all columns, using the aTargets property of 
			 * each object in the array. This allows great flexibility when creating 
			 * tables, as the aoColumnDefs arrays can be of any length, targeting the 
			 * columns you specifically want. aoColumnDefs may use any of the column 
			 * options available: {@link DataTable.defaults.columns}, but it _must_
			 * have aTargets defined in each object in the array. Values in the aTargets
			 * array may be:
			 *   <ul>
			 *     <li>a string - class name will be matched on the TH for the column</li>
			 *     <li>0 or a positive integer - column index counting from the left</li>
			 *     <li>a negative integer - column index counting from the right</li>
			 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
			 *   </ul>
			 *  @member
			 */
			"aoColumnDefs": null,
		
		
			/**
			 * Basically the same as oSearch, this parameter defines the individual column
			 * filtering state at initialisation time. The array must be of the same size 
			 * as the number of columns, and each element be an object with the parameters
			 * "sSearch" and "bEscapeRegex" (the latter is optional). 'null' is also
			 * accepted and the default will be used.
			 *  @type array
			 *  @default []
			 *  @dtopt Option
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoSearchCols": [
			 *          null,
			 *          { "sSearch": "My filter" },
			 *          null,
			 *          { "sSearch": "^[0-9]", "bEscapeRegex": false }
			 *        ]
			 *      } );
			 *    } )
			 */
			"aoSearchCols": [],
		
		
			/**
			 * An array of CSS classes that should be applied to displayed rows. This 
			 * array may be of any length, and DataTables will apply each class 
			 * sequentially, looping when required.
			 *  @type array
			 *  @default null <i>Will take the values determined by the oClasses.sStripe*
			 *    options</i>
			 *  @dtopt Option
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "asStripeClasses": [ 'strip1', 'strip2', 'strip3' ]
			 *      } );
			 *    } )
			 */
			"asStripeClasses": null,
		
		
			/**
			 * Enable or disable automatic column width calculation. This can be disabled
			 * as an optimisation (it takes some time to calculate the widths) if the
			 * tables widths are passed in using aoColumns.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bAutoWidth": false
			 *      } );
			 *    } );
			 */
			"bAutoWidth": true,
		
		
			/**
			 * Deferred rendering can provide DataTables with a huge speed boost when you
			 * are using an Ajax or JS data source for the table. This option, when set to
			 * true, will cause DataTables to defer the creation of the table elements for
			 * each row until they are needed for a draw - saving a significant amount of
			 * time.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "sAjaxSource": "sources/arrays.txt",
			 *        "bDeferRender": true
			 *      } );
			 *    } );
			 */
			"bDeferRender": false,
		
		
			/**
			 * Replace a DataTable which matches the given selector and replace it with 
			 * one which has the properties of the new initialisation object passed. If no
			 * table matches the selector, then the new DataTable will be constructed as
			 * per normal.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sScrollY": "200px",
			 *        "bPaginate": false
			 *      } );
			 *      
			 *      // Some time later....
			 *      $('#example').dataTable( {
			 *        "bFilter": false,
			 *        "bDestroy": true
			 *      } );
			 *    } );
			 */
			"bDestroy": false,
		
		
			/**
			 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
			 * that it allows the end user to input multiple words (space separated) and
			 * will match a row containing those words, even if not in the order that was
			 * specified (this allow matching across multiple columns). Note that if you
			 * wish to use filtering in DataTables this must remain 'true' - to remove the
			 * default filtering input box and retain filtering abilities, please use
			 * {@link DataTable.defaults.sDom}.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bFilter": false
			 *      } );
			 *    } );
			 */
			"bFilter": true,
		
		
			/**
			 * Enable or disable the table information display. This shows information 
			 * about the data that is currently visible on the page, including information
			 * about filtered data if that action is being performed.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bInfo": false
			 *      } );
			 *    } );
			 */
			"bInfo": true,
		
		
			/**
			 * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
			 * slightly different and additional mark-up from what DataTables has
			 * traditionally used).
			 *  @type boolean
			 *  @default false
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bJQueryUI": true
			 *      } );
			 *    } );
			 */
			"bJQueryUI": false,
		
		
			/**
			 * Allows the end user to select the size of a formatted page from a select
			 * menu (sizes are 10, 25, 50 and 100). Requires pagination (bPaginate).
			 *  @type boolean
			 *  @default true
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bLengthChange": false
			 *      } );
			 *    } );
			 */
			"bLengthChange": true,
		
		
			/**
			 * Enable or disable pagination.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bPaginate": false
			 *      } );
			 *    } );
			 */
			"bPaginate": true,
		
		
			/**
			 * Enable or disable the display of a 'processing' indicator when the table is
			 * being processed (e.g. a sort). This is particularly useful for tables with
			 * large amounts of data where it can take a noticeable amount of time to sort
			 * the entries.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bProcessing": true
			 *      } );
			 *    } );
			 */
			"bProcessing": false,
		
		
			/**
			 * Retrieve the DataTables object for the given selector. Note that if the
			 * table has already been initialised, this parameter will cause DataTables
			 * to simply return the object that has already been set up - it will not take
			 * account of any changes you might have made to the initialisation object
			 * passed to DataTables (setting this parameter to true is an acknowledgement
			 * that you understand this). bDestroy can be used to reinitialise a table if
			 * you need.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      initTable();
			 *      tableActions();
			 *    } );
			 *    
			 *    function initTable ()
			 *    {
			 *      return $('#example').dataTable( {
			 *        "sScrollY": "200px",
			 *        "bPaginate": false,
			 *        "bRetrieve": true
			 *      } );
			 *    }
			 *    
			 *    function tableActions ()
			 *    {
			 *      var oTable = initTable();
			 *      // perform API operations with oTable 
			 *    }
			 */
			"bRetrieve": false,
		
		
			/**
			 * Indicate if DataTables should be allowed to set the padding / margin
			 * etc for the scrolling header elements or not. Typically you will want
			 * this.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bScrollAutoCss": false,
			 *        "sScrollY": "200px"
			 *      } );
			 *    } );
			 */
			"bScrollAutoCss": true,
		
		
			/**
			 * When vertical (y) scrolling is enabled, DataTables will force the height of
			 * the table's viewport to the given height at all times (useful for layout).
			 * However, this can look odd when filtering data down to a small data set,
			 * and the footer is left "floating" further down. This parameter (when
			 * enabled) will cause DataTables to collapse the table's viewport down when
			 * the result set will fit within the given Y height.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sScrollY": "200",
			 *        "bScrollCollapse": true
			 *      } );
			 *    } );
			 */
			"bScrollCollapse": false,
		
		
			/**
			 * Enable infinite scrolling for DataTables (to be used in combination with
			 * sScrollY). Infinite scrolling means that DataTables will continually load
			 * data as a user scrolls through a table, which is very useful for large
			 * dataset. This cannot be used with pagination, which is automatically
			 * disabled. Note - the Scroller extra for DataTables is recommended in
			 * in preference to this option.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bScrollInfinite": true,
			 *        "bScrollCollapse": true,
			 *        "sScrollY": "200px"
			 *      } );
			 *    } );
			 */
			"bScrollInfinite": false,
		
		
			/**
			 * Configure DataTables to use server-side processing. Note that the
			 * sAjaxSource parameter must also be given in order to give DataTables a
			 * source to obtain the required data for each draw.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Features
			 *  @dtopt Server-side
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bServerSide": true,
			 *        "sAjaxSource": "xhr.php"
			 *      } );
			 *    } );
			 */
			"bServerSide": false,
		
		
			/**
			 * Enable or disable sorting of columns. Sorting of individual columns can be
			 * disabled by the "bSortable" option for each column.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bSort": false
			 *      } );
			 *    } );
			 */
			"bSort": true,
		
		
			/**
			 * Allows control over whether DataTables should use the top (true) unique
			 * cell that is found for a single column, or the bottom (false - default).
			 * This is useful when using complex headers.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bSortCellsTop": true
			 *      } );
			 *    } );
			 */
			"bSortCellsTop": false,
		
		
			/**
			 * Enable or disable the addition of the classes 'sorting_1', 'sorting_2' and
			 * 'sorting_3' to the columns which are currently being sorted on. This is
			 * presented as a feature switch as it can increase processing time (while
			 * classes are removed and added) so for large data sets you might want to
			 * turn this off.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bSortClasses": false
			 *      } );
			 *    } );
			 */
			"bSortClasses": true,
		
		
			/**
			 * Enable or disable state saving. When enabled a cookie will be used to save
			 * table display information such as pagination information, display length,
			 * filtering and sorting. As such when the end user reloads the page the
			 * display display will match what thy had previously set up.
			 *  @type boolean
			 *  @default false
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "bStateSave": true
			 *      } );
			 *    } );
			 */
			"bStateSave": false,
		
		
			/**
			 * Customise the cookie and / or the parameters being stored when using
			 * DataTables with state saving enabled. This function is called whenever
			 * the cookie is modified, and it expects a fully formed cookie string to be
			 * returned. Note that the data object passed in is a Javascript object which
			 * must be converted to a string (JSON.stringify for example).
			 *  @type function
			 *  @param {string} sName Name of the cookie defined by DataTables
			 *  @param {object} oData Data to be stored in the cookie
			 *  @param {string} sExpires Cookie expires string
			 *  @param {string} sPath Path of the cookie to set
			 *  @returns {string} Cookie formatted string (which should be encoded by
			 *    using encodeURIComponent())
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "fnCookieCallback": function (sName, oData, sExpires, sPath) {
			 *          // Customise oData or sName or whatever else here
			 *          return sName + "="+JSON.stringify(oData)+"; expires=" + sExpires +"; path=" + sPath;
			 *        }
			 *      } );
			 *    } );
			 */
			"fnCookieCallback": null,
		
		
			/**
			 * This function is called when a TR element is created (and all TD child
			 * elements have been inserted), or registered if using a DOM source, allowing
			 * manipulation of the TR element (adding classes etc).
			 *  @type function
			 *  @param {node} nRow "TR" element for the current row
			 *  @param {array} aData Raw data array for this row
			 *  @param {int} iDataIndex The index of this row in aoData
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnCreatedRow": function( nRow, aData, iDataIndex ) {
			 *          // Bold the grade for all 'A' grade browsers
			 *          if ( aData[4] == "A" )
			 *          {
			 *            $('td:eq(4)', nRow).html( '<b>A</b>' );
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"fnCreatedRow": null,
		
		
			/**
			 * This function is called on every 'draw' event, and allows you to
			 * dynamically modify any aspect you want about the created DOM.
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnDrawCallback": function( oSettings ) {
			 *          alert( 'DataTables has redrawn the table' );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnDrawCallback": null,
		
		
			/**
			 * Identical to fnHeaderCallback() but for the table footer this function
			 * allows you to modify the table footer on every 'draw' even.
			 *  @type function
			 *  @param {node} nFoot "TR" element for the footer
			 *  @param {array} aData Full table data (as derived from the original HTML)
			 *  @param {int} iStart Index for the current display starting point in the 
			 *    display array
			 *  @param {int} iEnd Index for the current display ending point in the 
			 *    display array
			 *  @param {array int} aiDisplay Index array to translate the visual position
			 *    to the full data array
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnFooterCallback": function( nFoot, aData, iStart, iEnd, aiDisplay ) {
			 *          nFoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+iStart;
			 *        }
			 *      } );
			 *    } )
			 */
			"fnFooterCallback": null,
		
		
			/**
			 * When rendering large numbers in the information element for the table
			 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
			 * to have a comma separator for the 'thousands' units (e.g. 1 million is
			 * rendered as "1,000,000") to help readability for the end user. This
			 * function will override the default method DataTables uses.
			 *  @type function
			 *  @member
			 *  @param {int} iIn number to be formatted
			 *  @returns {string} formatted string for DataTables to show the number
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnFormatNumber": function ( iIn ) {
			 *          if ( iIn &lt; 1000 ) {
			 *            return iIn;
			 *          } else {
			 *            var 
			 *              s=(iIn+""), 
			 *              a=s.split(""), out="", 
			 *              iLen=s.length;
			 *            
			 *            for ( var i=0 ; i&lt;iLen ; i++ ) {
			 *              if ( i%3 === 0 &amp;&amp; i !== 0 ) {
			 *                out = "'"+out;
			 *              }
			 *              out = a[iLen-i-1]+out;
			 *            }
			 *          }
			 *          return out;
			 *        };
			 *      } );
			 *    } );
			 */
			"fnFormatNumber": function ( iIn ) {
				if ( iIn < 1000 )
				{
					// A small optimisation for what is likely to be the majority of use cases
					return iIn;
				}
		
				var s=(iIn+""), a=s.split(""), out="", iLen=s.length;
				
				for ( var i=0 ; i<iLen ; i++ )
				{
					if ( i%3 === 0 && i !== 0 )
					{
						out = this.oLanguage.sInfoThousands+out;
					}
					out = a[iLen-i-1]+out;
				}
				return out;
			},
		
		
			/**
			 * This function is called on every 'draw' event, and allows you to
			 * dynamically modify the header row. This can be used to calculate and
			 * display useful information about the table.
			 *  @type function
			 *  @param {node} nHead "TR" element for the header
			 *  @param {array} aData Full table data (as derived from the original HTML)
			 *  @param {int} iStart Index for the current display starting point in the
			 *    display array
			 *  @param {int} iEnd Index for the current display ending point in the
			 *    display array
			 *  @param {array int} aiDisplay Index array to translate the visual position
			 *    to the full data array
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnHeaderCallback": function( nHead, aData, iStart, iEnd, aiDisplay ) {
			 *          nHead.getElementsByTagName('th')[0].innerHTML = "Displaying "+(iEnd-iStart)+" records";
			 *        }
			 *      } );
			 *    } )
			 */
			"fnHeaderCallback": null,
		
		
			/**
			 * The information element can be used to convey information about the current
			 * state of the table. Although the internationalisation options presented by
			 * DataTables are quite capable of dealing with most customisations, there may
			 * be times where you wish to customise the string further. This callback
			 * allows you to do exactly that.
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @param {int} iStart Starting position in data for the draw
			 *  @param {int} iEnd End position in data for the draw
			 *  @param {int} iMax Total number of rows in the table (regardless of
			 *    filtering)
			 *  @param {int} iTotal Total number of rows in the data set, after filtering
			 *  @param {string} sPre The string that DataTables has formatted using it's
			 *    own rules
			 *  @returns {string} The string to be displayed in the information element.
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $('#example').dataTable( {
			 *      "fnInfoCallback": function( oSettings, iStart, iEnd, iMax, iTotal, sPre ) {
			 *        return iStart +" to "+ iEnd;
			 *      }
			 *    } );
			 */
			"fnInfoCallback": null,
		
		
			/**
			 * Called when the table has been initialised. Normally DataTables will
			 * initialise sequentially and there will be no need for this function,
			 * however, this does not hold true when using external language information
			 * since that is obtained using an async XHR call.
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} json The JSON object request from the server - only
			 *    present if client-side Ajax sourced data is used
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnInitComplete": function(oSettings, json) {
			 *          alert( 'DataTables has finished its initialisation.' );
			 *        }
			 *      } );
			 *    } )
			 */
			"fnInitComplete": null,
		
		
			/**
			 * Called at the very start of each table draw and can be used to cancel the
			 * draw by returning false, any other return (including undefined) results in
			 * the full draw occurring).
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @returns {boolean} False will cancel the draw, anything else (including no
			 *    return) will allow it to complete.
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnPreDrawCallback": function( oSettings ) {
			 *          if ( $('#test').val() == 1 ) {
			 *            return false;
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"fnPreDrawCallback": null,
		
		
			/**
			 * This function allows you to 'post process' each row after it have been
			 * generated for each table draw, but before it is rendered on screen. This
			 * function might be used for setting the row class name etc.
			 *  @type function
			 *  @param {node} nRow "TR" element for the current row
			 *  @param {array} aData Raw data array for this row
			 *  @param {int} iDisplayIndex The display index for the current table draw
			 *  @param {int} iDisplayIndexFull The index of the data in the full list of
			 *    rows (after filtering)
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {
			 *          // Bold the grade for all 'A' grade browsers
			 *          if ( aData[4] == "A" )
			 *          {
			 *            $('td:eq(4)', nRow).html( '<b>A</b>' );
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"fnRowCallback": null,
		
		
			/**
			 * This parameter allows you to override the default function which obtains
			 * the data from the server ($.getJSON) so something more suitable for your
			 * application. For example you could use POST data, or pull information from
			 * a Gears or AIR database.
			 *  @type function
			 *  @member
			 *  @param {string} sSource HTTP source to obtain the data from (sAjaxSource)
			 *  @param {array} aoData A key/value pair object containing the data to send
			 *    to the server
			 *  @param {function} fnCallback to be called on completion of the data get
			 *    process that will draw the data on the page.
			 *  @param {object} oSettings DataTables settings object
			 *  @dtopt Callbacks
			 *  @dtopt Server-side
			 * 
			 *  @example
			 *    // POST data to server
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bProcessing": true,
			 *        "bServerSide": true,
			 *        "sAjaxSource": "xhr.php",
			 *        "fnServerData": function ( sSource, aoData, fnCallback, oSettings ) {
			 *          oSettings.jqXHR = $.ajax( {
			 *            "dataType": 'json', 
			 *            "type": "POST", 
			 *            "url": sSource, 
			 *            "data": aoData, 
			 *            "success": fnCallback
			 *          } );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnServerData": function ( sUrl, aoData, fnCallback, oSettings ) {
				oSettings.jqXHR = $.ajax( {
					"url":  sUrl,
					"data": aoData,
					"success": function (json) {
						if ( json.sError ) {
							oSettings.oApi._fnLog( oSettings, 0, json.sError );
						}
						
						$(oSettings.oInstance).trigger('xhr', [oSettings, json]);
						fnCallback( json );
					},
					"dataType": "json",
					"cache": false,
					"type": oSettings.sServerMethod,
					"error": function (xhr, error, thrown) {
						if ( error == "parsererror" ) {
							oSettings.oApi._fnLog( oSettings, 0, "DataTables warning: JSON data from "+
								"server could not be parsed. This is caused by a JSON formatting error." );
						}
					}
				} );
			},
		
		
			/**
			 * It is often useful to send extra data to the server when making an Ajax
			 * request - for example custom filtering information, and this callback
			 * function makes it trivial to send extra information to the server. The
			 * passed in parameter is the data set that has been constructed by
			 * DataTables, and you can add to this or modify it as you require.
			 *  @type function
			 *  @param {array} aoData Data array (array of objects which are name/value
			 *    pairs) that has been constructed by DataTables and will be sent to the
			 *    server. In the case of Ajax sourced data with server-side processing
			 *    this will be an empty array, for server-side processing there will be a
			 *    significant number of parameters!
			 *  @returns {undefined} Ensure that you modify the aoData array passed in,
			 *    as this is passed by reference.
			 *  @dtopt Callbacks
			 *  @dtopt Server-side
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bProcessing": true,
			 *        "bServerSide": true,
			 *        "sAjaxSource": "scripts/server_processing.php",
			 *        "fnServerParams": function ( aoData ) {
			 *          aoData.push( { "name": "more_data", "value": "my_value" } );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnServerParams": null,
		
		
			/**
			 * Load the table state. With this function you can define from where, and how, the
			 * state of a table is loaded. By default DataTables will load from its state saving
			 * cookie, but you might wish to use local storage (HTML5) or a server-side database.
			 *  @type function
			 *  @member
			 *  @param {object} oSettings DataTables settings object
			 *  @return {object} The DataTables state object to be loaded
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bStateSave": true,
			 *        "fnStateLoad": function (oSettings) {
			 *          var o;
			 *          
			 *          // Send an Ajax request to the server to get the data. Note that
			 *          // this is a synchronous request.
			 *          $.ajax( {
			 *            "url": "/state_load",
			 *            "async": false,
			 *            "dataType": "json",
			 *            "success": function (json) {
			 *              o = json;
			 *            }
			 *          } );
			 *          
			 *          return o;
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateLoad": function ( oSettings ) {
				var sData = this.oApi._fnReadCookie( oSettings.sCookiePrefix+oSettings.sInstance );
				var oData;
		
				try {
					oData = (typeof $.parseJSON === 'function') ? 
						$.parseJSON(sData) : eval( '('+sData+')' );
				} catch (e) {
					oData = null;
				}
		
				return oData;
			},
		
		
			/**
			 * Callback which allows modification of the saved state prior to loading that state.
			 * This callback is called when the table is loading state from the stored data, but
			 * prior to the settings object being modified by the saved state. Note that for 
			 * plug-in authors, you should use the 'stateLoadParams' event to load parameters for 
			 * a plug-in.
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} oData The state object that is to be loaded
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    // Remove a saved filter, so filtering is never loaded
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bStateSave": true,
			 *        "fnStateLoadParams": function (oSettings, oData) {
			 *          oData.oSearch.sSearch = "";
			 *        }
			 *      } );
			 *    } );
			 * 
			 *  @example
			 *    // Disallow state loading by returning false
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bStateSave": true,
			 *        "fnStateLoadParams": function (oSettings, oData) {
			 *          return false;
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateLoadParams": null,
		
		
			/**
			 * Callback that is called when the state has been loaded from the state saving method
			 * and the DataTables settings object has been modified as a result of the loaded state.
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} oData The state object that was loaded
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    // Show an alert with the filtering value that was saved
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bStateSave": true,
			 *        "fnStateLoaded": function (oSettings, oData) {
			 *          alert( 'Saved filter was: '+oData.oSearch.sSearch );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateLoaded": null,
		
		
			/**
			 * Save the table state. This function allows you to define where and how the state
			 * information for the table is stored - by default it will use a cookie, but you
			 * might want to use local storage (HTML5) or a server-side database.
			 *  @type function
			 *  @member
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} oData The state object to be saved
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bStateSave": true,
			 *        "fnStateSave": function (oSettings, oData) {
			 *          // Send an Ajax request to the server with the state object
			 *          $.ajax( {
			 *            "url": "/state_save",
			 *            "data": oData,
			 *            "dataType": "json",
			 *            "method": "POST"
			 *            "success": function () {}
			 *          } );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateSave": function ( oSettings, oData ) {
				this.oApi._fnCreateCookie( 
					oSettings.sCookiePrefix+oSettings.sInstance, 
					this.oApi._fnJsonString(oData), 
					oSettings.iCookieDuration, 
					oSettings.sCookiePrefix, 
					oSettings.fnCookieCallback
				);
			},
		
		
			/**
			 * Callback which allows modification of the state to be saved. Called when the table 
			 * has changed state a new state save is required. This method allows modification of
			 * the state saving object prior to actually doing the save, including addition or 
			 * other state properties or modification. Note that for plug-in authors, you should 
			 * use the 'stateSaveParams' event to save parameters for a plug-in.
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} oData The state object to be saved
			 *  @dtopt Callbacks
			 * 
			 *  @example
			 *    // Remove a saved filter, so filtering is never saved
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bStateSave": true,
			 *        "fnStateSaveParams": function (oSettings, oData) {
			 *          oData.oSearch.sSearch = "";
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateSaveParams": null,
		
		
			/**
			 * Duration of the cookie which is used for storing session information. This
			 * value is given in seconds.
			 *  @type int
			 *  @default 7200 <i>(2 hours)</i>
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "iCookieDuration": 60*60*24; // 1 day
			 *      } );
			 *    } )
			 */
			"iCookieDuration": 7200,
		
		
			/**
			 * When enabled DataTables will not make a request to the server for the first
			 * page draw - rather it will use the data already on the page (no sorting etc
			 * will be applied to it), thus saving on an XHR at load time. iDeferLoading
			 * is used to indicate that deferred loading is required, but it is also used
			 * to tell DataTables how many records there are in the full table (allowing
			 * the information element and pagination to be displayed correctly). In the case
			 * where a filtering is applied to the table on initial load, this can be
			 * indicated by giving the parameter as an array, where the first element is
			 * the number of records available after filtering and the second element is the
			 * number of records without filtering (allowing the table information element
			 * to be shown correctly).
			 *  @type int | array
			 *  @default null
			 *  @dtopt Options
			 * 
			 *  @example
			 *    // 57 records available in the table, no filtering applied
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bServerSide": true,
			 *        "sAjaxSource": "scripts/server_processing.php",
			 *        "iDeferLoading": 57
			 *      } );
			 *    } );
			 * 
			 *  @example
			 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bServerSide": true,
			 *        "sAjaxSource": "scripts/server_processing.php",
			 *        "iDeferLoading": [ 57, 100 ],
			 *        "oSearch": {
			 *          "sSearch": "my_filter"
			 *        }
			 *      } );
			 *    } );
			 */
			"iDeferLoading": null,
		
		
			/**
			 * Number of rows to display on a single page when using pagination. If
			 * feature enabled (bLengthChange) then the end user will be able to override
			 * this to a custom setting using a pop-up menu.
			 *  @type int
			 *  @default 10
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "iDisplayLength": 50
			 *      } );
			 *    } )
			 */
			"iDisplayLength": 10,
		
		
			/**
			 * Define the starting point for data display when using DataTables with
			 * pagination. Note that this parameter is the number of records, rather than
			 * the page number, so if you have 10 records per page and want to start on
			 * the third page, it should be "20".
			 *  @type int
			 *  @default 0
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "iDisplayStart": 20
			 *      } );
			 *    } )
			 */
			"iDisplayStart": 0,
		
		
			/**
			 * The scroll gap is the amount of scrolling that is left to go before
			 * DataTables will load the next 'page' of data automatically. You typically
			 * want a gap which is big enough that the scrolling will be smooth for the
			 * user, while not so large that it will load more data than need.
			 *  @type int
			 *  @default 100
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bScrollInfinite": true,
			 *        "bScrollCollapse": true,
			 *        "sScrollY": "200px",
			 *        "iScrollLoadGap": 50
			 *      } );
			 *    } );
			 */
			"iScrollLoadGap": 100,
		
		
			/**
			 * By default DataTables allows keyboard navigation of the table (sorting, paging,
			 * and filtering) by adding a tabindex attribute to the required elements. This
			 * allows you to tab through the controls and press the enter key to activate them.
			 * The tabindex is default 0, meaning that the tab follows the flow of the document.
			 * You can overrule this using this parameter if you wish. Use a value of -1 to
			 * disable built-in keyboard navigation.
			 *  @type int
			 *  @default 0
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "iTabIndex": 1
			 *      } );
			 *    } );
			 */
			"iTabIndex": 0,
		
		
			/**
			 * All strings that DataTables uses in the user interface that it creates
			 * are defined in this object, allowing you to modified them individually or
			 * completely replace them all as required.
			 *  @namespace
			 */
			"oLanguage": {
				/**
				 * Strings that are used for WAI-ARIA labels and controls only (these are not
				 * actually visible on the page, but will be read by screenreaders, and thus
				 * must be internationalised as well).
				 *  @namespace
				 */
				"oAria": {
					/**
					 * ARIA label that is added to the table headers when the column may be
					 * sorted ascending by activing the column (click or return when focused).
					 * Note that the column header is prefixed to this string.
					 *  @type string
					 *  @default : activate to sort column ascending
					 *  @dtopt Language
					 * 
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "oLanguage": {
					 *          "oAria": {
					 *            "sSortAscending": " - click/return to sort ascending"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sSortAscending": ": activate to sort column ascending",
		
					/**
					 * ARIA label that is added to the table headers when the column may be
					 * sorted descending by activing the column (click or return when focused).
					 * Note that the column header is prefixed to this string.
					 *  @type string
					 *  @default : activate to sort column ascending
					 *  @dtopt Language
					 * 
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "oLanguage": {
					 *          "oAria": {
					 *            "sSortDescending": " - click/return to sort descending"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sSortDescending": ": activate to sort column descending"
				},
		
				/**
				 * Pagination string used by DataTables for the two built-in pagination
				 * control types ("two_button" and "full_numbers")
				 *  @namespace
				 */
				"oPaginate": {
					/**
					 * Text to use when using the 'full_numbers' type of pagination for the
					 * button to take the user to the first page.
					 *  @type string
					 *  @default First
					 *  @dtopt Language
					 * 
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "oLanguage": {
					 *          "oPaginate": {
					 *            "sFirst": "First page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sFirst": "First",
				
				
					/**
					 * Text to use when using the 'full_numbers' type of pagination for the
					 * button to take the user to the last page.
					 *  @type string
					 *  @default Last
					 *  @dtopt Language
					 * 
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "oLanguage": {
					 *          "oPaginate": {
					 *            "sLast": "Last page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sLast": "Last",
				
				
					/**
					 * Text to use for the 'next' pagination button (to take the user to the 
					 * next page).
					 *  @type string
					 *  @default Next
					 *  @dtopt Language
					 * 
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "oLanguage": {
					 *          "oPaginate": {
					 *            "sNext": "Next page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sNext": "Next",
				
				
					/**
					 * Text to use for the 'previous' pagination button (to take the user to  
					 * the previous page).
					 *  @type string
					 *  @default Previous
					 *  @dtopt Language
					 * 
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "oLanguage": {
					 *          "oPaginate": {
					 *            "sPrevious": "Previous page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sPrevious": "Previous"
				},
			
				/**
				 * This string is shown in preference to sZeroRecords when the table is
				 * empty of data (regardless of filtering). Note that this is an optional
				 * parameter - if it is not given, the value of sZeroRecords will be used
				 * instead (either the default or given value).
				 *  @type string
				 *  @default No data available in table
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sEmptyTable": "No data available in table"
				 *        }
				 *      } );
				 *    } );
				 */
				"sEmptyTable": "No data available in table",
			
			
				/**
				 * This string gives information to the end user about the information that 
				 * is current on display on the page. The _START_, _END_ and _TOTAL_ 
				 * variables are all dynamically replaced as the table display updates, and 
				 * can be freely moved or removed as the language requirements change.
				 *  @type string
				 *  @default Showing _START_ to _END_ of _TOTAL_ entries
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sInfo": "Got a total of _TOTAL_ entries to show (_START_ to _END_)"
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
			
			
				/**
				 * Display information string for when the table is empty. Typically the 
				 * format of this string should match sInfo.
				 *  @type string
				 *  @default Showing 0 to 0 of 0 entries
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sInfoEmpty": "No entries to show"
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfoEmpty": "Showing 0 to 0 of 0 entries",
			
			
				/**
				 * When a user filters the information in a table, this string is appended 
				 * to the information (sInfo) to give an idea of how strong the filtering 
				 * is. The variable _MAX_ is dynamically updated.
				 *  @type string
				 *  @default (filtered from _MAX_ total entries)
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sInfoFiltered": " - filtering from _MAX_ records"
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfoFiltered": "(filtered from _MAX_ total entries)",
			
			
				/**
				 * If can be useful to append extra information to the info string at times,
				 * and this variable does exactly that. This information will be appended to
				 * the sInfo (sInfoEmpty and sInfoFiltered in whatever combination they are
				 * being used) at all times.
				 *  @type string
				 *  @default <i>Empty string</i>
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sInfoPostFix": "All records shown are derived from real information."
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfoPostFix": "",
			
			
				/**
				 * DataTables has a build in number formatter (fnFormatNumber) which is used
				 * to format large numbers that are used in the table information. By
				 * default a comma is used, but this can be trivially changed to any
				 * character you wish with this parameter.
				 *  @type string
				 *  @default ,
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sInfoThousands": "'"
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfoThousands": ",",
			
			
				/**
				 * Detail the action that will be taken when the drop down menu for the
				 * pagination length option is changed. The '_MENU_' variable is replaced
				 * with a default select list of 10, 25, 50 and 100, and can be replaced
				 * with a custom select box if required.
				 *  @type string
				 *  @default Show _MENU_ entries
				 *  @dtopt Language
				 * 
				 *  @example
				 *    // Language change only
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sLengthMenu": "Display _MENU_ records"
				 *        }
				 *      } );
				 *    } );
				 *    
				 *  @example
				 *    // Language and options change
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sLengthMenu": 'Display <select>'+
				 *            '<option value="10">10</option>'+
				 *            '<option value="20">20</option>'+
				 *            '<option value="30">30</option>'+
				 *            '<option value="40">40</option>'+
				 *            '<option value="50">50</option>'+
				 *            '<option value="-1">All</option>'+
				 *            '</select> records'
				 *        }
				 *      } );
				 *    } );
				 */
				"sLengthMenu": "Show _MENU_ entries",
			
			
				/**
				 * When using Ajax sourced data and during the first draw when DataTables is
				 * gathering the data, this message is shown in an empty row in the table to
				 * indicate to the end user the the data is being loaded. Note that this
				 * parameter is not used when loading data by server-side processing, just
				 * Ajax sourced data with client-side processing.
				 *  @type string
				 *  @default Loading...
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sLoadingRecords": "Please wait - loading..."
				 *        }
				 *      } );
				 *    } );
				 */
				"sLoadingRecords": "Loading...",
			
			
				/**
				 * Text which is displayed when the table is processing a user action
				 * (usually a sort command or similar).
				 *  @type string
				 *  @default Processing...
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sProcessing": "DataTables is currently busy"
				 *        }
				 *      } );
				 *    } );
				 */
				"sProcessing": "Processing...",
			
			
				/**
				 * Details the actions that will be taken when the user types into the
				 * filtering input text box. The variable "_INPUT_", if used in the string,
				 * is replaced with the HTML text box for the filtering input allowing
				 * control over where it appears in the string. If "_INPUT_" is not given
				 * then the input box is appended to the string automatically.
				 *  @type string
				 *  @default Search:
				 *  @dtopt Language
				 * 
				 *  @example
				 *    // Input text box will be appended at the end automatically
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sSearch": "Filter records:"
				 *        }
				 *      } );
				 *    } );
				 *    
				 *  @example
				 *    // Specify where the filter should appear
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sSearch": "Apply filter _INPUT_ to table"
				 *        }
				 *      } );
				 *    } );
				 */
				"sSearch": "Search:",
			
			
				/**
				 * All of the language information can be stored in a file on the
				 * server-side, which DataTables will look up if this parameter is passed.
				 * It must store the URL of the language file, which is in a JSON format,
				 * and the object has the same properties as the oLanguage object in the
				 * initialiser object (i.e. the above parameters). Please refer to one of
				 * the example language files to see how this works in action.
				 *  @type string
				 *  @default <i>Empty string - i.e. disabled</i>
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sUrl": "http://www.sprymedia.co.uk/dataTables/lang.txt"
				 *        }
				 *      } );
				 *    } );
				 */
				"sUrl": "",
			
			
				/**
				 * Text shown inside the table records when the is no information to be
				 * displayed after filtering. sEmptyTable is shown when there is simply no
				 * information in the table at all (regardless of filtering).
				 *  @type string
				 *  @default No matching records found
				 *  @dtopt Language
				 * 
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "oLanguage": {
				 *          "sZeroRecords": "No records to display"
				 *        }
				 *      } );
				 *    } );
				 */
				"sZeroRecords": "No matching records found"
			},
		
		
			/**
			 * This parameter allows you to have define the global filtering state at
			 * initialisation time. As an object the "sSearch" parameter must be
			 * defined, but all other parameters are optional. When "bRegex" is true,
			 * the search string will be treated as a regular expression, when false
			 * (default) it will be treated as a straight string. When "bSmart"
			 * DataTables will use it's smart filtering methods (to word match at
			 * any point in the data), when false this will not be done.
			 *  @namespace
			 *  @extends DataTable.models.oSearch
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "oSearch": {"sSearch": "Initial search"}
			 *      } );
			 *    } )
			 */
			"oSearch": $.extend( {}, DataTable.models.oSearch ),
		
		
			/**
			 * By default DataTables will look for the property 'aaData' when obtaining
			 * data from an Ajax source or for server-side processing - this parameter
			 * allows that property to be changed. You can use Javascript dotted object
			 * notation to get a data source for multiple levels of nesting.
			 *  @type string
			 *  @default aaData
			 *  @dtopt Options
			 *  @dtopt Server-side
			 * 
			 *  @example
			 *    // Get data from { "data": [...] }
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "sAjaxSource": "sources/data.txt",
			 *        "sAjaxDataProp": "data"
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Get data from { "data": { "inner": [...] } }
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "sAjaxSource": "sources/data.txt",
			 *        "sAjaxDataProp": "data.inner"
			 *      } );
			 *    } );
			 */
			"sAjaxDataProp": "aaData",
		
		
			/**
			 * You can instruct DataTables to load data from an external source using this
			 * parameter (use aData if you want to pass data in you already have). Simply
			 * provide a url a JSON object can be obtained from. This object must include
			 * the parameter 'aaData' which is the data source for the table.
			 *  @type string
			 *  @default null
			 *  @dtopt Options
			 *  @dtopt Server-side
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sAjaxSource": "http://www.sprymedia.co.uk/dataTables/json.php"
			 *      } );
			 *    } )
			 */
			"sAjaxSource": null,
		
		
			/**
			 * This parameter can be used to override the default prefix that DataTables
			 * assigns to a cookie when state saving is enabled.
			 *  @type string
			 *  @default SpryMedia_DataTables_
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sCookiePrefix": "my_datatable_",
			 *      } );
			 *    } );
			 */
			"sCookiePrefix": "SpryMedia_DataTables_",
		
		
			/**
			 * This initialisation variable allows you to specify exactly where in the
			 * DOM you want DataTables to inject the various controls it adds to the page
			 * (for example you might want the pagination controls at the top of the
			 * table). DIV elements (with or without a custom class) can also be added to
			 * aid styling. The follow syntax is used:
			 *   <ul>
			 *     <li>The following options are allowed:	
			 *       <ul>
			 *         <li>'l' - Length changing</li
			 *         <li>'f' - Filtering input</li>
			 *         <li>'t' - The table!</li>
			 *         <li>'i' - Information</li>
			 *         <li>'p' - Pagination</li>
			 *         <li>'r' - pRocessing</li>
			 *       </ul>
			 *     </li>
			 *     <li>The following constants are allowed:
			 *       <ul>
			 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
			 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
			 *       </ul>
			 *     </li>
			 *     <li>The following syntax is expected:
			 *       <ul>
			 *         <li>'&lt;' and '&gt;' - div elements</li>
			 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
			 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
			 *       </ul>
			 *     </li>
			 *     <li>Examples:
			 *       <ul>
			 *         <li>'&lt;"wrapper"flipt&gt;'</li>
			 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
			 *       </ul>
			 *     </li>
			 *   </ul>
			 *  @type string
			 *  @default lfrtip <i>(when bJQueryUI is false)</i> <b>or</b> 
			 *    <"H"lfr>t<"F"ip> <i>(when bJQueryUI is true)</i>
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sDom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
			 *      } );
			 *    } );
			 */
			"sDom": "lfrtip",
		
		
			/**
			 * DataTables features two different built-in pagination interaction methods
			 * ('two_button' or 'full_numbers') which present different page controls to
			 * the end user. Further methods can be added using the API (see below).
			 *  @type string
			 *  @default two_button
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sPaginationType": "full_numbers"
			 *      } );
			 *    } )
			 */
			"sPaginationType": "two_button",
		
		
			/**
			 * Enable horizontal scrolling. When a table is too wide to fit into a certain
			 * layout, or you have a large number of columns in the table, you can enable
			 * x-scrolling to show the table in a viewport, which can be scrolled. This
			 * property can be any CSS unit, or a number (in which case it will be treated
			 * as a pixel measurement).
			 *  @type string
			 *  @default <i>blank string - i.e. disabled</i>
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sScrollX": "100%",
			 *        "bScrollCollapse": true
			 *      } );
			 *    } );
			 */
			"sScrollX": "",
		
		
			/**
			 * This property can be used to force a DataTable to use more width than it
			 * might otherwise do when x-scrolling is enabled. For example if you have a
			 * table which requires to be well spaced, this parameter is useful for
			 * "over-sizing" the table, and thus forcing scrolling. This property can by
			 * any CSS unit, or a number (in which case it will be treated as a pixel
			 * measurement).
			 *  @type string
			 *  @default <i>blank string - i.e. disabled</i>
			 *  @dtopt Options
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sScrollX": "100%",
			 *        "sScrollXInner": "110%"
			 *      } );
			 *    } );
			 */
			"sScrollXInner": "",
		
		
			/**
			 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
			 * to the given height, and enable scrolling for any data which overflows the
			 * current viewport. This can be used as an alternative to paging to display
			 * a lot of data in a small area (although paging and scrolling can both be
			 * enabled at the same time). This property can be any CSS unit, or a number
			 * (in which case it will be treated as a pixel measurement).
			 *  @type string
			 *  @default <i>blank string - i.e. disabled</i>
			 *  @dtopt Features
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "sScrollY": "200px",
			 *        "bPaginate": false
			 *      } );
			 *    } );
			 */
			"sScrollY": "",
		
		
			/**
			 * Set the HTTP method that is used to make the Ajax call for server-side
			 * processing or Ajax sourced data.
			 *  @type string
			 *  @default GET
			 *  @dtopt Options
			 *  @dtopt Server-side
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "bServerSide": true,
			 *        "sAjaxSource": "scripts/post.php",
			 *        "sServerMethod": "POST"
			 *      } );
			 *    } );
			 */
			"sServerMethod": "GET"
		};
		
		
		
		/**
		 * Column options that can be given to DataTables at initialisation time.
		 *  @namespace
		 */
		DataTable.defaults.columns = {
			/**
			 * Allows a column's sorting to take multiple columns into account when 
			 * doing a sort. For example first name / last name columns make sense to 
			 * do a multi-column sort over the two columns.
			 *  @type array
			 *  @default null <i>Takes the value of the column index automatically</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [
			 *          { "aDataSort": [ 0, 1 ], "aTargets": [ 0 ] },
			 *          { "aDataSort": [ 1, 0 ], "aTargets": [ 1 ] },
			 *          { "aDataSort": [ 2, 3, 4 ], "aTargets": [ 2 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [
			 *          { "aDataSort": [ 0, 1 ] },
			 *          { "aDataSort": [ 1, 0 ] },
			 *          { "aDataSort": [ 2, 3, 4 ] },
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"aDataSort": null,
		
		
			/**
			 * You can control the default sorting direction, and even alter the behaviour
			 * of the sort handler (i.e. only allow ascending sorting etc) using this
			 * parameter.
			 *  @type array
			 *  @default [ 'asc', 'desc' ]
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [
			 *          { "asSorting": [ "asc" ], "aTargets": [ 1 ] },
			 *          { "asSorting": [ "desc", "asc", "asc" ], "aTargets": [ 2 ] },
			 *          { "asSorting": [ "desc" ], "aTargets": [ 3 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [
			 *          null,
			 *          { "asSorting": [ "asc" ] },
			 *          { "asSorting": [ "desc", "asc", "asc" ] },
			 *          { "asSorting": [ "desc" ] },
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"asSorting": [ 'asc', 'desc' ],
		
		
			/**
			 * Enable or disable filtering on the data in this column.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "bSearchable": false, "aTargets": [ 0 ] }
			 *        ] } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "bSearchable": false },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ] } );
			 *    } );
			 */
			"bSearchable": true,
		
		
			/**
			 * Enable or disable sorting on this column.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "bSortable": false, "aTargets": [ 0 ] }
			 *        ] } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "bSortable": false },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ] } );
			 *    } );
			 */
			"bSortable": true,
		
		
			/**
			 * <code>Deprecated</code> When using fnRender() for a column, you may wish 
			 * to use the original data (before rendering) for sorting and filtering 
			 * (the default is to used the rendered data that the user can see). This 
			 * may be useful for dates etc.
			 * 
			 * Please note that this option has now been deprecated and will be removed
			 * in the next version of DataTables. Please use mRender / mData rather than
			 * fnRender.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Columns
			 *  @deprecated
			 */
			"bUseRendered": true,
		
		
			/**
			 * Enable or disable the display of this column.
			 *  @type boolean
			 *  @default true
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "bVisible": false, "aTargets": [ 0 ] }
			 *        ] } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "bVisible": false },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ] } );
			 *    } );
			 */
			"bVisible": true,
			
			
			/**
			 * Developer definable function that is called whenever a cell is created (Ajax source,
			 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
			 * allowing you to modify the DOM element (add background colour for example) when the
			 * element is available.
			 *  @type function
			 *  @param {element} nTd The TD node that has been created
			 *  @param {*} sData The Data for the cell
			 *  @param {array|object} oData The data for the whole row
			 *  @param {int} iRow The row index for the aoData data store
			 *  @param {int} iCol The column index for aoColumns
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ {
			 *          "aTargets": [3],
			 *          "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
			 *            if ( sData == "1.7" ) {
			 *              $(nTd).css('color', 'blue')
			 *            }
			 *          }
			 *        } ]
			 *      });
			 *    } );
			 */
			"fnCreatedCell": null,
		
		
			/**
			 * <code>Deprecated</code> Custom display function that will be called for the 
			 * display of each cell in this column.
			 *
			 * Please note that this option has now been deprecated and will be removed
			 * in the next version of DataTables. Please use mRender / mData rather than
			 * fnRender.
			 *  @type function
			 *  @param {object} o Object with the following parameters:
			 *  @param {int}    o.iDataRow The row in aoData
			 *  @param {int}    o.iDataColumn The column in question
			 *  @param {array}  o.aData The data for the row in question
			 *  @param {object} o.oSettings The settings object for this DataTables instance
			 *  @param {object} o.mDataProp The data property used for this column
			 *  @param {*}      val The current cell value
			 *  @returns {string} The string you which to use in the display
			 *  @dtopt Columns
			 *  @deprecated
			 */
			"fnRender": null,
		
		
			/**
			 * The column index (starting from 0!) that you wish a sort to be performed
			 * upon when this column is selected for sorting. This can be used for sorting
			 * on hidden columns for example.
			 *  @type int
			 *  @default -1 <i>Use automatically calculated column index</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "iDataSort": 1, "aTargets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "iDataSort": 1 },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"iDataSort": -1,
		
		
			/**
			 * This parameter has been replaced by mData in DataTables to ensure naming
			 * consistency. mDataProp can still be used, as there is backwards compatibility
			 * in DataTables for this option, but it is strongly recommended that you use
			 * mData in preference to mDataProp.
			 *  @name DataTable.defaults.columns.mDataProp
			 */
		
		
			/**
			 * This property can be used to read data from any JSON data source property,
			 * including deeply nested objects / properties. mData can be given in a
			 * number of different ways which effect its behaviour:
			 *   <ul>
			 *     <li>integer - treated as an array index for the data source. This is the
			 *       default that DataTables uses (incrementally increased for each column).</li>
			 *     <li>string - read an object property from the data source. Note that you can
			 *       use Javascript dotted notation to read deep properties / arrays from the
			 *       data source.</li>
			 *     <li>null - the sDefaultContent option will be used for the cell (null
			 *       by default, so you will need to specify the default content you want -
			 *       typically an empty string). This can be useful on generated columns such 
			 *       as edit / delete action columns.</li>
			 *     <li>function - the function given will be executed whenever DataTables 
			 *       needs to set or get the data for a cell in the column. The function 
			 *       takes three parameters:
			 *       <ul>
			 *         <li>{array|object} The data source for the row</li>
			 *         <li>{string} The type call data requested - this will be 'set' when
			 *           setting data or 'filter', 'display', 'type', 'sort' or undefined when 
			 *           gathering data. Note that when <i>undefined</i> is given for the type
			 *           DataTables expects to get the raw data for the object back</li>
			 *         <li>{*} Data to set when the second parameter is 'set'.</li>
			 *       </ul>
			 *       The return value from the function is not required when 'set' is the type
			 *       of call, but otherwise the return is what will be used for the data
			 *       requested.</li>
			 *    </ul>
			 *
			 * Note that prior to DataTables 1.9.2 mData was called mDataProp. The name change
			 * reflects the flexibility of this property and is consistent with the naming of
			 * mRender. If 'mDataProp' is given, then it will still be used by DataTables, as
			 * it automatically maps the old name to the new if required.
			 *  @type string|int|function|null
			 *  @default null <i>Use automatically calculated column index</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Read table data from objects
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "sAjaxSource": "sources/deep.txt",
			 *        "aoColumns": [
			 *          { "mData": "engine" },
			 *          { "mData": "browser" },
			 *          { "mData": "platform.inner" },
			 *          { "mData": "platform.details.0" },
			 *          { "mData": "platform.details.1" }
			 *        ]
			 *      } );
			 *    } );
			 * 
			 *  @example
			 *    // Using mData as a function to provide different information for
			 *    // sorting, filtering and display. In this case, currency (price)
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "aoColumnDefs": [ {
			 *          "aTargets": [ 0 ],
			 *          "mData": function ( source, type, val ) {
			 *            if (type === 'set') {
			 *              source.price = val;
			 *              // Store the computed dislay and filter values for efficiency
			 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
			 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
			 *              return;
			 *            }
			 *            else if (type === 'display') {
			 *              return source.price_display;
			 *            }
			 *            else if (type === 'filter') {
			 *              return source.price_filter;
			 *            }
			 *            // 'sort', 'type' and undefined all just use the integer
			 *            return source.price;
			 *          }
			 *        } ]
			 *      } );
			 *    } );
			 */
			"mData": null,
		
		
			/**
			 * This property is the rendering partner to mData and it is suggested that
			 * when you want to manipulate data for display (including filtering, sorting etc)
			 * but not altering the underlying data for the table, use this property. mData
			 * can actually do everything this property can and more, but this parameter is
			 * easier to use since there is no 'set' option. Like mData is can be given
			 * in a number of different ways to effect its behaviour, with the addition of 
			 * supporting array syntax for easy outputting of arrays (including arrays of
			 * objects):
			 *   <ul>
			 *     <li>integer - treated as an array index for the data source. This is the
			 *       default that DataTables uses (incrementally increased for each column).</li>
			 *     <li>string - read an object property from the data source. Note that you can
			 *       use Javascript dotted notation to read deep properties / arrays from the
			 *       data source and also array brackets to indicate that the data reader should
			 *       loop over the data source array. When characters are given between the array
			 *       brackets, these characters are used to join the data source array together.
			 *       For example: "accounts[, ].name" would result in a comma separated list with
			 *       the 'name' value from the 'accounts' array of objects.</li>
			 *     <li>function - the function given will be executed whenever DataTables 
			 *       needs to set or get the data for a cell in the column. The function 
			 *       takes three parameters:
			 *       <ul>
			 *         <li>{array|object} The data source for the row (based on mData)</li>
			 *         <li>{string} The type call data requested - this will be 'filter', 'display', 
			 *           'type' or 'sort'.</li>
			 *         <li>{array|object} The full data source for the row (not based on mData)</li>
			 *       </ul>
			 *       The return value from the function is what will be used for the data
			 *       requested.</li>
			 *    </ul>
			 *  @type string|int|function|null
			 *  @default null <i>Use mData</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Create a comma separated list from an array of objects
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "sAjaxSource": "sources/deep.txt",
			 *        "aoColumns": [
			 *          { "mData": "engine" },
			 *          { "mData": "browser" },
			 *          {
			 *            "mData": "platform",
			 *            "mRender": "[, ].name"
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 * 
			 *  @example
			 *    // Use as a function to create a link from the data source
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "aoColumnDefs": [
			 *        {
			 *          "aTargets": [ 0 ],
			 *          "mData": "download_link",
			 *          "mRender": function ( data, type, full ) {
			 *            return '<a href="'+data+'">Download</a>';
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 */
			"mRender": null,
		
		
			/**
			 * Change the cell type created for the column - either TD cells or TH cells. This
			 * can be useful as TH cells have semantic meaning in the table body, allowing them
			 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
			 *  @type string
			 *  @default td
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Make the first column use TH cells
			 *    $(document).ready( function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "aoColumnDefs": [ {
			 *          "aTargets": [ 0 ],
			 *          "sCellType": "th"
			 *        } ]
			 *      } );
			 *    } );
			 */
			"sCellType": "td",
		
		
			/**
			 * Class to give to each cell in this column.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "sClass": "my_class", "aTargets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "sClass": "my_class" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sClass": "",
			
			/**
			 * When DataTables calculates the column widths to assign to each column,
			 * it finds the longest string in each column and then constructs a
			 * temporary table and reads the widths from that. The problem with this
			 * is that "mmm" is much wider then "iiii", but the latter is a longer 
			 * string - thus the calculation can go wrong (doing it properly and putting
			 * it into an DOM object and measuring that is horribly(!) slow). Thus as
			 * a "work around" we provide this option. It will append its value to the
			 * text that is found to be the longest string for the column - i.e. padding.
			 * Generally you shouldn't need this, and it is not documented on the 
			 * general DataTables.net documentation
			 *  @type string
			 *  @default <i>Empty string<i>
			 *  @dtopt Columns
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          null,
			 *          null,
			 *          null,
			 *          {
			 *            "sContentPadding": "mmm"
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sContentPadding": "",
		
		
			/**
			 * Allows a default value to be given for a column's data, and will be used
			 * whenever a null data source is encountered (this can be because mData
			 * is set to null, or because the data source itself is null).
			 *  @type string
			 *  @default null
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          {
			 *            "mData": null,
			 *            "sDefaultContent": "Edit",
			 *            "aTargets": [ -1 ]
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          null,
			 *          null,
			 *          null,
			 *          {
			 *            "mData": null,
			 *            "sDefaultContent": "Edit"
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sDefaultContent": null,
		
		
			/**
			 * This parameter is only used in DataTables' server-side processing. It can
			 * be exceptionally useful to know what columns are being displayed on the
			 * client side, and to map these to database fields. When defined, the names
			 * also allow DataTables to reorder information from the server if it comes
			 * back in an unexpected order (i.e. if you switch your columns around on the
			 * client-side, your server-side code does not also need updating).
			 *  @type string
			 *  @default <i>Empty string</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "sName": "engine", "aTargets": [ 0 ] },
			 *          { "sName": "browser", "aTargets": [ 1 ] },
			 *          { "sName": "platform", "aTargets": [ 2 ] },
			 *          { "sName": "version", "aTargets": [ 3 ] },
			 *          { "sName": "grade", "aTargets": [ 4 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "sName": "engine" },
			 *          { "sName": "browser" },
			 *          { "sName": "platform" },
			 *          { "sName": "version" },
			 *          { "sName": "grade" }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sName": "",
		
		
			/**
			 * Defines a data source type for the sorting which can be used to read
			 * real-time information from the table (updating the internally cached
			 * version) prior to sorting. This allows sorting to occur on user editable
			 * elements such as form inputs.
			 *  @type string
			 *  @default std
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [
			 *          { "sSortDataType": "dom-text", "aTargets": [ 2, 3 ] },
			 *          { "sType": "numeric", "aTargets": [ 3 ] },
			 *          { "sSortDataType": "dom-select", "aTargets": [ 4 ] },
			 *          { "sSortDataType": "dom-checkbox", "aTargets": [ 5 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [
			 *          null,
			 *          null,
			 *          { "sSortDataType": "dom-text" },
			 *          { "sSortDataType": "dom-text", "sType": "numeric" },
			 *          { "sSortDataType": "dom-select" },
			 *          { "sSortDataType": "dom-checkbox" }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sSortDataType": "std",
		
		
			/**
			 * The title of this column.
			 *  @type string
			 *  @default null <i>Derived from the 'TH' value for this column in the 
			 *    original HTML table.</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "sTitle": "My column title", "aTargets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "sTitle": "My column title" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sTitle": null,
		
		
			/**
			 * The type allows you to specify how the data for this column will be sorted.
			 * Four types (string, numeric, date and html (which will strip HTML tags
			 * before sorting)) are currently available. Note that only date formats
			 * understood by Javascript's Date() object will be accepted as type date. For
			 * example: "Mar 26, 2008 5:03 PM". May take the values: 'string', 'numeric',
			 * 'date' or 'html' (by default). Further types can be adding through
			 * plug-ins.
			 *  @type string
			 *  @default null <i>Auto-detected from raw data</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "sType": "html", "aTargets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "sType": "html" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sType": null,
		
		
			/**
			 * Defining the width of the column, this parameter may take any CSS value
			 * (3em, 20px etc). DataTables apples 'smart' widths to columns which have not
			 * been given a specific width through this interface ensuring that the table
			 * remains readable.
			 *  @type string
			 *  @default null <i>Automatic</i>
			 *  @dtopt Columns
			 * 
			 *  @example
			 *    // Using aoColumnDefs
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumnDefs": [ 
			 *          { "sWidth": "20%", "aTargets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *    
			 *  @example
			 *    // Using aoColumns
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "aoColumns": [ 
			 *          { "sWidth": "20%" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sWidth": null
		};
		
		
		
		/**
		 * DataTables settings object - this holds all the information needed for a
		 * given table, including configuration, data and current application of the
		 * table options. DataTables does not have a single instance for each DataTable
		 * with the settings attached to that instance, but rather instances of the
		 * DataTable "class" are created on-the-fly as needed (typically by a 
		 * $().dataTable() call) and the settings object is then applied to that
		 * instance.
		 * 
		 * Note that this object is related to {@link DataTable.defaults} but this 
		 * one is the internal data store for DataTables's cache of columns. It should
		 * NOT be manipulated outside of DataTables. Any configuration should be done
		 * through the initialisation options.
		 *  @namespace
		 *  @todo Really should attach the settings object to individual instances so we
		 *    don't need to create new instances on each $().dataTable() call (if the
		 *    table already exists). It would also save passing oSettings around and
		 *    into every single function. However, this is a very significant 
		 *    architecture change for DataTables and will almost certainly break
		 *    backwards compatibility with older installations. This is something that
		 *    will be done in 2.0.
		 */
		DataTable.models.oSettings = {
			/**
			 * Primary features of DataTables and their enablement state.
			 *  @namespace
			 */
			"oFeatures": {
				
				/**
				 * Flag to say if DataTables should automatically try to calculate the
				 * optimum table and columns widths (true) or not (false).
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bAutoWidth": null,
		
				/**
				 * Delay the creation of TR and TD elements until they are actually
				 * needed by a driven page draw. This can give a significant speed
				 * increase for Ajax source and Javascript source data, but makes no
				 * difference at all fro DOM and server-side processing tables.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bDeferRender": null,
				
				/**
				 * Enable filtering on the table or not. Note that if this is disabled
				 * then there is no filtering at all on the table, including fnFilter.
				 * To just remove the filtering input use sDom and remove the 'f' option.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bFilter": null,
				
				/**
				 * Table information element (the 'Showing x of y records' div) enable
				 * flag.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bInfo": null,
				
				/**
				 * Present a user control allowing the end user to change the page size
				 * when pagination is enabled.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bLengthChange": null,
		
				/**
				 * Pagination enabled or not. Note that if this is disabled then length
				 * changing must also be disabled.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bPaginate": null,
				
				/**
				 * Processing indicator enable flag whenever DataTables is enacting a
				 * user request - typically an Ajax request for server-side processing.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bProcessing": null,
				
				/**
				 * Server-side processing enabled flag - when enabled DataTables will
				 * get all data from the server for every draw - there is no filtering,
				 * sorting or paging done on the client-side.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bServerSide": null,
				
				/**
				 * Sorting enablement flag.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bSort": null,
				
				/**
				 * Apply a class to the columns which are being sorted to provide a
				 * visual highlight or not. This can slow things down when enabled since
				 * there is a lot of DOM interaction.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bSortClasses": null,
				
				/**
				 * State saving enablement flag.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bStateSave": null
			},
			
		
			/**
			 * Scrolling settings for a table.
			 *  @namespace
			 */
			"oScroll": {
				/**
				 * Indicate if DataTables should be allowed to set the padding / margin
				 * etc for the scrolling header elements or not. Typically you will want
				 * this.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bAutoCss": null,
				
				/**
				 * When the table is shorter in height than sScrollY, collapse the
				 * table container down to the height of the table (when true).
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bCollapse": null,
				
				/**
				 * Infinite scrolling enablement flag. Now deprecated in favour of
				 * using the Scroller plug-in.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bInfinite": null,
				
				/**
				 * Width of the scrollbar for the web-browser's platform. Calculated
				 * during table initialisation.
				 *  @type int
				 *  @default 0
				 */
				"iBarWidth": 0,
				
				/**
				 * Space (in pixels) between the bottom of the scrolling container and 
				 * the bottom of the scrolling viewport before the next page is loaded
				 * when using infinite scrolling.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type int
				 */
				"iLoadGap": null,
				
				/**
				 * Viewport width for horizontal scrolling. Horizontal scrolling is 
				 * disabled if an empty string.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 */
				"sX": null,
				
				/**
				 * Width to expand the table to when using x-scrolling. Typically you
				 * should not need to use this.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 *  @deprecated
				 */
				"sXInner": null,
				
				/**
				 * Viewport height for vertical scrolling. Vertical scrolling is disabled
				 * if an empty string.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 */
				"sY": null
			},
			
			/**
			 * Language information for the table.
			 *  @namespace
			 *  @extends DataTable.defaults.oLanguage
			 */
			"oLanguage": {
				/**
				 * Information callback function. See 
				 * {@link DataTable.defaults.fnInfoCallback}
				 *  @type function
				 *  @default null
				 */
				"fnInfoCallback": null
			},
			
			/**
			 * Browser support parameters
			 *  @namespace
			 */
			"oBrowser": {
				/**
				 * Indicate if the browser incorrectly calculates width:100% inside a
				 * scrolling element (IE6/7)
				 *  @type boolean
				 *  @default false
				 */
				"bScrollOversize": false
			},
			
			/**
			 * Array referencing the nodes which are used for the features. The 
			 * parameters of this object match what is allowed by sDom - i.e.
			 *   <ul>
			 *     <li>'l' - Length changing</li>
			 *     <li>'f' - Filtering input</li>
			 *     <li>'t' - The table!</li>
			 *     <li>'i' - Information</li>
			 *     <li>'p' - Pagination</li>
			 *     <li>'r' - pRocessing</li>
			 *   </ul>
			 *  @type array
			 *  @default []
			 */
			"aanFeatures": [],
			
			/**
			 * Store data information - see {@link DataTable.models.oRow} for detailed
			 * information.
			 *  @type array
			 *  @default []
			 */
			"aoData": [],
			
			/**
			 * Array of indexes which are in the current display (after filtering etc)
			 *  @type array
			 *  @default []
			 */
			"aiDisplay": [],
			
			/**
			 * Array of indexes for display - no filtering
			 *  @type array
			 *  @default []
			 */
			"aiDisplayMaster": [],
			
			/**
			 * Store information about each column that is in use
			 *  @type array
			 *  @default []
			 */
			"aoColumns": [],
			
			/**
			 * Store information about the table's header
			 *  @type array
			 *  @default []
			 */
			"aoHeader": [],
			
			/**
			 * Store information about the table's footer
			 *  @type array
			 *  @default []
			 */
			"aoFooter": [],
			
			/**
			 * Search data array for regular expression searching
			 *  @type array
			 *  @default []
			 */
			"asDataSearch": [],
			
			/**
			 * Store the applied global search information in case we want to force a 
			 * research or compare the old search to a new one.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @namespace
			 *  @extends DataTable.models.oSearch
			 */
			"oPreviousSearch": {},
			
			/**
			 * Store the applied search for each column - see 
			 * {@link DataTable.models.oSearch} for the format that is used for the
			 * filtering information for each column.
			 *  @type array
			 *  @default []
			 */
			"aoPreSearchCols": [],
			
			/**
			 * Sorting that is applied to the table. Note that the inner arrays are
			 * used in the following manner:
			 * <ul>
			 *   <li>Index 0 - column number</li>
			 *   <li>Index 1 - current sorting direction</li>
			 *   <li>Index 2 - index of asSorting for this column</li>
			 * </ul>
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array
			 *  @todo These inner arrays should really be objects
			 */
			"aaSorting": null,
			
			/**
			 * Sorting that is always applied to the table (i.e. prefixed in front of
			 * aaSorting).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array|null
			 *  @default null
			 */
			"aaSortingFixed": null,
			
			/**
			 * Classes to use for the striping of a table.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array
			 *  @default []
			 */
			"asStripeClasses": null,
			
			/**
			 * If restoring a table - we should restore its striping classes as well
			 *  @type array
			 *  @default []
			 */
			"asDestroyStripes": [],
			
			/**
			 * If restoring a table - we should restore its width 
			 *  @type int
			 *  @default 0
			 */
			"sDestroyWidth": 0,
			
			/**
			 * Callback functions array for every time a row is inserted (i.e. on a draw).
			 *  @type array
			 *  @default []
			 */
			"aoRowCallback": [],
			
			/**
			 * Callback functions for the header on each draw.
			 *  @type array
			 *  @default []
			 */
			"aoHeaderCallback": [],
			
			/**
			 * Callback function for the footer on each draw.
			 *  @type array
			 *  @default []
			 */
			"aoFooterCallback": [],
			
			/**
			 * Array of callback functions for draw callback functions
			 *  @type array
			 *  @default []
			 */
			"aoDrawCallback": [],
			
			/**
			 * Array of callback functions for row created function
			 *  @type array
			 *  @default []
			 */
			"aoRowCreatedCallback": [],
			
			/**
			 * Callback functions for just before the table is redrawn. A return of 
			 * false will be used to cancel the draw.
			 *  @type array
			 *  @default []
			 */
			"aoPreDrawCallback": [],
			
			/**
			 * Callback functions for when the table has been initialised.
			 *  @type array
			 *  @default []
			 */
			"aoInitComplete": [],
		
			
			/**
			 * Callbacks for modifying the settings to be stored for state saving, prior to
			 * saving state.
			 *  @type array
			 *  @default []
			 */
			"aoStateSaveParams": [],
			
			/**
			 * Callbacks for modifying the settings that have been stored for state saving
			 * prior to using the stored values to restore the state.
			 *  @type array
			 *  @default []
			 */
			"aoStateLoadParams": [],
			
			/**
			 * Callbacks for operating on the settings object once the saved state has been
			 * loaded
			 *  @type array
			 *  @default []
			 */
			"aoStateLoaded": [],
			
			/**
			 * Cache the table ID for quick access
			 *  @type string
			 *  @default <i>Empty string</i>
			 */
			"sTableId": "",
			
			/**
			 * The TABLE node for the main table
			 *  @type node
			 *  @default null
			 */
			"nTable": null,
			
			/**
			 * Permanent ref to the thead element
			 *  @type node
			 *  @default null
			 */
			"nTHead": null,
			
			/**
			 * Permanent ref to the tfoot element - if it exists
			 *  @type node
			 *  @default null
			 */
			"nTFoot": null,
			
			/**
			 * Permanent ref to the tbody element
			 *  @type node
			 *  @default null
			 */
			"nTBody": null,
			
			/**
			 * Cache the wrapper node (contains all DataTables controlled elements)
			 *  @type node
			 *  @default null
			 */
			"nTableWrapper": null,
			
			/**
			 * Indicate if when using server-side processing the loading of data 
			 * should be deferred until the second draw.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 *  @default false
			 */
			"bDeferLoading": false,
			
			/**
			 * Indicate if all required information has been read in
			 *  @type boolean
			 *  @default false
			 */
			"bInitialised": false,
			
			/**
			 * Information about open rows. Each object in the array has the parameters
			 * 'nTr' and 'nParent'
			 *  @type array
			 *  @default []
			 */
			"aoOpenRows": [],
			
			/**
			 * Dictate the positioning of DataTables' control elements - see
			 * {@link DataTable.model.oInit.sDom}.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @default null
			 */
			"sDom": null,
			
			/**
			 * Which type of pagination should be used.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string 
			 *  @default two_button
			 */
			"sPaginationType": "two_button",
			
			/**
			 * The cookie duration (for bStateSave) in seconds.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type int
			 *  @default 0
			 */
			"iCookieDuration": 0,
			
			/**
			 * The cookie name prefix.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @default <i>Empty string</i>
			 */
			"sCookiePrefix": "",
			
			/**
			 * Callback function for cookie creation.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type function
			 *  @default null
			 */
			"fnCookieCallback": null,
			
			/**
			 * Array of callback functions for state saving. Each array element is an 
			 * object with the following parameters:
			 *   <ul>
			 *     <li>function:fn - function to call. Takes two parameters, oSettings
			 *       and the JSON string to save that has been thus far created. Returns
			 *       a JSON string to be inserted into a json object 
			 *       (i.e. '"param": [ 0, 1, 2]')</li>
			 *     <li>string:sName - name of callback</li>
			 *   </ul>
			 *  @type array
			 *  @default []
			 */
			"aoStateSave": [],
			
			/**
			 * Array of callback functions for state loading. Each array element is an 
			 * object with the following parameters:
			 *   <ul>
			 *     <li>function:fn - function to call. Takes two parameters, oSettings 
			 *       and the object stored. May return false to cancel state loading</li>
			 *     <li>string:sName - name of callback</li>
			 *   </ul>
			 *  @type array
			 *  @default []
			 */
			"aoStateLoad": [],
			
			/**
			 * State that was loaded from the cookie. Useful for back reference
			 *  @type object
			 *  @default null
			 */
			"oLoadedState": null,
			
			/**
			 * Source url for AJAX data for the table.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @default null
			 */
			"sAjaxSource": null,
			
			/**
			 * Property from a given object from which to read the table data from. This
			 * can be an empty string (when not server-side processing), in which case 
			 * it is  assumed an an array is given directly.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sAjaxDataProp": null,
			
			/**
			 * Note if draw should be blocked while getting data
			 *  @type boolean
			 *  @default true
			 */
			"bAjaxDataGet": true,
			
			/**
			 * The last jQuery XHR object that was used for server-side data gathering. 
			 * This can be used for working with the XHR information in one of the 
			 * callbacks
			 *  @type object
			 *  @default null
			 */
			"jqXHR": null,
			
			/**
			 * Function to get the server-side data.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type function
			 */
			"fnServerData": null,
			
			/**
			 * Functions which are called prior to sending an Ajax request so extra 
			 * parameters can easily be sent to the server
			 *  @type array
			 *  @default []
			 */
			"aoServerParams": [],
			
			/**
			 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if 
			 * required).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sServerMethod": null,
			
			/**
			 * Format numbers for display.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type function
			 */
			"fnFormatNumber": null,
			
			/**
			 * List of options that can be used for the user selectable length menu.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array
			 *  @default []
			 */
			"aLengthMenu": null,
			
			/**
			 * Counter for the draws that the table does. Also used as a tracker for
			 * server-side processing
			 *  @type int
			 *  @default 0
			 */
			"iDraw": 0,
			
			/**
			 * Indicate if a redraw is being done - useful for Ajax
			 *  @type boolean
			 *  @default false
			 */
			"bDrawing": false,
			
			/**
			 * Draw index (iDraw) of the last error when parsing the returned data
			 *  @type int
			 *  @default -1
			 */
			"iDrawError": -1,
			
			/**
			 * Paging display length
			 *  @type int
			 *  @default 10
			 */
			"_iDisplayLength": 10,
		
			/**
			 * Paging start point - aiDisplay index
			 *  @type int
			 *  @default 0
			 */
			"_iDisplayStart": 0,
		
			/**
			 * Paging end point - aiDisplay index. Use fnDisplayEnd rather than
			 * this property to get the end point
			 *  @type int
			 *  @default 10
			 *  @private
			 */
			"_iDisplayEnd": 10,
			
			/**
			 * Server-side processing - number of records in the result set
			 * (i.e. before filtering), Use fnRecordsTotal rather than
			 * this property to get the value of the number of records, regardless of
			 * the server-side processing setting.
			 *  @type int
			 *  @default 0
			 *  @private
			 */
			"_iRecordsTotal": 0,
		
			/**
			 * Server-side processing - number of records in the current display set
			 * (i.e. after filtering). Use fnRecordsDisplay rather than
			 * this property to get the value of the number of records, regardless of
			 * the server-side processing setting.
			 *  @type boolean
			 *  @default 0
			 *  @private
			 */
			"_iRecordsDisplay": 0,
			
			/**
			 * Flag to indicate if jQuery UI marking and classes should be used.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bJUI": null,
			
			/**
			 * The classes to use for the table
			 *  @type object
			 *  @default {}
			 */
			"oClasses": {},
			
			/**
			 * Flag attached to the settings object so you can check in the draw 
			 * callback if filtering has been done in the draw. Deprecated in favour of
			 * events.
			 *  @type boolean
			 *  @default false
			 *  @deprecated
			 */
			"bFiltered": false,
			
			/**
			 * Flag attached to the settings object so you can check in the draw 
			 * callback if sorting has been done in the draw. Deprecated in favour of
			 * events.
			 *  @type boolean
			 *  @default false
			 *  @deprecated
			 */
			"bSorted": false,
			
			/**
			 * Indicate that if multiple rows are in the header and there is more than 
			 * one unique cell per column, if the top one (true) or bottom one (false) 
			 * should be used for sorting / title by DataTables.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortCellsTop": null,
			
			/**
			 * Initialisation object that is used for the table
			 *  @type object
			 *  @default null
			 */
			"oInit": null,
			
			/**
			 * Destroy callback functions - for plug-ins to attach themselves to the
			 * destroy so they can clean up markup and events.
			 *  @type array
			 *  @default []
			 */
			"aoDestroyCallback": [],
		
			
			/**
			 * Get the number of records in the current record set, before filtering
			 *  @type function
			 */
			"fnRecordsTotal": function ()
			{
				if ( this.oFeatures.bServerSide ) {
					return parseInt(this._iRecordsTotal, 10);
				} else {
					return this.aiDisplayMaster.length;
				}
			},
			
			/**
			 * Get the number of records in the current record set, after filtering
			 *  @type function
			 */
			"fnRecordsDisplay": function ()
			{
				if ( this.oFeatures.bServerSide ) {
					return parseInt(this._iRecordsDisplay, 10);
				} else {
					return this.aiDisplay.length;
				}
			},
			
			/**
			 * Set the display end point - aiDisplay index
			 *  @type function
			 *  @todo Should do away with _iDisplayEnd and calculate it on-the-fly here
			 */
			"fnDisplayEnd": function ()
			{
				if ( this.oFeatures.bServerSide ) {
					if ( this.oFeatures.bPaginate === false || this._iDisplayLength == -1 ) {
						return this._iDisplayStart+this.aiDisplay.length;
					} else {
						return Math.min( this._iDisplayStart+this._iDisplayLength, 
							this._iRecordsDisplay );
					}
				} else {
					return this._iDisplayEnd;
				}
			},
			
			/**
			 * The DataTables object for this table
			 *  @type object
			 *  @default null
			 */
			"oInstance": null,
			
			/**
			 * Unique identifier for each instance of the DataTables object. If there
			 * is an ID on the table node, then it takes that value, otherwise an
			 * incrementing internal counter is used.
			 *  @type string
			 *  @default null
			 */
			"sInstance": null,
		
			/**
			 * tabindex attribute value that is added to DataTables control elements, allowing
			 * keyboard navigation of the table and its controls.
			 */
			"iTabIndex": 0,
		
			/**
			 * DIV container for the footer scrolling table if scrolling
			 */
			"nScrollHead": null,
		
			/**
			 * DIV container for the footer scrolling table if scrolling
			 */
			"nScrollFoot": null
		};

		/**
		 * Extension object for DataTables that is used to provide all extension options.
		 * 
		 * Note that the <i>DataTable.ext</i> object is available through
		 * <i>jQuery.fn.dataTable.ext</i> where it may be accessed and manipulated. It is
		 * also aliased to <i>jQuery.fn.dataTableExt</i> for historic reasons.
		 *  @namespace
		 *  @extends DataTable.models.ext
		 */
		DataTable.ext = $.extend( true, {}, DataTable.models.ext );
		
		$.extend( DataTable.ext.oStdClasses, {
			"sTable": "dataTable",
		
			/* Two buttons buttons */
			"sPagePrevEnabled": "paginate_enabled_previous",
			"sPagePrevDisabled": "paginate_disabled_previous",
			"sPageNextEnabled": "paginate_enabled_next",
			"sPageNextDisabled": "paginate_disabled_next",
			"sPageJUINext": "",
			"sPageJUIPrev": "",
			
			/* Full numbers paging buttons */
			"sPageButton": "paginate_button",
			"sPageButtonActive": "paginate_active",
			"sPageButtonStaticDisabled": "paginate_button paginate_button_disabled",
			"sPageFirst": "first",
			"sPagePrevious": "previous",
			"sPageNext": "next",
			"sPageLast": "last",
			
			/* Striping classes */
			"sStripeOdd": "odd",
			"sStripeEven": "even",
			
			/* Empty row */
			"sRowEmpty": "dataTables_empty",
			
			/* Features */
			"sWrapper": "dataTables_wrapper",
			"sFilter": "dataTables_filter",
			"sInfo": "dataTables_info",
			"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
			"sLength": "dataTables_length",
			"sProcessing": "dataTables_processing",
			
			/* Sorting */
			"sSortAsc": "sorting_asc",
			"sSortDesc": "sorting_desc",
			"sSortable": "sorting", /* Sortable in both directions */
			"sSortableAsc": "sorting_asc_disabled",
			"sSortableDesc": "sorting_desc_disabled",
			"sSortableNone": "sorting_disabled",
			"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
			"sSortJUIAsc": "",
			"sSortJUIDesc": "",
			"sSortJUI": "",
			"sSortJUIAscAllowed": "",
			"sSortJUIDescAllowed": "",
			"sSortJUIWrapper": "",
			"sSortIcon": "",
			
			/* Scrolling */
			"sScrollWrapper": "dataTables_scroll",
			"sScrollHead": "dataTables_scrollHead",
			"sScrollHeadInner": "dataTables_scrollHeadInner",
			"sScrollBody": "dataTables_scrollBody",
			"sScrollFoot": "dataTables_scrollFoot",
			"sScrollFootInner": "dataTables_scrollFootInner",
			
			/* Misc */
			"sFooterTH": "",
			"sJUIHeader": "",
			"sJUIFooter": ""
		} );
		
		
		$.extend( DataTable.ext.oJUIClasses, DataTable.ext.oStdClasses, {
			/* Two buttons buttons */
			"sPagePrevEnabled": "fg-button ui-button ui-state-default ui-corner-left",
			"sPagePrevDisabled": "fg-button ui-button ui-state-default ui-corner-left ui-state-disabled",
			"sPageNextEnabled": "fg-button ui-button ui-state-default ui-corner-right",
			"sPageNextDisabled": "fg-button ui-button ui-state-default ui-corner-right ui-state-disabled",
			"sPageJUINext": "ui-icon ui-icon-circle-arrow-e",
			"sPageJUIPrev": "ui-icon ui-icon-circle-arrow-w",
			
			/* Full numbers paging buttons */
			"sPageButton": "fg-button ui-button ui-state-default",
			"sPageButtonActive": "fg-button ui-button ui-state-default ui-state-disabled",
			"sPageButtonStaticDisabled": "fg-button ui-button ui-state-default ui-state-disabled",
			"sPageFirst": "first ui-corner-tl ui-corner-bl",
			"sPageLast": "last ui-corner-tr ui-corner-br",
			
			/* Features */
			"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+
				"ui-buttonset-multi paging_", /* Note that the type is postfixed */
			
			/* Sorting */
			"sSortAsc": "ui-state-default",
			"sSortDesc": "ui-state-default",
			"sSortable": "ui-state-default",
			"sSortableAsc": "ui-state-default",
			"sSortableDesc": "ui-state-default",
			"sSortableNone": "ui-state-default",
			"sSortJUIAsc": "css_right ui-icon ui-icon-triangle-1-n",
			"sSortJUIDesc": "css_right ui-icon ui-icon-triangle-1-s",
			"sSortJUI": "css_right ui-icon ui-icon-carat-2-n-s",
			"sSortJUIAscAllowed": "css_right ui-icon ui-icon-carat-1-n",
			"sSortJUIDescAllowed": "css_right ui-icon ui-icon-carat-1-s",
			"sSortJUIWrapper": "DataTables_sort_wrapper",
			"sSortIcon": "DataTables_sort_icon",
			
			/* Scrolling */
			"sScrollHead": "dataTables_scrollHead ui-state-default",
			"sScrollFoot": "dataTables_scrollFoot ui-state-default",
			
			/* Misc */
			"sFooterTH": "ui-state-default",
			"sJUIHeader": "fg-toolbar ui-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix",
			"sJUIFooter": "fg-toolbar ui-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix"
		} );
		
		/*
		 * Variable: oPagination
		 * Purpose:  
		 * Scope:    jQuery.fn.dataTableExt
		 */
		$.extend( DataTable.ext.oPagination, {
			/*
			 * Variable: two_button
			 * Purpose:  Standard two button (forward/back) pagination
			 * Scope:    jQuery.fn.dataTableExt.oPagination
			 */
			"two_button": {
				/*
				 * Function: oPagination.two_button.fnInit
				 * Purpose:  Initialise dom elements required for pagination with forward/back buttons only
				 * Returns:  -
				 * Inputs:   object:oSettings - dataTables settings object
				 *           node:nPaging - the DIV which contains this pagination control
				 *           function:fnCallbackDraw - draw function which must be called on update
				 */
				"fnInit": function ( oSettings, nPaging, fnCallbackDraw )
				{
					var oLang = oSettings.oLanguage.oPaginate;
					var oClasses = oSettings.oClasses;
					var fnClickHandler = function ( e ) {
						if ( oSettings.oApi._fnPageChange( oSettings, e.data.action ) )
						{
							fnCallbackDraw( oSettings );
						}
					};
		
					var sAppend = (!oSettings.bJUI) ?
						'<a class="'+oSettings.oClasses.sPagePrevDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button">'+oLang.sPrevious+'</a>'+
						'<a class="'+oSettings.oClasses.sPageNextDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button">'+oLang.sNext+'</a>'
						:
						'<a class="'+oSettings.oClasses.sPagePrevDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button"><span class="'+oSettings.oClasses.sPageJUIPrev+'"></span></a>'+
						'<a class="'+oSettings.oClasses.sPageNextDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button"><span class="'+oSettings.oClasses.sPageJUINext+'"></span></a>';
					$(nPaging).append( sAppend );
					
					var els = $('a', nPaging);
					var nPrevious = els[0],
						nNext = els[1];
					
					oSettings.oApi._fnBindAction( nPrevious, {action: "previous"}, fnClickHandler );
					oSettings.oApi._fnBindAction( nNext,     {action: "next"},     fnClickHandler );
					
					/* ID the first elements only */
					if ( !oSettings.aanFeatures.p )
					{
						nPaging.id = oSettings.sTableId+'_paginate';
						nPrevious.id = oSettings.sTableId+'_previous';
						nNext.id = oSettings.sTableId+'_next';
		
						nPrevious.setAttribute('aria-controls', oSettings.sTableId);
						nNext.setAttribute('aria-controls', oSettings.sTableId);
					}
				},
				
				/*
				 * Function: oPagination.two_button.fnUpdate
				 * Purpose:  Update the two button pagination at the end of the draw
				 * Returns:  -
				 * Inputs:   object:oSettings - dataTables settings object
				 *           function:fnCallbackDraw - draw function to call on page change
				 */
				"fnUpdate": function ( oSettings, fnCallbackDraw )
				{
					if ( !oSettings.aanFeatures.p )
					{
						return;
					}
					
					var oClasses = oSettings.oClasses;
					var an = oSettings.aanFeatures.p;
					var nNode;
		
					/* Loop over each instance of the pager */
					for ( var i=0, iLen=an.length ; i<iLen ; i++ )
					{
						nNode = an[i].firstChild;
						if ( nNode )
						{
							/* Previous page */
							nNode.className = ( oSettings._iDisplayStart === 0 ) ?
							    oClasses.sPagePrevDisabled : oClasses.sPagePrevEnabled;
							    
							/* Next page */
							nNode = nNode.nextSibling;
							nNode.className = ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() ) ?
							    oClasses.sPageNextDisabled : oClasses.sPageNextEnabled;
						}
					}
				}
			},
			
			
			/*
			 * Variable: iFullNumbersShowPages
			 * Purpose:  Change the number of pages which can be seen
			 * Scope:    jQuery.fn.dataTableExt.oPagination
			 */
			"iFullNumbersShowPages": 5,
			
			/*
			 * Variable: full_numbers
			 * Purpose:  Full numbers pagination
			 * Scope:    jQuery.fn.dataTableExt.oPagination
			 */
			"full_numbers": {
				/*
				 * Function: oPagination.full_numbers.fnInit
				 * Purpose:  Initialise dom elements required for pagination with a list of the pages
				 * Returns:  -
				 * Inputs:   object:oSettings - dataTables settings object
				 *           node:nPaging - the DIV which contains this pagination control
				 *           function:fnCallbackDraw - draw function which must be called on update
				 */
				"fnInit": function ( oSettings, nPaging, fnCallbackDraw )
				{
					var oLang = oSettings.oLanguage.oPaginate;
					var oClasses = oSettings.oClasses;
					var fnClickHandler = function ( e ) {
						if ( oSettings.oApi._fnPageChange( oSettings, e.data.action ) )
						{
							fnCallbackDraw( oSettings );
						}
					};
		
					$(nPaging).append(
						'<a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageFirst+'">'+oLang.sFirst+'</a>'+
						'<a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPagePrevious+'">'+oLang.sPrevious+'</a>'+
						'<span></span>'+
						'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageNext+'">'+oLang.sNext+'</a>'+
						'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageLast+'">'+oLang.sLast+'</a>'
					);
					var els = $('a', nPaging);
					var nFirst = els[0],
						nPrev = els[1],
						nNext = els[2],
						nLast = els[3];
					
					oSettings.oApi._fnBindAction( nFirst, {action: "first"},    fnClickHandler );
					oSettings.oApi._fnBindAction( nPrev,  {action: "previous"}, fnClickHandler );
					oSettings.oApi._fnBindAction( nNext,  {action: "next"},     fnClickHandler );
					oSettings.oApi._fnBindAction( nLast,  {action: "last"},     fnClickHandler );
					
					/* ID the first elements only */
					if ( !oSettings.aanFeatures.p )
					{
						nPaging.id = oSettings.sTableId+'_paginate';
						nFirst.id =oSettings.sTableId+'_first';
						nPrev.id =oSettings.sTableId+'_previous';
						nNext.id =oSettings.sTableId+'_next';
						nLast.id =oSettings.sTableId+'_last';
					}
				},
				
				/*
				 * Function: oPagination.full_numbers.fnUpdate
				 * Purpose:  Update the list of page buttons shows
				 * Returns:  -
				 * Inputs:   object:oSettings - dataTables settings object
				 *           function:fnCallbackDraw - draw function to call on page change
				 */
				"fnUpdate": function ( oSettings, fnCallbackDraw )
				{
					if ( !oSettings.aanFeatures.p )
					{
						return;
					}
					
					var iPageCount = DataTable.ext.oPagination.iFullNumbersShowPages;
					var iPageCountHalf = Math.floor(iPageCount / 2);
					var iPages = Math.ceil((oSettings.fnRecordsDisplay()) / oSettings._iDisplayLength);
					var iCurrentPage = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;
					var sList = "";
					var iStartButton, iEndButton, i, iLen;
					var oClasses = oSettings.oClasses;
					var anButtons, anStatic, nPaginateList, nNode;
					var an = oSettings.aanFeatures.p;
					var fnBind = function (j) {
						oSettings.oApi._fnBindAction( this, {"page": j+iStartButton-1}, function(e) {
							/* Use the information in the element to jump to the required page */
							oSettings.oApi._fnPageChange( oSettings, e.data.page );
							fnCallbackDraw( oSettings );
							e.preventDefault();
						} );
					};
					
					/* Pages calculation */
					if ( oSettings._iDisplayLength === -1 )
					{
						iStartButton = 1;
						iEndButton = 1;
						iCurrentPage = 1;
					}
					else if (iPages < iPageCount)
					{
						iStartButton = 1;
						iEndButton = iPages;
					}
					else if (iCurrentPage <= iPageCountHalf)
					{
						iStartButton = 1;
						iEndButton = iPageCount;
					}
					else if (iCurrentPage >= (iPages - iPageCountHalf))
					{
						iStartButton = iPages - iPageCount + 1;
						iEndButton = iPages;
					}
					else
					{
						iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
						iEndButton = iStartButton + iPageCount - 1;
					}
		
					
					/* Build the dynamic list */
					for ( i=iStartButton ; i<=iEndButton ; i++ )
					{
						sList += (iCurrentPage !== i) ?
							'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+'">'+oSettings.fnFormatNumber(i)+'</a>' :
							'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButtonActive+'">'+oSettings.fnFormatNumber(i)+'</a>';
					}
					
					/* Loop over each instance of the pager */
					for ( i=0, iLen=an.length ; i<iLen ; i++ )
					{
						nNode = an[i];
						if ( !nNode.hasChildNodes() )
						{
							continue;
						}
						
						/* Build up the dynamic list first - html and listeners */
						$('span:eq(0)', nNode)
							.html( sList )
							.children('a').each( fnBind );
						
						/* Update the permanent button's classes */
						anButtons = nNode.getElementsByTagName('a');
						anStatic = [
							anButtons[0], anButtons[1], 
							anButtons[anButtons.length-2], anButtons[anButtons.length-1]
						];
		
						$(anStatic).removeClass( oClasses.sPageButton+" "+oClasses.sPageButtonActive+" "+oClasses.sPageButtonStaticDisabled );
						$([anStatic[0], anStatic[1]]).addClass( 
							(iCurrentPage==1) ?
								oClasses.sPageButtonStaticDisabled :
								oClasses.sPageButton
						);
						$([anStatic[2], anStatic[3]]).addClass(
							(iPages===0 || iCurrentPage===iPages || oSettings._iDisplayLength===-1) ?
								oClasses.sPageButtonStaticDisabled :
								oClasses.sPageButton
						);
					}
				}
			}
		} );
		
		$.extend( DataTable.ext.oSort, {
			/*
			 * text sorting
			 */
			"string-pre": function ( a )
			{
				if ( typeof a != 'string' ) {
					a = (a !== null && a.toString) ? a.toString() : '';
				}
				return a.toLowerCase();
			},
		
			"string-asc": function ( x, y )
			{
				return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			},
			
			"string-desc": function ( x, y )
			{
				return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			},
			
			
			/*
			 * html sorting (ignore html tags)
			 */
			"html-pre": function ( a )
			{
				return a.replace( /<.*?>/g, "" ).toLowerCase();
			},
			
			"html-asc": function ( x, y )
			{
				return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			},
			
			"html-desc": function ( x, y )
			{
				return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			},
			
			
			/*
			 * date sorting
			 */
			"date-pre": function ( a )
			{
				var x = Date.parse( a );
				
				if ( isNaN(x) || x==="" )
				{
					x = Date.parse( "01/01/1970 00:00:00" );
				}
				return x;
			},
		
			"date-asc": function ( x, y )
			{
				return x - y;
			},
			
			"date-desc": function ( x, y )
			{
				return y - x;
			},
			
			
			/*
			 * numerical sorting
			 */
			"numeric-pre": function ( a )
			{
				return (a=="-" || a==="") ? 0 : a*1;
			},
		
			"numeric-asc": function ( x, y )
			{
				return x - y;
			},
			
			"numeric-desc": function ( x, y )
			{
				return y - x;
			}
		} );
		
		
		$.extend( DataTable.ext.aTypes, [
			/*
			 * Function: -
			 * Purpose:  Check to see if a string is numeric
			 * Returns:  string:'numeric' or null
			 * Inputs:   mixed:sText - string to check
			 */
			function ( sData )
			{
				/* Allow zero length strings as a number */
				if ( typeof sData === 'number' )
				{
					return 'numeric';
				}
				else if ( typeof sData !== 'string' )
				{
					return null;
				}
				
				var sValidFirstChars = "0123456789-";
				var sValidChars = "0123456789.";
				var Char;
				var bDecimal = false;
				
				/* Check for a valid first char (no period and allow negatives) */
				Char = sData.charAt(0); 
				if (sValidFirstChars.indexOf(Char) == -1) 
				{
					return null;
				}
				
				/* Check all the other characters are valid */
				for ( var i=1 ; i<sData.length ; i++ ) 
				{
					Char = sData.charAt(i); 
					if (sValidChars.indexOf(Char) == -1) 
					{
						return null;
					}
					
					/* Only allowed one decimal place... */
					if ( Char == "." )
					{
						if ( bDecimal )
						{
							return null;
						}
						bDecimal = true;
					}
				}
				
				return 'numeric';
			},
			
			/*
			 * Function: -
			 * Purpose:  Check to see if a string is actually a formatted date
			 * Returns:  string:'date' or null
			 * Inputs:   string:sText - string to check
			 */
			function ( sData )
			{
				var iParse = Date.parse(sData);
				if ( (iParse !== null && !isNaN(iParse)) || (typeof sData === 'string' && sData.length === 0) )
				{
					return 'date';
				}
				return null;
			},
			
			/*
			 * Function: -
			 * Purpose:  Check to see if a string should be treated as an HTML string
			 * Returns:  string:'html' or null
			 * Inputs:   string:sText - string to check
			 */
			function ( sData )
			{
				if ( typeof sData === 'string' && sData.indexOf('<') != -1 && sData.indexOf('>') != -1 )
				{
					return 'html';
				}
				return null;
			}
		] );
		

		// jQuery aliases
		$.fn.DataTable = DataTable;
		$.fn.dataTable = DataTable;
		$.fn.dataTableSettings = DataTable.settings;
		$.fn.dataTableExt = DataTable.ext;


		// Information about events fired by DataTables - for documentation.
		/**
		 * Draw event, fired whenever the table is redrawn on the page, at the same point as
		 * fnDrawCallback. This may be useful for binding events or performing calculations when
		 * the table is altered at all.
		 *  @name DataTable#draw
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */

		/**
		 * Filter event, fired when the filtering applied to the table (using the build in global
		 * global filter, or column filters) is altered.
		 *  @name DataTable#filter
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */

		/**
		 * Page change event, fired when the paging of the table is altered.
		 *  @name DataTable#page
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */

		/**
		 * Sort event, fired when the sorting applied to the table is altered.
		 *  @name DataTable#sort
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */

		/**
		 * DataTables initialisation complete event, fired when the table is fully drawn,
		 * including Ajax data loaded, if Ajax data is required.
		 *  @name DataTable#init
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The JSON object request from the server - only
		 *    present if client-side Ajax sourced data is used</li></ol>
		 */

		/**
		 * State save event, fired when the table has changed state a new state save is required.
		 * This method allows modification of the state saving object prior to actually doing the
		 * save, including addition or other state properties (for plug-ins) or modification
		 * of a DataTables core property.
		 *  @name DataTable#stateSaveParams
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The state information to be saved
		 */

		/**
		 * State load event, fired when the table is loading state from the stored data, but
		 * prior to the settings object being modified by the saved state - allowing modification
		 * of the saved state is required or loading of state for a plug-in.
		 *  @name DataTable#stateLoadParams
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The saved state information
		 */

		/**
		 * State loaded event, fired when state has been loaded from stored data and the settings
		 * object has been modified by the loaded data.
		 *  @name DataTable#stateLoaded
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The saved state information
		 */

		/**
		 * Processing event, fired when DataTables is doing some kind of processing (be it,
		 * sort, filter or anything else). Can be used to indicate to the end user that
		 * there is something happening, or that something has finished.
		 *  @name DataTable#processing
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
		 */

		/**
		 * Ajax (XHR) event, fired whenever an Ajax request is completed from a request to 
		 * made to the server for new data (note that this trigger is called in fnServerData,
		 * if you override fnServerData and which to use this event, you need to trigger it in
		 * you success function).
		 *  @name DataTable#xhr
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 *  @param {object} json JSON returned from the server
		 */

		/**
		 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy or passing
		 * the bDestroy:true parameter in the initialisation object. This can be used to remove
		 * bound events, added DOM nodes, etc.
		 *  @name DataTable#destroy
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */
	}));

	}(window, document));


	}.call(window));

/***/ },
/* 66 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\" style=\"padding-top: 56px;\">\n    <div class=\"col-sm-12\">\n        <h3 class=\"moduleTitle\">Search for Plates</h3>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-sm-12\">\n        <div class=\"well well-small\">\n            <div class=\"row\">\n                <div class=\"col-sm-2\">\n                    <label class=\"control-label\">Barcode</label>\n                    <input type=\"text\" class=\"form-control\" name='barcodeSearchTerm' />\n                </div>\n                <div class=\"col-sm-2\">\n                    <label class=\"control-label\">User</label>\n                    <select class=\"form-control\"></select>\n                </div>\n                <div class=\"col-sm-2\">\n                    <label class=\"control-label\">Description</label>\n                    <input type=\"text\" class=\"form-control\" name='descriptionSearchTerm' />\n                </div>\n                <div class=\"col-sm-2\">\n                    <label class=\"control-label\">Plate Size</label>\n                    <select class=\"form-control\" name=\"definition\"></select>\n                </div>\n                <div class=\"col-sm-2\">\n                    <label class=\"control-label\">Request ID</label>\n                    <select class=\"form-control\" disabled></select>\n                </div>\n                <div class=\"col-sm-1\">\n                    <label class=\"control-label\">Status</label>\n                    <select class=\"form-control\" name=\"status\"></select>\n                </div>\n                <div class=\"col-sm-1\">\n                    <label class=\"control-label\">Type</label>\n                    <select class=\"form-control\" name=\"type\"></select>\n                    <br />\n                    <button class=\"btn btn-primary\" name=\"search\">Search</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-sm-12 bv_searchResults\">\n\n    </div>\n</div>\n<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" name=\"clonePlateDialogbox\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                <h4>Clone Plate: <a class=\"bv_linkToPlateToClone\" target=\"_blank\"></a></h4>\n            </div>\n            <div class=\"modal-body\">\n                <table class=\"table table-condensed\">\n                    <thead>\n                        <tr>\n                            <th>Cloned Plate Barcode</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody class=\"bv_clonePlateBarcodeContainer\"></tbody>\n                </table>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" name=\"cancelClonePlate\">Cancel</button>\n                <button type=\"button\" class=\"btn btn-primary\" name=\"clonePlate\">Clone</button>\n                <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" name=\"closeClonePlate\">Close</button>\n            </div>\n        </div><!-- /.modal-content -->\n    </div><!-- /.modal-dialog -->\n</div><!-- /.modal -->";

/***/ },
/* 67 */
/***/ function(module, exports) {

	module.exports = "<!-- Navbar and Module Menus -->\n<nav class=\"navbar navbar-default navBarACAS navbar-fixed-top\">\n    <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"plateReg_base.html\">ACAS</a>\n            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#acas-navbar-collapse\" aria-expanded=\"false\">\n                <span class=\"sr-only\">Navigation</span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n            </button>\n        </div>\n        <div class=\"collapse navbar-collapse\" id=\"acas-navbar-collapse\">\n            <ul class=\"nav navbar-nav\">\n                <li class=\"dropdown\">\n                    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Plate Registration <span class=\"caret\"></span></a>\n                    <ul class=\"dropdown-menu\">\n                        <li><a href=\"#createPlate\">Design New Plate</a></li>\n                        <li><a href=\"#plateSearch\">Search for Plates</a></li>\n                        <li><a href=\"sel.html\">Merge or Split Plates</a></li>\n                        <!--<li><a href=\"sel.html\">Fill Template</a></li>-->\n                    </ul>\n                </li>\n            </ul>\n            <!-- TODO: fix username and logout button collapse behavior -->\n            <a class=\"btn btn-warning navbar-btn navbar-right acasLogout\" href=\"login.html\">Logout</a>\n            <p class=\"navbar-text navbar-right\">\n                Signed in as <a href=\"#\" class=\"navbar-link\">Bob Roberts</a>\n            </p>\n            <ul class=\"nav navbar-nav navbar-right\">\n                <li class=\"dropdown\">\n                    <a href=\"#\" class=\"dropdown-toggle dropdown-menu-left\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Admin <span class=\"caret\"></span></a>\n                    <ul class=\"dropdown-menu\">\n                        <li><a href=\"admin.html\">Admin Panel</a></li>\n                        <li><a href=\"logs.html\">Logs</a></li>\n                        <li><a href=\"change_pass.html\">Change Password</a></li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>\n<!-- End Navbar and Module Menus -->\n\n<div class=\"container-fluid acasContent\" name=\"formContainer\"></div>\n\n<div name=\"dataServiceControllerContainer\"></div>";

/***/ }
/******/ ]);
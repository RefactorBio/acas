class window.PrimaryScreenProtocol extends Protocol

	defaults: ->
		_(super()).extend(
#			dnsTargetList: false
			molecularTarget: "unassigned"
#			targetOrigin: "unassigned"
			assayType: "unassigned"
			assayTechnology: "unassigned"
			cellLine: "unassigned"
			assayStage: "unassigned"
			maxY: 100
			minY: 0
		)

	validate: (attrs) ->
		errors = []
		if _.isNaN(attrs.maxY)
			errors.push
				attribute: 'maxY'
				message: "maxY must be a number"
		if _.isNaN(attrs.minY)
			errors.push
				attribute: 'minY'
				message: "minY must be a number"

		if errors.length > 0
			return errors
		else
			return null

	getPrimaryScreenProtocolParameter: (parameterName) ->
#		splitName = parameterName.replace /([A-Z])/g,' $1'
#		splitName = splitName.toLowerCase()
#		parameter = @.get('lsStates').getOrCreateValueByTypeAndKind "metadata", "screening assay", "codeValue", splitName
		parameter = @.get('lsStates').getOrCreateValueByTypeAndKind "metadata", "screening assay", "codeValue", parameterName
		if parameter.get('codeValue') is undefined or parameter.get('codeValue') is ""
			console.log "heres"
			parameter.set codeValue: "unassigned"

		parameter


class window.AbstractPrimaryScreenProtocolParameterController extends Backbone.View
	events:
		"change .bv_parameter": "handleParameterChanged"
		"click .bv_addParameterBtn": "clearModal"
		"click .bv_addNewParameterOption": "addNewParameterOption"

#	Your initialization function needs at least these three lines below:
# initialize: ->
#		@.parameter = "parameterName"
#		@setupParameterSelect()
#

	handleParameterChanged: ->
		console.log "parameter changed"
		splitName = (@.parameter).replace /([A-Z])/g,' $1'
		splitName = splitName.toLowerCase()
		@model.getPrimaryScreenProtocolParameter(splitName).set
			codeValue: @$('.bv_'+@.parameter).val()

	clearModal: ->
		console.log "clearing modal"
		pascalCaseParameterName = (@.parameter).charAt(0).toUpperCase() + (@.parameter).slice(1)
		@$('.bv_optionAddedMessage').hide()
		@$('.bv_errorMessage').hide()
		@$('.bv_new'+pascalCaseParameterName+'Label').val("")
		@$('.bv_new'+pascalCaseParameterName+'Description').val("")
		@$('.bv_new'+pascalCaseParameterName+'Comments').val("")
		@$('.bv_optionAddedMessage').hide()
		@$('.bv_errorMessage').hide()


	addNewParameterOption: ->
		console.log "add new parameter clicked"
		pascalCaseParameterName = (@.parameter).charAt(0).toUpperCase() + (@.parameter).slice(1)
		# new short name is generated by making everything lower case in label text
		newOptionName = (@$('.bv_new'+pascalCaseParameterName+'Label').val()).toLowerCase()
		console.log newOptionName
		if @.validNewOption(newOptionName)
			console.log "will add new option"
			#add new option to code table. for now just append to html
			# TODO: add to DataDictionary and refresh the select list
			#			protocolCodeTableTestJSON = require ''
			@$('.bv_'+@.parameter).append('<option value='+ newOptionName+'>'+newOptionName+'</option>')
			@$('.bv_optionAddedMessage').show()
			@$('.bv_errorMessage').hide()
			#			@$('#add'+pascalCaseParameterName+'Modal').modal('hide')
			console.log "messages shown"

		else
			console.log "option already exists"
			@$('.bv_optionAddedMessage').hide()
			@$('.bv_errorMessage').show()

	validNewOption: (newOptionName) ->
		console.log "validating new option"
		#checks to see if assay activity option already exists
		console.log newOptionName
		if @$('.bv_'+@.parameter+' option[value="'+newOptionName+'"]').length > 0
			return false
		else
			return true


class window.AssayActivityController extends AbstractPrimaryScreenProtocolParameterController
	template: _.template($("#AssayActivityView").html())

	events:
		"change .bv_assayActivity": "handleParameterChanged"
		"click .bv_addAssayActivityBtn": "clearModal"
		"click .bv_addNewAssayActivityOption": "addNewParameterOption"

	initialize: ->
		console.log "initialize, pre-super"
		@.parameter = "assayActivity"
		@setupParameterSelect()


	render: ->
		console.log "rendering aa controller"
		$(@el).empty()
		$(@el).html @template()
		@setupParameterSelect()

	setupParameterSelect: ->
		console.log @model
		console.log "setting up parameter select"
		console.log @.parameter
		@assayActivityList = new PickListList()
		@assayActivityList.url = "/api/dataDict/assayActivityCodes"
		@assayActivityListController = new PickListSelectController
			el: @$('.bv_assayActivity')
			collection: @assayActivityList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Assay Activity"
			selectedCode: @model.getPrimaryScreenProtocolParameter('assay activity').get('codeValue')
		console.log @model.getPrimaryScreenProtocolParameter('assay activity').get('codeValue')
		console.log "end"

class window.MolecularTargetController extends AbstractPrimaryScreenProtocolParameterController
	template: _.template($("#MolecularTargetView").html())

	events:
		"change .bv_molecularTarget": "handleParameterChanged"
		"click .bv_addMolecularTargetBtn": "clearModal"
		"click .bv_addNewMolecularTargetOption": "addNewParameterOption"

	initialize: ->
		console.log "initialize, pre-super"
		@.parameter = "molecularTarget"
		@setupParameterSelect()


	render: ->
		console.log "rendering aa controller"
		$(@el).empty()
		$(@el).html @template()
		@setupParameterSelect()

	setUpMolecularTargetSelect: ->
		@molecularTargetList = new PickListList()
		@molecularTargetList.url = "/api/dataDict/molecularTargetCodes"
		@molecularTargetListController = new PickListSelectController
			el: @$('.bv_molecularTarget')
			collection: @molecularTargetList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Molecular Target"
			selectedCode: @model.get('molecularTarget')


class window.PrimaryScreenProtocolParametersController extends AbstractParserFormController
	template: _.template($("#PrimaryScreenProtocolParametersView").html())

	events:
		"click .bv_dnsTargetList": "handleTargetListChanged"
#		"change .bv_assayActivity": "handleAssayActivityChanged"
#		"click .bv_addAssayActivityBtn": "clearModalTexts"
#		"click .bv_addNewAssayActivity": "addNewAssayActivity"
		"change .bv_molecularTarget": "attributeChanged"
		"click .bv_addNewMolecularTarget": "addNewMolecularTarget"
		"change .bv_targetOrigin": "handleTargetOriginChanged"
		"click .bv_addNewTargetOrigin": "addNewTargetOrigin"
		"change .bv_assayType": "attributeChanged"
		"click .bv_addNewAssayType": "addNewAssayType"
		"change .bv_assayTechnology": "attributeChanged"
		"click .bv_addNewAssayTechnology": "addNewAssayTechnology"
		"change .bv_cellLine": "attributeChanged"
		"click .bv_addNewCellLine": "addNewCellLine"
		"change .bv_assayStage": "attributeChanged"
		"change .bv_maxY": "attributeChanged"
		"change .bv_minY": "attributeChanged"


	initialize: ->
		console.log "initialize"
		@errorOwnerName = 'PrimaryScreenProtocolParametersController'
		super()
#		@$('.bv_dnsTargetList').val(@model.get('dnsTargetList'))
#		@$('.bv_maxY').val(@model.get('maxY'))
#		@$('.bv_minY').val(@model.get('minY'))
#		@setUpAssayActivitySelect()
		@setUpMolecularTargetSelect()
		@setUpTargetOriginSelect()
		@setUpAssayTypeSelect()
		@setUpAssayTechnologySelect()
		@setUpCellLineSelect()
		@setUpAssayStageSelect()



	render: =>
		console.log "rendering"
		console.log @model
		console.log @model.getPrimaryScreenProtocolParameter('assay activity').get('codeValue')
		@$('.bv_primaryProtocolParameters').empty()
		@$('.bv_primaryProtocolParameters').html @template(@model.attributes)
		@$('.bv_dnsTargetList').val(@model.get('dnsTargetList'))
		@$('.bv_maxY').val(@model.get('maxY'))
		@$('.bv_minY').val(@model.get('minY'))
#		@setUpAssayActivitySelect()
		@setUpMolecularTargetSelect()
		@setUpTargetOriginSelect()
		@setUpAssayTypeSelect()
		@setUpAssayTechnologySelect()
		@setUpCellLineSelect()
		@setUpAssayStageSelect()
		@handleTargetListChanged()
		super()

		@

	setUpAssayActivitySelect: ->
		@assayActivityList = new PickListList()
		@assayActivityList.url = "/api/dataDict/assayActivityCodes"
		@assayActivityListController = new PickListSelectController
			el: @$('.bv_assayActivity')
			collection: @assayActivityList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Assay Activity"
			selectedCode: @model.getPrimaryScreenProtocolParameter('assay activity').get('codeValue')

	setUpMolecularTargetSelect: ->
		@molecularTargetList = new PickListList()
		@molecularTargetList.url = "/api/dataDict/molecularTargetCodes"
		@molecularTargetListController = new PickListSelectController
			el: @$('.bv_molecularTarget')
			collection: @molecularTargetList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Molecular Target"
			selectedCode: @model.get('molecularTarget')

	setUpTargetOriginSelect: ->
		@targetOriginList = new PickListList()
		@targetOriginList.url = "/api/dataDict/targetOriginCodes"
		@targetOriginListController = new PickListSelectController
			el: @$('.bv_targetOrigin')
			collection: @targetOriginList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Target Origin"
			selectedCode: @model.getPrimaryScreenProtocolParameter('target origin').get('codeValue')

	setUpAssayTypeSelect: ->
		@assayTypeList = new PickListList()
		@assayTypeList.url = "/api/dataDict/assayTypeCodes"
		@assayTypeListController= new PickListSelectController
			el: @$('.bv_assayType')
			collection: @assayTypeList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Assay Type"
			selectedCode: @model.get('assayType')

	setUpAssayTechnologySelect: ->
		@assayTechnologyList = new PickListList()
		@assayTechnologyList.url = "/api/dataDict/assayTechnologyCodes"
		@assayTechnologyListController = new PickListSelectController
			el: @$('.bv_assayTechnology')
			collection: @assayTechnologyList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Assay Technology"
			selectedCode: @model.get('assayTechnology')

	setUpCellLineSelect: ->
		@cellLineList = new PickListList()
		@cellLineList.url = "/api/dataDict/cellLineCodes"
		@cellLineListController = new PickListSelectController
			el: @$('.bv_cellLine')
			collection: @cellLineList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Cell Line"
			selectedCode: @model.get('cellLine')

	setUpAssayStageSelect: ->
		@assayStageList = new PickListList()
		@assayStageList.url = "/api/dataDict/assayStageCodes"
		@assayStageListController = new PickListSelectController
			el: @$('.bv_assayStage')
			collection: @assayStageList
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select assay stage"
			selectedCode: @model.get('assayStage')

	updateModel: =>
		@model.set
#			assayActivity: @$('.bv_assayActivity').val()
#			molecularTarget: @$('.bv_molecularTarget').val()
			targetOrigin: @$('.bv_targetOrigin').val()
			assayType: @$('.bv_assayType').val()
			assayTechnology: @$('.bv_assayTechnology').val()
			cellLine: @$('.bv_cellLine').val()
			assayStage: @$('.bv_assayStage').val()
			maxY: parseFloat(@getTrimmedInput('.bv_maxY'))
			minY: parseFloat(@getTrimmedInput('.bv_minY'))


	handleTargetListChanged: =>
		dnsTargetList = @$('.bv_dnsTargetList').is(":checked")
		@model.set dnsTargetList: dnsTargetList
		if dnsTargetList
			@$('.bv_addMolecularTarget').hide()
			# TODO: repopulate Molecular Target Select list with DNS Target List. Get route from Guy
		else
			@$('.bv_addMolecularTarget').show()
		@attributeChanged()

#	handleAssayActivityChanged: =>
#		@.handlePrimaryScreenParameterChanged('assayActivity')

	handleTargetOriginChanged: =>
		@.handlePrimaryScreenParameterChanged('targetOrigin')

	handlePrimaryScreenParameterChanged: (parameterName) ->
		splitName = parameterName.replace /([A-Z])/g,' $1'
		splitName = splitName.toLowerCase()
		@model.getPrimaryScreenProtocolParameter(splitName).set
			codeValue: @$('.bv_'+parameterName).val()

	clearModalTexts: ->
		console.log "clearing modal fields"
		@$('.bv_optionAddedMessage').hide()
		@$('.bv_errorMessage').hide()
		@$('.bv_newAssayActivityLabel').val("")
		@$('.bv_newAssayActivityDescription').val("")
		@$('.bv_newAssayActivityComments').val("")

	addNewAssayActivity: ->
		@.addNewParameter('assayActivity')

	addNewMolecularTarget: ->
		console.log "add new activity clicked"
		parameter = 'molecularTarget'
		pascalCaseParameterName = 'MolecularTarget'
		@.addNewParameter(parameter,pascalCaseParameterName)

	addNewTargetOrigin: ->
		console.log "add new target origin clicked"
		parameter = 'targetOrigin'
		pascalCaseParameterName = 'TargetOrigin'
		@.addNewParameter(parameter,pascalCaseParameterName)


	addNewParameter: (parameter) ->
		console.log "add new parameter clicked"
		pascalCaseParameterName = parameter.charAt(0).toUpperCase() + parameter.slice(1)
		console.log pascalCaseParameterName
		#		@$('.bv_new'+pascalCaseParameterName).val("")
		#		@$('.bv_new'+pascalCaseParameterName+'Description').val("")
		#		@$('.bv_new'+pascalCaseParameterName+'Comments').val("")

		# new short name is generated by making everything lower case in label text
		newOptionName = (@$('.bv_new'+pascalCaseParameterName).val()).toLowerCase()
		console.log newOptionName
		if @.validNewOption(newOptionName,parameter)
			console.log "will add new option"
			#add new option to code table. for now just append to html
			# TODO: add to DataDictionary and refresh the select list
			#			protocolCodeTableTestJSON = require ''
			@$('.bv_'+parameter).append('<option value='+ newOptionName+'>'+newOptionName+'</option>')
			@$('.bv_optionAddedMessage').show()
			@$('.bv_errorMessage').hide()
			#			@$('#add'+pascalCaseParameterName+'Modal').modal('hide')

		else
			console.log "option already exists"
			@$('.bv_optionAddedMessage').hide()
			@$('.bv_errorMessage').show()
	# clear previous values in form so that if add is clicked again, it will be empty


	validNewOption: (newOptionName,parameter) ->
		console.log "validating new option"
		#checks to see if assay activity option already exists
		console.log newOptionName
		console.log '.bv_'+parameter+' option[value="'+newOptionName+'"]'.length > 0
		if @$('.bv_'+parameter+' option[value="'+newOptionName+'"]').length > 0
			return false
		else
			return true




class window.PrimaryScreenProtocolController extends Backbone.View
	template: _.template($("#PrimaryScreenProtocolView").html())
	moduleLaunchName: "primary_screen_protocol"

	initialize: ->
		@completeInitialization()
		@setupPrimaryScreenProtocolParametersController()
		@setupAssayActivityController()

	completeInitialization: ->
		unless @model?
			@model = new PrimaryScreenProtocol()
		$(@el).html @template()
#		@model.on 'sync', @handleProtocolSaved
		@protocolBaseController = new ProtocolBaseController
			model: new Protocol
			el: @$('.bv_protocolBase')
		@protocolBaseController.on 'amDirty', =>
			@trigger 'amDirty'
		@protocolBaseController.on 'amClean', =>
			@trigger 'amClean'
		@protocolBaseController.render()

	setupPrimaryScreenProtocolParametersController: ->
		@primaryScreenProtocolParametersController= new PrimaryScreenProtocolParametersController
			model: @model
			el: @$('.bv_primaryProtocolParameters')
		@primaryScreenProtocolParametersController.render()

	setupAssayActivityController: ->
		console.log "beg of setting up assay activity controller"
		@assayActivityController = new AssayActivityController
			model: @model
			el: @$('.bv_assayActivityWrapper')
		@assayActivityController.render()
		console.log "set up aa controller"
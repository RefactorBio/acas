class window.PickList extends Backbone.Model

class window.PickListList extends Backbone.Collection
	model: PickList

	setType: (type) ->
		@type = type

	getModelWithCode: (code) ->
		@detect (enu) ->
			enu.get("code") is code

	getCurrent: ->
		@filter (pl) ->
			!(pl.get 'ignored')

class window.PickListOptionController extends Backbone.View
	tagName: "option"
	initialize: ->

	render: =>
		$(@el).attr("value", @model.get("code")).text @model.get("name")
		@

class window.PickListSelectController extends Backbone.View
	initialize: ->
		@rendered = false
		@collection.bind "add", @addOne
		@collection.bind "reset", @handleListReset

		unless @options.selectedCode is ""
			@selectedCode = @options.selectedCode
		else
			@selectedCode = null

		if @options.insertFirstOption?
			@insertFirstOption = @options.insertFirstOption
		else
			@insertFirstOption = null

		if @options.autoFetch?
			@autoFetch = @options.autoFetch
		else
			@autoFetch = true

		if @autoFetch
			@collection.fetch
				success: @handleListReset
		else
			@handleListReset()


	handleListReset: =>
		if @insertFirstOption
			@collection.add @insertFirstOption,
				at: 0
				silent: true

		@render()

	render: =>
		$(@el).empty()
		self = this
		@collection.each (enm) =>
			@addOne enm

		$(@el).val @selectedCode  if @selectedCode

		# hack to fix IE bug where select doesn't work when dynamically inserted
		$(@el).hide()
		$(@el).show()
		@rendered = true

	addOne: (enm) =>
		if !enm.get 'ignored'
			$(@el).append new PickListOptionController(model: enm).render().el

	setSelectedCode: (code) ->
		@selectedCode = code
		$(@el).val @selectedCode  if @rendered

	getSelectedCode: ->
		$(@el).val()

	getSelectedModel: ->
		@collection.getModelWithCode @getSelectedCode()


class window.EditablePickListSelectController extends Backbone.View
	template: _.template($("#EditablePickListView").html())

	#when creating new controller, need to provide el, collection, selectedCode, and parameter
	#will also need to call render to show the controller

	events:
		"click .bv_addOptionBtn": "clearModal" #.bv_addOptionButton brings up pop modal
		"click .bv_addNewParameterOption": "addNewParameterOption" #.bv_addNewParameterOption adds the option to the picklist

	initialize: ->
		@.addedOptions = []

	render: =>
		$(@el).empty()
		$(@el).html @template()
		@setupEditablePickList()
		@setupContextMenu()
		@setupEditingPrivileges()

	setupEditablePickList: ->
		@pickListController = new PickListSelectController
			el: @$('.bv_parameterSelectList')
			collection: @collection
			insertFirstOption: new PickList
				code: "unassigned"
				name: "Select Rule"
			selectedCode: @options.selectedCode

	setupEditingPrivileges: ->
		console.log "setup editing privileges"
		console.log window.AppLaunchParams.loginUser
		if !UtilityFunctions::testUserHasRole window.AppLaunchParams.loginUser, ["admin"]
			console.log "disable add button and insert tooltip"
			@$('.bv_addOptionBtn').removeAttr('data-toggle')
			@$('.bv_addOptionBtn').removeAttr('data-target')
			@$('.bv_addOptionBtn').removeAttr('data-backdrop')
			@$('.bv_addOptionBtn').css({'color':"#cccccc"})
			@$('.bv_tooltipwrapper').tooltip();
			@$("body").tooltip selector: '.bv_tooltipwrapper'
		else
			console.log "user can edit"


	clearModal: ->
		parameterNameWithSpaces = (@options.parameter).replace /([A-Z])/g,' $1'
		pascalCaseParameterName = (parameterNameWithSpaces).charAt(0).toUpperCase() + (parameterNameWithSpaces).slice(1)

		@$('.bv_optionAddedMessage').hide()
		@$('.bv_errorMessage').hide()
		@$('.bv_parameter').html(pascalCaseParameterName)
		@$('.bv_newOptionLabel').val("")
		@$('.bv_newOptionDescription').val("")
		@$('.bv_newOptionComments').val("")

	addNewParameterOption: ->
		# new short name is generated by making everything lower case in label text
		newOptionName = (@$('.bv_newOptionLabel').val()).toLowerCase()
		if @validNewOption(newOptionName)
			console.log "valid new option. will add"
			#just append new option to html
			@$('.bv_parameterSelectList').append('<option value='+ newOptionName+'>'+newOptionName+'</option>')
			@$('.bv_optionAddedMessage').show()
			@$('.bv_errorMessage').hide()
			@.addedOptions.push newOptionName

		else
			console.log "option already exists"
			@$('.bv_optionAddedMessage').hide()
			@$('.bv_errorMessage').show()

	validNewOption: (newOptionName) ->
		#checks to see if assay activity option already exists
		if @$('.bv_parameterSelectList option[value="'+newOptionName+'"]').length > 0
			return false
		else
			return true

	saveNewOption: -> # should be called in modules with editablePickLists
		#check to see if selected option in picklist was newly added
		code = @pickListController.getSelectedCode()
		if code in @.addedOptions
			console.log "need to save new option to database"
			#TODO: save to database
		else
			console.log "don't need to save to database"


	setupContextMenu: ->
		$.fn.contextMenu = (settings) ->

			# get left location of the context menu
			getLeftLocation = (e) ->
				relativeMouseWidth = e.pageX - $(window).scrollLeft()
				absoluteMouseWidth = e.pageX
				pageWidth = $(window).width()
				menuWidth = $(settings.menuSelector).width()

				if relativeMouseWidth + menuWidth > pageWidth and menuWidth < relativeMouseWidth
					# opening menu would pass the side of the current view of the page
					return absoluteMouseWidth - menuWidth
				else
					return absoluteMouseWidth

			# get top location of the context menu
			getTopLocation = (e) ->
				relativeMouseHeight = e.pageY - $(window).scrollTop()
				absoluteMouseHeight = e.pageY
				pageHeight = $(window).height()
				menuHeight = $(settings.menuSelector).height()

				if relativeMouseHeight + menuHeight > pageHeight and menuHeight < relativeMouseHeight
					# opening menu would pass the bottom of the current view of the page
					return absoluteMouseHeight - menuHeight
				else
					return absoluteMouseHeight

			return @each(->
				$(this).on "contextmenu", (e) ->
					$(settings.menuSelector).data("invokedOn", $(e.target)).show().css(
						position: "absolute"
						left: getLeftLocation(e)
						top: getTopLocation(e)
					).off("click").on "click", (e) ->
						$(this).hide()
						$invokedOn = $(this).data("invokedOn")
						$selectedMenu = $(e.target)
						settings.menuSelected.call this, $invokedOn, $selectedMenu

					return false #hides the browser's generic context menu

				$(document).click ->
					$(settings.menuSelector).hide()

			)
		@$('.bv_addOptionBtn').contextMenu
			menuSelector: "#contextMenu"
			menuSelected: (invokedOn, selectedMenu) ->
				msg = "You selected the menu item '" + selectedMenu.text() + "' on the value '" + invokedOn.text() + "'"
				alert msg
			#TODO: replace with edit panel

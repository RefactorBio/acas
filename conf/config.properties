########################################################################
###          ACAS Configuration Properties    		                 ###
########################################################################


# How to read this file:
# SETTING-TYPE:
#	PLUMBING: Represents settings about Host names, ports, database names...etc
#  	BEHAVIOR: Represents settings that change the behavior of ACAS (Authentication, Allow protocol creation in SEL...etc.)
#  ON-THE-FLY:
#  	Settings marked as true in "ON-THE-FLY" do not require a server reboot
# OPTIONAL:
#	Settings marked as true in "OPTIONAL" are not required
# DEFAULT:
#	Optional Settings will have a default

# Host that the client is running on.  It is recommended that you use the fully qualified domain name
#
# SETTING-TYPE:	PLUMBING
# ON-THE-FLY:	FALSE
# OPTIONAL:		FALSE
# DEFAULT:		NA
#
# Example: client.host=host4.labsynch.com
#
client.host=host4.labsynch.com

# Port that the client is running on.
#
# SETTING-TYPE:	PLUMBING
# ON-THE-FLY:	FALSE
# OPTIONAL:		FALSE
# DEFAULT:		NA
#
# Example: client.port=3000
#
client.port=3000

# If there are multiple instances running on a single server, it is recommended that each instances runs on a
# Different deploy mode
#
# SETTING-TYPE:	PLUMBING
# ON-THE-FLY:	FALSE
# OPTIONAL:		TRUE
# DEFAULT:		NA
#
# Example: client.deployMode=Dev
#
client.deployMode=Dev


server.database.name=prod
server.database.username=acas
server.database.password=acas
server.log.level=DEBUG
client.service.persistence.path=acas
client.port=3000
client.service.rapache.port=1080
client.service.file.port=1090
server.log.path=/opt/acas_homes/acas/log

client.authentication.user.type=Demo
client.include.project=FALSE
client.path=
client.use.ssl=false
client.service.persistence.host=${client.host}
client.service.persistence.port=8080
client.service.persistence.fullpath=http://${client.service.persistence.host}:${client.service.persistence.port}/${client.service.persistence.path}/
client.service.result.viewer.protocolPrefix=http://${client.host}:9080/seurat/runseurat?cmd=newjob&AssayName=
client.service.result.viewer.experimentPrefix=&AssayProtocol=
client.service.result.viewer.experimentNameColumn=EXPERIMENT_NAME
client.service.rapache.host=${client.service.persistence.host}
client.service.rapache.path=r-services-api
client.service.rapache.fullpath=http://${client.service.rapache.host}:${client.service.rapache.port}/${client.service.rapache.path}/
server.allow.protocol.creation.formats=Generic,Dose Response,Custom Example
server.database.driver=org.postgresql.Driver
server.database.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
server.database.host=localhost
server.database.port=5432
server.database.r.driver=PostgreSQL()
server.database.r.package=RPostgreSQL
server.database.url=jdbc:postgresql:${server.database.host}:${server.database.port}:${server.database.name}
server.delete.files.on.reload=false
server.projects.type=HardCoded
client.require.login=true
server.r.installation.path=
server.r=R
server.rscript=RScript
server.service.external.file.type=blueimp
server.service.external.file.service.url=
client.service.external.preferred.batchid.type=LabSynchCmpdReg
server.service.external.preferred.batchid.url=http://${client.host}:8080/cmpdreg/metalots/corpName/
server.service.external.project.url=
server.service.external.report.registration.url=
server.service.external.user.authentication.url=
server.service.external.user.information.url=
server.service.external.logging.url=
